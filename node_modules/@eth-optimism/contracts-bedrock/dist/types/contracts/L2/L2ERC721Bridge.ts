/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface L2ERC721BridgeInterface extends utils.Interface {
  functions: {
    "bridgeERC721(address,address,uint256,uint32,bytes)": FunctionFragment;
    "bridgeERC721To(address,address,address,uint256,uint32,bytes)": FunctionFragment;
    "finalizeBridgeERC721(address,address,address,address,uint256,bytes)": FunctionFragment;
    "messenger()": FunctionFragment;
    "otherBridge()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridgeERC721"
      | "bridgeERC721To"
      | "finalizeBridgeERC721"
      | "messenger"
      | "otherBridge"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgeERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeERC721To",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeBridgeERC721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "messenger", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otherBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bridgeERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeERC721To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeBridgeERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messenger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "otherBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ERC721BridgeFinalized(address,address,address,address,uint256,bytes)": EventFragment;
    "ERC721BridgeInitiated(address,address,address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC721BridgeFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721BridgeInitiated"): EventFragment;
}

export interface ERC721BridgeFinalizedEventObject {
  localToken: string;
  remoteToken: string;
  from: string;
  to: string;
  tokenId: BigNumber;
  extraData: string;
}
export type ERC721BridgeFinalizedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC721BridgeFinalizedEventObject
>;

export type ERC721BridgeFinalizedEventFilter =
  TypedEventFilter<ERC721BridgeFinalizedEvent>;

export interface ERC721BridgeInitiatedEventObject {
  localToken: string;
  remoteToken: string;
  from: string;
  to: string;
  tokenId: BigNumber;
  extraData: string;
}
export type ERC721BridgeInitiatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  ERC721BridgeInitiatedEventObject
>;

export type ERC721BridgeInitiatedEventFilter =
  TypedEventFilter<ERC721BridgeInitiatedEvent>;

export interface L2ERC721Bridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2ERC721BridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeERC721(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeERC721To(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeBridgeERC721(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    messenger(overrides?: CallOverrides): Promise<[string]>;

    otherBridge(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  bridgeERC721(
    _localToken: PromiseOrValue<string>,
    _remoteToken: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _minGasLimit: PromiseOrValue<BigNumberish>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeERC721To(
    _localToken: PromiseOrValue<string>,
    _remoteToken: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _minGasLimit: PromiseOrValue<BigNumberish>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeBridgeERC721(
    _localToken: PromiseOrValue<string>,
    _remoteToken: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _extraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  messenger(overrides?: CallOverrides): Promise<string>;

  otherBridge(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bridgeERC721(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeERC721To(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeBridgeERC721(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    messenger(overrides?: CallOverrides): Promise<string>;

    otherBridge(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ERC721BridgeFinalized(address,address,address,address,uint256,bytes)"(
      localToken?: PromiseOrValue<string> | null,
      remoteToken?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: null,
      tokenId?: null,
      extraData?: null
    ): ERC721BridgeFinalizedEventFilter;
    ERC721BridgeFinalized(
      localToken?: PromiseOrValue<string> | null,
      remoteToken?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: null,
      tokenId?: null,
      extraData?: null
    ): ERC721BridgeFinalizedEventFilter;

    "ERC721BridgeInitiated(address,address,address,address,uint256,bytes)"(
      localToken?: PromiseOrValue<string> | null,
      remoteToken?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: null,
      tokenId?: null,
      extraData?: null
    ): ERC721BridgeInitiatedEventFilter;
    ERC721BridgeInitiated(
      localToken?: PromiseOrValue<string> | null,
      remoteToken?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      to?: null,
      tokenId?: null,
      extraData?: null
    ): ERC721BridgeInitiatedEventFilter;
  };

  estimateGas: {
    bridgeERC721(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeERC721To(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeBridgeERC721(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    messenger(overrides?: CallOverrides): Promise<BigNumber>;

    otherBridge(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeERC721(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeERC721To(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _minGasLimit: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeBridgeERC721(
      _localToken: PromiseOrValue<string>,
      _remoteToken: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    messenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otherBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
