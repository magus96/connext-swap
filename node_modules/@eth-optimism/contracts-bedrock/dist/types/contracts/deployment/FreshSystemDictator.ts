/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace FreshSystemDictator {
  export type GlobalConfigStruct = {
    proxyAdmin: PromiseOrValue<string>;
    controller: PromiseOrValue<string>;
    finalOwner: PromiseOrValue<string>;
  };

  export type GlobalConfigStructOutput = [string, string, string] & {
    proxyAdmin: string;
    controller: string;
    finalOwner: string;
  };

  export type ProxyAddressConfigStruct = {
    l2OutputOracleProxy: PromiseOrValue<string>;
    optimismPortalProxy: PromiseOrValue<string>;
    l1CrossDomainMessengerProxy: PromiseOrValue<string>;
    l1StandardBridgeProxy: PromiseOrValue<string>;
    optimismMintableERC20FactoryProxy: PromiseOrValue<string>;
    l1ERC721BridgeProxy: PromiseOrValue<string>;
  };

  export type ProxyAddressConfigStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    l2OutputOracleProxy: string;
    optimismPortalProxy: string;
    l1CrossDomainMessengerProxy: string;
    l1StandardBridgeProxy: string;
    optimismMintableERC20FactoryProxy: string;
    l1ERC721BridgeProxy: string;
  };

  export type ImplementationAddressConfigStruct = {
    l2OutputOracleImpl: PromiseOrValue<string>;
    optimismPortalImpl: PromiseOrValue<string>;
    l1CrossDomainMessengerImpl: PromiseOrValue<string>;
    l1StandardBridgeImpl: PromiseOrValue<string>;
    optimismMintableERC20FactoryImpl: PromiseOrValue<string>;
    l1ERC721BridgeImpl: PromiseOrValue<string>;
  };

  export type ImplementationAddressConfigStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string
  ] & {
    l2OutputOracleImpl: string;
    optimismPortalImpl: string;
    l1CrossDomainMessengerImpl: string;
    l1StandardBridgeImpl: string;
    optimismMintableERC20FactoryImpl: string;
    l1ERC721BridgeImpl: string;
  };

  export type L2OutputOracleConfigStruct = {
    l2OutputOracleGenesisL2Output: PromiseOrValue<BytesLike>;
    l2OutputOracleProposer: PromiseOrValue<string>;
    l2OutputOracleOwner: PromiseOrValue<string>;
  };

  export type L2OutputOracleConfigStructOutput = [string, string, string] & {
    l2OutputOracleGenesisL2Output: string;
    l2OutputOracleProposer: string;
    l2OutputOracleOwner: string;
  };

  export type ConfigStruct = {
    globalConfig: FreshSystemDictator.GlobalConfigStruct;
    proxyAddressConfig: FreshSystemDictator.ProxyAddressConfigStruct;
    implementationAddressConfig: FreshSystemDictator.ImplementationAddressConfigStruct;
    l2OutputOracleConfig: FreshSystemDictator.L2OutputOracleConfigStruct;
  };

  export type ConfigStructOutput = [
    FreshSystemDictator.GlobalConfigStructOutput,
    FreshSystemDictator.ProxyAddressConfigStructOutput,
    FreshSystemDictator.ImplementationAddressConfigStructOutput,
    FreshSystemDictator.L2OutputOracleConfigStructOutput
  ] & {
    globalConfig: FreshSystemDictator.GlobalConfigStructOutput;
    proxyAddressConfig: FreshSystemDictator.ProxyAddressConfigStructOutput;
    implementationAddressConfig: FreshSystemDictator.ImplementationAddressConfigStructOutput;
    l2OutputOracleConfig: FreshSystemDictator.L2OutputOracleConfigStructOutput;
  };
}

export interface FreshSystemDictatorInterface extends utils.Interface {
  functions: {
    "config()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "step1()": FunctionFragment;
    "step2()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "config"
      | "owner"
      | "renounceOwnership"
      | "step1"
      | "step2"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "step1", values?: undefined): string;
  encodeFunctionData(functionFragment: "step2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "step1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "step2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface FreshSystemDictator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FreshSystemDictatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    config(
      overrides?: CallOverrides
    ): Promise<
      [
        FreshSystemDictator.GlobalConfigStructOutput,
        FreshSystemDictator.ProxyAddressConfigStructOutput,
        FreshSystemDictator.ImplementationAddressConfigStructOutput,
        FreshSystemDictator.L2OutputOracleConfigStructOutput
      ] & {
        globalConfig: FreshSystemDictator.GlobalConfigStructOutput;
        proxyAddressConfig: FreshSystemDictator.ProxyAddressConfigStructOutput;
        implementationAddressConfig: FreshSystemDictator.ImplementationAddressConfigStructOutput;
        l2OutputOracleConfig: FreshSystemDictator.L2OutputOracleConfigStructOutput;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    step1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    step2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  config(
    overrides?: CallOverrides
  ): Promise<
    [
      FreshSystemDictator.GlobalConfigStructOutput,
      FreshSystemDictator.ProxyAddressConfigStructOutput,
      FreshSystemDictator.ImplementationAddressConfigStructOutput,
      FreshSystemDictator.L2OutputOracleConfigStructOutput
    ] & {
      globalConfig: FreshSystemDictator.GlobalConfigStructOutput;
      proxyAddressConfig: FreshSystemDictator.ProxyAddressConfigStructOutput;
      implementationAddressConfig: FreshSystemDictator.ImplementationAddressConfigStructOutput;
      l2OutputOracleConfig: FreshSystemDictator.L2OutputOracleConfigStructOutput;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  step1(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  step2(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    config(
      overrides?: CallOverrides
    ): Promise<
      [
        FreshSystemDictator.GlobalConfigStructOutput,
        FreshSystemDictator.ProxyAddressConfigStructOutput,
        FreshSystemDictator.ImplementationAddressConfigStructOutput,
        FreshSystemDictator.L2OutputOracleConfigStructOutput
      ] & {
        globalConfig: FreshSystemDictator.GlobalConfigStructOutput;
        proxyAddressConfig: FreshSystemDictator.ProxyAddressConfigStructOutput;
        implementationAddressConfig: FreshSystemDictator.ImplementationAddressConfigStructOutput;
        l2OutputOracleConfig: FreshSystemDictator.L2OutputOracleConfigStructOutput;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    step1(overrides?: CallOverrides): Promise<void>;

    step2(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    config(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    step1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    step2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    step1(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    step2(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
