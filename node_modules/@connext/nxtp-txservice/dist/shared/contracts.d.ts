import { IERC20 as TIERC20Minimal, Connext as TConnext, ConnextPriceOracle as TConnextPriceOracle, StableSwap as TStableSwap, SpokeConnector as TSpokeConnector, RelayerProxy as TRelayerProxy, RelayerProxyHub as TRelayerProxyHub, RootManager as TRootManager, MultiSend as TMultisend, Unwrapper as TUnwrapper } from "@connext/smart-contracts";
export type ContractPostfix = "Staging" | "";
/**
 * Helper to allow easy mocking
 */
export declare const _getContractDeployments: () => Record<string, Record<string, any>>;
/**
 * Returns the address of the `Connext` deployed to the provided chain, or undefined if it has not been deployed
 *
 * @param chainId - The chain you want the address on
 * @param postfix - The postfix to use for the contract
 * @returns The deployed address or `undefined` if it has not been deployed yet
 */
export declare const getDeployedConnextContract: (chainId: number, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export declare const getDeployedRootManagerContract: (chainId: number, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export declare const _getDeployedRelayerProxyContract: (chainId: number, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export declare const _getDeployedRelayerProxyHubContract: (chainId: number, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export declare const getDeployedRelayerProxyContract: (chainId: number, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export declare const getDeployedSpokeConnecterContract: (chainId: number, prefix: string, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export declare const getDeployedHubConnecterContract: (chainId: number, prefix: string, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export declare const getDeployedMultisendContract: (chainId: number) => {
    address: string;
    abi: any;
} | undefined;
export declare const getDeployedUnwrapperContract: (chainId: number) => {
    address: string;
    abi: any;
} | undefined;
/**
 * A number[] list of all chain IDs on which a Connext Price Oracle Contracts
 * have been deployed.
 */
export declare const CHAINS_WITH_PRICE_ORACLES: number[];
/**
 * Returns the address of the Connext Price Oracle contract deployed on the
 * given chain ID; returns undefined if no such contract has been deployed.
 *
 * @param chainId - The chain you want the address on.
 * @param postfix - The postfix to use for the contract
 * @returns The deployed address or undefined if the contract has not yet been
 * deployed.
 */
export declare const getDeployedPriceOracleContract: (chainId: number, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export declare const getDeployedStableSwapContract: (chainId: number, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export type ConnextContractDeploymentGetter = (chainId: number, postfix?: ContractPostfix, proxy?: boolean) => {
    address: string;
    abi: any;
} | undefined;
export type SpokeConnectorDeploymentGetter = (chainId: number, prefix: string, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export type AmbDeploymentGetter = (chainId: number, prefix: string, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export type HubConnectorDeploymentGetter = (chainId: number, prefix: string, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export type RootManagerPropagateWrapperGetter = (chainId: number, postfix?: ContractPostfix) => {
    address: string;
    abi: any;
} | undefined;
export type MultisendContractDeploymentGetter = (chainId: number) => {
    address: string;
    abi: any;
} | undefined;
export type UnwrapperContractDeploymentGetter = (chainId: number) => {
    address: string;
    abi: any;
} | undefined;
export type ConnextContractDeployments = {
    connext: ConnextContractDeploymentGetter;
    relayerProxy: ConnextContractDeploymentGetter;
    priceOracle: ConnextContractDeploymentGetter;
    stableSwap: ConnextContractDeploymentGetter;
    spokeConnector: SpokeConnectorDeploymentGetter;
    hubConnector: HubConnectorDeploymentGetter;
    multisend: MultisendContractDeploymentGetter;
    unwrapper: UnwrapperContractDeploymentGetter;
};
export declare const contractDeployments: ConnextContractDeployments;
/**
 * Convenience methods for initializing Interface objects for the Connext
 * contracts' ABIs.
 *
 * @returns An ethers Interface object initialized for the corresponding ABI.
 */
export declare const getErc20Interface: () => import("@connext/smart-contracts/dist/src/typechain-types/@matterlabs/zksync-contracts/l1/contracts/common/interfaces/IERC20").IERC20Interface;
export declare const getConnextInterface: () => import("@connext/smart-contracts/dist/src/typechain-types/hardhat-diamond-abi/HardhatDiamondABI.sol/Connext").ConnextInterface;
export declare const getRelayerProxyInterface: () => import("@connext/smart-contracts/dist/src/typechain-types/contracts/core/connext/helpers/RelayerProxy.sol/RelayerProxy").RelayerProxyInterface;
export declare const getRelayerProxyHubInterface: () => import("@connext/smart-contracts/dist/src/typechain-types/contracts/core/connext/helpers/RelayerProxyHub").RelayerProxyHubInterface;
export declare const getPriceOracleInterface: () => import("@connext/smart-contracts/dist/src/typechain-types/contracts/core/connext/helpers/ConnextPriceOracle.sol/ConnextPriceOracle").ConnextPriceOracleInterface;
export declare const getStableSwapInterface: () => import("@connext/smart-contracts/dist/src/typechain-types/contracts/core/connext/helpers/StableSwap").StableSwapInterface;
export declare const getSpokeConnectorInterface: () => import("@connext/smart-contracts/dist/src/typechain-types/contracts/messaging/connectors/SpokeConnector").SpokeConnectorInterface;
export declare const getRootManagerInterface: () => import("@connext/smart-contracts/dist/src/typechain-types/contracts/messaging/RootManager").RootManagerInterface;
export declare const getMultisendInterface: () => import("@connext/smart-contracts/dist/src/typechain-types/contracts/shared/libraries/Multisend.sol/MultiSend").MultiSendInterface;
export declare const getUnwrapperInterface: () => import("@connext/smart-contracts/dist/src/typechain-types/contracts/core/xreceivers/Unwrapper.sol/Unwrapper").UnwrapperInterface;
export type ConnextContractInterfaces = {
    erc20: TIERC20Minimal["interface"];
    connext: TConnext["interface"];
    priceOracle: TConnextPriceOracle["interface"];
    stableSwap: TStableSwap["interface"];
    spokeConnector: TSpokeConnector["interface"];
    rootManager: TRootManager["interface"];
    relayerProxy: TRelayerProxy["interface"];
    relayerProxyHub: TRelayerProxyHub["interface"];
    multisend: TMultisend["interface"];
    unwrapper: TUnwrapper["interface"];
};
export declare const getContractInterfaces: () => ConnextContractInterfaces;
export type AmbContractABIs = {
    optimism: any[];
    gnosis: any[];
    arbitrum: any[];
    bnb: any[];
};
export declare const getAmbABIs: () => AmbContractABIs;
//# sourceMappingURL=contracts.d.ts.map