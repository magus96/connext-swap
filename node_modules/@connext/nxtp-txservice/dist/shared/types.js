"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderCache = exports.NxtpTxServiceEvents = void 0;
exports.NxtpTxServiceEvents = {
    TransactionSubmitted: "TransactionSubmitted",
    TransactionMined: "TransactionMined",
    TransactionConfirmed: "TransactionConfirmed",
    TransactionFailed: "TransactionFailed",
};
/**
 * @classdesc A data structure for managing time-sensitive (expiring) cached information from chain
 * that expires after a set number of blocks or amount of time.
 */
class ProviderCache {
    get blockNumber() {
        return this._blockNumber;
    }
    get data() {
        const data = {};
        for (const k of Object.keys(this._data)) {
            const key = k;
            data[key] = this.getItem(key)?.value;
        }
        return data;
    }
    /**
     * @param schema - A schema for the cache that determines whether each item expires after a set period of
     * time (ttl, ms) or a set number of blocks (btl, number).
     */
    constructor(logger, schema) {
        this.logger = logger;
        this.schema = schema;
        this._blockNumber = -1;
        this._data = {};
    }
    /**
     * Update the cache block number, and optionally the data.
     * @param blockNumber - Current block number.
     * @param data - Optional data to update the cache with.
     */
    update(blockNumber, data = {}) {
        if (blockNumber < this._blockNumber) {
            this.logger.debug("Block number went backwards. Did a reorg occur?", undefined, undefined, {
                newBlockNumber: blockNumber,
                previousBlockNumber: this._blockNumber,
            });
        }
        this._blockNumber = blockNumber;
        this.set(data);
    }
    /**
     * Set a value in the cache.
     * @param data - The data to set.
     */
    set(data) {
        Object.keys(data).forEach((k) => {
            const key = k;
            const value = data[key];
            this._data[key] = {
                value,
                timestamp: Date.now(),
                blockNumber: this.blockNumber,
            };
        });
    }
    /**
     * Helper for retrieving item from data depending on whether it's expired.
     * @param key - a key of the cache data schema.
     * @returns
     */
    getItem(key) {
        const { ttl, btl } = this.schema[key];
        const item = this._data[key];
        if (!item) {
            return undefined;
        }
        // In these blocks, we'll also erase the item from the cache data if it's expired.
        if (ttl !== undefined && item.timestamp + ttl < Date.now()) {
            this._data[key] = undefined;
            return undefined;
        }
        if (btl !== undefined && item.blockNumber + btl < this.blockNumber) {
            this._data[key] = undefined;
            return undefined;
        }
        return item;
    }
}
exports.ProviderCache = ProviderCache;
//# sourceMappingURL=types.js.map