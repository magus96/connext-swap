"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnchainTransaction = void 0;
const ethers_1 = require("ethers");
const smart_contracts_1 = require("@connext/smart-contracts");
/**
 * @classdesc A data structure for storing invariant params and managing state related to a single transaction.
 */
class OnchainTransaction {
    get receipt() {
        return this._receipt;
    }
    set receipt(value) {
        // If the receipt has not yet been set, we can assume this is the mined receipt.
        if (!this._receipt) {
            this.minedBlockNumber = value?.blockNumber ?? -1;
        }
        this._receipt = value;
    }
    get hash() {
        return this.didMine
            ? this.receipt.transactionHash
            : this.responses.length > 0
                ? this.responses[this.responses.length - 1].hash
                : undefined;
    }
    get hashes() {
        return this.responses.map((tx) => tx.hash);
    }
    /**
     * Specifies whether the transaction has been submitted.
     * @returns boolean indicating whether the transaction is submitted.
     */
    get didSubmit() {
        return this.responses.length > 0;
    }
    /**
     * Specifies whether the transaction has been mined.
     * @returns boolean indicating whether the transaction is mined.
     */
    get didMine() {
        return !!this.receipt && this.receipt.confirmations > 0;
    }
    /**
     * Specifies whether the transaction has been completed - meaning that it's been
     * mined and has received the target number of confirmations.
     * @returns boolean indicating whether the transaction is completed.
     */
    get didFinish() {
        return !!this.receipt && this.receipt.confirmations >= this.config.confirmationsRequired;
    }
    /**
     * Formats gas fee info according to tx type (safely ensures we do not send redundant fee info,
     * and that params are properly named).
     */
    get gasFee() {
        const fees = this.type === 2
            ? {
                maxFeePerGas: this.gas.maxFeePerGas,
                maxPriorityFeePerGas: this.gas.maxPriorityFeePerGas,
            }
            : {
                gasPrice: this.gas.price,
            };
        return fees;
    }
    /**
     * Retrieves all params needed to format a full transaction, including current gas price set, nonce, etc.
     */
    get params() {
        // convert domain to chainid here for evm chains
        const { domain, ...rest } = this.minTx;
        return {
            ...rest,
            chainId: (0, smart_contracts_1.domainToChainId)(domain),
            nonce: this.nonce,
            type: this.type,
            gasLimit: this.gas.limit,
            ...this.gasFee,
        };
    }
    /**
     * Formats gas fees into gwei units.
     */
    get loggableGasFee() {
        const gasFee = this.gasFee;
        return {
            gasPrice: gasFee.gasPrice ? `${ethers_1.utils.formatUnits(gasFee.gasPrice, "gwei")} gwei` : undefined,
            maxFeePerGas: gasFee.maxFeePerGas ? `${ethers_1.utils.formatUnits(gasFee.maxFeePerGas, "gwei")} gwei` : undefined,
            maxPriorityFeePerGas: gasFee.maxPriorityFeePerGas
                ? `${ethers_1.utils.formatUnits(gasFee.maxPriorityFeePerGas, "gwei")} gwei`
                : undefined,
        };
    }
    /**
     * Packages transaction data into a format best for logging.
     */
    get loggable() {
        return {
            // These values should always be defined.
            txsId: this.uuid,
            nonce: this.nonce,
            type: this.type,
            gasLimit: this.gas.limit.toString(),
            // Gas fee values will present themselves depending on which are defined.
            ...this.loggableGasFee,
            // Keeping these values as undefined if 0 in order to keep logs slim (undefined values won't be logged).
            attempt: this.attempt > 0 ? this.attempt : undefined,
            bumps: this.bumps > 0 ? this.bumps : undefined,
            hashes: this.hashes.length > 0 ? this.hashes : undefined,
            // Track block numbers for mine and confirm for observability.
            minedBlockNumber: this.minedBlockNumber === -1 ? undefined : this.minedBlockNumber,
            confirmedBlockNumber: this.receipt && this.receipt.blockNumber > this.minedBlockNumber ? this.receipt.blockNumber : undefined,
            confirmations: this.receipt?.confirmations,
            error: this.error ? this.error.message : undefined,
            state: this.error ? "E" : this.didFinish ? "C" : this.didMine ? "M" : this.didSubmit ? "S" : undefined,
        };
    }
    /**
     * A data structure used for management of the lifecycle of one on-chain transaction.
     *
     * @param context - Logging context.
     * @param minTx - The minimum transaction data required to send a transaction.
     * @param nonce - Assigned nonce number for this transaction.
     * @param gas - The Gas tracker instance, which will include price, limit, and maximum.
     * @param config - Transaction configuration.
     * @param uuid - A unique ID for this transaction.
     */
    constructor(context, minTx, nonce, gas, config, uuid) {
        this.context = context;
        this.minTx = minTx;
        this.nonce = nonce;
        this.gas = gas;
        this.config = config;
        this.uuid = uuid;
        // Responses, in the order of attempts made for this tx.
        this.responses = [];
        // Used to track when the transaction was mined, in the event that the mined receipt gets replaced by
        // the confirmation receipt.
        this.minedBlockNumber = -1;
        // Timestamp initially set on creation.
        this.timestamp = Date.now();
        // Which transaction attempt we are on.
        this.attempt = 0;
        // How many times we have bumped the gas price.
        this.bumps = 0;
        // The EIP-2718 type of this transaction envelope.
        // 0 = legacy, 1 = EIP-1559, 2 = EIP-1559 with priority.
        this.type = 0; // TODO: Support EIP-1559 transactions.
    }
}
exports.OnchainTransaction = OnchainTransaction;
//# sourceMappingURL=transaction.js.map