"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAmbABIs = exports.getContractInterfaces = exports.getUnwrapperInterface = exports.getMultisendInterface = exports.getRootManagerInterface = exports.getSpokeConnectorInterface = exports.getStableSwapInterface = exports.getPriceOracleInterface = exports.getRelayerProxyHubInterface = exports.getRelayerProxyInterface = exports.getConnextInterface = exports.getErc20Interface = exports.contractDeployments = exports.getDeployedStableSwapContract = exports.getDeployedPriceOracleContract = exports.CHAINS_WITH_PRICE_ORACLES = exports.getDeployedUnwrapperContract = exports.getDeployedMultisendContract = exports.getDeployedHubConnecterContract = exports.getDeployedSpokeConnecterContract = exports.getDeployedRelayerProxyContract = exports._getDeployedRelayerProxyHubContract = exports._getDeployedRelayerProxyContract = exports.getDeployedRootManagerContract = exports.getDeployedConnextContract = exports._getContractDeployments = void 0;
const ethers_1 = require("ethers");
const deployments_json_1 = __importDefault(require("@connext/smart-contracts/deployments.json"));
const RootManager_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/messaging/RootManager.sol/RootManager.json"));
const ConnextPriceOracle_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/core/connext/helpers/ConnextPriceOracle.sol/ConnextPriceOracle.json"));
const Connext_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/hardhat-diamond-abi/HardhatDiamondABI.sol/Connext.json"));
const StableSwap_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/core/connext/helpers/StableSwap.sol/StableSwap.json"));
const SpokeConnector_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/messaging/connectors/SpokeConnector.sol/SpokeConnector.json"));
const RelayerProxy_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/core/connext/helpers/RelayerProxy.sol/RelayerProxy.json"));
const RelayerProxyHub_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/core/connext/helpers/RelayerProxyHub.sol/RelayerProxyHub.json"));
const MultiSend_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/shared/libraries/Multisend.sol/MultiSend.json"));
const Unwrapper_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/core/xreceivers/Unwrapper.sol/Unwrapper.json"));
const GnosisAmb_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/messaging/interfaces/ambs/GnosisAmb.sol/GnosisAmb.json"));
const Multichain_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/messaging/interfaces/ambs/Multichain.sol/Multichain.json"));
const OptimismAmb_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/messaging/interfaces/ambs/optimism/OptimismAmb.sol/OptimismAmb.json"));
const ArbitrumL2Amb_json_1 = __importDefault(require("@connext/smart-contracts/artifacts/contracts/messaging/interfaces/ambs/arbitrum/ArbitrumL2Amb.sol/ArbitrumL2Amb.json"));
const nxtp_utils_1 = require("@connext/nxtp-utils");
/// MARK - CONTRACT DEPLOYMENTS
/**
 * Helper to allow easy mocking
 */
const _getContractDeployments = () => {
    return deployments_json_1.default;
};
exports._getContractDeployments = _getContractDeployments;
/**
 * Returns the address of the `Connext` deployed to the provided chain, or undefined if it has not been deployed
 *
 * @param chainId - The chain you want the address on
 * @param postfix - The postfix to use for the contract
 * @returns The deployed address or `undefined` if it has not been deployed yet
 */
const getDeployedConnextContract = (chainId, postfix = "") => {
    const record = (0, exports._getContractDeployments)()[chainId.toString()] ?? {};
    const contract = record[0]?.contracts ? record[0]?.contracts[`Connext${postfix}`] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports.getDeployedConnextContract = getDeployedConnextContract;
const getDeployedRootManagerContract = (chainId, postfix = "") => {
    const record = (0, exports._getContractDeployments)()[chainId.toString()] ?? {};
    const contract = record[0]?.contracts ? record[0]?.contracts[`RootManager${postfix}`] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports.getDeployedRootManagerContract = getDeployedRootManagerContract;
const _getDeployedRelayerProxyContract = (chainId, postfix = "") => {
    const record = (0, exports._getContractDeployments)()[chainId.toString()] ?? {};
    const contract = record[0]?.contracts ? record[0]?.contracts[`RelayerProxy${postfix}`] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports._getDeployedRelayerProxyContract = _getDeployedRelayerProxyContract;
const _getDeployedRelayerProxyHubContract = (chainId, postfix = "") => {
    const record = (0, exports._getContractDeployments)()[chainId.toString()] ?? {};
    const contract = record[0]?.contracts ? record[0]?.contracts[`RelayerProxyHub${postfix}`] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports._getDeployedRelayerProxyHubContract = _getDeployedRelayerProxyHubContract;
const getDeployedRelayerProxyContract = (chainId, postfix = "") => {
    if (chainId === 5 || chainId === 1) {
        return (0, exports._getDeployedRelayerProxyHubContract)(chainId, postfix);
    }
    return (0, exports._getDeployedRelayerProxyContract)(chainId, postfix);
};
exports.getDeployedRelayerProxyContract = getDeployedRelayerProxyContract;
const getDeployedSpokeConnecterContract = (chainId, prefix, postfix = "") => {
    const record = (0, exports._getContractDeployments)()[chainId.toString()] ?? {};
    const contract = record[0]?.contracts ? record[0]?.contracts[`${prefix}SpokeConnector${postfix}`] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports.getDeployedSpokeConnecterContract = getDeployedSpokeConnecterContract;
const getDeployedHubConnecterContract = (chainId, prefix, postfix = "") => {
    const record = (0, exports._getContractDeployments)()[chainId.toString()] ?? {};
    const contract = record[0]?.contracts ? record[0]?.contracts[`${prefix}HubConnector${postfix}`] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports.getDeployedHubConnecterContract = getDeployedHubConnecterContract;
const getDeployedMultisendContract = (chainId) => {
    const record = (0, exports._getContractDeployments)()[chainId.toString()] ?? {};
    const contract = record[0]?.contracts ? record[0]?.contracts["MultiSend"] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports.getDeployedMultisendContract = getDeployedMultisendContract;
const getDeployedUnwrapperContract = (chainId) => {
    const record = (0, exports._getContractDeployments)()[chainId.toString()] ?? {};
    const contract = record[0]?.contracts ? record[0]?.contracts["Unwrapper"] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports.getDeployedUnwrapperContract = getDeployedUnwrapperContract;
/**
 * A number[] list of all chain IDs on which a Connext Price Oracle Contracts
 * have been deployed.
 */
exports.CHAINS_WITH_PRICE_ORACLES = (() => {
    const chainIdsForGasFee = [];
    const _contractDeployments = (0, exports._getContractDeployments)();
    Object.keys(_contractDeployments).forEach((chainId) => {
        const record = _contractDeployments[chainId];
        const chainName = Object.keys(record)[0];
        if (chainName) {
            const priceOracleContract = record[chainName]?.contracts?.ConnextPriceOracle;
            if (priceOracleContract) {
                chainIdsForGasFee.push(parseInt(chainId));
            }
        }
    });
    return chainIdsForGasFee;
})();
/**
 * Returns the address of the Connext Price Oracle contract deployed on the
 * given chain ID; returns undefined if no such contract has been deployed.
 *
 * @param chainId - The chain you want the address on.
 * @param postfix - The postfix to use for the contract
 * @returns The deployed address or undefined if the contract has not yet been
 * deployed.
 */
const getDeployedPriceOracleContract = (chainId, postfix = "") => {
    const _contractDeployments = (0, exports._getContractDeployments)();
    const record = _contractDeployments[chainId.toString()] ?? {};
    const name = Object.keys(record)[0];
    if (!name) {
        return undefined;
    }
    const contract = record[name]?.contracts ? record[name]?.contracts[`ConnextPriceOracle${postfix}`] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports.getDeployedPriceOracleContract = getDeployedPriceOracleContract;
const getDeployedStableSwapContract = (chainId, postfix = "") => {
    const _contractDeployments = (0, exports._getContractDeployments)();
    const record = _contractDeployments[chainId.toString()] ?? {};
    const name = Object.keys(record)[0];
    if (!name) {
        return undefined;
    }
    const contract = record[name]?.contracts ? record[name]?.contracts[`StableSwap${postfix}`] : undefined;
    return contract ? { address: contract.address, abi: contract.abi } : undefined;
};
exports.getDeployedStableSwapContract = getDeployedStableSwapContract;
exports.contractDeployments = {
    connext: exports.getDeployedConnextContract,
    relayerProxy: exports.getDeployedRelayerProxyContract,
    priceOracle: exports.getDeployedPriceOracleContract,
    stableSwap: exports.getDeployedStableSwapContract,
    spokeConnector: exports.getDeployedSpokeConnecterContract,
    hubConnector: exports.getDeployedHubConnecterContract,
    multisend: exports.getDeployedMultisendContract,
    unwrapper: exports.getDeployedUnwrapperContract,
};
/// MARK - CONTRACT INTERFACES
/**
 * Convenience methods for initializing Interface objects for the Connext
 * contracts' ABIs.
 *
 * @returns An ethers Interface object initialized for the corresponding ABI.
 */
const getErc20Interface = () => new ethers_1.utils.Interface(nxtp_utils_1.ERC20Abi);
exports.getErc20Interface = getErc20Interface;
const getConnextInterface = () => new ethers_1.utils.Interface(Connext_json_1.default.abi);
exports.getConnextInterface = getConnextInterface;
const getRelayerProxyInterface = () => new ethers_1.utils.Interface(RelayerProxy_json_1.default.abi);
exports.getRelayerProxyInterface = getRelayerProxyInterface;
const getRelayerProxyHubInterface = () => new ethers_1.utils.Interface(RelayerProxyHub_json_1.default.abi);
exports.getRelayerProxyHubInterface = getRelayerProxyHubInterface;
const getPriceOracleInterface = () => new ethers_1.utils.Interface(ConnextPriceOracle_json_1.default.abi);
exports.getPriceOracleInterface = getPriceOracleInterface;
const getStableSwapInterface = () => new ethers_1.utils.Interface(StableSwap_json_1.default.abi);
exports.getStableSwapInterface = getStableSwapInterface;
const getSpokeConnectorInterface = () => new ethers_1.utils.Interface(SpokeConnector_json_1.default.abi);
exports.getSpokeConnectorInterface = getSpokeConnectorInterface;
const getRootManagerInterface = () => new ethers_1.utils.Interface(RootManager_json_1.default.abi);
exports.getRootManagerInterface = getRootManagerInterface;
const getMultisendInterface = () => new ethers_1.utils.Interface(MultiSend_json_1.default.abi);
exports.getMultisendInterface = getMultisendInterface;
const getUnwrapperInterface = () => new ethers_1.utils.Interface(Unwrapper_json_1.default.abi);
exports.getUnwrapperInterface = getUnwrapperInterface;
const getContractInterfaces = () => ({
    erc20: (0, exports.getErc20Interface)(),
    connext: (0, exports.getConnextInterface)(),
    priceOracle: (0, exports.getPriceOracleInterface)(),
    stableSwap: (0, exports.getStableSwapInterface)(),
    spokeConnector: (0, exports.getSpokeConnectorInterface)(),
    rootManager: (0, exports.getRootManagerInterface)(),
    relayerProxy: (0, exports.getRelayerProxyInterface)(),
    relayerProxyHub: (0, exports.getRelayerProxyHubInterface)(),
    multisend: (0, exports.getMultisendInterface)(),
    unwrapper: (0, exports.getUnwrapperInterface)(),
});
exports.getContractInterfaces = getContractInterfaces;
const getAmbABIs = () => ({
    optimism: OptimismAmb_json_1.default.abi,
    gnosis: GnosisAmb_json_1.default.abi,
    arbitrum: ArbitrumL2Amb_json_1.default.abi,
    bnb: Multichain_json_1.default.abi,
});
exports.getAmbABIs = getAmbABIs;
//# sourceMappingURL=contracts.js.map