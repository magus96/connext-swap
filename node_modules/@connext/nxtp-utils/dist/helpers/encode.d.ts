import { ExternalCall, ReconciledTransaction } from "..";
/**
 * Cleans any strings so they replace the newlines and properly format whitespace. Used to translate human readable encoding to contract-compatible encoding.
 *
 * @param str String to clean
 * @returns Cleaned version of the input
 */
export declare const tidy: (str: string) => string;
export declare const SignedRouterPathEncoding: string;
export declare const ExternalCallDataEncoding: string;
export declare const ReconciledTransactionDataEncoding: string;
/**
 * Encodes a sequencer payload object, as defined in the BridgeFacet contract.
 *
 * @param transferId - The ID of the transfer.
 * @param routers - The addresses of the routers in the path.
 * @returns Encoded sequencer permit payload.
 */
export declare const encodeSequencerPermitPayload: (transferId: string, routers: string[]) => string;
/**
 * Encodes a router path payload object, as defined in the BridgeFacet contract.
 *
 * @param transferId - The ID of the transfer.
 * @param pathLength - The number of routers in the path.
 * @returns Encoded router path payload.
 */
export declare const encodeRouterPathPayload: (transferId: string, pathLength: string) => string;
/**
 * Encodes a reconcile transaction payload object, as defined in the Connext contract
 *
 * @param externalHash - Hash of the `ExternalCall`
 * @param local - The address of the bridged asset
 * @param amount - The amount forwarded through the bridge
 * @param recipient - The address that gets the funds on the destination chain
 * @returns Encoded reconcile transaction payload
 */
export declare const encodeReconcileData: (reconcileData: ReconciledTransaction) => string;
/**
 * Hashes ReconciledData payload object
 *
 * @param reconciledData Object to encode and hash
 * @returns Hash of encode object
 */
export declare const getReconciledHash: (reconciledData: ReconciledTransaction) => string;
/**
 * Encodes an external call transaction payload object, as defined in the Connext contract
 *
 * @param recipient - The address that should receive the funds on the destination domain if no call is
 * specified, or the fallback if an external call fails
 * @param callTo - The address of the receiving chain to execute the `callData` on
 * @param callData - The data to execute on the receiving chain
 * @returns Encoded exteranl call payload
 */
export declare const encodeExternalCallData: (exteranalCallData: ExternalCall) => string;
/**
 * Hashes ExternalCall payload object
 *
 * @param externalCallData Object to encode and hash
 * @returns Hash of encoded object
 */
export declare const getExternalCallHash: (externalCallData: ExternalCall) => string;
export declare const getCanonicalHash: (canonicalDomain: string, _canonicalId: string) => string;
//# sourceMappingURL=encode.d.ts.map