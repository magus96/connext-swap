import { NxtpError } from "../types";
export declare class MerkleRootInvalid extends NxtpError {
    constructor(context?: any);
}
export declare class MerkleProofVerificationFailed extends NxtpError {
    constructor(context?: any);
}
export declare const getMerkleProof: (params: {
    leaf: string;
    branch: string[];
}) => Promise<string[]>;
export type DBHelper = {
    getCount: () => Promise<number>;
    getNode: (index: number) => Promise<string | undefined>;
    getNodes: (start: number, end: number) => Promise<string[]>;
    putRoot: (path: string, hash: string) => Promise<void>;
    getRoot: (path: string) => Promise<string | undefined>;
};
export declare class SparseMerkleTree {
    private db;
    private height;
    private _debugLog;
    get maxCount(): number;
    static hash: (a: string, b: string) => string;
    constructor(db: DBHelper, height?: number, _debugLog?: boolean);
    getRoot(): Promise<string>;
    verify(index: number, leaf: string, proof: string[], expected: string): {
        calculated: string;
        verified: boolean;
    };
    getProof(index: number): Promise<string[]>;
    private getSubtreeNodes;
    private getSubtreeRoot;
    private getStartingDepth;
    private indexToPath;
}
export declare const ZERO_HASHES: () => string[];
export declare const ZERO_HASH_AT_DEPTH: (depth: number) => string;
//# sourceMappingURL=merkle.d.ts.map