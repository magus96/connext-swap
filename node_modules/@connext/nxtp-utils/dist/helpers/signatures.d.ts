import { Signer, Wallet } from "ethers";
export declare const sign: (hash: string, signer: Wallet | Signer) => Promise<string>;
/**
 * Generates a signature on the transfer ID and routers array payload for the `execute` transaction.
 * Permit represents a (allowlisted) sequencer's indication that they were responsible for assigning
 * this path of routers to this particular transfer.
 *
 * @param transferId - The ID of the transfer.
 * @param routers - The addresses of the routers that are supplying fast liquidity for the transfer.
 * @param signer - The Wallet / Signer of the signing sequencer.
 * @returns Signature of the payload from the signer.
 */
export declare const signSequencerPermitPayload: (transferId: string, routers: string[], signer: Wallet | Signer) => Promise<string>;
/**
 * Generates a signature on the router path length payload in `execute` transaction. Represents
 * consent of the signing router to use a portion of their liquidity (minus a fee) to `execute` the
 * transfer.
 *
 * @param transferId - The ID of the transfer.
 * @param pathLength - The number of routers that are supplying fast liquidity for the transfer.
 * @param signer - The Wallet / Signer of the signing router.
 * @returns Signature of the payload from the signer.
 */
export declare const signRouterPathPayload: (transferId: string, pathLength: string, signer: Wallet | Signer) => Promise<string>;
/**
 * Generates a hash to sign of the router path length payload in `execute` transaction
 *
 * @param transferId - The nonce of the origin domain at the time the transaction was prepared. Used to generate
 * the transaction id for the crosschain transaction
 * @param pathLength - The number of routers in transfer
 * @returns Hash that should be signed
 */
export declare const getRouterPathHashToSign: (transferId: string, pathLength: string) => string;
/**
 * Returns the recovered signer from the router path length payload
 *
 * @param transferId - The transferId generated on the origin domain
 * @param pathLength - The number of routers in transfer
 * @returns Recovered address of signer
 */
export declare const recoverRouterPathPayload: (transferId: string, pathLength: string, signature: string) => string;
//# sourceMappingURL=signatures.d.ts.map