"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMainnetEquivalent = exports.getDecimalsForAsset = exports.getOnchainBalance = void 0;
const ethers_1 = require("ethers");
const __1 = require("..");
const domain_1 = require("./domain");
const getOnchainBalance = async (assetId, address, provider) => {
    return assetId === ethers_1.constants.AddressZero
        ? (0, __1.getETHBalance)(provider, address)
        : (0, __1.getTokenBalance)(assetId, address, provider);
};
exports.getOnchainBalance = getOnchainBalance;
const getDecimalsForAsset = async (assetId, chainId, provider, chainData) => {
    if (chainData) {
        const domainId = await (0, domain_1.getDomainFromChainId)(chainId, chainData);
        const chainInfo = chainData.get(domainId);
        const decimals = chainInfo?.assetId[assetId]?.decimals;
        if (decimals) {
            return decimals;
        }
    }
    if (assetId === ethers_1.constants.AddressZero) {
        return 18;
    }
    if (provider)
        return await (0, __1.getTokenDecimals)(assetId, provider);
    else
        return 18;
};
exports.getDecimalsForAsset = getDecimalsForAsset;
const getMainnetEquivalent = async (chainId, assetId, chainData) => {
    const chaindata = chainData ?? (await (0, __1.getChainData)());
    const domainId = await (0, domain_1.getDomainFromChainId)(chainId, chainData);
    const chainInfo = chaindata?.get(domainId);
    const equiv = chainInfo
        ? chainInfo.assetId[ethers_1.utils.getAddress(assetId)] ??
            chainInfo.assetId[assetId.toLowerCase()] ??
            chainInfo.assetId[assetId.toUpperCase()]
        : undefined;
    if (!equiv || !equiv.mainnetEquivalent) {
        return undefined;
    }
    return ethers_1.utils.getAddress(equiv.mainnetEquivalent);
};
exports.getMainnetEquivalent = getMainnetEquivalent;
//# sourceMappingURL=asset.js.map