import { Static } from "@sinclair/typebox";
export declare const StableSwapPoolSchema: import("@sinclair/typebox").TObject<{
    key: import("@sinclair/typebox").TString<string>;
    domain: import("@sinclair/typebox").TString<string>;
    isActive: import("@sinclair/typebox").TBoolean;
    lpToken: import("@sinclair/typebox").TString<string>;
    initialA: import("@sinclair/typebox").TNumber;
    futureA: import("@sinclair/typebox").TNumber;
    initialATime: import("@sinclair/typebox").TNumber;
    futureATime: import("@sinclair/typebox").TNumber;
    swapFee: import("@sinclair/typebox").TString<string>;
    adminFee: import("@sinclair/typebox").TString<string>;
    pooledTokens: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    tokenPrecisionMultipliers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    poolTokenDecimals: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    balances: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    virtualPrice: import("@sinclair/typebox").TString<string>;
    invariant: import("@sinclair/typebox").TString<string>;
    lpTokenSupply: import("@sinclair/typebox").TString<string>;
}>;
export type StableSwapPool = Static<typeof StableSwapPoolSchema>;
export declare const StableSwapExchangeSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    poolId: import("@sinclair/typebox").TString<string>;
    domain: import("@sinclair/typebox").TString<string>;
    buyer: import("@sinclair/typebox").TString<string>;
    boughtId: import("@sinclair/typebox").TNumber;
    soldId: import("@sinclair/typebox").TNumber;
    tokensSold: import("@sinclair/typebox").TNumber;
    tokensBought: import("@sinclair/typebox").TNumber;
    balances: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    fee: import("@sinclair/typebox").TNumber;
    blockNumber: import("@sinclair/typebox").TNumber;
    transactionHash: import("@sinclair/typebox").TString<string>;
    timestamp: import("@sinclair/typebox").TNumber;
}>;
export type StableSwapExchange = Static<typeof StableSwapExchangeSchema>;
export declare const PoolActionType: {
    readonly Add: "Add";
    readonly Remove: "Remove";
};
export type PoolActionType = typeof PoolActionType[keyof typeof PoolActionType];
export declare const StableSwapPoolEventSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    poolId: import("@sinclair/typebox").TString<string>;
    domain: import("@sinclair/typebox").TString<string>;
    provider: import("@sinclair/typebox").TString<string>;
    action: import("@sinclair/typebox").TEnum<{
        readonly Add: "Add";
        readonly Remove: "Remove";
    }>;
    pooledTokens: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    poolTokenDecimals: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    tokenAmounts: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    balances: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    lpTokenAmount: import("@sinclair/typebox").TNumber;
    lpTokenSupply: import("@sinclair/typebox").TNumber;
    fees: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TNumber>;
    blockNumber: import("@sinclair/typebox").TNumber;
    transactionHash: import("@sinclair/typebox").TString<string>;
    timestamp: import("@sinclair/typebox").TNumber;
}>;
export type StableSwapPoolEvent = Static<typeof StableSwapPoolEventSchema>;
//# sourceMappingURL=stableswap.d.ts.map