import { Static } from "@sinclair/typebox";
export declare const ExecutorDataSchema: import("@sinclair/typebox").TObject<{
    executorVersion: import("@sinclair/typebox").TString<string>;
    transferId: import("@sinclair/typebox").TString<string>;
    origin: import("@sinclair/typebox").TString<string>;
    encodedData: import("@sinclair/typebox").TString<string>;
    routerAddress: import("@sinclair/typebox").TString<string>;
}>;
export type ExecutorData = Static<typeof ExecutorDataSchema>;
export declare enum RelayerTaskStatus {
    CheckPending = "CheckPending",
    ExecPending = "ExecPending",
    ExecSuccess = "ExecSuccess",
    ExecReverted = "ExecReverted",
    WaitingForConfirmation = "WaitingForConfirmation",
    Blacklisted = "Blacklisted",
    Cancelled = "Cancelled",
    NotFound = "NotFound"
}
export declare enum RelayerType {
    Gelato = "Gelato",
    Connext = "Connext",
    Mock = "Mock"
}
export type MetaTxTask = {
    timestamp: string;
    taskId: string;
    attempts: number;
};
export type RelayerRequest = {
    chainId: number;
    target: string;
    data: string;
    feeToken?: string;
};
export type RelayerSyncFeeRequest = {
    chainId: number;
    target: string;
    data: string;
    isRelayContext?: boolean | undefined;
    feeToken: string;
};
export type RelayResponse = {
    taskId: string;
};
export type RelayRequestOptions = {
    gasLimit?: string;
    retries?: number;
};
//# sourceMappingURL=relayer.d.ts.map