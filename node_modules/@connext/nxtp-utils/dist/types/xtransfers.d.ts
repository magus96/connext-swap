import { Static } from "@sinclair/typebox";
export declare const XTransferStatus: {
    readonly XCalled: "XCalled";
    readonly Executed: "Executed";
    readonly Reconciled: "Reconciled";
    readonly CompletedFast: "CompletedFast";
    readonly CompletedSlow: "CompletedSlow";
};
export type XTransferStatus = typeof XTransferStatus[keyof typeof XTransferStatus];
export declare const XTransferErrorStatus: {
    readonly LowSlippage: "LowSlippage";
    readonly LowRelayerFee: "LowRelayerFee";
    readonly ExecutionError: "ExecutionError";
    readonly NoBidsReceived: "NoBidsReceived";
};
export type XTransferErrorStatus = typeof XTransferErrorStatus[keyof typeof XTransferErrorStatus];
export declare const XTransferMethodCallSchema: import("@sinclair/typebox").TObject<{
    caller: import("@sinclair/typebox").TString<string>;
    transactionHash: import("@sinclair/typebox").TString<string>;
    timestamp: import("@sinclair/typebox").TNumber;
    gasPrice: import("@sinclair/typebox").TString<string>;
    gasLimit: import("@sinclair/typebox").TString<string>;
    blockNumber: import("@sinclair/typebox").TNumber;
    txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
}>;
export declare const XTransferOriginSchema: import("@sinclair/typebox").TObject<{
    chain: import("@sinclair/typebox").TString<string>;
    messageHash: import("@sinclair/typebox").TString<string>;
    errorStatus: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TEnum<{
        readonly LowSlippage: "LowSlippage";
        readonly LowRelayerFee: "LowRelayerFee";
        readonly ExecutionError: "ExecutionError";
        readonly NoBidsReceived: "NoBidsReceived";
    }>>;
    assets: import("@sinclair/typebox").TObject<{
        transacting: import("@sinclair/typebox").TObject<{
            asset: import("@sinclair/typebox").TString<string>;
            amount: import("@sinclair/typebox").TString<string>;
        }>;
        bridged: import("@sinclair/typebox").TObject<{
            asset: import("@sinclair/typebox").TString<string>;
            amount: import("@sinclair/typebox").TString<string>;
        }>;
    }>;
    relayerFee: import("@sinclair/typebox").TString<string>;
    xcall: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        caller: import("@sinclair/typebox").TString<string>;
        transactionHash: import("@sinclair/typebox").TString<string>;
        timestamp: import("@sinclair/typebox").TNumber;
        gasPrice: import("@sinclair/typebox").TString<string>;
        gasLimit: import("@sinclair/typebox").TString<string>;
        blockNumber: import("@sinclair/typebox").TNumber;
        txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>]>;
}>;
export declare const XTransferDestinationSchema: import("@sinclair/typebox").TObject<{
    chain: import("@sinclair/typebox").TString<string>;
    status: import("@sinclair/typebox").TEnum<{
        readonly XCalled: "XCalled";
        readonly Executed: "Executed";
        readonly Reconciled: "Reconciled";
        readonly CompletedFast: "CompletedFast";
        readonly CompletedSlow: "CompletedSlow";
    }>;
    routers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    updatedSlippage: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    assets: import("@sinclair/typebox").TObject<{
        transacting: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            asset: import("@sinclair/typebox").TString<string>;
            amount: import("@sinclair/typebox").TString<string>;
        }>>;
        local: import("@sinclair/typebox").TObject<{
            asset: import("@sinclair/typebox").TString<string>;
            amount: import("@sinclair/typebox").TString<string>;
        }>;
    }>;
    execute: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        caller: import("@sinclair/typebox").TString<string>;
        transactionHash: import("@sinclair/typebox").TString<string>;
        timestamp: import("@sinclair/typebox").TNumber;
        gasPrice: import("@sinclair/typebox").TString<string>;
        gasLimit: import("@sinclair/typebox").TString<string>;
        blockNumber: import("@sinclair/typebox").TNumber;
        txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>, import("@sinclair/typebox").TObject<{
        originSender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>]>>;
    reconcile: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        caller: import("@sinclair/typebox").TString<string>;
        transactionHash: import("@sinclair/typebox").TString<string>;
        timestamp: import("@sinclair/typebox").TNumber;
        gasPrice: import("@sinclair/typebox").TString<string>;
        gasLimit: import("@sinclair/typebox").TString<string>;
        blockNumber: import("@sinclair/typebox").TNumber;
        txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>>;
}>;
export declare const TransferIdInformationSchema: import("@sinclair/typebox").TObject<{
    originDomain: import("@sinclair/typebox").TString<string>;
    destinationDomain: import("@sinclair/typebox").TString<string>;
    canonicalDomain: import("@sinclair/typebox").TString<string>;
    to: import("@sinclair/typebox").TString<string>;
    delegate: import("@sinclair/typebox").TString<string>;
    receiveLocal: import("@sinclair/typebox").TBoolean;
    callData: import("@sinclair/typebox").TString<string>;
    slippage: import("@sinclair/typebox").TString<string>;
    originSender: import("@sinclair/typebox").TString<string>;
    bridgedAmt: import("@sinclair/typebox").TString<string>;
    normalizedIn: import("@sinclair/typebox").TString<string>;
    nonce: import("@sinclair/typebox").TNumber;
    canonicalId: import("@sinclair/typebox").TString<string>;
}>;
export declare const XTransferSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString<string>;
    xparams: import("@sinclair/typebox").TObject<{
        originDomain: import("@sinclair/typebox").TString<string>;
        destinationDomain: import("@sinclair/typebox").TString<string>;
        canonicalDomain: import("@sinclair/typebox").TString<string>;
        to: import("@sinclair/typebox").TString<string>;
        delegate: import("@sinclair/typebox").TString<string>;
        receiveLocal: import("@sinclair/typebox").TBoolean;
        callData: import("@sinclair/typebox").TString<string>;
        slippage: import("@sinclair/typebox").TString<string>;
        originSender: import("@sinclair/typebox").TString<string>;
        bridgedAmt: import("@sinclair/typebox").TString<string>;
        normalizedIn: import("@sinclair/typebox").TString<string>;
        nonce: import("@sinclair/typebox").TNumber;
        canonicalId: import("@sinclair/typebox").TString<string>;
    }>;
}>, import("@sinclair/typebox").TObject<{
    origin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        chain: import("@sinclair/typebox").TString<string>;
        messageHash: import("@sinclair/typebox").TString<string>;
        errorStatus: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TEnum<{
            readonly LowSlippage: "LowSlippage";
            readonly LowRelayerFee: "LowRelayerFee";
            readonly ExecutionError: "ExecutionError";
            readonly NoBidsReceived: "NoBidsReceived";
        }>>;
        assets: import("@sinclair/typebox").TObject<{
            transacting: import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>;
            bridged: import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>;
        }>;
        relayerFee: import("@sinclair/typebox").TString<string>;
        xcall: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
            caller: import("@sinclair/typebox").TString<string>;
            transactionHash: import("@sinclair/typebox").TString<string>;
            timestamp: import("@sinclair/typebox").TNumber;
            gasPrice: import("@sinclair/typebox").TString<string>;
            gasLimit: import("@sinclair/typebox").TString<string>;
            blockNumber: import("@sinclair/typebox").TNumber;
            txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>]>;
    }>>;
    destination: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        chain: import("@sinclair/typebox").TString<string>;
        status: import("@sinclair/typebox").TEnum<{
            readonly XCalled: "XCalled";
            readonly Executed: "Executed";
            readonly Reconciled: "Reconciled";
            readonly CompletedFast: "CompletedFast";
            readonly CompletedSlow: "CompletedSlow";
        }>;
        routers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
        updatedSlippage: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        assets: import("@sinclair/typebox").TObject<{
            transacting: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>>;
            local: import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>;
        }>;
        execute: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
            caller: import("@sinclair/typebox").TString<string>;
            transactionHash: import("@sinclair/typebox").TString<string>;
            timestamp: import("@sinclair/typebox").TNumber;
            gasPrice: import("@sinclair/typebox").TString<string>;
            gasLimit: import("@sinclair/typebox").TString<string>;
            blockNumber: import("@sinclair/typebox").TNumber;
            txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>, import("@sinclair/typebox").TObject<{
            originSender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>]>>;
        reconcile: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            caller: import("@sinclair/typebox").TString<string>;
            transactionHash: import("@sinclair/typebox").TString<string>;
            timestamp: import("@sinclair/typebox").TNumber;
            gasPrice: import("@sinclair/typebox").TString<string>;
            gasLimit: import("@sinclair/typebox").TString<string>;
            blockNumber: import("@sinclair/typebox").TNumber;
            txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>>;
    }>>;
}>]>;
export type XTransfer = Static<typeof XTransferSchema>;
export declare const OriginTransferSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString<string>;
    xparams: import("@sinclair/typebox").TObject<{
        originDomain: import("@sinclair/typebox").TString<string>;
        destinationDomain: import("@sinclair/typebox").TString<string>;
        canonicalDomain: import("@sinclair/typebox").TString<string>;
        to: import("@sinclair/typebox").TString<string>;
        delegate: import("@sinclair/typebox").TString<string>;
        receiveLocal: import("@sinclair/typebox").TBoolean;
        callData: import("@sinclair/typebox").TString<string>;
        slippage: import("@sinclair/typebox").TString<string>;
        originSender: import("@sinclair/typebox").TString<string>;
        bridgedAmt: import("@sinclair/typebox").TString<string>;
        normalizedIn: import("@sinclair/typebox").TString<string>;
        nonce: import("@sinclair/typebox").TNumber;
        canonicalId: import("@sinclair/typebox").TString<string>;
    }>;
}>, import("@sinclair/typebox").TObject<{
    origin: import("@sinclair/typebox").TObject<{
        chain: import("@sinclair/typebox").TString<string>;
        messageHash: import("@sinclair/typebox").TString<string>;
        errorStatus: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TEnum<{
            readonly LowSlippage: "LowSlippage";
            readonly LowRelayerFee: "LowRelayerFee";
            readonly ExecutionError: "ExecutionError";
            readonly NoBidsReceived: "NoBidsReceived";
        }>>;
        assets: import("@sinclair/typebox").TObject<{
            transacting: import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>;
            bridged: import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>;
        }>;
        relayerFee: import("@sinclair/typebox").TString<string>;
        xcall: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
            caller: import("@sinclair/typebox").TString<string>;
            transactionHash: import("@sinclair/typebox").TString<string>;
            timestamp: import("@sinclair/typebox").TNumber;
            gasPrice: import("@sinclair/typebox").TString<string>;
            gasLimit: import("@sinclair/typebox").TString<string>;
            blockNumber: import("@sinclair/typebox").TNumber;
            txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>]>;
    }>;
    destination: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        chain: import("@sinclair/typebox").TString<string>;
        status: import("@sinclair/typebox").TEnum<{
            readonly XCalled: "XCalled";
            readonly Executed: "Executed";
            readonly Reconciled: "Reconciled";
            readonly CompletedFast: "CompletedFast";
            readonly CompletedSlow: "CompletedSlow";
        }>;
        routers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
        updatedSlippage: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        assets: import("@sinclair/typebox").TObject<{
            transacting: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>>;
            local: import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>;
        }>;
        execute: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
            caller: import("@sinclair/typebox").TString<string>;
            transactionHash: import("@sinclair/typebox").TString<string>;
            timestamp: import("@sinclair/typebox").TNumber;
            gasPrice: import("@sinclair/typebox").TString<string>;
            gasLimit: import("@sinclair/typebox").TString<string>;
            blockNumber: import("@sinclair/typebox").TNumber;
            txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>, import("@sinclair/typebox").TObject<{
            originSender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>]>>;
        reconcile: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            caller: import("@sinclair/typebox").TString<string>;
            transactionHash: import("@sinclair/typebox").TString<string>;
            timestamp: import("@sinclair/typebox").TNumber;
            gasPrice: import("@sinclair/typebox").TString<string>;
            gasLimit: import("@sinclair/typebox").TString<string>;
            blockNumber: import("@sinclair/typebox").TNumber;
            txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>>;
    }>>;
}>]>;
export type OriginTransfer = Static<typeof OriginTransferSchema>;
export declare const DestinationTransferSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString<string>;
    xparams: import("@sinclair/typebox").TObject<{
        originDomain: import("@sinclair/typebox").TString<string>;
        destinationDomain: import("@sinclair/typebox").TString<string>;
        canonicalDomain: import("@sinclair/typebox").TString<string>;
        to: import("@sinclair/typebox").TString<string>;
        delegate: import("@sinclair/typebox").TString<string>;
        receiveLocal: import("@sinclair/typebox").TBoolean;
        callData: import("@sinclair/typebox").TString<string>;
        slippage: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        originSender: import("@sinclair/typebox").TString<string>;
        bridgedAmt: import("@sinclair/typebox").TString<string>;
        normalizedIn: import("@sinclair/typebox").TString<string>;
        amount: import("@sinclair/typebox").TString<string>;
        nonce: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        canonicalId: import("@sinclair/typebox").TString<string>;
    }>;
}>, import("@sinclair/typebox").TObject<{
    origin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        chain: import("@sinclair/typebox").TString<string>;
        messageHash: import("@sinclair/typebox").TString<string>;
        errorStatus: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TEnum<{
            readonly LowSlippage: "LowSlippage";
            readonly LowRelayerFee: "LowRelayerFee";
            readonly ExecutionError: "ExecutionError";
            readonly NoBidsReceived: "NoBidsReceived";
        }>>;
        assets: import("@sinclair/typebox").TObject<{
            transacting: import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>;
            bridged: import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>;
        }>;
        relayerFee: import("@sinclair/typebox").TString<string>;
        xcall: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
            caller: import("@sinclair/typebox").TString<string>;
            transactionHash: import("@sinclair/typebox").TString<string>;
            timestamp: import("@sinclair/typebox").TNumber;
            gasPrice: import("@sinclair/typebox").TString<string>;
            gasLimit: import("@sinclair/typebox").TString<string>;
            blockNumber: import("@sinclair/typebox").TNumber;
            txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>]>;
    }>>;
    destination: import("@sinclair/typebox").TObject<{
        chain: import("@sinclair/typebox").TString<string>;
        status: import("@sinclair/typebox").TEnum<{
            readonly XCalled: "XCalled";
            readonly Executed: "Executed";
            readonly Reconciled: "Reconciled";
            readonly CompletedFast: "CompletedFast";
            readonly CompletedSlow: "CompletedSlow";
        }>;
        routers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
        updatedSlippage: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        assets: import("@sinclair/typebox").TObject<{
            transacting: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>>;
            local: import("@sinclair/typebox").TObject<{
                asset: import("@sinclair/typebox").TString<string>;
                amount: import("@sinclair/typebox").TString<string>;
            }>;
        }>;
        execute: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
            caller: import("@sinclair/typebox").TString<string>;
            transactionHash: import("@sinclair/typebox").TString<string>;
            timestamp: import("@sinclair/typebox").TNumber;
            gasPrice: import("@sinclair/typebox").TString<string>;
            gasLimit: import("@sinclair/typebox").TString<string>;
            blockNumber: import("@sinclair/typebox").TNumber;
            txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>, import("@sinclair/typebox").TObject<{
            originSender: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>]>>;
        reconcile: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            caller: import("@sinclair/typebox").TString<string>;
            transactionHash: import("@sinclair/typebox").TString<string>;
            timestamp: import("@sinclair/typebox").TNumber;
            gasPrice: import("@sinclair/typebox").TString<string>;
            gasLimit: import("@sinclair/typebox").TString<string>;
            blockNumber: import("@sinclair/typebox").TNumber;
            txOrigin: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>>;
    }>;
}>]>;
export type DestinationTransfer = Static<typeof DestinationTransferSchema>;
export type TransferInfo = Static<typeof TransferIdInformationSchema>;
export declare const XCallArgsSchema: import("@sinclair/typebox").TObject<{
    destination: import("@sinclair/typebox").TString<string>;
    to: import("@sinclair/typebox").TString<string>;
    asset: import("@sinclair/typebox").TString<string>;
    delegate: import("@sinclair/typebox").TString<string>;
    amount: import("@sinclair/typebox").TString<string>;
    slippage: import("@sinclair/typebox").TString<string>;
    callData: import("@sinclair/typebox").TString<string>;
}>;
export type XCallArgs = Static<typeof XCallArgsSchema>;
export declare const ExecuteArgsSchema: import("@sinclair/typebox").TObject<{
    params: import("@sinclair/typebox").TObject<{
        originDomain: import("@sinclair/typebox").TString<string>;
        destinationDomain: import("@sinclair/typebox").TString<string>;
        canonicalDomain: import("@sinclair/typebox").TString<string>;
        to: import("@sinclair/typebox").TString<string>;
        delegate: import("@sinclair/typebox").TString<string>;
        receiveLocal: import("@sinclair/typebox").TBoolean;
        callData: import("@sinclair/typebox").TString<string>;
        slippage: import("@sinclair/typebox").TString<string>;
        originSender: import("@sinclair/typebox").TString<string>;
        bridgedAmt: import("@sinclair/typebox").TString<string>;
        normalizedIn: import("@sinclair/typebox").TString<string>;
        nonce: import("@sinclair/typebox").TNumber;
        canonicalId: import("@sinclair/typebox").TString<string>;
    }>;
    routers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    routerSignatures: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    sequencer: import("@sinclair/typebox").TString<string>;
    sequencerSignature: import("@sinclair/typebox").TString<string>;
}>;
export type ExecuteArgs = Static<typeof ExecuteArgsSchema>;
export type ExternalCall = {
    to: string;
    callData: string;
};
export type ReconciledTransaction = {
    externalHash: string;
    local: string;
    amount: string;
    recipient: string;
};
export declare const AssetSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    key: import("@sinclair/typebox").TString<string>;
    adoptedAsset: import("@sinclair/typebox").TString<string>;
    canonicalId: import("@sinclair/typebox").TString<string>;
    canonicalDomain: import("@sinclair/typebox").TString<string>;
    localAsset: import("@sinclair/typebox").TString<string>;
    blockNumber: import("@sinclair/typebox").TString<string>;
}>;
export type Asset = Static<typeof AssetSchema>;
export declare const AssetBalanceSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    key: import("@sinclair/typebox").TString<string>;
    adoptedAsset: import("@sinclair/typebox").TString<string>;
    canonicalId: import("@sinclair/typebox").TString<string>;
    canonicalDomain: import("@sinclair/typebox").TString<string>;
    localAsset: import("@sinclair/typebox").TString<string>;
    blockNumber: import("@sinclair/typebox").TString<string>;
}>, import("@sinclair/typebox").TObject<{
    balance: import("@sinclair/typebox").TString<string>;
    feesEarned: import("@sinclair/typebox").TString<string>;
    domain: import("@sinclair/typebox").TString<string>;
}>]>;
export type AssetBalance = Static<typeof AssetBalanceSchema>;
export declare const RouterBalanceSchema: import("@sinclair/typebox").TObject<{
    router: import("@sinclair/typebox").TString<string>;
    assets: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
        id: import("@sinclair/typebox").TString<string>;
        key: import("@sinclair/typebox").TString<string>;
        adoptedAsset: import("@sinclair/typebox").TString<string>;
        canonicalId: import("@sinclair/typebox").TString<string>;
        canonicalDomain: import("@sinclair/typebox").TString<string>;
        localAsset: import("@sinclair/typebox").TString<string>;
        blockNumber: import("@sinclair/typebox").TString<string>;
    }>, import("@sinclair/typebox").TObject<{
        balance: import("@sinclair/typebox").TString<string>;
        feesEarned: import("@sinclair/typebox").TString<string>;
        domain: import("@sinclair/typebox").TString<string>;
    }>]>>;
}>;
export type RouterBalance = Static<typeof RouterBalanceSchema>;
export declare const BidStatusSchema: import("@sinclair/typebox").TObject<{
    timestamp: import("@sinclair/typebox").TString<string>;
    attempts: import("@sinclair/typebox").TNumber;
}>;
export type BidStatus = Static<typeof BidStatusSchema>;
export declare const RelayerFeesIncreaseSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    transferId: import("@sinclair/typebox").TString<string>;
    increase: import("@sinclair/typebox").TString<string>;
    domain: import("@sinclair/typebox").TString<string>;
    timestamp: import("@sinclair/typebox").TString<string>;
}>;
export type RelayerFeesIncrease = Static<typeof RelayerFeesIncreaseSchema>;
export declare const SlippageUpdateSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    transferId: import("@sinclair/typebox").TString<string>;
    slippage: import("@sinclair/typebox").TString<string>;
    domain: import("@sinclair/typebox").TString<string>;
    timestamp: import("@sinclair/typebox").TNumber;
}>;
export type SlippageUpdate = Static<typeof SlippageUpdateSchema>;
export declare const RouterDailyTVLSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    asset: import("@sinclair/typebox").TString<string>;
    router: import("@sinclair/typebox").TString<string>;
    domain: import("@sinclair/typebox").TString<string>;
    timestamp: import("@sinclair/typebox").TNumber;
    balance: import("@sinclair/typebox").TString<string>;
}>;
export type RouterDailyTVL = Static<typeof RouterDailyTVLSchema>;
//# sourceMappingURL=xtransfers.d.ts.map