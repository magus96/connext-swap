import { Static } from "@sinclair/typebox";
export declare const XMessageSchema: import("@sinclair/typebox").TObject<{
    leaf: import("@sinclair/typebox").TString<string>;
    originDomain: import("@sinclair/typebox").TString<string>;
    destinationDomain: import("@sinclair/typebox").TString<string>;
    transferId: import("@sinclair/typebox").TString<string>;
    origin: import("@sinclair/typebox").TObject<{
        index: import("@sinclair/typebox").TNumber;
        root: import("@sinclair/typebox").TString<string>;
        message: import("@sinclair/typebox").TString<string>;
    }>;
    destination: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        processed: import("@sinclair/typebox").TBoolean;
        returnData: import("@sinclair/typebox").TString<string>;
    }>>;
}>;
export type XMessage = Static<typeof XMessageSchema>;
export declare const OriginMessageSchema: import("@sinclair/typebox").TObject<{
    domain: import("@sinclair/typebox").TString<string>;
    transferId: import("@sinclair/typebox").TString<string>;
    destinationDomain: import("@sinclair/typebox").TString<string>;
    leaf: import("@sinclair/typebox").TString<string>;
    index: import("@sinclair/typebox").TNumber;
    root: import("@sinclair/typebox").TString<string>;
    message: import("@sinclair/typebox").TString<string>;
}>;
export type OriginMessage = Static<typeof OriginMessageSchema>;
export declare const RootMessageSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    spokeDomain: import("@sinclair/typebox").TString<string>;
    hubDomain: import("@sinclair/typebox").TString<string>;
    root: import("@sinclair/typebox").TString<string>;
    caller: import("@sinclair/typebox").TString<string>;
    transactionHash: import("@sinclair/typebox").TString<string>;
    timestamp: import("@sinclair/typebox").TNumber;
    gasPrice: import("@sinclair/typebox").TString<string>;
    gasLimit: import("@sinclair/typebox").TString<string>;
    blockNumber: import("@sinclair/typebox").TNumber;
    processed: import("@sinclair/typebox").TBoolean;
    count: import("@sinclair/typebox").TNumber;
    sentTimestamp: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    sentTaskId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    relayerType: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
}>;
export type RootMessage = Static<typeof RootMessageSchema>;
export declare const AggregatedRootSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    domain: import("@sinclair/typebox").TString<string>;
    receivedRoot: import("@sinclair/typebox").TString<string>;
    index: import("@sinclair/typebox").TNumber;
}>;
export type AggregatedRoot = Static<typeof AggregatedRootSchema>;
export declare const PropagatedRootSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    aggregate: import("@sinclair/typebox").TString<string>;
    domainsHash: import("@sinclair/typebox").TString<string>;
    count: import("@sinclair/typebox").TNumber;
}>;
export type PropagatedRoot = Static<typeof PropagatedRootSchema>;
export declare const ConnectorMetaSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    spokeDomain: import("@sinclair/typebox").TString<string>;
    hubDomain: import("@sinclair/typebox").TString<string>;
    rootManager: import("@sinclair/typebox").TString<string>;
    mirrorConnector: import("@sinclair/typebox").TString<string>;
    amb: import("@sinclair/typebox").TString<string>;
}>;
export type ConnectorMeta = Static<typeof ConnectorMetaSchema>;
export declare const RootManagerMetaSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    connectors: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    domains: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
}>;
export type RootManagerMeta = Static<typeof RootManagerMetaSchema>;
export declare const ReceivedAggregateRootSchema: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString<string>;
    root: import("@sinclair/typebox").TString<string>;
    domain: import("@sinclair/typebox").TString<string>;
    blockNumber: import("@sinclair/typebox").TNumber;
}>;
export type ReceivedAggregateRoot = Static<typeof ReceivedAggregateRootSchema>;
//# sourceMappingURL=amb.d.ts.map