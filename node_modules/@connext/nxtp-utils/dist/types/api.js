"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelayerApiStatusResponseSchema = exports.RelayerApiErrorResponseSchema = exports.RelayerApiPostTaskResponseSchema = exports.RelayerApiPostTaskRequestParamsSchema = exports.RelayerApiFeeSchema = exports.RemoveLiquidityResponseSchema = exports.RemoveLiquidityRequestSchema = exports.AddLiquidityForResponseSchema = exports.AddLiquidityForRequestSchema = exports.ExecutorPostDataResponseSchema = exports.ExecStatusResponseSchema = exports.ExecStatusRequestSchema = exports.ExecuteFastApiGetQueuedResponseSchema = exports.ExecuteFastApiGetAuctionsStatusResponseSchema = exports.ExecuteFastApiBidResponseSchema = exports.ExecuteFastApiPostBidReqSchema = exports.SequencerApiErrorResponseSchema = exports.ClearCacheRequestSchema = exports.AdminSchema = exports.ExecStatus = void 0;
const typebox_1 = require("@sinclair/typebox");
const auctions_1 = require("./auctions");
const relayer_1 = require("./relayer");
const error_1 = require("./error");
const primitives_1 = require("./primitives");
var ExecStatus;
(function (ExecStatus) {
    ExecStatus["None"] = "None";
    ExecStatus["Queued"] = "Queued";
    ExecStatus["Sent"] = "Sent";
    ExecStatus["Completed"] = "Completed";
    ExecStatus["Cancelled"] = "Cancelled";
})(ExecStatus = exports.ExecStatus || (exports.ExecStatus = {}));
/// MARK - Shared API
exports.AdminSchema = typebox_1.Type.Object({
    adminToken: typebox_1.Type.String(),
});
exports.ClearCacheRequestSchema = exports.AdminSchema;
/// MARK - Sequencer API ----------------------------------------------------------------------------
exports.SequencerApiErrorResponseSchema = typebox_1.Type.Object({
    message: typebox_1.Type.String(),
    error: typebox_1.Type.Optional(error_1.NxtpErrorJsonSchema),
});
exports.ExecuteFastApiPostBidReqSchema = auctions_1.BidSchema;
exports.ExecuteFastApiBidResponseSchema = typebox_1.Type.Object({
    message: typebox_1.Type.String(),
    transferId: typebox_1.Type.String(),
    router: typebox_1.Type.String(),
    error: typebox_1.Type.Optional(error_1.NxtpErrorJsonSchema),
});
exports.ExecuteFastApiGetAuctionsStatusResponseSchema = typebox_1.Type.Object({
    bids: typebox_1.Type.Record(typebox_1.Type.String(), auctions_1.BidSchema),
    status: typebox_1.Type.String(),
    attempts: typebox_1.Type.Optional(typebox_1.Type.Number()),
    taskId: typebox_1.Type.Optional(typebox_1.Type.String()),
    timestamps: typebox_1.Type.Object({
        start: typebox_1.Type.String(),
        sent: typebox_1.Type.Optional(typebox_1.Type.String()),
    }),
});
exports.ExecuteFastApiGetQueuedResponseSchema = typebox_1.Type.Object({
    queued: typebox_1.Type.Array(typebox_1.Type.String()),
});
exports.ExecStatusRequestSchema = typebox_1.Type.Object({ transferId: typebox_1.Type.String() });
exports.ExecStatusResponseSchema = typebox_1.Type.Object({
    transferId: typebox_1.Type.String(),
    status: typebox_1.Type.Enum(ExecStatus),
});
exports.ExecutorPostDataResponseSchema = typebox_1.Type.Object({
    message: typebox_1.Type.String(),
    transferId: typebox_1.Type.String(),
    error: typebox_1.Type.Optional(error_1.NxtpErrorJsonSchema),
});
/// MARK - Router API -------------------------------------------------------------------------------
exports.AddLiquidityForRequestSchema = typebox_1.Type.Intersect([
    exports.AdminSchema,
    typebox_1.Type.Object({
        routerAddress: typebox_1.Type.Optional(primitives_1.TAddress),
        chainId: primitives_1.TChainId,
        assetId: primitives_1.TAddress,
        amount: primitives_1.TDecimalString,
    }),
]);
exports.AddLiquidityForResponseSchema = typebox_1.Type.Object({
    transactionHash: typebox_1.Type.String(),
});
exports.RemoveLiquidityRequestSchema = typebox_1.Type.Intersect([
    exports.AdminSchema,
    typebox_1.Type.Object({
        recipientAddress: typebox_1.Type.Optional(primitives_1.TAddress),
        chainId: primitives_1.TChainId,
        assetId: primitives_1.TAddress,
        amount: primitives_1.TDecimalString,
    }),
]);
exports.RemoveLiquidityResponseSchema = typebox_1.Type.Object({
    transactionHash: typebox_1.Type.String(),
});
/// MARK - Relayer API ------------------------------------------------------------------------------
exports.RelayerApiFeeSchema = typebox_1.Type.Object({
    chain: typebox_1.Type.Integer(),
    amount: typebox_1.Type.String(),
    token: typebox_1.Type.String(),
});
exports.RelayerApiPostTaskRequestParamsSchema = typebox_1.Type.Object({
    to: typebox_1.Type.String(),
    data: typebox_1.Type.String(),
    fee: exports.RelayerApiFeeSchema,
    apiKey: typebox_1.Type.String(),
});
exports.RelayerApiPostTaskResponseSchema = typebox_1.Type.Object({
    message: typebox_1.Type.String(),
    taskId: typebox_1.Type.String(),
});
exports.RelayerApiErrorResponseSchema = typebox_1.Type.Object({
    message: typebox_1.Type.String(),
    error: typebox_1.Type.Optional(error_1.NxtpErrorJsonSchema),
});
exports.RelayerApiStatusResponseSchema = typebox_1.Type.Object({
    chain: typebox_1.Type.String(),
    taskId: typebox_1.Type.String(),
    status: typebox_1.Type.Enum(relayer_1.RelayerTaskStatus),
    error: typebox_1.Type.String(),
});
//# sourceMappingURL=api.js.map