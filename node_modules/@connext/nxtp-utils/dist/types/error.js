"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NxtpError = exports.NxtpErrorJsonSchema = exports.jsonifyError = void 0;
const typebox_1 = require("@sinclair/typebox");
/**
 * Converts an error into a json object
 *
 * @param error - Error to convert
 * @returns An error json
 */
const jsonifyError = (error) => {
    if (error.toJson && typeof error.toJson === "function") {
        return error.toJson();
    }
    return {
        message: error.message,
        type: error.name,
        context: {},
        stack: error.stack,
    };
};
exports.jsonifyError = jsonifyError;
exports.NxtpErrorJsonSchema = typebox_1.Type.Object({
    message: typebox_1.Type.String(),
    context: typebox_1.Type.Any(),
    type: typebox_1.Type.String(),
    stack: typebox_1.Type.Optional(typebox_1.Type.String()),
});
/**
 * @classdesc The error class used throughout this repo. Defines a context object in addition to the standard message and name fields. The context can hold any information in json form that is relevant to the error
 *
 * Is also able to be hydrated from a json
 */
class NxtpError extends Error {
    constructor(msg, context = {}, type = NxtpError.name, level = "error") {
        super(msg);
        this.msg = msg;
        this.context = context;
        this.type = type;
        this.level = level;
        this.isNxtpError = true;
    }
    toJson() {
        return {
            message: this.msg,
            context: this.context,
            type: this.type,
            stack: this.stack,
        };
    }
    static fromJson(json) {
        return new NxtpError(json.message, json.context ?? {}, json.type ?? json.name ?? NxtpError.name);
    }
}
exports.NxtpError = NxtpError;
//# sourceMappingURL=error.js.map