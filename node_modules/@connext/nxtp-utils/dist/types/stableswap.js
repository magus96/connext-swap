"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StableSwapPoolEventSchema = exports.PoolActionType = exports.StableSwapExchangeSchema = exports.StableSwapPoolSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const primitives_1 = require("./primitives");
exports.StableSwapPoolSchema = typebox_1.Type.Object({
    key: typebox_1.Type.String(),
    domain: typebox_1.Type.String(),
    isActive: typebox_1.Type.Boolean(),
    lpToken: typebox_1.Type.String(),
    initialA: typebox_1.Type.Number(),
    futureA: typebox_1.Type.Number(),
    initialATime: typebox_1.Type.Number(),
    futureATime: typebox_1.Type.Number(),
    swapFee: primitives_1.TIntegerString,
    adminFee: primitives_1.TIntegerString,
    pooledTokens: typebox_1.Type.Array(typebox_1.Type.String()),
    tokenPrecisionMultipliers: typebox_1.Type.Array(primitives_1.TIntegerString),
    poolTokenDecimals: typebox_1.Type.Array(typebox_1.Type.Number()),
    balances: typebox_1.Type.Array(primitives_1.TIntegerString),
    virtualPrice: primitives_1.TIntegerString,
    invariant: primitives_1.TIntegerString,
    lpTokenSupply: primitives_1.TIntegerString,
});
exports.StableSwapExchangeSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    poolId: typebox_1.Type.String(),
    domain: typebox_1.Type.String(),
    buyer: typebox_1.Type.String(),
    boughtId: typebox_1.Type.Number({ minimum: 0 }),
    soldId: typebox_1.Type.Number({ minimum: 0 }),
    tokensSold: typebox_1.Type.Number(),
    tokensBought: typebox_1.Type.Number(),
    balances: typebox_1.Type.Array(typebox_1.Type.Number()),
    fee: typebox_1.Type.Number(),
    blockNumber: typebox_1.Type.Number(),
    transactionHash: typebox_1.Type.String(),
    timestamp: typebox_1.Type.Number(),
});
exports.PoolActionType = {
    Add: "Add",
    Remove: "Remove",
};
exports.StableSwapPoolEventSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    poolId: typebox_1.Type.String(),
    domain: typebox_1.Type.String(),
    provider: typebox_1.Type.String(),
    action: typebox_1.Type.Enum(exports.PoolActionType),
    pooledTokens: typebox_1.Type.Array(typebox_1.Type.String()),
    poolTokenDecimals: typebox_1.Type.Array(typebox_1.Type.Number()),
    tokenAmounts: typebox_1.Type.Array(typebox_1.Type.Number()),
    balances: typebox_1.Type.Array(typebox_1.Type.Number()),
    lpTokenAmount: typebox_1.Type.Number(),
    lpTokenSupply: typebox_1.Type.Number(),
    fees: typebox_1.Type.Array(typebox_1.Type.Number()),
    blockNumber: typebox_1.Type.Number(),
    transactionHash: typebox_1.Type.String(),
    timestamp: typebox_1.Type.Number(),
});
//# sourceMappingURL=stableswap.js.map