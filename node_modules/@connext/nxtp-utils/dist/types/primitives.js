"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TRequiredPeripheralConfig = exports.TOptionalPeripheralConfig = exports.TServerConfig = exports.TChainConfig = exports.TAssetDescription = exports.TLogLevel = exports.TDatabaseConfig = exports.TDecimalString = exports.TChainId = exports.TUrl = exports.TIntegerString = exports.TBytes32 = exports.TAddress = void 0;
const typebox_1 = require("@sinclair/typebox");
// String pattern types
exports.TAddress = typebox_1.Type.RegEx(/^0x[a-fA-F0-9]{40}$/);
exports.TBytes32 = typebox_1.Type.RegEx(/^0x[a-fA-F0-9]{64}$/);
exports.TIntegerString = typebox_1.Type.RegEx(/^([0-9])*$/);
exports.TUrl = typebox_1.Type.String({ format: "uri" });
// Convenience types
exports.TChainId = typebox_1.Type.Number({ minimum: 1 });
exports.TDecimalString = typebox_1.Type.RegEx(/^[0-9]*\.?[0-9]*$/);
exports.TDatabaseConfig = typebox_1.Type.Object({
    url: typebox_1.Type.String({ format: "uri" }),
});
exports.TLogLevel = typebox_1.Type.Union([
    typebox_1.Type.Literal("fatal"),
    typebox_1.Type.Literal("error"),
    typebox_1.Type.Literal("warn"),
    typebox_1.Type.Literal("info"),
    typebox_1.Type.Literal("debug"),
    typebox_1.Type.Literal("trace"),
    typebox_1.Type.Literal("silent"),
]);
exports.TAssetDescription = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    address: exports.TAddress,
    mainnetEquivalent: typebox_1.Type.Optional(exports.TAddress),
});
exports.TChainConfig = typebox_1.Type.Object({
    providers: typebox_1.Type.Array(typebox_1.Type.String()),
    gasStations: typebox_1.Type.Array(typebox_1.Type.String()),
    confirmations: typebox_1.Type.Integer({ minimum: 1 }),
    deployments: typebox_1.Type.Object({
        connext: exports.TAddress,
        relayerProxy: exports.TAddress,
    }),
    assets: typebox_1.Type.Optional(typebox_1.Type.Array(exports.TAssetDescription)), // Assets for which the router provides liquidity on this chain.
});
exports.TServerConfig = typebox_1.Type.Object({
    pub: typebox_1.Type.Object({
        port: typebox_1.Type.Integer({ minimum: 1, maximum: 65535 }),
        host: typebox_1.Type.String({ format: "ipv4" }),
    }),
    sub: typebox_1.Type.Object({
        port: typebox_1.Type.Integer({ minimum: 1, maximum: 65535 }),
        host: typebox_1.Type.String({ format: "ipv4" }),
    }),
    requestLimit: typebox_1.Type.Integer(),
    adminToken: typebox_1.Type.String(),
});
exports.TOptionalPeripheralConfig = typebox_1.Type.Object({
    port: typebox_1.Type.Optional(typebox_1.Type.Integer({ minimum: 1, maximum: 65535 })),
    host: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.TRequiredPeripheralConfig = typebox_1.Type.Object({
    port: typebox_1.Type.Optional(typebox_1.Type.Integer({ minimum: 1, maximum: 65535 })),
    uri: typebox_1.Type.Optional(typebox_1.Type.String()),
    host: typebox_1.Type.Optional(typebox_1.Type.String()),
    user: typebox_1.Type.Optional(typebox_1.Type.String()),
    pass: typebox_1.Type.Optional(typebox_1.Type.String()),
    limit: typebox_1.Type.Optional(typebox_1.Type.Integer({ minimum: 1, maximum: 100 })),
});
//# sourceMappingURL=primitives.js.map