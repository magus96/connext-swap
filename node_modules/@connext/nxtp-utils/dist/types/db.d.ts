import { XMessage, RootMessage, AggregatedRoot, PropagatedRoot, ReceivedAggregateRoot } from "./amb";
import { StableSwapExchange, StableSwapPool, StableSwapPoolEvent } from "./stableswap";
import { RouterBalance, XTransfer } from "./xtransfers";
export declare const sanitizeNull: (obj: {
    [s: string]: any;
}) => any;
/**
 * This is required to make sure numbers do not lose precision because of Javascript limitations.
 * All BigNumbers are selected as text into JS.
 */
export declare const transfersCastForUrl: string;
/**
 * Converts a transfer from the cartographer db through either DB queries or Postgrest into the XTransfer type
 * @param transfer - the transfer from the cartographer db as a JSON object
 * @returns an XTransfer object
 */
export declare const convertFromDbTransfer: (transfer: any) => XTransfer;
/**
 * Converts router balance rows into a RouterBalance array
 * Example rows:
[
  {
    address: '0xa000000000000000000000000000000000000000',
    asset_canonical_id: '0xb000000000000000000000000000000000000000000000000000000000000000',
    asset_domain: '1234',
    router_address: '0xa000000000000000000000000000000000000000',
    balance: 100000000000000000000,
    local: '0xbb00000000000000000000000000000000000000',
    adopted: '0xaa00000000000000000000000000000000000000',
    canonical_id: '0xb000000000000000000000000000000000000000000000000000000000000000',
    canonical_domain: '1111',
    domain: '1234'
  },
  {
    address: '0xa000000000000000000000000000000000000000',
    asset_canonical_id: '0xbb00000000000000000000000000000000000000000000000000000000000000',
    asset_domain: '1234',
    router_address: '0xa000000000000000000000000000000000000000',
    balance: 99000000000000000000,
    local: '0xbb00000000000000000000000000000000000000',
    adopted: '0xaa00000000000000000000000000000000000000',
    canonical_id: '0xbb00000000000000000000000000000000000000000000000000000000000000',
    canonical_domain: '1111',
    domain: '1234'
  },
]
 * @param routerBalanceRows
 */
export declare const convertToRouterBalance: (routerBalanceRows: any[]) => RouterBalance[];
/**
 * Converts a message from the cartographer db through either DB queries or Postgrest into the XMessage type
 * @param message - the message from the cartographer db as a JSON object
 * @returns an XMessage object
 */
export declare const convertFromDbMessage: (message: any) => XMessage;
/**
 * Converts a root message from the cartographer db through either DB queries or Postgrest into the RootMessage type
 * @param message - the message from the cartographer db as a JSON object
 * @returns an RootMessage object
 */
export declare const convertFromDbRootMessage: (message: any) => RootMessage;
/**
 * Converts a aggregated root message from the cartographer db through
 * either DB queries or Postgrest into the AggregatedRoot type
 * @param message - the message from the cartographer db as a JSON object
 * @returns an AggregatedRoot object
 */
export declare const convertFromDbAggregatedRoot: (message: any) => AggregatedRoot;
/**
 * Converts a propagated root message from the cartographer db through
 * either DB queries or Postgrest into the PropagatedRoot type
 * @param message - the message from the cartographer db as a JSON object
 * @returns an PropagatedRoot object
 */
export declare const convertFromDbPropagatedRoot: (message: any) => PropagatedRoot;
/**
 * Converts a received aggregate root from the cartographer db through
 * either DB queries or Postgrest into the ReceivedAggregateRoot type
 * @param message - the message from the cartographer db as a JSON object
 * @returns an ReceivedAggregateRoot object
 */
export declare const convertFromDbReceivedAggregateRoot: (message: any) => ReceivedAggregateRoot;
/**
 * Converts a stable swap pool from the cartographer db through
 * @param pool - the stable swap pool from the cartographer db as a JSON object
 * @returns an StableSwapPool object
 */
export declare const convertFromDbStableSwapPool: (pool: any) => StableSwapPool;
/**
 * Converts a stable swap exchanges from the cartographer db through
 * @param exchange - the stable swap exchange event from the cartographer db as a JSON object
 * @returns an StableSwapExchange object
 */
export declare const convertFromDbStableSwapExchange: (exchange: any) => StableSwapExchange;
/**
 * Converts a stable swap pool events from the cartographer db through
 * @param event - the stable swap pool event from the cartographer db as a JSON object
 * @returns an StableSwapPoolEvent object
 */
export declare const convertFromDbStableSwapPoolEvent: (event: any) => StableSwapPoolEvent;
//# sourceMappingURL=db.d.ts.map