"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReceivedAggregateRootSchema = exports.RootManagerMetaSchema = exports.ConnectorMetaSchema = exports.PropagatedRootSchema = exports.AggregatedRootSchema = exports.RootMessageSchema = exports.OriginMessageSchema = exports.XMessageSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
const primitives_1 = require("./primitives");
exports.XMessageSchema = typebox_1.Type.Object({
    leaf: typebox_1.Type.String(),
    originDomain: typebox_1.Type.String(),
    destinationDomain: typebox_1.Type.String(),
    transferId: typebox_1.Type.String(),
    origin: typebox_1.Type.Object({
        index: typebox_1.Type.Number({ minimum: 0 }),
        root: typebox_1.Type.String(),
        message: typebox_1.Type.String(),
    }),
    destination: typebox_1.Type.Optional(typebox_1.Type.Object({
        processed: typebox_1.Type.Boolean(),
        returnData: typebox_1.Type.String(),
    })),
});
exports.OriginMessageSchema = typebox_1.Type.Object({
    domain: typebox_1.Type.String(),
    transferId: typebox_1.Type.String(),
    destinationDomain: typebox_1.Type.String(),
    leaf: typebox_1.Type.String(),
    index: typebox_1.Type.Number({ minimum: 0 }),
    root: typebox_1.Type.String(),
    message: typebox_1.Type.String(),
});
exports.RootMessageSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    spokeDomain: typebox_1.Type.String(),
    hubDomain: typebox_1.Type.String(),
    root: typebox_1.Type.String(),
    caller: typebox_1.Type.String(),
    transactionHash: typebox_1.Type.String(),
    timestamp: typebox_1.Type.Number(),
    gasPrice: primitives_1.TIntegerString,
    gasLimit: primitives_1.TIntegerString,
    blockNumber: typebox_1.Type.Number(),
    processed: typebox_1.Type.Boolean(),
    count: typebox_1.Type.Number({ minimum: 0 }),
    sentTimestamp: typebox_1.Type.Optional(typebox_1.Type.Number()),
    sentTaskId: typebox_1.Type.Optional(primitives_1.TBytes32),
    relayerType: typebox_1.Type.Optional(typebox_1.Type.String()),
});
exports.AggregatedRootSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    domain: typebox_1.Type.String(),
    receivedRoot: typebox_1.Type.String(),
    index: typebox_1.Type.Number({ minimum: 0 }),
});
exports.PropagatedRootSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    aggregate: typebox_1.Type.String(),
    domainsHash: typebox_1.Type.String(),
    count: typebox_1.Type.Number({ minimum: 0 }),
});
exports.ConnectorMetaSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    spokeDomain: typebox_1.Type.String(),
    hubDomain: typebox_1.Type.String(),
    rootManager: typebox_1.Type.String(),
    mirrorConnector: typebox_1.Type.String(),
    amb: typebox_1.Type.String(),
});
exports.RootManagerMetaSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    connectors: typebox_1.Type.Array(typebox_1.Type.String()),
    domains: typebox_1.Type.Array(typebox_1.Type.String()),
});
exports.ReceivedAggregateRootSchema = typebox_1.Type.Object({
    id: typebox_1.Type.String(),
    root: typebox_1.Type.String(),
    domain: typebox_1.Type.String(),
    blockNumber: typebox_1.Type.Number(),
});
//# sourceMappingURL=amb.js.map