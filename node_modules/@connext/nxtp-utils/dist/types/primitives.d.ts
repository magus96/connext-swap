import { Static } from "@sinclair/typebox";
export type Address = string;
export type HexString = string;
export type PublicIdentifier = string;
export type PublicKey = string;
export type PrivateKey = string;
export type SignatureString = string;
export type UrlString = string;
export declare const TAddress: import("@sinclair/typebox").TString<string>;
export declare const TBytes32: import("@sinclair/typebox").TString<string>;
export declare const TIntegerString: import("@sinclair/typebox").TString<string>;
export declare const TUrl: import("@sinclair/typebox").TString<"uri">;
export declare const TChainId: import("@sinclair/typebox").TNumber;
export declare const TDecimalString: import("@sinclair/typebox").TString<string>;
export declare const TDatabaseConfig: import("@sinclair/typebox").TObject<{
    url: import("@sinclair/typebox").TString<"uri">;
}>;
export declare const TLogLevel: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"fatal">, import("@sinclair/typebox").TLiteral<"error">, import("@sinclair/typebox").TLiteral<"warn">, import("@sinclair/typebox").TLiteral<"info">, import("@sinclair/typebox").TLiteral<"debug">, import("@sinclair/typebox").TLiteral<"trace">, import("@sinclair/typebox").TLiteral<"silent">]>;
export declare const TAssetDescription: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString<string>;
    address: import("@sinclair/typebox").TString<string>;
    mainnetEquivalent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
}>;
export type AssetDescription = Static<typeof TAssetDescription>;
export declare const TChainConfig: import("@sinclair/typebox").TObject<{
    providers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    gasStations: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    confirmations: import("@sinclair/typebox").TInteger;
    deployments: import("@sinclair/typebox").TObject<{
        connext: import("@sinclair/typebox").TString<string>;
        relayerProxy: import("@sinclair/typebox").TString<string>;
    }>;
    assets: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        name: import("@sinclair/typebox").TString<string>;
        address: import("@sinclair/typebox").TString<string>;
        mainnetEquivalent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>>>;
}>;
export type ChainConfig = Static<typeof TChainConfig>;
export declare const TServerConfig: import("@sinclair/typebox").TObject<{
    pub: import("@sinclair/typebox").TObject<{
        port: import("@sinclair/typebox").TInteger;
        host: import("@sinclair/typebox").TString<"ipv4">;
    }>;
    sub: import("@sinclair/typebox").TObject<{
        port: import("@sinclair/typebox").TInteger;
        host: import("@sinclair/typebox").TString<"ipv4">;
    }>;
    requestLimit: import("@sinclair/typebox").TInteger;
    adminToken: import("@sinclair/typebox").TString<string>;
}>;
export declare const TOptionalPeripheralConfig: import("@sinclair/typebox").TObject<{
    port: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
    host: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
}>;
export declare const TRequiredPeripheralConfig: import("@sinclair/typebox").TObject<{
    port: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
    uri: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    host: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    user: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    pass: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    limit: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
}>;
//# sourceMappingURL=primitives.d.ts.map