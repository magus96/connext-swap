import { Static } from "@sinclair/typebox";
import { ExecutorDataSchema, RelayerTaskStatus } from "./relayer";
export declare enum ExecStatus {
    None = "None",
    Queued = "Queued",
    Sent = "Sent",
    Completed = "Completed",
    Cancelled = "Cancelled"
}
export declare const AdminSchema: import("@sinclair/typebox").TObject<{
    adminToken: import("@sinclair/typebox").TString<string>;
}>;
export type AdminRequest = Static<typeof AdminSchema>;
export declare const ClearCacheRequestSchema: import("@sinclair/typebox").TObject<{
    adminToken: import("@sinclair/typebox").TString<string>;
}>;
export type ClearCacheRequest = Static<typeof ClearCacheRequestSchema>;
export declare const SequencerApiErrorResponseSchema: import("@sinclair/typebox").TObject<{
    message: import("@sinclair/typebox").TString<string>;
    error: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        message: import("@sinclair/typebox").TString<string>;
        context: import("@sinclair/typebox").TAny;
        type: import("@sinclair/typebox").TString<string>;
        stack: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>>;
}>;
export type SequencerApiErrorResponse = Static<typeof SequencerApiErrorResponseSchema>;
export declare const ExecuteFastApiPostBidReqSchema: import("@sinclair/typebox").TObject<{
    routerVersion: import("@sinclair/typebox").TString<string>;
    transferId: import("@sinclair/typebox").TString<string>;
    origin: import("@sinclair/typebox").TString<string>;
    router: import("@sinclair/typebox").TString<string>;
    signatures: import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString<string>, import("@sinclair/typebox").TString<string>>;
}>;
export type ExecuteFastApiPostBidReq = Static<typeof ExecuteFastApiPostBidReqSchema>;
export declare const ExecuteFastApiBidResponseSchema: import("@sinclair/typebox").TObject<{
    message: import("@sinclair/typebox").TString<string>;
    transferId: import("@sinclair/typebox").TString<string>;
    router: import("@sinclair/typebox").TString<string>;
    error: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        message: import("@sinclair/typebox").TString<string>;
        context: import("@sinclair/typebox").TAny;
        type: import("@sinclair/typebox").TString<string>;
        stack: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>>;
}>;
export type ExecuteFastApiBidResponse = Static<typeof ExecuteFastApiBidResponseSchema>;
export declare const ExecuteFastApiGetAuctionsStatusResponseSchema: import("@sinclair/typebox").TObject<{
    bids: import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString<string>, import("@sinclair/typebox").TObject<{
        routerVersion: import("@sinclair/typebox").TString<string>;
        transferId: import("@sinclair/typebox").TString<string>;
        origin: import("@sinclair/typebox").TString<string>;
        router: import("@sinclair/typebox").TString<string>;
        signatures: import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString<string>, import("@sinclair/typebox").TString<string>>;
    }>>;
    status: import("@sinclair/typebox").TString<string>;
    attempts: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    taskId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    timestamps: import("@sinclair/typebox").TObject<{
        start: import("@sinclair/typebox").TString<string>;
        sent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>;
}>;
export type ExecuteFastApiGetExecStatusResponse = Static<typeof ExecuteFastApiGetAuctionsStatusResponseSchema>;
export declare const ExecuteFastApiGetQueuedResponseSchema: import("@sinclair/typebox").TObject<{
    queued: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
}>;
export type ExecuteFastApiGetQueuedResponse = Static<typeof ExecuteFastApiGetQueuedResponseSchema>;
export declare const ExecStatusRequestSchema: import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString<string>;
}>;
export type ExecStatusRequest = Static<typeof ExecStatusRequestSchema>;
export declare const ExecStatusResponseSchema: import("@sinclair/typebox").TObject<{
    transferId: import("@sinclair/typebox").TString<string>;
    status: import("@sinclair/typebox").TEnum<typeof ExecStatus>;
}>;
export type ExecStatusResponse = Static<typeof ExecStatusResponseSchema>;
export type ExecutorPostDataRequest = Static<typeof ExecutorDataSchema>;
export declare const ExecutorPostDataResponseSchema: import("@sinclair/typebox").TObject<{
    message: import("@sinclair/typebox").TString<string>;
    transferId: import("@sinclair/typebox").TString<string>;
    error: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        message: import("@sinclair/typebox").TString<string>;
        context: import("@sinclair/typebox").TAny;
        type: import("@sinclair/typebox").TString<string>;
        stack: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>>;
}>;
export type ExecutorPostDataResponse = Static<typeof ExecutorPostDataResponseSchema>;
export declare const AddLiquidityForRequestSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    adminToken: import("@sinclair/typebox").TString<string>;
}>, import("@sinclair/typebox").TObject<{
    routerAddress: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    chainId: import("@sinclair/typebox").TNumber;
    assetId: import("@sinclair/typebox").TString<string>;
    amount: import("@sinclair/typebox").TString<string>;
}>]>;
export type AddLiquidityForRequest = Static<typeof AddLiquidityForRequestSchema>;
export declare const AddLiquidityForResponseSchema: import("@sinclair/typebox").TObject<{
    transactionHash: import("@sinclair/typebox").TString<string>;
}>;
export type AddLiquidityForResponse = Static<typeof AddLiquidityForResponseSchema>;
export declare const RemoveLiquidityRequestSchema: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TObject<{
    adminToken: import("@sinclair/typebox").TString<string>;
}>, import("@sinclair/typebox").TObject<{
    recipientAddress: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    chainId: import("@sinclair/typebox").TNumber;
    assetId: import("@sinclair/typebox").TString<string>;
    amount: import("@sinclair/typebox").TString<string>;
}>]>;
export type RemoveLiquidityRequest = Static<typeof RemoveLiquidityRequestSchema>;
export declare const RemoveLiquidityResponseSchema: import("@sinclair/typebox").TObject<{
    transactionHash: import("@sinclair/typebox").TString<string>;
}>;
export type RemoveLiquidityResponse = Static<typeof RemoveLiquidityResponseSchema>;
export declare const RelayerApiFeeSchema: import("@sinclair/typebox").TObject<{
    chain: import("@sinclair/typebox").TInteger;
    amount: import("@sinclair/typebox").TString<string>;
    token: import("@sinclair/typebox").TString<string>;
}>;
export type RelayerApiFee = Static<typeof RelayerApiFeeSchema>;
export declare const RelayerApiPostTaskRequestParamsSchema: import("@sinclair/typebox").TObject<{
    to: import("@sinclair/typebox").TString<string>;
    data: import("@sinclair/typebox").TString<string>;
    fee: import("@sinclair/typebox").TObject<{
        chain: import("@sinclair/typebox").TInteger;
        amount: import("@sinclair/typebox").TString<string>;
        token: import("@sinclair/typebox").TString<string>;
    }>;
    apiKey: import("@sinclair/typebox").TString<string>;
}>;
export type RelayerApiPostTaskRequestParams = Static<typeof RelayerApiPostTaskRequestParamsSchema>;
export declare const RelayerApiPostTaskResponseSchema: import("@sinclair/typebox").TObject<{
    message: import("@sinclair/typebox").TString<string>;
    taskId: import("@sinclair/typebox").TString<string>;
}>;
export type RelayerApiPostTaskResponse = Static<typeof RelayerApiPostTaskResponseSchema>;
export declare const RelayerApiErrorResponseSchema: import("@sinclair/typebox").TObject<{
    message: import("@sinclair/typebox").TString<string>;
    error: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        message: import("@sinclair/typebox").TString<string>;
        context: import("@sinclair/typebox").TAny;
        type: import("@sinclair/typebox").TString<string>;
        stack: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>>;
}>;
export type RelayerApiErrorResponse = Static<typeof RelayerApiErrorResponseSchema>;
export declare const RelayerApiStatusResponseSchema: import("@sinclair/typebox").TObject<{
    chain: import("@sinclair/typebox").TString<string>;
    taskId: import("@sinclair/typebox").TString<string>;
    status: import("@sinclair/typebox").TEnum<typeof RelayerTaskStatus>;
    error: import("@sinclair/typebox").TString<string>;
}>;
export type RelayerApiStatusResponse = Static<typeof RelayerApiStatusResponseSchema>;
export type GelatoApiTaskRequestParams = {
    dest: string;
    data: string;
    token: string;
    relayerFee: string;
};
export type GelatoApiStatusResponse = {
    chain: string;
    taskId: string;
    taskState: string;
    lastCheck: {
        taskState: string;
        message: string;
        reason: string;
    };
    lastExecution: string;
};
//# sourceMappingURL=api.d.ts.map