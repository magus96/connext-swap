"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOwnableDeployments = void 0;
const helpers_1 = require("../../helpers");
const getOwnableDeployments = (chainId, connection, isHub, env) => {
    // Get all the Hub connectors, if applicable.
    const connectors = isHub
        ? (0, helpers_1.getHubConnectors)(chainId, env, connection)
        : [(0, helpers_1.getSpokeConnector)(chainId, env, connection)];
    const chainStr = `${chainId}`;
    const useStaging = env === "staging";
    const spokeDeployments = {
        SpokeConnector: isHub ? (0, helpers_1.getContract)("MainnetSpokeConnector", chainStr, useStaging, connection) : connectors[0],
        MerkleTreeManager: (0, helpers_1.getContract)(isHub ? "MerkleTreeManagerSpokeUpgradeBeaconProxy" : "MerkleTreeManagerUpgradeBeaconProxy", chainStr, useStaging, connection),
        UpgradeBeaconController: (0, helpers_1.getContract)("UpgradeBeaconController", chainStr, useStaging, connection),
        RelayerProxy: (0, helpers_1.getContract)(isHub ? "RelayerProxyHub" : "RelayerProxy", chainStr, useStaging, connection),
        WatcherManager: (0, helpers_1.getContract)("WatcherManager", chainStr, useStaging, connection),
    };
    return {
        execution: {
            Connext: (0, helpers_1.getContract)("Connext_DiamondProxy", chainStr, useStaging, connection),
            Unwrapper: (0, helpers_1.getContract)("Unwrapper", chainStr, false, connection), // no staging deployment
        },
        messaging: isHub
            ? {
                ...spokeDeployments,
                HubConnectors: connectors,
                RootManager: (0, helpers_1.getContract)("RootManager", chainStr, useStaging, connection),
                RootMerkleTreeManager: (0, helpers_1.getContract)("MerkleTreeManagerRootUpgradeBeaconProxy", chainStr, useStaging, connection),
            }
            : spokeDeployments,
    };
};
exports.getOwnableDeployments = getOwnableDeployments;
//# sourceMappingURL=deployments.js.map