"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InitConfigSchema = exports.InitHeaderConfigSchema = exports.AssetStackSchema = exports.AgentsSchema = exports.AgentStackSchema = void 0;
const nxtp_utils_1 = require("@connext/nxtp-utils");
const typebox_1 = require("@sinclair/typebox");
// NOTE: Agents will currently be allowlisted/blacklisted respectively on ALL domains.
exports.AgentStackSchema = typebox_1.Type.Object({
    allowlist: typebox_1.Type.Optional(typebox_1.Type.Array(nxtp_utils_1.TAddress)),
    blacklist: typebox_1.Type.Optional(typebox_1.Type.Array(nxtp_utils_1.TAddress)),
});
exports.AgentsSchema = typebox_1.Type.Object({
    relayers: typebox_1.Type.Optional(exports.AgentStackSchema),
    sequencers: typebox_1.Type.Optional(exports.AgentStackSchema),
    routers: typebox_1.Type.Optional(exports.AgentStackSchema),
    watchers: typebox_1.Type.Optional(exports.AgentStackSchema),
});
exports.AssetStackSchema = typebox_1.Type.Object({
    name: typebox_1.Type.String(),
    canonical: typebox_1.Type.Object({
        // The canonical domain of the asset.
        domain: typebox_1.Type.String(),
        // Address of the official canonical token on the canonical domain.
        address: typebox_1.Type.String(),
        // Decimals of the canonical token on the canonical domain
        decimals: typebox_1.Type.Optional(typebox_1.Type.Number()),
        // Liquidity cap -- lock on the amount custodied on mainnet + router liquidity
        // in wei units. If not defined, will not have a cap enforced
        cap: typebox_1.Type.Optional(typebox_1.Type.String()),
    }),
    representations: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.Object({
        // Address of the bridged asset on this domain.
        local: typebox_1.Type.Optional(typebox_1.Type.String()),
        // Address of the adopted asset on this domain.
        // NOTE: If adopted is specified, a stableswap will be initialized! If not
        // specified, then we assume the local asset is the adopted asset on this domain.
        adopted: typebox_1.Type.String(),
    })),
});
// NOTE: Used to do a sanity check when loading default config from json files
exports.InitHeaderConfigSchema = typebox_1.Type.Object({
    hub: typebox_1.Type.String(),
    assets: typebox_1.Type.Array(exports.AssetStackSchema),
    agents: exports.AgentsSchema,
});
exports.InitConfigSchema = typebox_1.Type.Intersect([
    exports.InitHeaderConfigSchema,
    typebox_1.Type.Object({
        supportedDomains: typebox_1.Type.Array(typebox_1.Type.String()),
    }),
]);
//# sourceMappingURL=types.js.map