"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = void 0;
exports.log = {
    prefix: {
        base: (args) => {
            const { chain, deployment, fullAddress } = args;
            const _address = deployment.contract.address;
            const address = fullAddress ? _address : `${_address.slice(0, 7)}..${_address.slice(37)}`;
            return `[${chain.toString().padEnd(12)}] [${address}] {${deployment.name}} `;
        },
        value: (args) => {
            const { chain, deployment, call, fullAddress } = args;
            return exports.log.prefix.base({ chain, deployment, fullAddress }) + `.${call.method}(${call.args.join(",")}) : `;
        },
    },
    info: {
        // Log a value read from contracts.
        value: (args) => {
            const { chain, deployment, call, value, updated, valid } = args;
            console.log(exports.log.prefix.value({ chain, deployment, call }) + `${value}${updated ? " !!!" : valid ? " âœ”" : ""}`);
        },
    },
    error: {
        // For when an asserted value is bad/incorrect.
        value: (args) => {
            const { chain, deployment, call, value, desired } = args;
            throw new Error(exports.log.prefix.value({ chain, deployment, call, fullAddress: true }) +
                `Value is invalid or incorrect and could not be updated. Expected: ${desired}; Actual: ${value}`);
        },
        // For when a method is not found.
        method: (args) => {
            const { deployment, method, callable } = args;
            throw new Error(`Method ${method} not found in contract ${deployment.name} functions! Is the ABI from the implementation ` +
                `contract? \nCallable methods: ${callable ? callable.join(",") : "None found!"}`);
        },
    },
};
//# sourceMappingURL=log.js.map