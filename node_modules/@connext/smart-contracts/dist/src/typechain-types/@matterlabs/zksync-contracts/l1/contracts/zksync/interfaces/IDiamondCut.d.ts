import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../../../../common";
export declare namespace Diamond {
    type FacetCutStruct = {
        facet: PromiseOrValue<string>;
        action: PromiseOrValue<BigNumberish>;
        isFreezable: PromiseOrValue<boolean>;
        selectors: PromiseOrValue<BytesLike>[];
    };
    type FacetCutStructOutput = [string, number, boolean, string[]] & {
        facet: string;
        action: number;
        isFreezable: boolean;
        selectors: string[];
    };
    type DiamondCutDataStruct = {
        facetCuts: Diamond.FacetCutStruct[];
        initAddress: PromiseOrValue<string>;
        initCalldata: PromiseOrValue<BytesLike>;
    };
    type DiamondCutDataStructOutput = [
        Diamond.FacetCutStructOutput[],
        string,
        string
    ] & {
        facetCuts: Diamond.FacetCutStructOutput[];
        initAddress: string;
        initCalldata: string;
    };
}
export interface IDiamondCutInterface extends utils.Interface {
    functions: {
        "approveEmergencyDiamondCutAsSecurityCouncilMember(bytes32)": FunctionFragment;
        "cancelDiamondCutProposal()": FunctionFragment;
        "emergencyFreezeDiamond()": FunctionFragment;
        "executeDiamondCutProposal(((address,uint8,bool,bytes4[])[],address,bytes))": FunctionFragment;
        "proposeDiamondCut((address,uint8,bool,bytes4[])[],address)": FunctionFragment;
        "unfreezeDiamond()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "approveEmergencyDiamondCutAsSecurityCouncilMember" | "cancelDiamondCutProposal" | "emergencyFreezeDiamond" | "executeDiamondCutProposal" | "proposeDiamondCut" | "unfreezeDiamond"): FunctionFragment;
    encodeFunctionData(functionFragment: "approveEmergencyDiamondCutAsSecurityCouncilMember", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "cancelDiamondCutProposal", values?: undefined): string;
    encodeFunctionData(functionFragment: "emergencyFreezeDiamond", values?: undefined): string;
    encodeFunctionData(functionFragment: "executeDiamondCutProposal", values: [Diamond.DiamondCutDataStruct]): string;
    encodeFunctionData(functionFragment: "proposeDiamondCut", values: [Diamond.FacetCutStruct[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "unfreezeDiamond", values?: undefined): string;
    decodeFunctionResult(functionFragment: "approveEmergencyDiamondCutAsSecurityCouncilMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelDiamondCutProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "emergencyFreezeDiamond", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeDiamondCutProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposeDiamondCut", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unfreezeDiamond", data: BytesLike): Result;
    events: {
        "DiamondCutProposal(tuple[],address)": EventFragment;
        "DiamondCutProposalCancelation()": EventFragment;
        "DiamondCutProposalExecution(tuple)": EventFragment;
        "EmergencyDiamondCutApproved(address)": EventFragment;
        "EmergencyFreeze()": EventFragment;
        "Unfreeze()": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "DiamondCutProposal"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DiamondCutProposalCancelation"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DiamondCutProposalExecution"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EmergencyDiamondCutApproved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EmergencyFreeze"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
}
export interface DiamondCutProposalEventObject {
    _facetCuts: Diamond.FacetCutStructOutput[];
    _initAddress: string;
}
export type DiamondCutProposalEvent = TypedEvent<[
    Diamond.FacetCutStructOutput[],
    string
], DiamondCutProposalEventObject>;
export type DiamondCutProposalEventFilter = TypedEventFilter<DiamondCutProposalEvent>;
export interface DiamondCutProposalCancelationEventObject {
}
export type DiamondCutProposalCancelationEvent = TypedEvent<[
], DiamondCutProposalCancelationEventObject>;
export type DiamondCutProposalCancelationEventFilter = TypedEventFilter<DiamondCutProposalCancelationEvent>;
export interface DiamondCutProposalExecutionEventObject {
    _diamondCut: Diamond.DiamondCutDataStructOutput;
}
export type DiamondCutProposalExecutionEvent = TypedEvent<[
    Diamond.DiamondCutDataStructOutput
], DiamondCutProposalExecutionEventObject>;
export type DiamondCutProposalExecutionEventFilter = TypedEventFilter<DiamondCutProposalExecutionEvent>;
export interface EmergencyDiamondCutApprovedEventObject {
    _address: string;
}
export type EmergencyDiamondCutApprovedEvent = TypedEvent<[
    string
], EmergencyDiamondCutApprovedEventObject>;
export type EmergencyDiamondCutApprovedEventFilter = TypedEventFilter<EmergencyDiamondCutApprovedEvent>;
export interface EmergencyFreezeEventObject {
}
export type EmergencyFreezeEvent = TypedEvent<[], EmergencyFreezeEventObject>;
export type EmergencyFreezeEventFilter = TypedEventFilter<EmergencyFreezeEvent>;
export interface UnfreezeEventObject {
}
export type UnfreezeEvent = TypedEvent<[], UnfreezeEventObject>;
export type UnfreezeEventFilter = TypedEventFilter<UnfreezeEvent>;
export interface IDiamondCut extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IDiamondCutInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        approveEmergencyDiamondCutAsSecurityCouncilMember(_diamondCutHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        cancelDiamondCutProposal(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        emergencyFreezeDiamond(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        executeDiamondCutProposal(_diamondCut: Diamond.DiamondCutDataStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        proposeDiamondCut(_facetCuts: Diamond.FacetCutStruct[], _initAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        unfreezeDiamond(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    approveEmergencyDiamondCutAsSecurityCouncilMember(_diamondCutHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    cancelDiamondCutProposal(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    emergencyFreezeDiamond(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    executeDiamondCutProposal(_diamondCut: Diamond.DiamondCutDataStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    proposeDiamondCut(_facetCuts: Diamond.FacetCutStruct[], _initAddress: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    unfreezeDiamond(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        approveEmergencyDiamondCutAsSecurityCouncilMember(_diamondCutHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        cancelDiamondCutProposal(overrides?: CallOverrides): Promise<void>;
        emergencyFreezeDiamond(overrides?: CallOverrides): Promise<void>;
        executeDiamondCutProposal(_diamondCut: Diamond.DiamondCutDataStruct, overrides?: CallOverrides): Promise<void>;
        proposeDiamondCut(_facetCuts: Diamond.FacetCutStruct[], _initAddress: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        unfreezeDiamond(overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "DiamondCutProposal(tuple[],address)"(_facetCuts?: null, _initAddress?: null): DiamondCutProposalEventFilter;
        DiamondCutProposal(_facetCuts?: null, _initAddress?: null): DiamondCutProposalEventFilter;
        "DiamondCutProposalCancelation()"(): DiamondCutProposalCancelationEventFilter;
        DiamondCutProposalCancelation(): DiamondCutProposalCancelationEventFilter;
        "DiamondCutProposalExecution(tuple)"(_diamondCut?: null): DiamondCutProposalExecutionEventFilter;
        DiamondCutProposalExecution(_diamondCut?: null): DiamondCutProposalExecutionEventFilter;
        "EmergencyDiamondCutApproved(address)"(_address?: null): EmergencyDiamondCutApprovedEventFilter;
        EmergencyDiamondCutApproved(_address?: null): EmergencyDiamondCutApprovedEventFilter;
        "EmergencyFreeze()"(): EmergencyFreezeEventFilter;
        EmergencyFreeze(): EmergencyFreezeEventFilter;
        "Unfreeze()"(): UnfreezeEventFilter;
        Unfreeze(): UnfreezeEventFilter;
    };
    estimateGas: {
        approveEmergencyDiamondCutAsSecurityCouncilMember(_diamondCutHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        cancelDiamondCutProposal(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        emergencyFreezeDiamond(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        executeDiamondCutProposal(_diamondCut: Diamond.DiamondCutDataStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        proposeDiamondCut(_facetCuts: Diamond.FacetCutStruct[], _initAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        unfreezeDiamond(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        approveEmergencyDiamondCutAsSecurityCouncilMember(_diamondCutHash: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        cancelDiamondCutProposal(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        emergencyFreezeDiamond(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        executeDiamondCutProposal(_diamondCut: Diamond.DiamondCutDataStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        proposeDiamondCut(_facetCuts: Diamond.FacetCutStruct[], _initAddress: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        unfreezeDiamond(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IDiamondCut.d.ts.map