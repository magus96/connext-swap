import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../../../../common";
export interface IAllowListInterface extends utils.Interface {
    functions: {
        "acceptOwner()": FunctionFragment;
        "canCall(address,address,bytes4)": FunctionFragment;
        "hasSpecialAccessToCall(address,address,bytes4)": FunctionFragment;
        "isAccessPublic(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "pendingOwner()": FunctionFragment;
        "setBatchPermissionToCall(address[],address[],bytes4[],bool[])": FunctionFragment;
        "setBatchPublicAccess(address[],bool[])": FunctionFragment;
        "setPendingOwner(address)": FunctionFragment;
        "setPermissionToCall(address,address,bytes4,bool)": FunctionFragment;
        "setPublicAccess(address,bool)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "acceptOwner" | "canCall" | "hasSpecialAccessToCall" | "isAccessPublic" | "owner" | "pendingOwner" | "setBatchPermissionToCall" | "setBatchPublicAccess" | "setPendingOwner" | "setPermissionToCall" | "setPublicAccess"): FunctionFragment;
    encodeFunctionData(functionFragment: "acceptOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "canCall", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "hasSpecialAccessToCall", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "isAccessPublic", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "pendingOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "setBatchPermissionToCall", values: [
        PromiseOrValue<string>[],
        PromiseOrValue<string>[],
        PromiseOrValue<BytesLike>[],
        PromiseOrValue<boolean>[]
    ]): string;
    encodeFunctionData(functionFragment: "setBatchPublicAccess", values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]): string;
    encodeFunctionData(functionFragment: "setPendingOwner", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setPermissionToCall", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "setPublicAccess", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    decodeFunctionResult(functionFragment: "acceptOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasSpecialAccessToCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAccessPublic", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBatchPermissionToCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setBatchPublicAccess", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPendingOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPermissionToCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setPublicAccess", data: BytesLike): Result;
    events: {
        "NewOwner(address)": EventFragment;
        "NewPendingOwner(address,address)": EventFragment;
        "UpdateCallPermission(address,address,bytes4,bool)": EventFragment;
        "UpdatePublicAccess(address,bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "NewOwner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "NewPendingOwner"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateCallPermission"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePublicAccess"): EventFragment;
}
export interface NewOwnerEventObject {
    newOwner: string;
}
export type NewOwnerEvent = TypedEvent<[string], NewOwnerEventObject>;
export type NewOwnerEventFilter = TypedEventFilter<NewOwnerEvent>;
export interface NewPendingOwnerEventObject {
    oldPendingOwner: string;
    newPendingOwner: string;
}
export type NewPendingOwnerEvent = TypedEvent<[
    string,
    string
], NewPendingOwnerEventObject>;
export type NewPendingOwnerEventFilter = TypedEventFilter<NewPendingOwnerEvent>;
export interface UpdateCallPermissionEventObject {
    caller: string;
    target: string;
    functionSig: string;
    status: boolean;
}
export type UpdateCallPermissionEvent = TypedEvent<[
    string,
    string,
    string,
    boolean
], UpdateCallPermissionEventObject>;
export type UpdateCallPermissionEventFilter = TypedEventFilter<UpdateCallPermissionEvent>;
export interface UpdatePublicAccessEventObject {
    target: string;
    newStatus: boolean;
}
export type UpdatePublicAccessEvent = TypedEvent<[
    string,
    boolean
], UpdatePublicAccessEventObject>;
export type UpdatePublicAccessEventFilter = TypedEventFilter<UpdatePublicAccessEvent>;
export interface IAllowList extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAllowListInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        acceptOwner(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        canCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        hasSpecialAccessToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>;
        isAccessPublic(_target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        pendingOwner(overrides?: CallOverrides): Promise<[string]>;
        setBatchPermissionToCall(_callers: PromiseOrValue<string>[], _targets: PromiseOrValue<string>[], _functionSigs: PromiseOrValue<BytesLike>[], _enables: PromiseOrValue<boolean>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setBatchPublicAccess(_targets: PromiseOrValue<string>[], _enables: PromiseOrValue<boolean>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPendingOwner(_newPendingOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPermissionToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, _enable: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setPublicAccess(_target: PromiseOrValue<string>, _enable: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    acceptOwner(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    canCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    hasSpecialAccessToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
    isAccessPublic(_target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    owner(overrides?: CallOverrides): Promise<string>;
    pendingOwner(overrides?: CallOverrides): Promise<string>;
    setBatchPermissionToCall(_callers: PromiseOrValue<string>[], _targets: PromiseOrValue<string>[], _functionSigs: PromiseOrValue<BytesLike>[], _enables: PromiseOrValue<boolean>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setBatchPublicAccess(_targets: PromiseOrValue<string>[], _enables: PromiseOrValue<boolean>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPendingOwner(_newPendingOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPermissionToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, _enable: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setPublicAccess(_target: PromiseOrValue<string>, _enable: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        acceptOwner(overrides?: CallOverrides): Promise<void>;
        canCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        hasSpecialAccessToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>;
        isAccessPublic(_target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        owner(overrides?: CallOverrides): Promise<string>;
        pendingOwner(overrides?: CallOverrides): Promise<string>;
        setBatchPermissionToCall(_callers: PromiseOrValue<string>[], _targets: PromiseOrValue<string>[], _functionSigs: PromiseOrValue<BytesLike>[], _enables: PromiseOrValue<boolean>[], overrides?: CallOverrides): Promise<void>;
        setBatchPublicAccess(_targets: PromiseOrValue<string>[], _enables: PromiseOrValue<boolean>[], overrides?: CallOverrides): Promise<void>;
        setPendingOwner(_newPendingOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        setPermissionToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, _enable: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        setPublicAccess(_target: PromiseOrValue<string>, _enable: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "NewOwner(address)"(newOwner?: PromiseOrValue<string> | null): NewOwnerEventFilter;
        NewOwner(newOwner?: PromiseOrValue<string> | null): NewOwnerEventFilter;
        "NewPendingOwner(address,address)"(oldPendingOwner?: PromiseOrValue<string> | null, newPendingOwner?: PromiseOrValue<string> | null): NewPendingOwnerEventFilter;
        NewPendingOwner(oldPendingOwner?: PromiseOrValue<string> | null, newPendingOwner?: PromiseOrValue<string> | null): NewPendingOwnerEventFilter;
        "UpdateCallPermission(address,address,bytes4,bool)"(caller?: PromiseOrValue<string> | null, target?: PromiseOrValue<string> | null, functionSig?: PromiseOrValue<BytesLike> | null, status?: null): UpdateCallPermissionEventFilter;
        UpdateCallPermission(caller?: PromiseOrValue<string> | null, target?: PromiseOrValue<string> | null, functionSig?: PromiseOrValue<BytesLike> | null, status?: null): UpdateCallPermissionEventFilter;
        "UpdatePublicAccess(address,bool)"(target?: PromiseOrValue<string> | null, newStatus?: null): UpdatePublicAccessEventFilter;
        UpdatePublicAccess(target?: PromiseOrValue<string> | null, newStatus?: null): UpdatePublicAccessEventFilter;
    };
    estimateGas: {
        acceptOwner(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        canCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        hasSpecialAccessToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        isAccessPublic(_target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;
        setBatchPermissionToCall(_callers: PromiseOrValue<string>[], _targets: PromiseOrValue<string>[], _functionSigs: PromiseOrValue<BytesLike>[], _enables: PromiseOrValue<boolean>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setBatchPublicAccess(_targets: PromiseOrValue<string>[], _enables: PromiseOrValue<boolean>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPendingOwner(_newPendingOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPermissionToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, _enable: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setPublicAccess(_target: PromiseOrValue<string>, _enable: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        acceptOwner(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        canCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hasSpecialAccessToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAccessPublic(_target: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setBatchPermissionToCall(_callers: PromiseOrValue<string>[], _targets: PromiseOrValue<string>[], _functionSigs: PromiseOrValue<BytesLike>[], _enables: PromiseOrValue<boolean>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setBatchPublicAccess(_targets: PromiseOrValue<string>[], _enables: PromiseOrValue<boolean>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPendingOwner(_newPendingOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPermissionToCall(_caller: PromiseOrValue<string>, _target: PromiseOrValue<string>, _functionSig: PromiseOrValue<BytesLike>, _enable: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setPublicAccess(_target: PromiseOrValue<string>, _enable: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IAllowList.d.ts.map