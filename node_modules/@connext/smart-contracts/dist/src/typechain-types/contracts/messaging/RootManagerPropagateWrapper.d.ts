import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface RootManagerPropagateWrapperInterface extends utils.Interface {
    functions: {
        "acceptProposedOwner()": FunctionFragment;
        "delay()": FunctionFragment;
        "owner()": FunctionFragment;
        "propagate(address[],uint256[],bytes[])": FunctionFragment;
        "proposeNewOwner(address)": FunctionFragment;
        "proposed()": FunctionFragment;
        "proposedTimestamp()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "renounced()": FunctionFragment;
        "rootManager()": FunctionFragment;
        "setRootManager(address)": FunctionFragment;
        "withdraw()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "acceptProposedOwner" | "delay" | "owner" | "propagate" | "proposeNewOwner" | "proposed" | "proposedTimestamp" | "renounceOwnership" | "renounced" | "rootManager" | "setRootManager" | "withdraw"): FunctionFragment;
    encodeFunctionData(functionFragment: "acceptProposedOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "delay", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "propagate", values: [
        PromiseOrValue<string>[],
        PromiseOrValue<BigNumberish>[],
        PromiseOrValue<BytesLike>[]
    ]): string;
    encodeFunctionData(functionFragment: "proposeNewOwner", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
    encodeFunctionData(functionFragment: "proposedTimestamp", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounced", values?: undefined): string;
    encodeFunctionData(functionFragment: "rootManager", values?: undefined): string;
    encodeFunctionData(functionFragment: "setRootManager", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
    decodeFunctionResult(functionFragment: "acceptProposedOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "propagate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposeNewOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proposedTimestamp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounced", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rootManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRootManager", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "FundsDeducted(uint256,uint256)": EventFragment;
        "FundsReceived(uint256,uint256)": EventFragment;
        "OwnershipProposed(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "RootManagerChanged(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "FundsDeducted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "FundsReceived"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipProposed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RootManagerChanged"): EventFragment;
}
export interface FundsDeductedEventObject {
    amount: BigNumber;
    balance: BigNumber;
}
export type FundsDeductedEvent = TypedEvent<[
    BigNumber,
    BigNumber
], FundsDeductedEventObject>;
export type FundsDeductedEventFilter = TypedEventFilter<FundsDeductedEvent>;
export interface FundsReceivedEventObject {
    amount: BigNumber;
    balance: BigNumber;
}
export type FundsReceivedEvent = TypedEvent<[
    BigNumber,
    BigNumber
], FundsReceivedEventObject>;
export type FundsReceivedEventFilter = TypedEventFilter<FundsReceivedEvent>;
export interface OwnershipProposedEventObject {
    proposedOwner: string;
}
export type OwnershipProposedEvent = TypedEvent<[
    string
], OwnershipProposedEventObject>;
export type OwnershipProposedEventFilter = TypedEventFilter<OwnershipProposedEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface RootManagerChangedEventObject {
    rootManager: string;
    oldRootManager: string;
}
export type RootManagerChangedEvent = TypedEvent<[
    string,
    string
], RootManagerChangedEventObject>;
export type RootManagerChangedEventFilter = TypedEventFilter<RootManagerChangedEvent>;
export interface RootManagerPropagateWrapper extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: RootManagerPropagateWrapperInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        acceptProposedOwner(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        delay(overrides?: CallOverrides): Promise<[BigNumber]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        propagate(_connectors: PromiseOrValue<string>[], _fees: PromiseOrValue<BigNumberish>[], _encodedData: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        proposeNewOwner(newlyProposed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        proposed(overrides?: CallOverrides): Promise<[string]>;
        proposedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounced(overrides?: CallOverrides): Promise<[boolean]>;
        rootManager(overrides?: CallOverrides): Promise<[string]>;
        setRootManager(_rootManager: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdraw(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    acceptProposedOwner(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    delay(overrides?: CallOverrides): Promise<BigNumber>;
    owner(overrides?: CallOverrides): Promise<string>;
    propagate(_connectors: PromiseOrValue<string>[], _fees: PromiseOrValue<BigNumberish>[], _encodedData: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    proposeNewOwner(newlyProposed: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    proposed(overrides?: CallOverrides): Promise<string>;
    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
    renounceOwnership(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounced(overrides?: CallOverrides): Promise<boolean>;
    rootManager(overrides?: CallOverrides): Promise<string>;
    setRootManager(_rootManager: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdraw(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        acceptProposedOwner(overrides?: CallOverrides): Promise<void>;
        delay(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<string>;
        propagate(_connectors: PromiseOrValue<string>[], _fees: PromiseOrValue<BigNumberish>[], _encodedData: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>;
        proposeNewOwner(newlyProposed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        proposed(overrides?: CallOverrides): Promise<string>;
        proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        renounced(overrides?: CallOverrides): Promise<boolean>;
        rootManager(overrides?: CallOverrides): Promise<string>;
        setRootManager(_rootManager: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdraw(overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "FundsDeducted(uint256,uint256)"(amount?: null, balance?: null): FundsDeductedEventFilter;
        FundsDeducted(amount?: null, balance?: null): FundsDeductedEventFilter;
        "FundsReceived(uint256,uint256)"(amount?: null, balance?: null): FundsReceivedEventFilter;
        FundsReceived(amount?: null, balance?: null): FundsReceivedEventFilter;
        "OwnershipProposed(address)"(proposedOwner?: PromiseOrValue<string> | null): OwnershipProposedEventFilter;
        OwnershipProposed(proposedOwner?: PromiseOrValue<string> | null): OwnershipProposedEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "RootManagerChanged(address,address)"(rootManager?: null, oldRootManager?: null): RootManagerChangedEventFilter;
        RootManagerChanged(rootManager?: null, oldRootManager?: null): RootManagerChangedEventFilter;
    };
    estimateGas: {
        acceptProposedOwner(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        delay(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        propagate(_connectors: PromiseOrValue<string>[], _fees: PromiseOrValue<BigNumberish>[], _encodedData: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        proposeNewOwner(newlyProposed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        proposed(overrides?: CallOverrides): Promise<BigNumber>;
        proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounced(overrides?: CallOverrides): Promise<BigNumber>;
        rootManager(overrides?: CallOverrides): Promise<BigNumber>;
        setRootManager(_rootManager: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdraw(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        acceptProposedOwner(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        propagate(_connectors: PromiseOrValue<string>[], _fees: PromiseOrValue<BigNumberish>[], _encodedData: PromiseOrValue<BytesLike>[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        proposeNewOwner(newlyProposed: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        proposedTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounced(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rootManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setRootManager(_rootManager: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdraw(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=RootManagerPropagateWrapper.d.ts.map