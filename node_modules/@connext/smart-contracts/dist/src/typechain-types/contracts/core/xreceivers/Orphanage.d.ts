import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../common";
export interface OrphanageInterface extends utils.Interface {
    functions: {
        "checkOrphans(address)": FunctionFragment;
        "checkOrphansFor(address,address)": FunctionFragment;
        "orphanedNativeTokens(address)": FunctionFragment;
        "orphanedTokens(address,address)": FunctionFragment;
        "saveOrphans(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "checkOrphans" | "checkOrphansFor" | "orphanedNativeTokens" | "orphanedTokens" | "saveOrphans"): FunctionFragment;
    encodeFunctionData(functionFragment: "checkOrphans", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "checkOrphansFor", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "orphanedNativeTokens", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "orphanedTokens", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "saveOrphans", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "checkOrphans", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkOrphansFor", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "orphanedNativeTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "orphanedTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "saveOrphans", data: BytesLike): Result;
    events: {
        "OrphanedNativeTokens(uint256,address,bytes)": EventFragment;
        "OrphanedTokens(address,uint256,address,bytes)": EventFragment;
        "SavedOrphans(address,uint256,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OrphanedNativeTokens"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OrphanedTokens"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SavedOrphans"): EventFragment;
}
export interface OrphanedNativeTokensEventObject {
    amount: BigNumber;
    parent: string;
    reason: string;
}
export type OrphanedNativeTokensEvent = TypedEvent<[
    BigNumber,
    string,
    string
], OrphanedNativeTokensEventObject>;
export type OrphanedNativeTokensEventFilter = TypedEventFilter<OrphanedNativeTokensEvent>;
export interface OrphanedTokensEventObject {
    token: string;
    amount: BigNumber;
    parent: string;
    reason: string;
}
export type OrphanedTokensEvent = TypedEvent<[
    string,
    BigNumber,
    string,
    string
], OrphanedTokensEventObject>;
export type OrphanedTokensEventFilter = TypedEventFilter<OrphanedTokensEvent>;
export interface SavedOrphansEventObject {
    token: string;
    amount: BigNumber;
    parent: string;
}
export type SavedOrphansEvent = TypedEvent<[
    string,
    BigNumber,
    string
], SavedOrphansEventObject>;
export type SavedOrphansEventFilter = TypedEventFilter<SavedOrphansEvent>;
export interface Orphanage extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: OrphanageInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        checkOrphans(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        checkOrphansFor(token: PromiseOrValue<string>, parent: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        orphanedNativeTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        orphanedTokens(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        saveOrphans(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    checkOrphans(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    checkOrphansFor(token: PromiseOrValue<string>, parent: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    orphanedNativeTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    orphanedTokens(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    saveOrphans(token: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        checkOrphans(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        checkOrphansFor(token: PromiseOrValue<string>, parent: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        orphanedNativeTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        orphanedTokens(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        saveOrphans(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OrphanedNativeTokens(uint256,address,bytes)"(amount?: PromiseOrValue<BigNumberish> | null, parent?: PromiseOrValue<string> | null, reason?: null): OrphanedNativeTokensEventFilter;
        OrphanedNativeTokens(amount?: PromiseOrValue<BigNumberish> | null, parent?: PromiseOrValue<string> | null, reason?: null): OrphanedNativeTokensEventFilter;
        "OrphanedTokens(address,uint256,address,bytes)"(token?: PromiseOrValue<string> | null, amount?: PromiseOrValue<BigNumberish> | null, parent?: PromiseOrValue<string> | null, reason?: null): OrphanedTokensEventFilter;
        OrphanedTokens(token?: PromiseOrValue<string> | null, amount?: PromiseOrValue<BigNumberish> | null, parent?: PromiseOrValue<string> | null, reason?: null): OrphanedTokensEventFilter;
        "SavedOrphans(address,uint256,address)"(token?: PromiseOrValue<string> | null, amount?: PromiseOrValue<BigNumberish> | null, parent?: PromiseOrValue<string> | null): SavedOrphansEventFilter;
        SavedOrphans(token?: PromiseOrValue<string> | null, amount?: PromiseOrValue<BigNumberish> | null, parent?: PromiseOrValue<string> | null): SavedOrphansEventFilter;
    };
    estimateGas: {
        checkOrphans(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        checkOrphansFor(token: PromiseOrValue<string>, parent: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        orphanedNativeTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        orphanedTokens(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        saveOrphans(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        checkOrphans(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        checkOrphansFor(token: PromiseOrValue<string>, parent: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        orphanedNativeTokens(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        orphanedTokens(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        saveOrphans(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=Orphanage.d.ts.map