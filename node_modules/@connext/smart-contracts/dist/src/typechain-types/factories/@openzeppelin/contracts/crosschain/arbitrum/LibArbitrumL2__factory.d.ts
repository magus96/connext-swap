import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type { LibArbitrumL2, LibArbitrumL2Interface } from "../../../../../@openzeppelin/contracts/crosschain/arbitrum/LibArbitrumL2";
type LibArbitrumL2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class LibArbitrumL2__factory extends ContractFactory {
    constructor(...args: LibArbitrumL2ConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<LibArbitrumL2>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): LibArbitrumL2;
    connect(signer: Signer): LibArbitrumL2__factory;
    static readonly bytecode = "0x6091610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063bf0a12cf146038575b600080fd5b603f606481565b6040516001600160a01b03909116815260200160405180910390f3fea2646970667358221220d2e272bf1f5aea9a9abf5612af6371a211938b34b1ca41232fa259eb72506a4564736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "ARBSYS";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): LibArbitrumL2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): LibArbitrumL2;
}
export {};
//# sourceMappingURL=LibArbitrumL2__factory.d.ts.map