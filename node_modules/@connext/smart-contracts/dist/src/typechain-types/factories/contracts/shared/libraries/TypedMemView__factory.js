"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedMemView__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "actual",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "expected",
                type: "uint256",
            },
        ],
        name: "TypedMemView__assertType_typeAssertionFailed",
        type: "error",
    },
    {
        inputs: [],
        name: "TypedMemView__assertValid_validityAssertionFailed",
        type: "error",
    },
    {
        inputs: [],
        name: "TypedMemView__index_indexMoreThan32Bytes",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "loc",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "len",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "slice",
                type: "uint256",
            },
        ],
        name: "TypedMemView__index_overrun",
        type: "error",
    },
    {
        inputs: [],
        name: "TypedMemView__unsafeCopyTo_identityOOG",
        type: "error",
    },
    {
        inputs: [],
        name: "TypedMemView__unsafeCopyTo_invalidPointer",
        type: "error",
    },
    {
        inputs: [],
        name: "TypedMemView__unsafeCopyTo_nullPointer",
        type: "error",
    },
    {
        inputs: [],
        name: "NULL",
        outputs: [
            {
                internalType: "bytes29",
                name: "",
                type: "bytes29",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x6091610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f26be3fc146038575b600080fd5b604262ffffff1981565b60405162ffffff19909116815260200160405180910390f3fea26469706673582212204d0c4bbe6ccaec2f306c482b9615aaffad37815b992241cfc24264eedc1ef1e264736f6c63430008110033";
const isSuperArgs = (xs) => xs.length > 1;
class TypedMemView__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.TypedMemView__factory = TypedMemView__factory;
TypedMemView__factory.bytecode = _bytecode;
TypedMemView__factory.abi = _abi;
//# sourceMappingURL=TypedMemView__factory.js.map