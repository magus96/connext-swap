import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type { BaseConnextFacet, BaseConnextFacetInterface } from "../../../../../contracts/core/connext/facets/BaseConnextFacet";
type BaseConnextFacetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class BaseConnextFacet__factory extends ContractFactory {
    constructor(...args: BaseConnextFacetConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<BaseConnextFacet>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): BaseConnextFacet;
    connect(signer: Signer): BaseConnextFacet__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212201da1fe15af0381d36cd01d134849cdb8f45afff432402c6a94d1e49b44cab33c64736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__getAdoptedAsset_assetNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__getApprovedCanonicalId_notAllowlisted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__nonReentrant_reentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__nonXCallReentrant_reentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyOwner_notOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyProposed_notProposedOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__whenNotPaused_paused";
        readonly type: "error";
    }];
    static createInterface(): BaseConnextFacetInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): BaseConnextFacet;
}
export {};
//# sourceMappingURL=BaseConnextFacet__factory.d.ts.map