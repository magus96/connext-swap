import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Multichain, MultichainInterface } from "../../../../../contracts/messaging/interfaces/ambs/Multichain";
export declare class Multichain__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }, {
            readonly internalType: "address";
            readonly name: "_fallback";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_toChainID";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_flags";
            readonly type: "uint256";
        }];
        readonly name: "anyCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_appID";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "_toChainID";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_dataLength";
            readonly type: "uint256";
        }];
        readonly name: "calcSrcFees";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "context";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "fromChainID";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "executor";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "executor";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MultichainInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Multichain;
}
//# sourceMappingURL=Multichain__factory.d.ts.map