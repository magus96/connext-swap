import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type { AssetLogic, AssetLogicInterface } from "../../../../../contracts/core/connext/libraries/AssetLogic";
type AssetLogicConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class AssetLogic__factory extends ContractFactory {
    constructor(...args: AssetLogicConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<AssetLogic>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): AssetLogic;
    connect(signer: Signer): AssetLogic__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209e978a0cdf3084c52c4fd1673e22aa7a086ea102387ff29a97d49c1dc0e3865164736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "AssetLogic__getConfig_notRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AssetLogic__getTokenIndexFromStableSwapPool_notExist";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AssetLogic__handleIncomingAsset_feeOnTransferNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AssetLogic__handleIncomingAsset_nativeAssetNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AssetLogic__handleOutgoingAsset_notNative";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AssetLogic__swapAsset_externalStableSwapPoolDoesNotExist";
        readonly type: "error";
    }];
    static createInterface(): AssetLogicInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): AssetLogic;
}
export {};
//# sourceMappingURL=AssetLogic__factory.d.ts.map