import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { TypedMemView, TypedMemViewInterface } from "../../../../contracts/shared/libraries/TypedMemView";
type TypedMemViewConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TypedMemView__factory extends ContractFactory {
    constructor(...args: TypedMemViewConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TypedMemView>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TypedMemView;
    connect(signer: Signer): TypedMemView__factory;
    static readonly bytecode = "0x6091610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063f26be3fc146038575b600080fd5b604262ffffff1981565b60405162ffffff19909116815260200160405180910390f3fea26469706673582212204d0c4bbe6ccaec2f306c482b9615aaffad37815b992241cfc24264eedc1ef1e264736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }];
        readonly name: "TypedMemView__assertType_typeAssertionFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TypedMemView__assertValid_validityAssertionFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TypedMemView__index_indexMoreThan32Bytes";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "loc";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "len";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "slice";
            readonly type: "uint256";
        }];
        readonly name: "TypedMemView__index_overrun";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TypedMemView__unsafeCopyTo_identityOOG";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TypedMemView__unsafeCopyTo_invalidPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TypedMemView__unsafeCopyTo_nullPointer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NULL";
        readonly outputs: readonly [{
            readonly internalType: "bytes29";
            readonly name: "";
            readonly type: "bytes29";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): TypedMemViewInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TypedMemView;
}
export {};
//# sourceMappingURL=TypedMemView__factory.d.ts.map