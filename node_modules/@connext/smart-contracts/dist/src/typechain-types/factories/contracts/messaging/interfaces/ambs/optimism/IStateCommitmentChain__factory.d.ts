import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IStateCommitmentChain, IStateCommitmentChainInterface } from "../../../../../../contracts/messaging/interfaces/ambs/optimism/IStateCommitmentChain";
export declare class IStateCommitmentChain__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "_batchIndex";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "_batchRoot";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_batchSize";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_prevTotalElements";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_extraData";
            readonly type: "bytes";
        }];
        readonly name: "StateBatchAppended";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "_batchIndex";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "_batchRoot";
            readonly type: "bytes32";
        }];
        readonly name: "StateBatchDeleted";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "_batch";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "_shouldStartAtElement";
            readonly type: "uint256";
        }];
        readonly name: "appendStateBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "batchIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "batchRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "batchSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "prevTotalElements";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ChainBatchHeader";
            readonly name: "_batchHeader";
            readonly type: "tuple";
        }];
        readonly name: "deleteStateBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getLastSequencerTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_lastSequencerTimestamp";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTotalBatches";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_totalBatches";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTotalElements";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_totalElements";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "batchIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "batchRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "batchSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "prevTotalElements";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ChainBatchHeader";
            readonly name: "_batchHeader";
            readonly type: "tuple";
        }];
        readonly name: "insideFraudProofWindow";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_inside";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_element";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "batchIndex";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "batchRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "batchSize";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "prevTotalElements";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "extraData";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ChainBatchHeader";
            readonly name: "_batchHeader";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "index";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32[]";
                readonly name: "siblings";
                readonly type: "bytes32[]";
            }];
            readonly internalType: "struct ChainInclusionProof";
            readonly name: "_proof";
            readonly type: "tuple";
        }];
        readonly name: "verifyStateCommitment";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_verified";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IStateCommitmentChainInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IStateCommitmentChain;
}
//# sourceMappingURL=IStateCommitmentChain__factory.d.ts.map