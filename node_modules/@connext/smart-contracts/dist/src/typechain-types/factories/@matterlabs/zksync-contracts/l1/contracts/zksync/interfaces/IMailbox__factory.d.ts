import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IMailbox, IMailboxInterface } from "../../../../../../../@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IMailbox";
export declare class IMailbox__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "txId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "txHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "expirationBlock";
            readonly type: "uint64";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "txType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "from";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "to";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "ergsLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "ergsPerPubdataByteLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxFeePerErg";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxPriorityFeePerErg";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "paymaster";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256[6]";
                readonly name: "reserved";
                readonly type: "uint256[6]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "signature";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "factoryDeps";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "paymasterInput";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "reservedDynamic";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMailbox.L2CanonicalTransaction";
            readonly name: "transaction";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes[]";
            readonly name: "factoryDeps";
            readonly type: "bytes[]";
        }];
        readonly name: "NewPriorityRequest";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_gasPrice";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_ergsLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "_calldataLength";
            readonly type: "uint32";
        }];
        readonly name: "l2TransactionBaseCost";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_blockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_index";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "l2ShardId";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isService";
                readonly type: "bool";
            }, {
                readonly internalType: "uint16";
                readonly name: "txNumberInBlock";
                readonly type: "uint16";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "key";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "value";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct L2Log";
            readonly name: "_log";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_proof";
            readonly type: "bytes32[]";
        }];
        readonly name: "proveL2LogInclusion";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_blockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_index";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint16";
                readonly name: "txNumberInBlock";
                readonly type: "uint16";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct L2Message";
            readonly name: "_message";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_proof";
            readonly type: "bytes32[]";
        }];
        readonly name: "proveL2MessageInclusion";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_contractAddressL2";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_l2Value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_ergsLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_factoryDeps";
            readonly type: "bytes[]";
        }];
        readonly name: "requestL2Transaction";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "txHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_txId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_l2Value";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_contractAddressL2";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_ergsLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_factoryDeps";
            readonly type: "bytes[]";
        }];
        readonly name: "serializeL2Transaction";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "txType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "from";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "to";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "ergsLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "ergsPerPubdataByteLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxFeePerErg";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxPriorityFeePerErg";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "paymaster";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256[6]";
                readonly name: "reserved";
                readonly type: "uint256[6]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "signature";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "factoryDeps";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "paymasterInput";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "reservedDynamic";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IMailbox.L2CanonicalTransaction";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): IMailboxInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IMailbox;
}
//# sourceMappingURL=IMailbox__factory.d.ts.map