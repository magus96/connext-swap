import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IZkSync, IZkSyncInterface } from "../../../../../../../@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IZkSync";
export declare class IZkSync__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }];
        readonly name: "BlockCommit";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "blockNumber";
            readonly type: "uint256";
        }];
        readonly name: "BlockExecution";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "totalBlocksCommitted";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "totalBlocksVerified";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "totalBlocksExecuted";
            readonly type: "uint256";
        }];
        readonly name: "BlocksRevert";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facet";
                readonly type: "address";
            }, {
                readonly internalType: "enum Diamond.Action";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isFreezable";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct Diamond.FacetCut[]";
            readonly name: "_facetCuts";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_initAddress";
            readonly type: "address";
        }];
        readonly name: "DiamondCutProposal";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "DiamondCutProposalCancelation";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "facet";
                    readonly type: "address";
                }, {
                    readonly internalType: "enum Diamond.Action";
                    readonly name: "action";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "bool";
                    readonly name: "isFreezable";
                    readonly type: "bool";
                }, {
                    readonly internalType: "bytes4[]";
                    readonly name: "selectors";
                    readonly type: "bytes4[]";
                }];
                readonly internalType: "struct Diamond.FacetCut[]";
                readonly name: "facetCuts";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "address";
                readonly name: "initAddress";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "initCalldata";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct Diamond.DiamondCutData";
            readonly name: "_diamondCut";
            readonly type: "tuple";
        }];
        readonly name: "DiamondCutProposalExecution";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_address";
            readonly type: "address";
        }];
        readonly name: "EmergencyDiamondCutApproved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EmergencyFreeze";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isPorterAvailable";
            readonly type: "bool";
        }];
        readonly name: "IsPorterAvailableStatusUpdate";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newGovernor";
            readonly type: "address";
        }];
        readonly name: "NewGovernor";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousBytecodeHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newBytecodeHash";
            readonly type: "bytes32";
        }];
        readonly name: "NewL2BootloaderBytecodeHash";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "previousBytecodeHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "newBytecodeHash";
            readonly type: "bytes32";
        }];
        readonly name: "NewL2DefaultAccountBytecodeHash";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldPendingGovernor";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newPendingGovernor";
            readonly type: "address";
        }];
        readonly name: "NewPendingGovernor";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "txId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "txHash";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "expirationBlock";
            readonly type: "uint64";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "txType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "from";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "to";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "ergsLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "ergsPerPubdataByteLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxFeePerErg";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxPriorityFeePerErg";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "paymaster";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256[6]";
                readonly name: "reserved";
                readonly type: "uint256[6]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "signature";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "factoryDeps";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "paymasterInput";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "reservedDynamic";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct IMailbox.L2CanonicalTransaction";
            readonly name: "transaction";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes[]";
            readonly name: "factoryDeps";
            readonly type: "bytes[]";
        }];
        readonly name: "NewPriorityRequest";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "Unfreeze";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "validatorAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isActive";
            readonly type: "bool";
        }];
        readonly name: "ValidatorStatusUpdate";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "acceptGovernor";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_diamondCutHash";
            readonly type: "bytes32";
        }];
        readonly name: "approveEmergencyDiamondCutAsSecurityCouncilMember";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "cancelDiamondCutProposal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "blockNumber";
                readonly type: "uint64";
            }, {
                readonly internalType: "bytes32";
                readonly name: "blockHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "indexRepeatedStorageChanges";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint256";
                readonly name: "numberOfLayer1Txs";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "priorityOperationsHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "l2LogsTreeRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "timestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "commitment";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct IExecutor.StoredBlockInfo";
            readonly name: "_lastCommittedBlockData";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "blockNumber";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "timestamp";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "indexRepeatedStorageChanges";
                readonly type: "uint64";
            }, {
                readonly internalType: "bytes32";
                readonly name: "newStateRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint16";
                readonly name: "ergsPerCodeDecommittmentWord";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "numberOfLayer1Txs";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "l2LogsTreeRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "priorityOperationsHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "initialStorageChanges";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "repeatedStorageChanges";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "l2Logs";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "l2ArbitraryLengthMessages";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "factoryDeps";
                readonly type: "bytes[]";
            }];
            readonly internalType: "struct IExecutor.CommitBlockInfo[]";
            readonly name: "_newBlocksData";
            readonly type: "tuple[]";
        }];
        readonly name: "commitBlocks";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "emergencyFreezeDiamond";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "blockNumber";
                readonly type: "uint64";
            }, {
                readonly internalType: "bytes32";
                readonly name: "blockHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "indexRepeatedStorageChanges";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint256";
                readonly name: "numberOfLayer1Txs";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "priorityOperationsHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "l2LogsTreeRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "timestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "commitment";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct IExecutor.StoredBlockInfo[]";
            readonly name: "_blocksData";
            readonly type: "tuple[]";
        }];
        readonly name: "executeBlocks";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "facet";
                    readonly type: "address";
                }, {
                    readonly internalType: "enum Diamond.Action";
                    readonly name: "action";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "bool";
                    readonly name: "isFreezable";
                    readonly type: "bool";
                }, {
                    readonly internalType: "bytes4[]";
                    readonly name: "selectors";
                    readonly type: "bytes4[]";
                }];
                readonly internalType: "struct Diamond.FacetCut[]";
                readonly name: "facetCuts";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "address";
                readonly name: "initAddress";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "initCalldata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Diamond.DiamondCutData";
            readonly name: "_diamondCut";
            readonly type: "tuple";
        }];
        readonly name: "executeDiamondCutProposal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_selector";
            readonly type: "bytes4";
        }];
        readonly name: "facetAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "facet";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "facetAddresses";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "facets";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_facet";
            readonly type: "address";
        }];
        readonly name: "facetFunctionSelectors";
        readonly outputs: readonly [{
            readonly internalType: "bytes4[]";
            readonly name: "";
            readonly type: "bytes4[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "facets";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "addr";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct IGetters.Facet[]";
            readonly name: "";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getFirstUnprocessedPriorityTx";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getGovernor";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTotalBlocksCommitted";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTotalBlocksExecuted";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTotalBlocksVerified";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getTotalPriorityTxs";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getVerifier";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_facet";
            readonly type: "address";
        }];
        readonly name: "isFacetFreezable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_selector";
            readonly type: "bytes4";
        }];
        readonly name: "isFunctionFreezable";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_address";
            readonly type: "address";
        }];
        readonly name: "isValidator";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "blockNumber";
            readonly type: "uint32";
        }];
        readonly name: "l2LogsRootHash";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_gasPrice";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_ergsLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "_calldataLength";
            readonly type: "uint32";
        }];
        readonly name: "l2TransactionBaseCost";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facet";
                readonly type: "address";
            }, {
                readonly internalType: "enum Diamond.Action";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isFreezable";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct Diamond.FacetCut[]";
            readonly name: "_facetCuts";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "_initAddress";
            readonly type: "address";
        }];
        readonly name: "proposeDiamondCut";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "blockNumber";
                readonly type: "uint64";
            }, {
                readonly internalType: "bytes32";
                readonly name: "blockHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "indexRepeatedStorageChanges";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint256";
                readonly name: "numberOfLayer1Txs";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "priorityOperationsHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "l2LogsTreeRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "timestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "commitment";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct IExecutor.StoredBlockInfo";
            readonly name: "_prevBlock";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "blockNumber";
                readonly type: "uint64";
            }, {
                readonly internalType: "bytes32";
                readonly name: "blockHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "indexRepeatedStorageChanges";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint256";
                readonly name: "numberOfLayer1Txs";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "priorityOperationsHash";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "l2LogsTreeRoot";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "timestamp";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "commitment";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct IExecutor.StoredBlockInfo[]";
            readonly name: "_committedBlocks";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "recurisiveAggregationInput";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "serializedProof";
                readonly type: "uint256[]";
            }];
            readonly internalType: "struct IExecutor.ProofInput";
            readonly name: "_proof";
            readonly type: "tuple";
        }];
        readonly name: "proveBlocks";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_blockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_index";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "l2ShardId";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isService";
                readonly type: "bool";
            }, {
                readonly internalType: "uint16";
                readonly name: "txNumberInBlock";
                readonly type: "uint16";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "key";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "value";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct L2Log";
            readonly name: "_log";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_proof";
            readonly type: "bytes32[]";
        }];
        readonly name: "proveL2LogInclusion";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_blockNumber";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_index";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint16";
                readonly name: "txNumberInBlock";
                readonly type: "uint16";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct L2Message";
            readonly name: "_message";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32[]";
            readonly name: "_proof";
            readonly type: "bytes32[]";
        }];
        readonly name: "proveL2MessageInclusion";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_contractAddressL2";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_l2Value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_ergsLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_factoryDeps";
            readonly type: "bytes[]";
        }];
        readonly name: "requestL2Transaction";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "txHash";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_blocksToRevert";
            readonly type: "uint256";
        }];
        readonly name: "revertBlocks";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_txId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_l2Value";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_contractAddressL2";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "_ergsLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "_factoryDeps";
            readonly type: "bytes[]";
        }];
        readonly name: "serializeL2Transaction";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "txType";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "from";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "to";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "ergsLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "ergsPerPubdataByteLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxFeePerErg";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxPriorityFeePerErg";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "paymaster";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256[6]";
                readonly name: "reserved";
                readonly type: "uint256[6]";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "signature";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "factoryDeps";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "bytes";
                readonly name: "paymasterInput";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "reservedDynamic";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IMailbox.L2CanonicalTransaction";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_l2BootloaderBytecodeHash";
            readonly type: "bytes32";
        }];
        readonly name: "setL2BootloaderBytecodeHash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_l2DefaultAccountBytecodeHash";
            readonly type: "bytes32";
        }];
        readonly name: "setL2DefaultAccountBytecodeHash";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_newPendingGovernor";
            readonly type: "address";
        }];
        readonly name: "setPendingGovernor";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bool";
            readonly name: "_isPorterAvailable";
            readonly type: "bool";
        }];
        readonly name: "setPorterAvailability";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_validator";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "_active";
            readonly type: "bool";
        }];
        readonly name: "setValidator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unfreezeDiamond";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IZkSyncInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IZkSync;
}
//# sourceMappingURL=IZkSync__factory.d.ts.map