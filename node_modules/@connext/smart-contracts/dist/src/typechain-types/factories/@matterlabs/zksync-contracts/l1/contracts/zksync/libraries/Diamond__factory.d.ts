import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../common";
import type { Diamond, DiamondInterface } from "../../../../../../../@matterlabs/zksync-contracts/l1/contracts/zksync/libraries/Diamond";
type DiamondConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Diamond__factory extends ContractFactory {
    constructor(...args: DiamondConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Diamond>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Diamond;
    connect(signer: Signer): Diamond__factory;
    static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fe62b76397b91d8a8051e4652d559ff6e10ab834c7cbda53fcebaeea60c7e32064736f6c63430008110033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facet";
                readonly type: "address";
            }, {
                readonly internalType: "enum Diamond.Action";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isFreezable";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct Diamond.FacetCut[]";
            readonly name: "facetCuts";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "initAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "initCalldata";
            readonly type: "bytes";
        }];
        readonly name: "DiamondCut";
        readonly type: "event";
    }];
    static createInterface(): DiamondInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Diamond;
}
export {};
//# sourceMappingURL=Diamond__factory.d.ts.map