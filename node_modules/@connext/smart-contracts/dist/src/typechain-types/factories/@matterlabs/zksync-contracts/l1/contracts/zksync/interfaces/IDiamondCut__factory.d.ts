import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IDiamondCut, IDiamondCutInterface } from "../../../../../../../@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IDiamondCut";
export declare class IDiamondCut__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facet";
                readonly type: "address";
            }, {
                readonly internalType: "enum Diamond.Action";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isFreezable";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct Diamond.FacetCut[]";
            readonly name: "_facetCuts";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_initAddress";
            readonly type: "address";
        }];
        readonly name: "DiamondCutProposal";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "DiamondCutProposalCancelation";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "facet";
                    readonly type: "address";
                }, {
                    readonly internalType: "enum Diamond.Action";
                    readonly name: "action";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "bool";
                    readonly name: "isFreezable";
                    readonly type: "bool";
                }, {
                    readonly internalType: "bytes4[]";
                    readonly name: "selectors";
                    readonly type: "bytes4[]";
                }];
                readonly internalType: "struct Diamond.FacetCut[]";
                readonly name: "facetCuts";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "address";
                readonly name: "initAddress";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "initCalldata";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct Diamond.DiamondCutData";
            readonly name: "_diamondCut";
            readonly type: "tuple";
        }];
        readonly name: "DiamondCutProposalExecution";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_address";
            readonly type: "address";
        }];
        readonly name: "EmergencyDiamondCutApproved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EmergencyFreeze";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "Unfreeze";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_diamondCutHash";
            readonly type: "bytes32";
        }];
        readonly name: "approveEmergencyDiamondCutAsSecurityCouncilMember";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "cancelDiamondCutProposal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "emergencyFreezeDiamond";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "facet";
                    readonly type: "address";
                }, {
                    readonly internalType: "enum Diamond.Action";
                    readonly name: "action";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "bool";
                    readonly name: "isFreezable";
                    readonly type: "bool";
                }, {
                    readonly internalType: "bytes4[]";
                    readonly name: "selectors";
                    readonly type: "bytes4[]";
                }];
                readonly internalType: "struct Diamond.FacetCut[]";
                readonly name: "facetCuts";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "address";
                readonly name: "initAddress";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "initCalldata";
                readonly type: "bytes";
            }];
            readonly internalType: "struct Diamond.DiamondCutData";
            readonly name: "_diamondCut";
            readonly type: "tuple";
        }];
        readonly name: "executeDiamondCutProposal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facet";
                readonly type: "address";
            }, {
                readonly internalType: "enum Diamond.Action";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isFreezable";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct Diamond.FacetCut[]";
            readonly name: "_facetCuts";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "_initAddress";
            readonly type: "address";
        }];
        readonly name: "proposeDiamondCut";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unfreezeDiamond";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IDiamondCutInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IDiamondCut;
}
//# sourceMappingURL=IDiamondCut__factory.d.ts.map