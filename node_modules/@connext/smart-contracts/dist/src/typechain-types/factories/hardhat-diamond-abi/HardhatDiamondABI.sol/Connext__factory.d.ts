import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { Connext, ConnextInterface } from "../../../hardhat-diamond-abi/HardhatDiamondABI.sol/Connext";
export declare class Connext__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__getAdoptedAsset_assetNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__getApprovedCanonicalId_notAllowlisted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__nonReentrant_reentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__nonXCallReentrant_reentrantCall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyOwner_notOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__onlyProposed_notProposedOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BaseConnextFacet__whenNotPaused_paused";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__addRemote_invalidDomain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__addRemote_invalidRouter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__addSequencer_alreadyApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__addSequencer_invalidSequencer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__bumpTransfer_noRelayerVault";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__bumpTransfer_valueIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__excecute_insufficientGas";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_badFastLiquidityStatus";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_externalCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_invalidRouterSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_invalidSequencerSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_maxRoutersExceeded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_notApprovedForPortals";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_notReconciled";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_notSupportedRouter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_notSupportedSequencer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_unapprovedSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__execute_wrongDomain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__forceReceiveLocal_notDestination";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__forceUpdateSlippage_invalidSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__forceUpdateSlippage_notDestination";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__mustHaveRemote_destinationNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__onlyDelegate_notDelegate";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__removeSequencer_notApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__setXAppConnectionManager_domainsDontMatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__xcall_capReached";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__xcall_emptyTo";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__xcall_invalidSlippage";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet__xcall_nativeAssetNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeFacet_xcall__emptyLocalAsset";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "transferId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "asset";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "AavePortalMintUnbacked";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "transferId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "asset";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "originDomain";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "destinationDomain";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "canonicalDomain";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "delegate";
                    readonly type: "address";
                }, {
                    readonly internalType: "bool";
                    readonly name: "receiveLocal";
                    readonly type: "bool";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "callData";
                    readonly type: "bytes";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "slippage";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "address";
                    readonly name: "originSender";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "bridgedAmt";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "normalizedIn";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "nonce";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "canonicalId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct TransferInfo";
                readonly name: "params";
                readonly type: "tuple";
            }, {
                readonly internalType: "address[]";
                readonly name: "routers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "routerSignatures";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "address";
                readonly name: "sequencer";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "sequencerSignature";
                readonly type: "bytes";
            }];
            readonly indexed: false;
            readonly internalType: "struct ExecuteArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "local";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "Executed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "transferId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "returnData";
            readonly type: "bytes";
        }];
        readonly name: "ExternalCalldataExecuted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "transferId";
            readonly type: "bytes32";
        }];
        readonly name: "ForceReceiveLocal";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "domain";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "remote";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RemoteAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sequencer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "SequencerAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "sequencer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "SequencerRemoved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "transferId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "slippage";
            readonly type: "uint256";
        }];
        readonly name: "SlippageUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "transferId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "increase";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "TransferRelayerFeesIncreased";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "updated";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "XAppConnectionManagerSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "transferId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "originDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "destinationDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "canonicalDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "delegate";
                readonly type: "address";
            }, {
                readonly internalType: "bool";
                readonly name: "receiveLocal";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "slippage";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "originSender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "bridgedAmt";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "normalizedIn";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "canonicalId";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
            readonly internalType: "struct TransferInfo";
            readonly name: "params";
            readonly type: "tuple";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "asset";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "local";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "messageBody";
            readonly type: "bytes";
        }];
        readonly name: "XCalled";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sequencer";
            readonly type: "address";
        }];
        readonly name: "addSequencer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sequencer";
            readonly type: "address";
        }];
        readonly name: "approvedSequencers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_transferId";
            readonly type: "bytes32";
        }];
        readonly name: "bumpTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "domain";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_domain";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_router";
            readonly type: "bytes32";
        }];
        readonly name: "enrollRemoteRouter";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint32";
                    readonly name: "originDomain";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "destinationDomain";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "uint32";
                    readonly name: "canonicalDomain";
                    readonly type: "uint32";
                }, {
                    readonly internalType: "address";
                    readonly name: "to";
                    readonly type: "address";
                }, {
                    readonly internalType: "address";
                    readonly name: "delegate";
                    readonly type: "address";
                }, {
                    readonly internalType: "bool";
                    readonly name: "receiveLocal";
                    readonly type: "bool";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "callData";
                    readonly type: "bytes";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "slippage";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "address";
                    readonly name: "originSender";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "bridgedAmt";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "normalizedIn";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "uint256";
                    readonly name: "nonce";
                    readonly type: "uint256";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "canonicalId";
                    readonly type: "bytes32";
                }];
                readonly internalType: "struct TransferInfo";
                readonly name: "params";
                readonly type: "tuple";
            }, {
                readonly internalType: "address[]";
                readonly name: "routers";
                readonly type: "address[]";
            }, {
                readonly internalType: "bytes[]";
                readonly name: "routerSignatures";
                readonly type: "bytes[]";
            }, {
                readonly internalType: "address";
                readonly name: "sequencer";
                readonly type: "address";
            }, {
                readonly internalType: "bytes";
                readonly name: "sequencerSignature";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ExecuteArgs";
            readonly name: "_args";
            readonly type: "tuple";
        }];
        readonly name: "execute";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "originDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "destinationDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "canonicalDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "delegate";
                readonly type: "address";
            }, {
                readonly internalType: "bool";
                readonly name: "receiveLocal";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "slippage";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "originSender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "bridgedAmt";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "normalizedIn";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "canonicalId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TransferInfo";
            readonly name: "_params";
            readonly type: "tuple";
        }];
        readonly name: "forceReceiveLocal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "originDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "destinationDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "canonicalDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "delegate";
                readonly type: "address";
            }, {
                readonly internalType: "bool";
                readonly name: "receiveLocal";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "slippage";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "originSender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "bridgedAmt";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "normalizedIn";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "canonicalId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TransferInfo";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_slippage";
            readonly type: "uint256";
        }];
        readonly name: "forceUpdateSlippage";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nonce";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_domain";
            readonly type: "uint32";
        }];
        readonly name: "remote";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sequencer";
            readonly type: "address";
        }];
        readonly name: "removeSequencer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_transferId";
            readonly type: "bytes32";
        }];
        readonly name: "routedTransfers";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_xAppConnectionManager";
            readonly type: "address";
        }];
        readonly name: "setXAppConnectionManager";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_transferId";
            readonly type: "bytes32";
        }];
        readonly name: "transferStatus";
        readonly outputs: readonly [{
            readonly internalType: "enum DestinationTransferStatus";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "xAppConnectionManager";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_destination";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_asset";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_slippage";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }];
        readonly name: "xcall";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_destination";
            readonly type: "uint32";
        }, {
            readonly internalType: "address";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_asset";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_delegate";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_slippage";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "_callData";
            readonly type: "bytes";
        }];
        readonly name: "xcallIntoLocal";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "enum IDiamondCut.FacetCutAction";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct IDiamondCut.FacetCut[]";
            readonly name: "_diamondCut";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_init";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "DiamondCut";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "enum IDiamondCut.FacetCutAction";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct IDiamondCut.FacetCut[]";
            readonly name: "_diamondCut";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_init";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "DiamondCutProposed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "enum IDiamondCut.FacetCutAction";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct IDiamondCut.FacetCut[]";
            readonly name: "_diamondCut";
            readonly type: "tuple[]";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "_init";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "DiamondCutRescinded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "enum IDiamondCut.FacetCutAction";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct IDiamondCut.FacetCut[]";
            readonly name: "_diamondCut";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "_init";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "diamondCut";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "enum IDiamondCut.FacetCutAction";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct IDiamondCut.FacetCut[]";
            readonly name: "_diamondCut";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "_init";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "getAcceptanceTime";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "enum IDiamondCut.FacetCutAction";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct IDiamondCut.FacetCut[]";
            readonly name: "_diamondCut";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "_init";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "proposeDiamondCut";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "enum IDiamondCut.FacetCutAction";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct IDiamondCut.FacetCut[]";
            readonly name: "_diamondCut";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "_init";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_calldata";
            readonly type: "bytes";
        }];
        readonly name: "rescindDiamondCut";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_functionSelector";
            readonly type: "bytes4";
        }];
        readonly name: "facetAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "facetAddress_";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "facetAddresses";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "facetAddresses_";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_facet";
            readonly type: "address";
        }];
        readonly name: "facetFunctionSelectors";
        readonly outputs: readonly [{
            readonly internalType: "bytes4[]";
            readonly name: "facetFunctionSelectors_";
            readonly type: "bytes4[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "facets";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facetAddress";
                readonly type: "address";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "functionSelectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct IDiamondLoupe.Facet[]";
            readonly name: "facets_";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes4";
            readonly name: "_interfaceId";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "PortalFacet__repayAavePortalFor_invalidAsset";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PortalFacet__repayAavePortalFor_zeroAmount";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PortalFacet__repayAavePortal_assetNotApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PortalFacet__repayAavePortal_insufficientFunds";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "PortalFacet__setAavePortalFee_invalidFee";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "updated";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "AavePoolUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "updated";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "AavePortalFeeUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "transferId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "asset";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "fee";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "AavePortalRepayment";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "aavePool";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "aavePortalFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_transferId";
            readonly type: "bytes32";
        }];
        readonly name: "getAavePortalDebt";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_transferId";
            readonly type: "bytes32";
        }];
        readonly name: "getAavePortalFeeDebt";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "originDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "destinationDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "canonicalDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "delegate";
                readonly type: "address";
            }, {
                readonly internalType: "bool";
                readonly name: "receiveLocal";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "slippage";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "originSender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "bridgedAmt";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "normalizedIn";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "canonicalId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TransferInfo";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_backingAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_feeAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_maxIn";
            readonly type: "uint256";
        }];
        readonly name: "repayAavePortal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "originDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "destinationDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "canonicalDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "address";
                readonly name: "to";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "delegate";
                readonly type: "address";
            }, {
                readonly internalType: "bool";
                readonly name: "receiveLocal";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint256";
                readonly name: "slippage";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "originSender";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "bridgedAmt";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "normalizedIn";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "canonicalId";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TransferInfo";
            readonly name: "_params";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_portalAsset";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_backingAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_feeAmount";
            readonly type: "uint256";
        }];
        readonly name: "repayAavePortalFor";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_aavePool";
            readonly type: "address";
        }];
        readonly name: "setAavePool";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_aavePortalFeeNumerator";
            readonly type: "uint256";
        }];
        readonly name: "setAavePortalFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__acceptProposedOwner_noOwnershipChange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__assignRoleAdmin_invalidInput";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__assignRoleRouter_invalidInput";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__assignRoleWatcher_invalidInput";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__delayElapsed_delayNotElapsed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__proposeAssetAllowlistRemoval_noOwnershipChange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__proposeNewOwner_invalidProposal";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__proposeNewOwner_noOwnershipChange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__proposeRouterAllowlistRemoval_noOwnershipChange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__removeAssetAllowlist_noOwnershipChange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__removeAssetAllowlist_noProposal";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__removeRouterAllowlist_noOwnershipChange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__removeRouterAllowlist_noProposal";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ProposedOwnableFacet__revokeRole_invalidInput";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "admin";
            readonly type: "address";
        }];
        readonly name: "AssignRoleAdmin";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }];
        readonly name: "AssignRoleRouter";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "watcher";
            readonly type: "address";
        }];
        readonly name: "AssignRoleWatcher";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "proposedOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipProposed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "revokedAddress";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "enum Role";
            readonly name: "revokedRole";
            readonly type: "uint8";
        }];
        readonly name: "RevokeRole";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }];
        readonly name: "RouterAllowlistRemovalProposed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "renounced";
            readonly type: "bool";
        }];
        readonly name: "RouterAllowlistRemoved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "acceptProposedOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_admin";
            readonly type: "address";
        }];
        readonly name: "assignRoleAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "assignRoleRouterAdmin";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_watcher";
            readonly type: "address";
        }];
        readonly name: "assignRoleWatcher";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "delay";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newlyProposed";
            readonly type: "address";
        }];
        readonly name: "proposeNewOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proposeRouterAllowlistRemoval";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proposed";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "proposedTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_role";
            readonly type: "address";
        }];
        readonly name: "queryRole";
        readonly outputs: readonly [{
            readonly internalType: "enum Role";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "removeRouterAllowlist";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_revoke";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "routerAllowlistRemoved";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "routerAllowlistTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "RelayerFacet__addRelayer_alreadyApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RelayerFacet__removeRelayer_notApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RelayerFacet__setRelayerFeeVault_invalidRelayerFeeVault";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "relayer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RelayerAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldVault";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newVault";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RelayerFeeVaultUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "relayer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RelayerRemoved";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_relayer";
            readonly type: "address";
        }];
        readonly name: "addRelayer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_relayer";
            readonly type: "address";
        }];
        readonly name: "approvedRelayers";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "relayerFeeVault";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_relayer";
            readonly type: "address";
        }];
        readonly name: "removeRelayer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_relayerFeeVault";
            readonly type: "address";
        }];
        readonly name: "setRelayerFeeVault";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__acceptProposedRouterOwner_badCaller";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__acceptProposedRouterOwner_notElapsed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__addLiquidityForRouter_amountIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__addLiquidityForRouter_badRouter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__addLiquidityForRouter_capReached";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__addLiquidityForRouter_routerEmpty";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__approveRouterForPortal_alreadyApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__approveRouterForPortal_notAdded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__approveRouter_alreadyAdded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__approveRouter_routerEmpty";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__initializeRouter_configNotEmpty";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__onlyRouterOwner_notRouterOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__proposeRouterOwner_badRouter";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__proposeRouterOwner_notNewOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__removeRouterLiquidityFor_notOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__removeRouterLiquidity_amountIsZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__removeRouterLiquidity_insufficientFunds";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__removeRouterLiquidity_recipientEmpty";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__setLiquidityFeeNumerator_tooLarge";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__setLiquidityFeeNumerator_tooSmall";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__setRouterOwner_noChange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__setRouterRecipient_notNewRecipient";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__unapproveRouterForPortal_notApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__unapproveRouter_notAdded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "RoutersFacet__unapproveRouter_routerEmpty";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "liquidityFeeNumerator";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "LiquidityFeeNumeratorUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "maxRoutersPerTransfer";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "MaxRoutersPerTransferUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RouterAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RouterApprovedForPortal";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }];
        readonly name: "RouterInitialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "local";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RouterLiquidityAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "local";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RouterLiquidityRemoved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "prevOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "RouterOwnerAccepted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "prevProposed";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newProposed";
            readonly type: "address";
        }];
        readonly name: "RouterOwnerProposed";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "prevRecipient";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newRecipient";
            readonly type: "address";
        }];
        readonly name: "RouterRecipientSet";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RouterRemoved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "router";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "RouterUnapprovedForPortal";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "LIQUIDITY_FEE_DENOMINATOR";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "LIQUIDITY_FEE_NUMERATOR";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "acceptProposedRouterOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_local";
            readonly type: "address";
        }];
        readonly name: "addRouterLiquidity";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_local";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "addRouterLiquidityFor";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "approveRouter";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "approveRouterForPortal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getProposedRouterOwner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getProposedRouterOwnerTimestamp";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getRouterApproval";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getRouterApprovalForPortal";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getRouterOwner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "getRouterRecipient";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_recipient";
            readonly type: "address";
        }];
        readonly name: "initializeRouter";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "maxRoutersPerTransfer";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_proposed";
            readonly type: "address";
        }];
        readonly name: "proposeRouterOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }];
        readonly name: "removeRouterLiquidity";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address payable";
            readonly name: "_to";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "removeRouterLiquidityFor";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_asset";
            readonly type: "address";
        }];
        readonly name: "routerBalances";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_numerator";
            readonly type: "uint256";
        }];
        readonly name: "setLiquidityFeeNumerator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_newMaxRouters";
            readonly type: "uint256";
        }];
        readonly name: "setMaxRoutersPerTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_recipient";
            readonly type: "address";
        }];
        readonly name: "setRouterRecipient";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "unapproveRouter";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly name: "unapproveRouterForPortal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "StableSwapFacet__deadlineCheck_deadlineNotMet";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "StableSwapFacet__getSwapTokenBalance_indexOutOfRange";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "StableSwapFacet__getSwapTokenIndex_notExist";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "StableSwapFacet__getSwapToken_outOfRange";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "provider";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "tokenAmounts";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "invariant";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "lpTokenSupply";
            readonly type: "uint256";
        }];
        readonly name: "AddLiquidity";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newAdminFee";
            readonly type: "uint256";
        }];
        readonly name: "NewAdminFee";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newSwapFee";
            readonly type: "uint256";
        }];
        readonly name: "NewSwapFee";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "provider";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "tokenAmounts";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "lpTokenSupply";
            readonly type: "uint256";
        }];
        readonly name: "RemoveLiquidity";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "provider";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "tokenAmounts";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "invariant";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "lpTokenSupply";
            readonly type: "uint256";
        }];
        readonly name: "RemoveLiquidityImbalance";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "provider";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "lpTokenAmount";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "lpTokenSupply";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "boughtId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "tokensBought";
            readonly type: "uint256";
        }];
        readonly name: "RemoveLiquidityOne";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "buyer";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "tokensSold";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "tokensBought";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint128";
            readonly name: "soldId";
            readonly type: "uint128";
        }, {
            readonly indexed: false;
            readonly internalType: "uint128";
            readonly name: "boughtId";
            readonly type: "uint128";
        }];
        readonly name: "TokenSwap";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "minToMint";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "addSwapLiquidity";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "calculateRemoveSwapLiquidity";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "tokenIndex";
            readonly type: "uint8";
        }];
        readonly name: "calculateRemoveSwapLiquidityOneToken";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "availableTokenAmount";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "tokenIndexFrom";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "tokenIndexTo";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "dx";
            readonly type: "uint256";
        }];
        readonly name: "calculateSwap";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bool";
            readonly name: "deposit";
            readonly type: "bool";
        }];
        readonly name: "calculateSwapTokenAmount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }];
        readonly name: "getSwapA";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }];
        readonly name: "getSwapAPrecise";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "index";
            readonly type: "uint256";
        }];
        readonly name: "getSwapAdminBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }];
        readonly name: "getSwapLPToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }];
        readonly name: "getSwapStorage";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "key";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "initialA";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "futureA";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "initialATime";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "futureATime";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "swapFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "adminFee";
                readonly type: "uint256";
            }, {
                readonly internalType: "contract LPToken";
                readonly name: "lpToken";
                readonly type: "address";
            }, {
                readonly internalType: "contract IERC20[]";
                readonly name: "pooledTokens";
                readonly type: "address[]";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "tokenPrecisionMultipliers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "balances";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "adminFees";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "bool";
                readonly name: "disabled";
                readonly type: "bool";
            }, {
                readonly internalType: "uint256";
                readonly name: "removeTime";
                readonly type: "uint256";
            }];
            readonly internalType: "struct SwapUtils.Swap";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "index";
            readonly type: "uint8";
        }];
        readonly name: "getSwapToken";
        readonly outputs: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "index";
            readonly type: "uint8";
        }];
        readonly name: "getSwapTokenBalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "tokenAddress";
            readonly type: "address";
        }];
        readonly name: "getSwapTokenIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }];
        readonly name: "getSwapVirtualPrice";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "minAmounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "removeSwapLiquidity";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxBurnAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "removeSwapLiquidityImbalance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "tokenAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint8";
            readonly name: "tokenIndex";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "minAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "removeSwapLiquidityOneToken";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint8";
            readonly name: "tokenIndexFrom";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint8";
            readonly name: "tokenIndexTo";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "dx";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minDy";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "swap";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountIn";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "assetIn";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "assetOut";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "minAmountOut";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "swapExact";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountOut";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "assetIn";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "assetOut";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxAmountIn";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly name: "swapExactOut";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__addAssetId_alreadyAdded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__addAssetId_badBurn";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__addAssetId_badMint";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__enrollAdoptedAndLocalAssets_emptyCanonical";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__removeAssetId_invalidParams";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__removeAssetId_notAdded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__removeAssetId_remainsCustodied";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__setLiquidityCap_notCanonicalDomain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__setupAssetWithDeployedRepresentation_invalidRepresentation";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__setupAssetWithDeployedRepresentation_onCanonicalDomain";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__setupAsset_invalidCanonicalConfiguration";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__setupAsset_representationListed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__updateDetails_localNotFound";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__updateDetails_notApproved";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenFacet__updateDetails_onlyRemote";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "canonicalId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint32";
            readonly name: "domain";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "adoptedAsset";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "localAsset";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "AssetAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "AssetRemoved";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "canonicalId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint32";
            readonly name: "domain";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "cap";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "LiquidityCapUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "canonicalId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "uint32";
            readonly name: "domain";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "swapPool";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "StableSwapAdded";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint32";
            readonly name: "domain";
            readonly type: "uint32";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "id";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "representation";
            readonly type: "address";
        }];
        readonly name: "TokenDeployed";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_stableSwapPool";
            readonly type: "address";
        }];
        readonly name: "addStableSwapPool";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_adopted";
            readonly type: "address";
        }];
        readonly name: "adoptedToCanonical";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }];
        readonly name: "adoptedToLocalExternalPools";
        readonly outputs: readonly [{
            readonly internalType: "contract IStableSwap";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_key";
            readonly type: "bytes32";
        }];
        readonly name: "adoptedToLocalExternalPools";
        readonly outputs: readonly [{
            readonly internalType: "contract IStableSwap";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_key";
            readonly type: "bytes32";
        }];
        readonly name: "approvedAssets";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }];
        readonly name: "approvedAssets";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_key";
            readonly type: "bytes32";
        }];
        readonly name: "canonicalToAdopted";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }];
        readonly name: "canonicalToAdopted";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_key";
            readonly type: "bytes32";
        }];
        readonly name: "canonicalToRepresentation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }];
        readonly name: "canonicalToRepresentation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_key";
            readonly type: "bytes32";
        }];
        readonly name: "getCustodiedAmount";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_id";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint32";
            readonly name: "_domain";
            readonly type: "uint32";
        }];
        readonly name: "getLocalAndAdoptedToken";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_candidate";
            readonly type: "address";
        }];
        readonly name: "getTokenId";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_adoptedAssetId";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_representation";
            readonly type: "address";
        }];
        readonly name: "removeAssetId";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_adoptedAssetId";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_representation";
            readonly type: "address";
        }];
        readonly name: "removeAssetId";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_representation";
            readonly type: "address";
        }];
        readonly name: "representationToCanonical";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint8";
            readonly name: "_canonicalDecimals";
            readonly type: "uint8";
        }, {
            readonly internalType: "string";
            readonly name: "_representationName";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "_representationSymbol";
            readonly type: "string";
        }, {
            readonly internalType: "address";
            readonly name: "_adoptedAssetId";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_stableSwapPool";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_cap";
            readonly type: "uint256";
        }];
        readonly name: "setupAsset";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "_local";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "_representation";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_adoptedAssetId";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_stableSwapPool";
            readonly type: "address";
        }];
        readonly name: "setupAssetWithDeployedRepresentation";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }, {
            readonly internalType: "string";
            readonly name: "_name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "_symbol";
            readonly type: "string";
        }];
        readonly name: "updateDetails";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint32";
                readonly name: "domain";
                readonly type: "uint32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "id";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct TokenId";
            readonly name: "_canonical";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "_updated";
            readonly type: "uint256";
        }];
        readonly name: "updateLiquidityCap";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ConnextInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Connext;
}
//# sourceMappingURL=Connext__factory.d.ts.map