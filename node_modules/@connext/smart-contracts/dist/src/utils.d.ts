import { Contract, ContractInterface, providers, Signer } from "ethers";
import { HardhatRuntimeEnvironment } from "hardhat/types";
import { MessagingProtocolConfig } from "../deployConfig/shared";
import { DeploymentsExtension } from "hardhat-deploy/types";
export type Env = "staging" | "production" | "local";
export declare const mustGetEnv: (_env?: string) => "local" | "staging" | "production";
export declare enum ProtocolNetwork {
    MAINNET = "mainnet",
    TESTNET = "testnet",
    LOCAL = "local"
}
export declare const ProtocolNetworks: Record<string, string>;
export declare const getProtocolNetwork: (_chain: string | number) => string;
export type RelayerProxyConfig = {
    gelatoRelayer: string;
    feeCollector: string;
};
export declare const getRelayerProxyConfig: (_chain: string | number) => RelayerProxyConfig;
export declare const getConnectorName: (config: MessagingProtocolConfig, connectorChainId: number, deployChainId?: number | undefined) => string;
export declare const getDeploymentName: (_contractName: string, _env?: string, _networkName?: string) => string;
export declare const verify: (hre: HardhatRuntimeEnvironment, address: string, constructorArguments?: any[], libraries?: Record<string, string>) => Promise<void>;
export declare const getMessagingProtocolConfig: (protocolNetwork: ProtocolNetwork) => MessagingProtocolConfig;
export type ConnectorDeployment = {
    address: string;
    abi: ContractInterface;
    mirrorConnector?: string;
    mirrorChain?: number;
    chain: number;
    name: string;
};
export declare const getConnectorDeployments: (env: Env, protocolNetwork: ProtocolNetwork) => ConnectorDeployment[];
export declare const getProviderFromHardhatConfig: (chainId: number) => providers.JsonRpcProvider;
export declare const executeOnAllConnectors: <T = any>(env: Env, protocolNetwork: ProtocolNetwork, fn: (d: ConnectorDeployment, provider: providers.JsonRpcProvider) => Promise<T>) => Promise<T[]>;
export declare const queryOptimismMessageStatus: (hash: string, l1ChainId: number, l2ChainId: number, l1Provider: providers.JsonRpcProvider, l2Provider: providers.JsonRpcProvider, relay: boolean, signer: Signer) => Promise<string>;
export declare const deployBeaconProxy: <T extends Contract = Contract>(name: string, args: any[], deployer: Signer & {
    address: string;
}, hre: HardhatRuntimeEnvironment & {
    deployments: DeploymentsExtension;
    ethers: any;
}, implementationArgs?: any[], deployName?: string) => Promise<T>;
//# sourceMappingURL=utils.d.ts.map