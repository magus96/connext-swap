"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
const ethers_1 = require("ethers");
const utils_1 = require("../src/utils");
exports.default = (0, config_1.task)("set-xapp-manager", "Updates the xapp connection manager")
    .addParam("type", "Which handler to enroll (all, connext, promise, relayer")
    .addOptionalParam("env", "Environment of contracts")
    .addOptionalParam("networkType", "Type of network of contracts")
    .setAction(async ({ type, chains: _chains, env: _env, networkType: _networkType }, hre) => {
    let { deployer } = await hre.ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await hre.ethers.getUnnamedSigners();
    }
    const env = (0, utils_1.mustGetEnv)(_env);
    console.log("env:", env);
    console.log("type:", type);
    console.log("deployer: ", deployer.address);
    const networkType = _networkType ?? utils_1.ProtocolNetwork.TESTNET;
    console.log("networkType: ", networkType);
    // get messaging config
    const protocol = (0, utils_1.getMessagingProtocolConfig)(networkType);
    const chainId = +(await hre.getChainId());
    const connectorName = (0, utils_1.getDeploymentName)((0, utils_1.getConnectorName)(protocol, chainId));
    const connector = await hre.deployments.getOrNull(connectorName);
    if (!connector) {
        throw new Error(`${connectorName} not deployed`);
    }
    const names = ["BridgeRouterUpgradeBeaconProxy", "RelayerFeeRouterUpgradeBeaconProxy"]
        .filter((name) => {
        if (type === "all") {
            return true;
        }
        return name.toLowerCase().startsWith(type);
    })
        .map((name) => (0, utils_1.getDeploymentName)(name, env));
    for (const name of names) {
        console.log(`updating xapp connection manager on ${name} to ${connector.address}`);
        const localRouterDeployment = await hre.deployments.get(name);
        const { abi: localRouterAbi } = await hre.deployments.get(
        // handle upgrade naming case
        name.includes("UpgradeBeaconProxy") ? (0, utils_1.getDeploymentName)(name.split("UpgradeBeaconProxy")[0], env) : name);
        const local = localRouterDeployment.address;
        const localRouter = new ethers_1.Contract(local, localRouterAbi, deployer);
        const stored = await localRouter.xAppConnectionManager();
        if (stored.toLowerCase() === connector.address.toLowerCase()) {
            console.log(`${connector.address} already xapp connection manager on ${name}`);
            continue;
        }
        const tx = await localRouter.setXAppConnectionManager(connector.address);
        console.log(`set connector manager tx`, tx.hash);
        const receipt = await tx.wait();
        console.log("receipt", receipt);
    }
});
//# sourceMappingURL=setXAppConnectionManager.js.map