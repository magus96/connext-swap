"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const config_1 = require("hardhat/config");
const utils_2 = require("../src/utils");
exports.default = (0, config_1.task)("add-admin", "Add admin role to address")
    .addParam("admin", "The address of admin to add")
    .addParam("type", "The admin role - router or protocol")
    .addOptionalParam("managerAddress", "Override watcher manager address")
    .addOptionalParam("env", "Environment of contracts")
    .setAction(async ({ admin, type, connextAddress: _connextAddress, env: _env }, { deployments, ethers }) => {
    let { deployer } = await ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await ethers.getUnnamedSigners();
    }
    const env = (0, utils_2.mustGetEnv)(_env);
    console.log("env:", env);
    console.log("admin: ", admin);
    console.log("type: ", type);
    // verify provided address
    if (!(0, utils_1.isAddress)(admin) || admin === ethers.constants.AddressZero) {
        throw new Error("Invalid admin address");
    }
    // get connext
    const connextName = (0, utils_2.getDeploymentName)("Connext", env);
    const connextDeployment = await deployments.get(connextName);
    const connextAddress = _connextAddress ?? connextDeployment.address;
    console.log("connextAddress: ", connextAddress);
    const connext = new ethers_1.Contract(connextAddress, connextDeployment.abi, deployer);
    console.log("setting admin role");
    const role = await connext.queryRole(admin);
    let tx;
    if (type === "protocol") {
        if (role === 3) {
            console.log(`${admin} already has ${type} role (${role.toString()})`);
            return;
        }
        tx = await connext.assignRoleAdmin(admin);
    }
    else if (type === "router") {
        if (role === 1) {
            console.log(`${admin} already has ${type} role (${role.toString()})`);
            return;
        }
        tx = await connext.assignRoleRouterAdmin(admin);
    }
    else {
        throw new Error(`unsupported admin type: ${type}`);
    }
    console.log(`enroll ${type} tx:`, tx.hash);
    const receipt = await tx.wait();
    console.log(`tx mined: ${receipt.transactionHash}`);
});
//# sourceMappingURL=addAdmin.js.map