"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const config_1 = require("hardhat/config");
const utils_1 = require("../src/utils");
exports.default = (0, config_1.task)("add-sender", "Add sender to connector allowlist")
    .addParam("sender", "The address of sender to add")
    .addOptionalParam("connectorAddress", "Override connector address")
    .addOptionalParam("env", "Environment of contracts")
    .addOptionalParam("networkType", "Type of network of contracts")
    .setAction(async ({ sender, connectorAddress: _connectorAddress, env: _env, networkType: _networkType }, { deployments, ethers }) => {
    let { deployer } = await ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await ethers.getUnnamedSigners();
    }
    const env = (0, utils_1.mustGetEnv)(_env);
    console.log("env:", env);
    console.log("sender: ", sender);
    const network = await ethers.provider.getNetwork();
    const networkType = _networkType ?? utils_1.ProtocolNetwork.TESTNET;
    const protocol = (0, utils_1.getMessagingProtocolConfig)(networkType);
    const connectorName = (0, utils_1.getDeploymentName)((0, utils_1.getConnectorName)(protocol, +network.chainId), env);
    console.log("connectorName:", connectorName);
    const connectorDeployment = await deployments.get(connectorName);
    const connectorAddress = _connectorAddress ?? connectorDeployment.address;
    console.log("connectorAddress:", connectorAddress);
    const connector = new ethers_1.Contract(connectorAddress, connectorDeployment.abi, deployer);
    if (await connector.allowlistedSenders(connectorAddress)) {
        console.log(`sender already allowlisted`);
        return;
    }
    const tx = await connector.addSender(sender);
    console.log("addSender tx: ", tx);
    const receipt = await tx.wait();
    console.log("addSender tx mined: ", receipt.transactionHash);
});
//# sourceMappingURL=addSender.js.map