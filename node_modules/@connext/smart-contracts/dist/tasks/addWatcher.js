"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const config_1 = require("hardhat/config");
const utils_2 = require("../src/utils");
exports.default = (0, config_1.task)("add-watcher", "Add watcher to allowlist")
    .addParam("watcher", "The address of watcher to add")
    .addOptionalParam("managerAddress", "Override watcher manager address")
    .addOptionalParam("env", "Environment of contracts")
    .setAction(async ({ watcher, managerAddress: _managerAddress, connextAddress: _connextAddress, env: _env }, { deployments, ethers }) => {
    let { deployer } = await ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await ethers.getUnnamedSigners();
    }
    const env = (0, utils_2.mustGetEnv)(_env);
    console.log("env:", env);
    console.log("watcher: ", watcher);
    // verify provided address
    if (!(0, utils_1.isAddress)(watcher) || watcher === ethers.constants.AddressZero) {
        throw new Error("Invalid Watcher address");
    }
    // get watcher manager (for messaging)
    const managerName = (0, utils_2.getDeploymentName)("WatcherManager", env);
    const deployment = await deployments.get(managerName);
    const managerAddress = _managerAddress ?? deployment.address;
    console.log("managerAddress: ", managerAddress);
    const manager = new ethers_1.Contract(managerAddress, deployment.abi, deployer);
    console.log("enrolling watcher on manager...");
    let isWatcher = await manager.isWatcher(watcher);
    if (isWatcher) {
        console.log("Already approved watcher on manager");
    }
    else {
        const tx = await manager.addWatcher(watcher);
        console.log("addWatcher tx: ", tx);
        const receipt = await tx.wait();
        console.log("addWatcher tx mined: ", receipt.transactionHash);
    }
    // get connext (for liquidity)
    const connextName = (0, utils_2.getDeploymentName)("Connext", env);
    const connextDeployment = await deployments.get(connextName);
    const connextAddress = _connextAddress ?? connextDeployment.address;
    console.log("connextAddress: ", connextAddress);
    const connext = new ethers_1.Contract(connextAddress, connextDeployment.abi, deployer);
    console.log("enrolling watcher on connext...");
    isWatcher = (await connext.queryRole(watcher)) === 2;
    if (isWatcher) {
        console.log("Already approved watcher on manager");
    }
    else {
        const tx = await connext.assignRoleWatcher(watcher);
        console.log("addWatcher tx: ", tx);
        const receipt = await tx.wait();
        console.log("addWatcher tx mined: ", receipt.transactionHash);
    }
});
//# sourceMappingURL=addWatcher.js.map