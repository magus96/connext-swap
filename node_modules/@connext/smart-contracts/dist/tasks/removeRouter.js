"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const config_1 = require("hardhat/config");
const utils_1 = require("../src/utils");
exports.default = (0, config_1.task)("remove-router", "Remove a router")
    .addParam("router", "The router's address to remove")
    .addOptionalParam("connextAddress", "Override connext address")
    .addOptionalParam("env", "Environment of contracts")
    .setAction(async ({ router, connextAddress: _connextAddress, env: _env }, { deployments, ethers }) => {
    let { deployer } = await ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await ethers.getUnnamedSigners();
    }
    const env = (0, utils_1.mustGetEnv)(_env);
    console.log("env:", env);
    console.log("router: ", router);
    console.log("namedAccounts: ", deployer.address);
    const connextName = (0, utils_1.getDeploymentName)("Connext", env);
    const connextDeployment = await deployments.get(connextName);
    const connextAddress = _connextAddress ?? connextDeployment.address;
    const connext = new ethers_1.Contract(connextAddress, connextDeployment.abi, deployer);
    console.log("connextAddress: ", connextAddress);
    const approved = await connext.getRouterApproval(router);
    if (!approved) {
        console.log("not approved, no need to remove");
        return;
    }
    const tx = await connext.removeRouter(router);
    console.log("removeRouter tx: ", tx);
    const receipt = await tx.wait();
    console.log("removeRouter tx mined: ", receipt.transactionHash);
    const isRouterApproved = await connext.getRouterApproval(router);
    console.log("isRouterApproved: ", isRouterApproved);
});
//# sourceMappingURL=removeRouter.js.map