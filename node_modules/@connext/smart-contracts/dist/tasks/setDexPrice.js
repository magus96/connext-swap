"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const config_1 = require("hardhat/config");
const utils_1 = require("../src/utils");
exports.default = (0, config_1.task)("set-dex-price", "Set dex price information")
    .addParam("token", "Token addresses")
    .addParam("baseToken", "Base token address")
    .addParam("lpToken", "Liquidity Provider token address")
    .addParam("active", "Makes a record active")
    .addOptionalParam("env", "Environment of contracts")
    .setAction(async ({ token, baseToken, lpToken, active, env: _env }, { deployments, ethers }) => {
    let { deployer } = await ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await ethers.getUnnamedSigners();
    }
    const env = (0, utils_1.mustGetEnv)(_env);
    console.log("env:", env);
    console.log("token: ", token);
    console.log("baseToken: ", baseToken);
    console.log("lpToken: ", lpToken);
    console.log("active: ", active);
    console.log("deployer: ", deployer.address);
    const cxtPriceOracleDeployment = await deployments.get((0, utils_1.getDeploymentName)("ConnextPriceOracle", env));
    console.log("PriceOracle: ", cxtPriceOracleDeployment.address);
    const priceOracle = new ethers_1.Contract(cxtPriceOracleDeployment.address, cxtPriceOracleDeployment.abi, deployer);
    const tx = await priceOracle.setDexPriceInfo(token, baseToken, lpToken, active);
    console.log("setDexPriceInfo tx: ", tx);
    const receipt = await tx.wait();
    console.log("setDexPriceInfo tx mined: ", receipt.transactionHash);
});
//# sourceMappingURL=setDexPrice.js.map