"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const config_1 = require("hardhat/config");
const utils_2 = require("../src/utils");
exports.default = (0, config_1.task)("debug-custom-error", "Debug revert data from connext contract")
    .addParam("message", "The data from the revert log")
    .addOptionalParam("connextAddress", "Override connext address")
    .addOptionalParam("env", "The environment for the contract")
    .setAction(async ({ message, connextAddress: _connextAddress, env: _env }, { deployments }) => {
    console.log("revert data: ", message);
    const env = (0, utils_2.mustGetEnv)(_env);
    console.log("env:", env);
    const connextDeployment = await deployments.getArtifact("Connext");
    //"error":{"reason":"processing response error","code":"SERVER_ERROR","body":"{\"jsonrpc\":\"2.0\",\"id\":49,\"error\":{\"code\":-32603,\"message\":\"Error: Transaction reverted without a reason string\",\"data\":{\"message\":\"Error: Transaction reverted without a reason string\",\"data\":\"0x991634c4\"}}}","error":{"code":-32603,"data":{"message":"Error: Transaction reverted without a reason string","data":"0x991634c4"}},
    const iErrors = new utils_1.Interface(connextDeployment.abi);
    let parsed = "";
    if (!message) {
        parsed = "";
    }
    if (message.startsWith("0x08c379a0")) {
        // decode Error(string)
        const content = `0x${message.substring(10)}`;
        const reason = ethers_1.utils.defaultAbiCoder.decode(["string"], content);
        parsed = reason[0]; // reason: string; for standard revert error string
    }
    if (message.startsWith("0x4e487b71")) {
        // decode Panic(uint)
        const content = `0x${message.substring(10)}`;
        const code = ethers_1.utils.defaultAbiCoder.decode(["uint"], content);
        parsed = code[0];
    }
    try {
        const errDescription = iErrors.parseError(message);
        parsed = errDescription?.name;
    }
    catch (e) {
        console.error(e);
    }
    console.log("Parsed !!   ", parsed);
});
//# sourceMappingURL=debugCustomError.js.map