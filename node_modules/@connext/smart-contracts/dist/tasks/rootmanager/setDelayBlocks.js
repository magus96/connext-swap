"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const config_1 = require("hardhat/config");
const utils_1 = require("../../src/utils");
exports.default = (0, config_1.task)("delay-blocks-root", "set delay blocks at root manager")
    .addOptionalParam("blocks", "number of blocks set for delay")
    .addOptionalParam("env", "Environment of contracts")
    .setAction(async ({ blocks: _blocks, env: _env }, { deployments, ethers }) => {
    let { deployer } = await ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await ethers.getUnnamedSigners();
    }
    const env = (0, utils_1.mustGetEnv)(_env);
    const blocks = _blocks ?? 0;
    console.log("env:", env);
    console.log("blocks:", blocks);
    const deploymentName = (0, utils_1.getDeploymentName)("RootManager", env);
    const rootManagerDeployment = await deployments.get(deploymentName);
    if (!rootManagerDeployment) {
        throw new Error(`No ${deploymentName} found`);
    }
    console.log("rootManagerAddress: ", rootManagerDeployment.address);
    const rootManager = new ethers_1.Contract(rootManagerDeployment.address, rootManagerDeployment.abi, deployer);
    const tx = await rootManager.setDelayBlocks(blocks);
    console.log("rootManager setDelayBlocks tx: ", tx);
    const receipt = await tx.wait();
    console.log("rootManager setDelayBlocks tx mined: ", receipt.transactionHash);
});
//# sourceMappingURL=setDelayBlocks.js.map