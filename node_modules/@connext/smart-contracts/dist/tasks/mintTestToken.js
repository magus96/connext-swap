"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const config_1 = require("hardhat/config");
const utils_1 = require("../src/utils");
exports.default = (0, config_1.task)("mint", "Mint test tokens")
    .addParam("amount", "Amount to mint (real units)")
    .addOptionalParam("minimumOnly", "Whether to skip accounts that already have enough")
    .addOptionalParam("recipient", "Override address to mint to; if not provided, will mint to all accounts")
    .addOptionalParam("asset", "Override token address")
    .addOptionalParam("env", "Environment of contracts")
    .setAction(async ({ minimumOnly: _minimumOnly, recipient, asset: _assetId, amount, env: _env }, hre) => {
    const minimumOnly = _minimumOnly === "true" ? true : false;
    const signers = await hre.ethers.getSigners();
    const signer = signers[0];
    let accounts = signers.map((signer) => signer.address);
    if (recipient) {
        accounts = [recipient];
    }
    const amountBase = ethers_1.utils.parseUnits(amount, 18);
    const env = (0, utils_1.mustGetEnv)(_env);
    console.log("env:", env);
    console.log("signer: ", signer.address);
    const tokenName = (0, utils_1.getDeploymentName)("TestERC20", env);
    const tokenDeployment = await hre.deployments.get(tokenName);
    const assetId = _assetId ?? tokenDeployment.address;
    console.log("asset address: ", assetId);
    const erc20 = new ethers_1.Contract(assetId, tokenDeployment.abi, signer);
    const balances = await hre.run("read-balances", { asset: assetId });
    const mintTxn = async (recipient, amt) => {
        const tx = await erc20.mint(recipient, amt);
        const receipt = await tx.wait();
        console.log(`Minted ${ethers_1.utils.formatUnits(amt, 18)} TEST for ${recipient}`);
        console.log(`  Tx: ${receipt.transactionHash}`);
        const balance = await erc20.balanceOf(recipient);
        console.log("  New balance: ", ethers_1.utils.formatUnits(balance, 18));
    };
    if (minimumOnly) {
        for (const account of accounts) {
            const balance = balances.get(account);
            if (balance.lt(amountBase)) {
                const diff = amountBase.sub(balance);
                console.log(`Account ${account} needs ${ethers_1.utils.formatUnits(diff, 18)} more`);
                await mintTxn(account, diff);
            }
        }
    }
    else {
        for (const account of accounts) {
            await mintTxn(account, amountBase);
        }
    }
});
//# sourceMappingURL=mintTestToken.js.map