"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const config_1 = require("hardhat/config");
const utils_1 = require("../src/utils");
exports.default = (0, config_1.task)("export-abi-task", "Export abis for contractss")
    .addOptionalParam("env", "Environment of contracts")
    .setAction(async ({ env: _env }, { deployments, ethers, artifacts }) => {
    let { deployer } = await ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await ethers.getUnnamedSigners();
    }
    const env = (0, utils_1.mustGetEnv)(_env);
    console.log("env:", env);
    // get all the artifact names
    // returned in format:
    // `'contracts/test/FeeERC20.sol:FeeERC20'`
    const artifactNames = await artifacts.getAllFullyQualifiedNames();
    // get contract names from artifacts
    const contractNames = artifactNames.map((path) => path.split(":")[1]);
    // We have all contract names from within the repository.
    // For the production abis, pull from the deployed contracts
    // for the staging abis, pull from the current artifacts. This way,
    // you can include the current abis without needing to deploy for staging
    // only.
    // get the production deployment if it exists
    const prodAbis = {};
    const prodDir = (0, path_1.join)(__dirname, "../../abis/production");
    console.log("prodDir", prodDir);
    if (!(0, fs_1.existsSync)(prodDir)) {
        console.log("making prod name!");
        (0, fs_1.mkdirSync)(prodDir, { recursive: true });
        console.log("made prod dir", prodDir);
    }
    await Promise.all(contractNames.map(async (contract) => {
        console.log("looking for", contract);
        const { abi } = (await deployments.getOrNull(contract)) ?? {};
        if (!abi) {
            console.log("no abi");
            return;
        }
        const path = (0, path_1.join)(prodDir, contract + ".json");
        console.log("path", path);
        prodAbis[contract] = { abi, path };
    }));
    // get all the staging artifact abis
    const stagingAbis = {};
    const stagingDir = (0, path_1.join)(__dirname, "../../abis/staging");
    console.log("stagingDir", stagingDir);
    if (!(0, fs_1.existsSync)(stagingDir)) {
        (0, fs_1.mkdirSync)(stagingDir, { recursive: true });
    }
    artifactNames.forEach((artifact, idx) => {
        const name = contractNames[idx];
        const { abi } = artifacts.readArtifactSync(artifact);
        const path = (0, path_1.join)(stagingDir, name + ".json");
        stagingAbis[name] = { abi, path };
    });
    Object.entries({ ...prodAbis, ...stagingAbis }).map(([contract, { abi, path }]) => {
        console.log("saving contract abi:", contract, "to:", path);
        (0, fs_1.writeFileSync)(path, abi.toString());
    });
});
//# sourceMappingURL=exportAbi.js.map