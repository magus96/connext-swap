"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const config_1 = require("hardhat/config");
const utils_1 = require("../src/utils");
exports.default = (0, config_1.task)("query-roots", "Read balances of accounts")
    .addOptionalParam("env", "Environment of contracts")
    .addOptionalParam("hash", "Tx hash of `propagate` function (where messages sent)")
    .addOptionalParam("relay", "Whether the message should be relayed if possible")
    .addOptionalParam("networkType", "Type of network of contracts")
    .setAction(async ({ env: _env, hash, relay: _relay, networkType }, hre) => {
    let { deployer } = await hre.ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await hre.ethers.getUnnamedSigners();
    }
    const env = (0, utils_1.mustGetEnv)(_env);
    const relay = _relay === "false" ? false : true;
    console.log("env:", env);
    console.log("deployer: ", deployer.address);
    console.log("hash: ", hash);
    console.log("relay:", relay);
    const protocol = (0, utils_1.getMessagingProtocolConfig)(networkType ?? utils_1.ProtocolNetwork.TESTNET);
    await (0, utils_1.executeOnAllConnectors)(env, utils_1.ProtocolNetwork.TESTNET, async (deployment, provider) => {
        const { name, address, abi, chain } = deployment;
        // Create the connector contract
        const connector = new ethers_1.Contract(address, abi, provider);
        console.log(`--------- ${name} ---------`);
        console.log("- address:", address);
        if (name.includes("SpokeConnector")) {
            console.log("- outboundRoot:", await connector.outboundRoot());
            console.log("- aggregateRoot:", await connector.aggregateRoot());
        }
        if (!hash) {
            return;
        }
        if (chain == protocol.hub) {
            // only useful to log message status iff message was passed
            console.log("- message status: hub <> hub interaction, ignoring");
            console.log("");
            return;
        }
        // Check the message status, varies by chain
        if (name.includes("Optimism")) {
            const status = await (0, utils_1.queryOptimismMessageStatus)(hash, protocol.hub, chain, (0, utils_1.getProviderFromHardhatConfig)(protocol.hub), provider, relay, deployer);
            console.log(`- message status: ${status}`);
        }
        else {
            console.log(`- message status: unable to retrieve status for ${name}`);
        }
        console.log("");
    });
});
//# sourceMappingURL=queryRoots.js.map