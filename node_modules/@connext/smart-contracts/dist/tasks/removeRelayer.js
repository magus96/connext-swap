"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const utils_1 = require("ethers/lib/utils");
const config_1 = require("hardhat/config");
const utils_2 = require("../src/utils");
exports.default = (0, config_1.task)("remove-relayer", "Remove Relayer from allowlist")
    .addParam("relayer", "The address of relayer to remove")
    .addOptionalParam("connextAddress", "Override connext address")
    .addOptionalParam("env", "The environment for the contract")
    .setAction(async ({ relayer, connextAddress: _connextAddress, env: _env }, { deployments, ethers }) => {
    let { deployer } = await ethers.getNamedSigners();
    if (!deployer) {
        [deployer] = await ethers.getUnnamedSigners();
    }
    console.log("relayer: ", relayer);
    const env = (0, utils_2.mustGetEnv)(_env);
    console.log("env:", env);
    console.log("deployer:", deployer.address);
    const connextName = (0, utils_2.getDeploymentName)("Connext", env);
    const connextDeployment = await deployments.get(connextName);
    const connextAddress = _connextAddress ?? connextDeployment.address;
    const connext = new ethers_1.Contract(connextAddress, connextDeployment.abi, deployer);
    console.log("connextAddress: ", connextAddress);
    if (!(0, utils_1.isAddress)(relayer) || relayer === ethers.constants.AddressZero) {
        throw new Error("Invalid Relayer address");
    }
    const approvedRelayer = await connext.approvedRelayer(relayer);
    console.log("approvedRelayer: ", approvedRelayer);
    if (!approvedRelayer) {
        throw new Error("Not approved relayer");
    }
    const tx = await connext.removeRelayer(relayer);
    console.log("removeRelayer tx: ", tx);
    const receipt = await tx.wait();
    console.log("removeRelayer tx mined: ", receipt.transactionHash);
});
//# sourceMappingURL=removeRelayer.js.map