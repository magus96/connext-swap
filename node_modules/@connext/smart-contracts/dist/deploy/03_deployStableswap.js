"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const func = async function (hre) {
    const { deployments } = hre;
    let _deployer;
    ({ deployer: _deployer } = await hre.ethers.getNamedSigners());
    if (!_deployer) {
        [_deployer] = await hre.ethers.getUnnamedSigners();
    }
    const deployer = _deployer;
    console.log("\n============================= Deploying StableSwap ===============================");
    console.log("deployer: ", deployer.address);
    /////////////////////////////////////////////////////////////////////////////////
    ////  LP Token
    /////////////////////////////////////////////////////////////////////////////////
    // NOTE: *NOT* using -Staging deployment for LP token
    const lpToken = await deployments.getOrNull("LPToken");
    if (lpToken) {
        console.log(`reusing "LPToken" at ${lpToken.address}`);
    }
    else {
        await deployments.deploy("LPToken", {
            from: deployer.address,
            log: true,
            skipIfAlreadyDeployed: true,
        });
        await deployments.execute("LPToken", { from: deployer.address, log: true }, "initialize", "Connext Stable LP Token", "ConnextStableLPToken");
    }
    /////////////////////////////////////////////////////////////////////////////////
    ////  SwapUtils
    /////////////////////////////////////////////////////////////////////////////////
    const swapUtilsName = (0, src_1.getDeploymentName)("SwapUtilsExternal");
    const swapUtilsDeployment = await deployments.deploy(swapUtilsName, {
        from: deployer.address,
        log: true,
        skipIfAlreadyDeployed: true,
        contract: "SwapUtilsExternal",
    });
    // /////////////////////////////////////////////////////////////////////////////////
    // ////  StableSwap
    // /////////////////////////////////////////////////////////////////////////////////
    const stableSwapName = (0, src_1.getDeploymentName)("StableSwap");
    await deployments.deploy(stableSwapName, {
        from: deployer.address,
        log: true,
        libraries: {
            SwapUtilsExternal: swapUtilsDeployment.address,
        },
        skipIfAlreadyDeployed: true,
        contract: "StableSwap",
    });
};
exports.default = func;
func.tags = ["StableSwap", "local"];
//# sourceMappingURL=03_deployStableswap.js.map