[
    "error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported()",
    "error AssetLogic__handleIncomingAsset_nativeAssetNotSupported()",
    "error AssetLogic__handleOutgoingAsset_notNative()",
    "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
    "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
    "error BaseConnextFacet__nonReentrant_reentrantCall()",
    "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
    "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
    "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
    "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
    "error BaseConnextFacet__onlyOwner_notOwner()",
    "error BaseConnextFacet__onlyProposed_notProposedOwner()",
    "error BaseConnextFacet__whenNotPaused_paused()",
    "error RoutersFacet__acceptProposedRouterOwner_badCaller()",
    "error RoutersFacet__acceptProposedRouterOwner_notElapsed()",
    "error RoutersFacet__addLiquidityForRouter_amountIsZero()",
    "error RoutersFacet__addLiquidityForRouter_badRouter()",
    "error RoutersFacet__addLiquidityForRouter_capReached()",
    "error RoutersFacet__addLiquidityForRouter_routerEmpty()",
    "error RoutersFacet__approveRouterForPortal_alreadyApproved()",
    "error RoutersFacet__approveRouterForPortal_notAdded()",
    "error RoutersFacet__approveRouter_alreadyAdded()",
    "error RoutersFacet__approveRouter_routerEmpty()",
    "error RoutersFacet__initializeRouter_configNotEmpty()",
    "error RoutersFacet__onlyRouterOwner_notRouterOwner()",
    "error RoutersFacet__proposeRouterOwner_badRouter()",
    "error RoutersFacet__proposeRouterOwner_notNewOwner()",
    "error RoutersFacet__removeRouterLiquidityFor_notOwner()",
    "error RoutersFacet__removeRouterLiquidity_amountIsZero()",
    "error RoutersFacet__removeRouterLiquidity_insufficientFunds()",
    "error RoutersFacet__removeRouterLiquidity_recipientEmpty()",
    "error RoutersFacet__setLiquidityFeeNumerator_tooLarge()",
    "error RoutersFacet__setLiquidityFeeNumerator_tooSmall()",
    "error RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer()",
    "error RoutersFacet__setRouterOwner_noChange()",
    "error RoutersFacet__setRouterRecipient_notNewRecipient()",
    "error RoutersFacet__unapproveRouterForPortal_notApproved()",
    "error RoutersFacet__unapproveRouter_notAdded()",
    "error RoutersFacet__unapproveRouter_routerEmpty()",
    "event LiquidityFeeNumeratorUpdated(uint256,address)",
    "event MaxRoutersPerTransferUpdated(uint256,address)",
    "event RouterAdded(address indexed,address)",
    "event RouterApprovedForPortal(address,address)",
    "event RouterInitialized(address indexed)",
    "event RouterLiquidityAdded(address indexed,address,bytes32,uint256,address)",
    "event RouterLiquidityRemoved(address indexed,address,address,bytes32,uint256,address)",
    "event RouterOwnerAccepted(address indexed,address indexed,address indexed)",
    "event RouterOwnerProposed(address indexed,address indexed,address indexed)",
    "event RouterRecipientSet(address indexed,address indexed,address indexed)",
    "event RouterRemoved(address indexed,address)",
    "event RouterUnapprovedForPortal(address,address)",
    "function LIQUIDITY_FEE_DENOMINATOR() pure returns (uint256)",
    "function LIQUIDITY_FEE_NUMERATOR() view returns (uint256)",
    "function acceptProposedRouterOwner(address)",
    "function addRouterLiquidity(uint256,address) payable",
    "function addRouterLiquidityFor(uint256,address,address) payable",
    "function approveRouter(address)",
    "function approveRouterForPortal(address)",
    "function getProposedRouterOwner(address) view returns (address)",
    "function getProposedRouterOwnerTimestamp(address) view returns (uint256)",
    "function getRouterApproval(address) view returns (bool)",
    "function getRouterApprovalForPortal(address) view returns (bool)",
    "function getRouterOwner(address) view returns (address)",
    "function getRouterRecipient(address) view returns (address)",
    "function initializeRouter(address,address)",
    "function maxRoutersPerTransfer() view returns (uint256)",
    "function proposeRouterOwner(address,address)",
    "function removeRouterLiquidity(tuple(uint32,bytes32),uint256,address)",
    "function removeRouterLiquidityFor(tuple(uint32,bytes32),uint256,address,address)",
    "function routerBalances(address,address) view returns (uint256)",
    "function setLiquidityFeeNumerator(uint256)",
    "function setMaxRoutersPerTransfer(uint256)",
    "function setRouterRecipient(address,address)",
    "function unapproveRouter(address)",
    "function unapproveRouterForPortal(address)"
]
