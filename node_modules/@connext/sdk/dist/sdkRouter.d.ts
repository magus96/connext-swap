import { providers } from "ethers";
import { Logger, ChainData } from "@connext/nxtp-utils";
import { SdkShared } from "./sdkShared";
import { SdkConfig } from "./config";
/**
 * @classdesc SDK class encapsulating router functions.
 *
 */
export declare class SdkRouter extends SdkShared {
    private static _instance;
    constructor(config: SdkConfig, logger: Logger, chainData: Map<string, ChainData>);
    /**
     * Create a singleton instance of the SdkRouter class.
     *
     * @param _config - SdkConfig object.
     * @param _config.chains - Chain config, at minimum with providers for each chain.
     * @param _config.signerAddress - Signer address for transactions.
     * @param _config.logLevel - (optional) Logging severity level.
     * @param _config.network - (optional) Blockchain environment to interact with.
     * @returns providers.TransactionRequest object.
     *
     * @example:
     * ```ts
     * import { SdkRouter } from "@connext/sdk";
     *
     * const config = {
     *   "chains": {
     *     "6648936": {
     *       "providers": ["https://rpc.ankr.com/eth"]
     *     },
     *     "1869640809": {
     *       "providers": ["https://mainnet.optimism.io"]
     *     },
     *     "1886350457": {
     *       "providers": ["https://polygon-rpc.com"]
     *     },
     *   },
     *   "signerAddress": "<wallet_address>",
     * }
     *
     * const SdkRouter = await SdkRouter.create(config);
     * ```
     */
    static create(_config: SdkConfig, _logger?: Logger, _chainData?: Map<string, ChainData>): Promise<SdkRouter>;
    /**
     * Returns the transaction request for adding liquidity to a router.
     *
     * @param params - addLiquidityForRouter parameters object.
     * @param params.domainId - The domain ID.
     * @param params.amount - The amount of the token to add.
     * @param params.tokenAddress - The address of the token.
     * @param params.router - The address of the router.
     * @returns providers.TransactionRequest object.
     */
    addLiquidityForRouter(params: {
        domainId: string;
        amount: string;
        tokenAddress: string;
        router: string;
    }): Promise<providers.TransactionRequest>;
    /**
     * Returns the transaction request for removing liquidity from a router.
     *
     * @remarks
     * This function is permissioned to the router owner only.
     *
     * @param params - removeRouterLiquidity parameters object.
     * @param params.domainId - The domain ID.
     * @param params.amount - The amount of the token to add.
     * @param params.tokenAddress - The address of the token.
     * @param params.recipient - The address where the removed funds will be delivered.
     * @returns providers.TransactionRequest object.
     */
    removeRouterLiquidity(params: {
        domainId: string;
        amount: string;
        tokenAddress: string;
        recipient: string;
    }): Promise<providers.TransactionRequest>;
    removeRouterLiquidityFor(params: {
        domainId: string;
        amount: string;
        tokenAddress: string;
        recipient: string;
        router: string;
    }): Promise<providers.TransactionRequest>;
}
//# sourceMappingURL=sdkRouter.d.ts.map