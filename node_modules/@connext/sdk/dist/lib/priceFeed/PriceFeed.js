"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Coinbase_1 = __importDefault(require("./Coinbase"));
const cache = {};
const cacheTimestamps = {};
class PriceFeed {
    constructor() {
        this.cacheTimeMs = 5 * 60 * 1000;
        this.aliases = {
            WETH: "ETH",
            WMATIC: "MATIC",
            XDAI: "DAI",
            WXDAI: "DAI",
        };
        this.service = new Coinbase_1.default();
    }
    async getPriceByTokenSymbol(tokenSymbol) {
        // "USDC-USD" doesn't exist on coinbase api
        if (tokenSymbol === "USDC") {
            return 1;
        }
        if (this.aliases[tokenSymbol]) {
            tokenSymbol = this.aliases[tokenSymbol];
        }
        if ((await cache[tokenSymbol]) && cacheTimestamps[tokenSymbol]) {
            const isRecent = cacheTimestamps[tokenSymbol] > Date.now() - this.cacheTimeMs;
            if (isRecent) {
                return cache[tokenSymbol];
            }
        }
        try {
            const price = this.service.getPriceByTokenSymbol(tokenSymbol);
            if (price === null) {
                throw new Error(`null price for ${tokenSymbol}`);
            }
            cache[tokenSymbol] = price;
            cacheTimestamps[tokenSymbol] = Date.now();
            return price;
        }
        catch (err) {
            throw new Error(`PriceFeed error: ${err.message}`);
        }
    }
}
exports.default = PriceFeed;
//# sourceMappingURL=PriceFeed.js.map