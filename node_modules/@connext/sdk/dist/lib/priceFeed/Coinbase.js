"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
class Coinbase {
    constructor() {
        this._baseUrl = "https://api.pro.coinbase.com";
        this.getPriceByTokenSymbol = async (symbol, base = "USD") => {
            // pair "USDC-USD" doesn't exist so just return $1
            if (symbol === "USDC") {
                return 1;
            }
            const url = `${this._baseUrl}/products/${symbol}-${base}/ticker`;
            const res = await (0, isomorphic_fetch_1.default)(url);
            const json = await res.json();
            const value = json.price;
            if (!value) {
                throw new Error("coinbase: invalid price response");
            }
            const price = Number(value);
            if (Number.isNaN(price)) {
                throw new Error("coinbase: invalid price (not a number)");
            }
            return price;
        };
    }
}
exports.default = Coinbase;
//# sourceMappingURL=Coinbase.js.map