"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SlippageInvalid = exports.CannotUnwrapOnDestination = exports.ParseConnextLogFailed = exports.ApiRequestFailed = exports.UriInvalid = exports.ParamsInvalid = exports.ChainDataUndefined = exports.ContractAddressMissing = exports.SignerAddressMissing = void 0;
const nxtp_utils_1 = require("@connext/nxtp-utils");
class SignerAddressMissing extends nxtp_utils_1.NxtpError {
    constructor(context = {}) {
        super("Signer Address Missing", context, SignerAddressMissing.name);
    }
}
exports.SignerAddressMissing = SignerAddressMissing;
class ContractAddressMissing extends nxtp_utils_1.NxtpError {
    constructor(domainId, which, context = {}) {
        super(`Contract address missing for ${domainId}: ${which}`, { ...context, domainId, which }, ContractAddressMissing.name);
    }
}
exports.ContractAddressMissing = ContractAddressMissing;
class ChainDataUndefined extends nxtp_utils_1.NxtpError {
    constructor(context = {}) {
        super("Chain Data Undefined", context, ChainDataUndefined.name);
    }
}
exports.ChainDataUndefined = ChainDataUndefined;
class ParamsInvalid extends nxtp_utils_1.NxtpError {
    constructor(context = {}) {
        super("Params invalid", context, ParamsInvalid.name);
    }
}
exports.ParamsInvalid = ParamsInvalid;
class UriInvalid extends nxtp_utils_1.NxtpError {
    constructor(context = {}) {
        super("Uri invalid", context, UriInvalid.name);
    }
}
exports.UriInvalid = UriInvalid;
class ApiRequestFailed extends nxtp_utils_1.NxtpError {
    constructor(context = {}) {
        super("Api Request failed", context, ApiRequestFailed.name);
    }
}
exports.ApiRequestFailed = ApiRequestFailed;
class ParseConnextLogFailed extends nxtp_utils_1.NxtpError {
    constructor(context = {}) {
        super("Parsing logs failed", context, ParseConnextLogFailed.name);
    }
}
exports.ParseConnextLogFailed = ParseConnextLogFailed;
class CannotUnwrapOnDestination extends nxtp_utils_1.NxtpError {
    constructor(reason, context = {}) {
        super("Cannot fulfill request to unwrap native token on destination due to bad argument: " + reason, { ...context }, CannotUnwrapOnDestination.name);
    }
}
exports.CannotUnwrapOnDestination = CannotUnwrapOnDestination;
class SlippageInvalid extends nxtp_utils_1.NxtpError {
    constructor(slippage, context = {}) {
        super("Invalid slippage value. Must be between 0-10000 (inclusive)", { slippage, context }, SlippageInvalid.name);
    }
}
exports.SlippageInvalid = SlippageInvalid;
//# sourceMappingURL=index.js.map