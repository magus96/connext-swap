import { providers, BigNumber, BigNumberish } from "ethers";
import { Logger, ChainData, StableSwapExchange } from "@connext/nxtp-utils";
import memoize from "memoizee";
import { SdkConfig } from "./config";
import { Pool } from "./interfaces";
import { SdkShared } from "./sdkShared";
/**
 * @classdesc SDK class encapsulating stableswap pool functions.
 *
 * @remarks This class will either interact with internal StableSwapFacet pools or external StableSwap pools
 *      depending on which type of pool is being used for each asset.
 *      Note: SDK currently only supports internal StableSwapFacet pools.
 *
 */
export declare class SdkPool extends SdkShared {
    private static _instance;
    private readonly priceFeed;
    constructor(config: SdkConfig, logger: Logger, chainData: Map<string, ChainData>);
    /**
     * Create a singleton instance of the SdkPool class.
     *
     * @param _config - SdkConfig object.
     * @param _config.chains - Chain config, at minimum with providers for each chain.
     * @param _config.signerAddress - Signer address for transactions.
     * @param _config.logLevel - (optional) Logging severity level.
     * @param _config.network - (optional) Blockchain environment to interact with.
     * @returns providers.TransactionRequest object.
     *
     * @example:
     * ```ts
     * import { SdkPool } from "@connext/sdk";
     *
     * const config = {
     *   "chains": {
     *     "6648936": {
     *       "providers": ["https://rpc.ankr.com/eth"]
     *     },
     *     "1869640809": {
     *       "providers": ["https://mainnet.optimism.io"]
     *     },
     *     "1886350457": {
     *       "providers": ["https://polygon-rpc.com"]
     *     },
     *   },
     *   "signerAddress": "<wallet_address>",
     * }
     *
     * const sdkPool = await SdkPool.create(config);
     * ```
     */
    static create(_config: SdkConfig, _logger?: Logger, _chainData?: Map<string, ChainData>): Promise<SdkPool>;
    /**
     * Set to 1 hour from current time.
     *
     * @returns The default deadline, in unix time.
     */
    getDefaultDeadline(): number;
    /**
     * Calculates the amount of tokens received on a swap.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param tokenIndexFrom - The index of the token to sell.
     * @param tokenIndexTo - The index of the token to buy.
     * @param amount - The number of tokens to sell, in the "From" token's native decimal precision.
     * @returns Minimum amount received, in the "To" token's native decimal precision.
     */
    calculateSwap(domainId: string, tokenAddress: string, tokenIndexFrom: number, tokenIndexTo: number, amount: BigNumberish): Promise<BigNumber>;
    /**
     * Calculates the minimum LP token amount from deposits or withdrawals.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param amounts - The amounts of the tokens to deposit/withdraw, in the correct index order and
     * in each token's native precision.
     * @param isDeposit - (optional) Whether this is a deposit or withdrawal.
     * @returns Minimum LP tokens received, in 1e18 precision.
     */
    calculateTokenAmount(domainId: string, tokenAddress: string, amounts: string[], isDeposit?: boolean): Promise<BigNumber>;
    /**
     * Calculates the amounts of underlying tokens returned.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param amount - The amount of the LP token to burn on withdrawal.
     * @returns Array containing amount of each underlying token returned, in correct index order.
     */
    calculateRemoveSwapLiquidity(domainId: string, tokenAddress: string, amount: string): Promise<BigNumber[]>;
    /**
     * Calculates the price impact depending on whether liquidity is being deposited or withdrawn.
     *
     * @param tokenInputAmount - The amount of inbound tokens (LP tokens for withdrawals, total tokens for deposits,
     * dx for swaps), in 1e18 precision.
     * @param tokenOutputAmount - The amount of outbound tokens (total tokens for withdrawals, LP tokens for deposits,
     * dy for swaps), in 1e18 precision.
     * @param virtualPrice - (optional) The current virtual price of the pool.
     * @param isDeposit - (optional) Whether this is a deposit or withdrawal.
     * @returns The price impact.
     */
    calculatePriceImpact(tokenInputAmount: BigNumber, // assumed to be 18d precision
    tokenOutputAmount: BigNumber, virtualPrice?: BigNumber, isDeposit?: boolean): BigNumber;
    /**
     * Calculates the price impact of adding liquidity to a pool.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param amountX - The amount of token X (index 0 of the pool), in the token's native precision.
     * @param amountY - The amount of token Y (index 1 of the pool), in the token's native precision.
     * @returns Price impact for adding liquidity, in 1e18 precision.
     */
    calculateAddLiquidityPriceImpact(domainId: string, tokenAddress: string, amountX: string, amountY: string): Promise<BigNumber | undefined>;
    /**
     * Returns the price impact of removing liquidity from a pool.
     *
     * @param domainId - The domain id of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param amountX - The amount of asset X (index 0 of the pool), in the token's native precision.
     * @param amountY - The amount of asset Y (index 1 of the pool), in the token's native precision.
     * @returns The price impact for removing liquidity, in 1e18 precision.
     */
    calculateRemoveLiquidityPriceImpact(domainId: string, tokenAddress: string, amountX: string, amountY: string): Promise<BigNumber | undefined>;
    /**
     * Calculates the price impact of a swap.
     *
     * @param domainId - The domain id of the pool.
     * @param amountX - The amount of tokens to swap, in the token's native precision.
     * @param tokenX - The address of the token to swap from.
     * @param tokenY - The address of the token to swap to.
     * @returns The price impact for swapping, in 1e18 precision.
     */
    calculateSwapPriceImpact(domainId: string, amountX: string, tokenX: string, tokenY: string): Promise<BigNumber>;
    /**
     * Calculates the estimated amount received on the destination domain for a bridge transaction.
     *
     * @param originDomain - The domain ID of the origin chain.
     * @param destinationDomain - The domain ID of the destination chain.
     * @param originTokenAddress - The address of the token to be bridged from origin.
     * @param amount - The amount of the origin token to bridge, in the origin token's native decimal precision.
     * @param receiveLocal - (optional) Whether the desired destination token is the local asset ("nextAsset").
     * @returns Estimated amount received for local/adopted assets, if applicable, in their native decimal precisions.
     */
    calculateAmountReceived(originDomain: string, destinationDomain: string, originTokenAddress: string, amount: BigNumberish, receiveLocal?: boolean): Promise<{
        amountReceived: BigNumberish;
        originSlippage: BigNumberish;
        routerFee: BigNumberish;
        destinationSlippage: BigNumberish;
    }>;
    /**
     * Fetches the current price of a token.
     *
     * @param tokenSymbol - The symbol for the token.
     * @returns The price of the token.
     */
    getTokenPrice(tokenSymbol: string): Promise<any>;
    /**
     * Reads the LP token address of a pool.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @returns The LP token address.
     */
    getLPTokenAddress(domainId: string, tokenAddress: string): Promise<string>;
    /**
     * Reads the ERC20 token supply.
     *
     * @param domainId - The domain id of the ERC20 token.
     * @param tokenAddress - The address of the ERC20 token.
     * @returns The balance of the address.
     */
    getTokenSupply(domainId: string, tokenAddress: string): Promise<BigNumber>;
    /**
     * Reads the ERC20 token balance of an address.
     *
     * @param domainId - The domain id of the ERC20 token.
     * @param tokenAddress - The address of the ERC20 token.
     * @param userAddress - The address to get the balance of.
     * @returns The balance of the address.
     */
    getTokenUserBalance(domainId: string, tokenAddress: string, userAddress: string): Promise<BigNumber>;
    /**
     * Reads the index of a token in a pool.
     *
     * @param domainId - The domain id of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param poolTokenAddress - The address of the token in the pool to get the index for.
     * @returns The index of the specified token in the pool or -1 if not found.
     */
    getPoolTokenIndex(domainId: string, tokenAddress: string, poolTokenAddress: string): Promise<number>;
    /**
     * Reads the decimal precision of a token in a pool.
     *
     * @param domainId - The domain id of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param poolTokenAddress - The address of the token in the pool to get the precision for.
     * @returns The decimal precision of the specified token in the pool or -1 if not found.
     */
    getPoolTokenDecimals(domainId: string, tokenAddress: string, poolTokenAddress: string): Promise<number>;
    /**
     * Reads the balance of a pool token.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param poolTokenAddress - The address of the pool token.
     * @returns The balance of the pool token.
     */
    getPoolTokenBalance(domainId: string, tokenAddress: string, poolTokenAddress: string, _index?: number): Promise<BigNumber>;
    /**
     * Reads the token address of a specified index in a pool.
     *
     * @param domainId - The domain id of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param index - The index of the token in the pool.
     * @returns The address of the specified token in the pool.
     */
    getPoolTokenAddress(domainId: string, tokenAddress: string, index: number): Promise<string>;
    /**
     * Reads the virtual price of a pool.
     *
     * @param domainId - The domain id of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param index - The index of the token in the pool.
     * @returns The virtual price, scaled to the pool's decimal precision (10^18).
     */
    getVirtualPrice(domainId: string, tokenAddress: string): Promise<BigNumber>;
    /**
     * Reads the representation asset of the pool. The representation asset is the adopted
     * asset on the canonical domain and local (nextAsset) otherwise.
     *
     * @param domainId - The domain id of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @returns The representation asset or zero address for unregistered assets.
     */
    getRepresentation(domainId: string, tokenAddress: string): Promise<string>;
    /**
     * Reads the adopted asset of the pool.
     *
     * @param domainId - The domain id of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @returns The adopted asset or zero address for unregistered assets.
     */
    getAdopted(domainId: string, tokenAddress: string): Promise<string>;
    /**
     * Retrieve the "TokenSwap" events for StableSwap pools.
     *
     * @param params - (optional) Parameters object.
     * @param params.key - (optional) Canonical hash (key) of the pool.
     * @param params.buyer - (optional) The address executing the swap transaction.
     * @param params.transactionHash - (optional) The transaction hash of the swap.
     * @param params.range - (optional) The object with limit and offset options.
     * @param params.range.limit - (optional) The number of results to get.
     * @param params.range.offset - (optional) The offset in the returned data to start from.
     * @returns The array of objects containing TokenSwap event data in the form of:
     *
     * ```ts
     * {
     *   "id": "0x292e02936c5b0f88fab7f755caac58d92cd10b13f484cd46f6dd45468cb23e3f-0x5f9c237682049e4efe7f4bc4bfb9bd5174fccb9e86241254ea3e369515943e59-4",
     *   "pool_id": "0x292e02936c5b0f88fab7f755caac58d92cd10b13f484cd46f6dd45468cb23e3f",
     *   "domain": "9991",
     *   "buyer": "0xba05138df56ea700435448fba4a8cf9a716ed252",
     *   "bought_id": 1,
     *   "sold_id": 0,
     *   "tokens_sold": 9.8e-17,
     *   "tokens_bought": 9.7e-17,
     *   "block_number": 29904034,
     *   "transaction_hash": "0x5f9c237682049e4efe7f4bc4bfb9bd5174fccb9e86241254ea3e369515943e59",
     *   "timestamp": 1671493053
     * }
     * ```
     */
    getTokenSwapEvents(params: {
        key?: string;
        buyer?: string;
        transactionHash?: string;
        startTimestamp?: number;
        endTimestamp?: number;
        range?: {
            limit?: number;
            offset?: number;
        };
    }): Promise<StableSwapExchange[]>;
    /**
     * Fetches a list of StableSwap Pools data that match filter criteria.
     *
     * @param params - (optional) Parameters object.
     * @param params.key - (optional) Canonical hash (key) of the pool.
     * @param params.domainId - (optional) The address executing the swap transaction.
     * @param params.lpTokenAddress - (optional) The address of the pool's LP token.
     * @returns The array of objects containing TokenSwap event data in the form of:
     *
     * ```ts
     * {
     *   "key": "0x292e02936c5b0f88fab7f755caac58d92cd10b13f484cd46f6dd45468cb23e3f",
     *   "domain": "9991",
     *   "is_active": true,
     *   "lp_token": "0x0d01021c481921cfc93959819dfe8096a46bef3c",
     *   "initial_a": 20000,
     *   "future_a": 20000,
     *   "initial_a_time": 0,
     *   "future_a_time": 0,
     *   "swap_fee": "4000000",
     *   "admin_fee": "0",
     *   "pooled_tokens": [
     *     "0x1e5341e4b7ed5d0680d9066aac0396f0b1bd1e69",
     *     "0xfd2ab41e083c75085807c4a65c0a14fdd93d55a9"
     *   ],
     *   "token_precision_multipliers": [
     *     "1",
     *     "1"
     *   ],
     *   "pool_token_decimals": [
     *     18,
     *     18
     *   ],
     *   "balances": [
     *     "32093905049107612",
     *     "7968595774217088"
     *   ],
     *   "virtual_price": "1000163379884851791",
     *   "invariant": "40006038276095726",
     *   "lp_token_supply": "39999503161875010"
     * }
     * ```
     */
    getPoolData: ((params: {
        key?: string;
        domainId?: string;
        lpTokenAddress?: string;
    }) => Promise<any>) & memoize.Memoized<(params: {
        key?: string;
        domainId?: string;
        lpTokenAddress?: string;
    }) => Promise<any>>;
    /**
     * Prepares the transaction request for adding liquidity to a pool.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param amounts - The amounts of the tokens to swap.
     * @param minToMint - (optional) The minimum acceptable amount of LP tokens to mint.
     * @param deadline - (optional) The deadline for the swap.
     * @returns providers.TransactionRequest object.
     */
    addLiquidity(domainId: string, tokenAddress: string, amounts: string[], minToMint?: string, deadline?: number): Promise<providers.TransactionRequest>;
    /**
     * Returns the transaction request for removing liquidity from a pool.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param amount - The amount of the token to swap.
     * @param minAmounts - (optional) The minimum acceptable amounts of each token to burn.
     * @param deadline - (optional) The deadline for the swap.
     * @returns providers.TransactionRequest object.
     */
    removeLiquidity(domainId: string, tokenAddress: string, amount: string, minAmounts?: string[], deadline?: number): Promise<providers.TransactionRequest>;
    /**
     * Returns the transaction request for performing a swap in a pool.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param from - The address of the token to sell.
     * @param to - The address of the token to buy.
     * @param amount - The amount of the selling token to swap.
     * @param minDy - (optional) The minimum amount of the buying token to receive.
     * @param deadline - (optional) The deadline for the swap.
     * @returns providers.TransactionRequest object.
     */
    swap(domainId: string, tokenAddress: string, from: string, to: string, amount: string, minDy?: number, deadline?: number): Promise<providers.TransactionRequest>;
    /**
     * Retrieves the StableSwap Pool details for a given asset.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @returns Pool object of which the token is an underlying asset.
     */
    getPool: ((domainId: string, tokenAddress: string) => Promise<Pool | undefined>) & memoize.Memoized<(domainId: string, tokenAddress: string) => Promise<Pool | undefined>>;
    /**
     * Retrieves the Pools that a user has LP tokens for.
     *
     * @param domainId - The domain ID of the pool.
     * @param userAddress - The address of the user to get the pools for.
     * @returns Array of Pool objects.
     */
    getUserPools(domainId: string, userAddress: string): Promise<{
        info: Pool;
        lpTokenBalance: BigNumber;
        poolTokenBalances: BigNumber[];
    }[]>;
    /**
     * Calculates the fees, liquidity, and volume of a pool for the days prior to the specified unix time.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of local or adopted token.
     * @param unixTimestamp - The unix time to start the look back from.
     * @param days - The number of days to look back.
     * @returns Object containing fees, liquidity, and volume, in 1e18 precision.
     */
    getYieldStatsForDays(domainId: string, tokenAddress: string, unixTimestamp: number, days: number): Promise<{
        totalFeesFormatted: number;
        totalLiquidityFormatted: number;
        totalVolume: BigNumber;
        totalVolumeFormatted: number;
    } | undefined>;
    /**
     * Calculates apr and apy.
     *
     * @param feesEarned - The total fees earned in the period.
     * @param principal - The principal amount at the start of the period.
     * @param days - The number of days to look back.
     * @returns Object containing apr and apy.
     */
    calculateYield(feesEarned: number, principal: number, days: number): {
        apr: number;
        apy: number;
    };
    /**
     * Calculates the apr, apy, and volume of a pool for the last specified number of days.
     *
     * @param domainId - The domain ID of the pool.
     * @param tokenAddress - The address of the user to get the pools for.
     * @param days - (optional) The number of days to look back.
     * @returns Object containing apr, apy. Also fees, liquidity, and volume in 1e18 precision.
     */
    getYieldData: ((domainId: string, tokenAddress: string, days?: number) => Promise<{
        fees: number;
        liquidity: number;
        apr: number;
        apy: number;
        volume: BigNumber;
        volumeFormatted: number;
    } | undefined>) & memoize.Memoized<(domainId: string, tokenAddress: string, days?: number) => Promise<{
        fees: number;
        liquidity: number;
        apr: number;
        apy: number;
        volume: BigNumber;
        volumeFormatted: number;
    } | undefined>>;
    /**
     * Calculates the apr, apy, and volume of a pool for the last specified number of days.
     *
     * @param totalTokens - The number of reward tokens to be distributed.
     * @param totalBlocks - The total number of blocks to distribute over.
     * @param numPools - The number of pools in the domain for distribution.
     * @param tokenSymbol - The token symbol for price data.
     * @param poolTVL - The current pool TVL.
     * @returns The apr calculated from inputs.
     */
    getLiquidityMiningAprPerPool: ((totalTokens: number, totalBlocks: number, numPools: number, tokenSymbol: string, poolTVL: number) => Promise<number>) & memoize.Memoized<(totalTokens: number, totalBlocks: number, numPools: number, tokenSymbol: string, poolTVL: number) => Promise<number>>;
    /**
     * Fetches hourly StableSwap volume.
     *
     * @param params - (optional) Parameters object.
     * @param params.key - (optional) The canonical hash (key) of the pool.
     * @param params.domainId - (optional) The domain ID.
     * @param params.startTimestamp - (optional) The lower bound unix timestamp, inclusive.
     * @param params.endTimestamp - (optional) The upper bound unix timestamp, inclusive.
     * @param params.range - (optional) The object with limit and offset options.
     * @param params.range.limit - (optional) The number of results to get.
     * @param params.range.offset - (optional) The offset in the returned data to start from.
     * @returns The object containing hourly swap volume data, in the form of:
     *
     * ```ts
     * {
     *   "pool_id": "0x292e02936c5b0f88fab7f755caac58d92cd10b13f484cd46f6dd45468cb23e3f",
     *   "domain": "9991",
     *   "swap_hour": "2022-12-19T23:00:00+00:00",
     *   "volume": 0.000099882586128429500000000000000000,
     *   "swap_count": 2,
     * }
     * ```
     */
    getHourlySwapVolume: ((params: {
        key?: string;
        domainId?: string;
        startTimestamp?: number;
        endTimestamp?: number;
        range?: {
            limit?: number;
            offset?: number;
        };
    }) => Promise<any>) & memoize.Memoized<(params: {
        key?: string;
        domainId?: string;
        startTimestamp?: number;
        endTimestamp?: number;
        range?: {
            limit?: number;
            offset?: number;
        };
    }) => Promise<any>>;
    /**
     * Fetches daily StableSwap volume.
     *
     * @param params - (optional) Parameters object.
     * @param params.key - (optional) The canonical hash (key) of the pool.
     * @param params.domainId - (optional) The domain ID.
     * @param params.startTimestamp - (optional) The lower bound unix timestamp, inclusive.
     * @param params.endTimestamp - (optional) The upper bound unix timestamp, inclusive.
     * @param params.range - (optional) The object with limit and offset options.
     * @param params.range.limit - (optional) The number of results to get.
     * @param params.range.offset - (optional) The offset in the returned data to start from.
     * @returns The object containing daily swap volume data, in the form of:
     *
     * ```ts
     * {
     *   "pool_id": "0x12acadfa38ab02479ae587196a9043ee4d8bf52fcb96b7f8d2ba240f03bcd08a",
     *   "domain": "1634886255",
     *   "swap_day": "2022-12-22",
     *   "volume": 0.05993787732028597,
     *   "swap_count": 6
     * }
     * ```
     */
    getDailySwapVolume: ((params: {
        key?: string;
        domainId?: string;
        startTimestamp?: number;
        endTimestamp?: number;
        range?: {
            limit?: number;
            offset?: number;
        };
    }) => Promise<any>) & memoize.Memoized<(params: {
        key?: string;
        domainId?: string;
        startTimestamp?: number;
        endTimestamp?: number;
        range?: {
            limit?: number;
            offset?: number;
        };
    }) => Promise<any>>;
}
//# sourceMappingURL=sdkPool.d.ts.map