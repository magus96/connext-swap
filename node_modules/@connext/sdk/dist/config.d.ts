import { Static } from "@sinclair/typebox";
import { ChainData } from "@connext/nxtp-utils";
import { ConnextContractDeployments } from "@connext/nxtp-txservice";
export declare const TAssetDescription: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString<string>;
    address: import("@sinclair/typebox").TString<string>;
    symbol: import("@sinclair/typebox").TString<string>;
    mainnetEquivalent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
}>;
export type AssetDescription = Static<typeof TAssetDescription>;
export declare const TChainDeployments: import("@sinclair/typebox").TObject<{
    connext: import("@sinclair/typebox").TString<string>;
    multisend: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    unwrapper: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    stableSwap: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
}>;
export type ChainDeployments = Static<typeof TChainDeployments>;
export declare const TChainConfig: import("@sinclair/typebox").TObject<{
    providers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    gasStations: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>>;
    confirmations: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
    chainId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    deployments: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        connext: import("@sinclair/typebox").TString<string>;
        multisend: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        unwrapper: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        stableSwap: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>>;
    assets: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        name: import("@sinclair/typebox").TString<string>;
        address: import("@sinclair/typebox").TString<string>;
        symbol: import("@sinclair/typebox").TString<string>;
        mainnetEquivalent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>>>;
}>;
export type ChainConfig = Static<typeof TChainConfig>;
export declare const SdkConfigSchema: import("@sinclair/typebox").TObject<{
    chains: import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString<string>, import("@sinclair/typebox").TObject<{
        providers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
        gasStations: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>>;
        confirmations: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TInteger>;
        chainId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
        deployments: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            connext: import("@sinclair/typebox").TString<string>;
            multisend: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
            unwrapper: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
            stableSwap: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>>;
        assets: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
            name: import("@sinclair/typebox").TString<string>;
            address: import("@sinclair/typebox").TString<string>;
            symbol: import("@sinclair/typebox").TString<string>;
            mainnetEquivalent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>>>;
    }>>;
    signerAddress: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    logLevel: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"fatal">, import("@sinclair/typebox").TLiteral<"error">, import("@sinclair/typebox").TLiteral<"warn">, import("@sinclair/typebox").TLiteral<"info">, import("@sinclair/typebox").TLiteral<"debug">, import("@sinclair/typebox").TLiteral<"trace">, import("@sinclair/typebox").TLiteral<"silent">]>>;
    cartographerUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    network: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"testnet">, import("@sinclair/typebox").TLiteral<"mainnet">, import("@sinclair/typebox").TLiteral<"local">]>>;
    environment: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"staging">, import("@sinclair/typebox").TLiteral<"production">]>>;
}>;
export type SdkConfig = Static<typeof SdkConfigSchema>;
export declare const TValidationChainConfig: import("@sinclair/typebox").TObject<{
    providers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    gasStations: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
    confirmations: import("@sinclair/typebox").TInteger;
    deployments: import("@sinclair/typebox").TObject<{
        connext: import("@sinclair/typebox").TString<string>;
        multisend: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        stableSwap: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>;
    assets: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        name: import("@sinclair/typebox").TString<string>;
        address: import("@sinclair/typebox").TString<string>;
        symbol: import("@sinclair/typebox").TString<string>;
        mainnetEquivalent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    }>>>;
}>;
export declare const NxtpValidationSdkConfigSchema: import("@sinclair/typebox").TObject<{
    chains: import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString<string>, import("@sinclair/typebox").TObject<{
        providers: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
        gasStations: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString<string>>;
        confirmations: import("@sinclair/typebox").TInteger;
        deployments: import("@sinclair/typebox").TObject<{
            connext: import("@sinclair/typebox").TString<string>;
            multisend: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
            stableSwap: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>;
        assets: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
            name: import("@sinclair/typebox").TString<string>;
            address: import("@sinclair/typebox").TString<string>;
            symbol: import("@sinclair/typebox").TString<string>;
            mainnetEquivalent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
        }>>>;
    }>>;
    signerAddress: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<string>>;
    logLevel: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"fatal">, import("@sinclair/typebox").TLiteral<"error">, import("@sinclair/typebox").TLiteral<"warn">, import("@sinclair/typebox").TLiteral<"info">, import("@sinclair/typebox").TLiteral<"debug">, import("@sinclair/typebox").TLiteral<"trace">, import("@sinclair/typebox").TLiteral<"silent">]>;
    cartographerUrl: import("@sinclair/typebox").TString<string>;
    network: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"testnet">, import("@sinclair/typebox").TLiteral<"mainnet">, import("@sinclair/typebox").TLiteral<"local">]>;
    environment: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<"staging">, import("@sinclair/typebox").TLiteral<"production">]>;
}>;
/**
 * Gets and validates the router config from the environment.
 *
 * @returns The router config with sensible defaults
 */
export declare const getEnvConfig: (_nxtpConfig: SdkConfig, chainData: Map<string, ChainData>, deployments: ConnextContractDeployments) => SdkConfig;
/**
 * Caches and returns the environment config
 *
 * @returns The config
 */
export declare const getConfig: (_nxtpConfig: SdkConfig, deployments: ConnextContractDeployments, _chainData?: Map<string, ChainData>) => Promise<SdkConfig>;
export declare const domainsToChainNames: Record<string, string>;
//# sourceMappingURL=config.d.ts.map