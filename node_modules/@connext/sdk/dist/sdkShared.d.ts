import { providers } from "ethers";
import { Logger, ChainData } from "@connext/nxtp-utils";
import { ConnextContractInterfaces, ChainReader } from "@connext/nxtp-txservice";
import { Connext, IERC20 } from "@connext/smart-contracts";
import memoize from "memoizee";
import { AssetData, ConnextSupport } from "./interfaces";
import { SdkConfig, ChainDeployments } from "./config";
/**
 * @classdesc SDK class encapsulating shared logic to be inherited.
 *
 */
export declare class SdkShared {
    readonly config: SdkConfig;
    readonly chainData: Map<string, ChainData>;
    readonly contracts: ConnextContractInterfaces;
    protected readonly chainreader: ChainReader;
    protected readonly logger: Logger;
    constructor(config: SdkConfig, logger: Logger, chainData: Map<string, ChainData>);
    /**
     * Returns the provider specified in the SDK configuration for a specific domain.
     *
     * @param domainId - The domain ID.
     * @returns providers.StaticJsonRpcProvider object.
     */
    getProvider: ((domainId: string) => providers.StaticJsonRpcProvider) & memoize.Memoized<(domainId: string) => providers.StaticJsonRpcProvider>;
    getDeploymentAddress: ((domainId: string, deploymentName: keyof ChainDeployments) => Promise<string>) & memoize.Memoized<(domainId: string, deploymentName: keyof ChainDeployments) => Promise<string>>;
    /**
     * Returns the Connext diamond contract for the specified domain.
     *
     * @param domainId - The domain ID.
     * @returns Connext Contract object.
     */
    getConnext: ((domainId: string) => Promise<Connext>) & memoize.Memoized<(domainId: string) => Promise<Connext>>;
    /**
     * Returns the ERC20 contract for the specified domain.
     *
     * @param domainId - The domain ID.
     * @returns ERC20 Contract object.
     */
    getERC20: ((domainId: string, tokenAddress: string) => Promise<IERC20>) & memoize.Memoized<(domainId: string, tokenAddress: string) => Promise<IERC20>>;
    /**
     * Returns the chain ID for a specified domain.
     *
     * @param domainId - The domain ID.
     * @returns The chain ID.
     */
    getChainId: ((domainId: string) => Promise<number>) & memoize.Memoized<(domainId: string) => Promise<number>>;
    /**
     * Returns the chain name for a specified domain.
     *
     * @param domainId - The domain ID.
     * @returns The chain name.
     */
    static domainToChainName(domainId: string): string;
    /**
     * Uses an external API to fetch the block number from a unix timestamp.
     *
     * @param domainId - The domain ID.
     * @param unixTimestamp - The unix timestamp.
     * @returns The closest block number.
     */
    static getBlockNumberFromUnixTimestamp(domainId: string, unixTimestamp: number): Promise<number>;
    /**
     * Returns the transaction request for an allowance approval.
     *
     * @param domainId - The domain ID.
     * @param assetId - The address of the token.
     * @param amount - The amount of the token.
     * @param infiniteApprove - (optional) Whether to approve an infinite amount.
     * @returns providers.TransactionRequest object.
     */
    approveIfNeeded(domainId: string, assetId: string, amount: string, infiniteApprove?: boolean): Promise<providers.TransactionRequest | undefined>;
    /**
     * Fetches the list of registered assets.
     *
     * @returns Array of objects containing assets registered to the network, in the form of:
     * ```ts
     * {
     *   "local": "0x2983bf5c334743aa6657ad70a55041d720d225db",
     *   "adopted": "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
     *   "canonical_id": "0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
     *   "canonical_domain": "6648936",
     *   "domain": "1634886255",
     *   "key": "0x12acadfa38ab02479ae587196a9043ee4d8bf52fcb96b7f8d2ba240f03bcd08a",
     *   "id": "0x2983bf5c334743aa6657ad70a55041d720d225db"
     * },
     * ```
     */
    getAssetsData: (() => Promise<AssetData[]>) & memoize.Memoized<() => Promise<AssetData[]>>;
    /**
     * Fetches the list of supported networks and assets.
     *
     * @returns Array of objects containing networks and assets supported by the protocol, in the form of:
     * ```ts
     * {
     *   "name": "arbitrum",
     *   "chainId": 42161,
     *   "domainId": "1634886255",
     *   "assets": [
     *     "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
     *     "0xff970a61a04b1ca14834a43f5de4533ebddb5cc8"
     *   ]
     * },
     * ```
     */
    getSupported(): Promise<ConnextSupport[]>;
    /**
     * Retrieve the asset data for a specific domain and address.
     *
     * @param domainId - The domain ID.
     * @param tokenAddress - The local or adopted address.
     * @returns The object containing asset data.
     */
    getAssetsDataByDomainAndAddress(domainId: string, tokenAddress: string): Promise<AssetData | undefined>;
    /**
     * Retrieve the asset data for a specific domain and key.
     *
     * @param domainId - The domain ID.
     * @param key - The canonical hash of the canonical token.
     * @returns The object containing asset data.
     */
    getAssetsDataByDomainAndKey(domainId: string, key: string): Promise<AssetData | undefined>;
    /**
     * Returns whether the specified token is a Connext-issued (local) token.
     *
     * @param tokenAddress - The address of the token.
     * @returns Boolean or undefined if the specified token is not registered.
     */
    isNextAsset(tokenAddress: string): Promise<boolean | undefined>;
    /**
     * Switches the signer address in the SDK config.
     *
     * @param signerAddress - The new signer address.
     */
    changeSignerAddress(signerAddress: string): Promise<void>;
    /**
     * Parses a providers.TransactionReceipt for the logs.
     *
     * @param transactionReceipt - providers.TransactionReceipt object.
     * @returns Array of providers.Log objects.
     */
    parseConnextTransactionReceipt(transactionReceipt: providers.TransactionReceipt): any;
    /**
     * Returns the hash of the canonical ID + canonical domain.
     *
     * @remarks
     * This key is used as the unique identifier for a canonical token, across all domains.
     *
     * @param domainId The canonical domain ID of the token.
     * @param canonicalId The canonical ID of the token.
     */
    calculateCanonicalKey(domainId: string, canonicalId: string): string;
    /**
     * Returns the canonical ID and canonical domain of a token.
     *
     * @param domainId The canonical domain ID of the token.
     * @param tokenAddress The address of the token.
     */
    getCanonicalTokenId(domainId: string, tokenAddress: string): Promise<[string, string]>;
}
//# sourceMappingURL=sdkShared.d.ts.map