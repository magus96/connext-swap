import { providers, BigNumber } from "ethers";
import { Logger, ChainData } from "@connext/nxtp-utils";
export type logger = Logger;
import { SdkConfig } from "./config";
import { SdkShared } from "./sdkShared";
import { SdkXCallParams, SdkBumpTransferParams, SdkUpdateSlippageParams, SdkEstimateRelayerFeeParams } from "./interfaces";
/**
 * @classdesc SDK class encapsulating bridge functions.
 *
 */
export declare class SdkBase extends SdkShared {
    private static _instance;
    constructor(config: SdkConfig, logger: Logger, chainData: Map<string, ChainData>);
    /**
     * Create a singleton instance of the SdkBase class.
     *
     * @param _config - SdkConfig object.
     * @param _config.chains - Chain config, at minimum with providers for each chain.
     * @param _config.signerAddress - Signer address for transactions.
     * @param _config.logLevel - (optional) Logging severity level.
     * @param _config.network - (optional) Blockchain environment to interact with.
     * @returns providers.TransactionRequest object.
     *
     * @example:
     * ```ts
     * import { SdkBase } from "@connext/sdk";
     *
     * const config = {
     *   "chains": {
     *     "6648936": {
     *       "providers": ["https://rpc.ankr.com/eth"]
     *     },
     *     "1869640809": {
     *       "providers": ["https://mainnet.optimism.io"]
     *     },
     *     "1886350457": {
     *       "providers": ["https://polygon-rpc.com"]
     *     },
     *   },
     *   "signerAddress": "<wallet_address>",
     * }
     *
     * const sdkBase = await SdkBase.create(config);
     * ```
     */
    static create(_config: SdkConfig, _logger?: Logger, _chainData?: Map<string, ChainData>): Promise<SdkBase>;
    /**
     * Prepares xcall inputs and encodes the calldata. Returns an ethers TransactionRequest object, ready
     * to be sent to an RPC provider.
     *
     * @param params - SdkXCallParams object.
     * @param params.origin - The origin domain ID.
     * @param params.destination - The destination domain ID.
     * @param params.to - Address receiving funds or the target contract.
     * @param params.asset - (optional) The target asset to send with the xcall. Can be set to `address(0)` if this is a 0-value
     * transfer. If `wrapNativeOnOrigin` is true, this should be the target wrapper contract (e.g. WETH) address.
     * @param params.delegate - (optional) Address allowed to cancel an xcall on destination.
     * @param params.amount - (optional) The amount of tokens (in specified asset) to send with the xcall. If `wrapNativeOnOrigin`
     * is true, this will be used as the amount of native token to deposit into the wrapper contract and withdraw
     * as wrapped native token for sending (e.g. deposit ETH to the WETH contract in exchange for the WETH ERC20).
     * @param params.slippage - (optional) Maximum acceptable slippage in BPS. For example, a value of 30 means 0.3% slippage.
     * @param params.callData - (optional) Calldata to execute (can be empty: "0x").
     * @param params.relayerFee - (optional) Fee paid to relayers, in native asset on origin. Use `calculateRelayerFee` to estimate.
     * @param params.receiveLocal - (optional) Whether to receive the local asset ("nextAsset").
     * @param params.wrapNativeOnOrigin - (optional) Whether we should wrap the native token before sending the xcall. This will
     * use the Multisend utility contract to deposit ETH, approve Connext as a spender, and call xcall. If set true, `asset` should
     * be the target wrapper contract (e.g. WETH) address.
     * @param params.unwrapNativeOnDestination - (optional) Whether we should unwrap the wrapped native token when the transfer
     * reaches its destination. By default, if sending a wrapped native token, the wrapped token is what gets delivered at the
     * destination. Setting this to `true` means we should overwrite `callData` to target the Unwrapper utility contract, which
     * will unwrap the wrapped native token and deliver it to the target recipient (the `to` address).
     * @returns providers.TransactionRequest object.
     *
     * @example
     * ```ts
     * // call SdkBase.create(), instantiate a signer
     *
     * const params = {
     *   origin: "6648936"
     *   destination: "1869640809"
     *   to: "0x3cEe6c5c0fB713925BdA590829EA574b7b4f96b6"
     *   asset: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
     *   delegate: "0x3cEe6c5c0fB713925BdA590829EA574b7b4f96b6"
     *   amount: "1000000"
     *   slippage: "300"
     *   callData: "0x",
     *   relayerFee: "10000000000000"
     * };
     *
     * const txRequest = sdkBase.xcall(params);
     * signer.sendTransaction(txRequest);
     * ```
     */
    xcall(params: SdkXCallParams): Promise<providers.TransactionRequest>;
    /**
     * Updates the slippage tolerance for a specific transfer on origin; only the origin sender is allowed to do so.
     *
     * @param params - SdkUpdateSlippageParams object.
     * @param params.domainId - The origin domain ID of the transfer.
     * @param params.transferId - The transfer ID.
     * @param params.slippage - The new relayer fee to use for this transfer, in BPS.
     * @returns providers.TransactionRequest object.
     *
     * @example
     * ```ts
     * // call SdkBase.create(), instantiate a signer
     *
     * const params = {
     *   domainId: "6648936",
     *   transferId: "0xdd252f58a45dc78fee1ac12a628782bda6a98315b286aadf76e4d7322bf135ca",
     *   relayerFee: "1000",
     * };
     *
     * const txRequest = sdkBase.updateSlippage(params);
     * signer.sendTransaction(txRequest);
     * ```
     */
    updateSlippage(params: SdkUpdateSlippageParams): Promise<providers.TransactionRequest>;
    /**
     * Increases the relayer fee for a specific transfer on origin; anyone is allowed to bump for any transfer.
     *
     * @param params - SdkBumpTransferParams object.
     * @param params.domainId - The origin domain ID of the transfer.
     * @param params.transferId - The transfer ID.
     * @param params.relayerFee - The additional relayer fee to increase the transfer by, in native gas token.
     * @returns providers.TransactionRequest object.
     *
     * @example
     * ```ts
     * // call SdkBase.create(), instantiate a signer
     *
     * const params = {
     *   domainId: "6648936",
     *   transferId: "0xdd252f58a45dc78fee1ac12a628782bda6a98315b286aadf76e4d7322bf135ca",
     *   relayerFee: "10000",
     * };
     *
     * const txRequest = sdkBase.bumpTransfer(params);
     * signer.sendTransaction(txRequest);
     * ```
     */
    bumpTransfer(params: SdkBumpTransferParams): Promise<providers.TransactionRequest>;
    /**
     * Calculates an estimated relayer fee in the native asset of the origin domain to be used in xcall.
     *
     * @param params - SdkEstimateRelayerFeeParams object.
     * @param params.originDomain - The origin domain ID of the transfer.
     * @param params.destinationDomain - The destination domain ID of the transfer.
     * @returns The relayer fee in native asset of the origin domain.
     *
     * @example
     * ```ts
     * // call SdkBase.create(), instantiate a signer
     *
     * const params = {
     *   originDomain: "6648936",
     *   destinationDomain: "1869640809",
     * };
     *
     * const txRequest = sdkBase.estimateRelayerFee(params);
     * signer.sendTransaction(txRequest);
     * ```
     */
    estimateRelayerFee(params: SdkEstimateRelayerFeeParams): Promise<BigNumber>;
}
//# sourceMappingURL=sdkBase.d.ts.map