"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkRouter = void 0;
const nxtp_utils_1 = require("@connext/nxtp-utils");
const nxtp_txservice_1 = require("@connext/nxtp-txservice");
const helpers_1 = require("./lib/helpers");
const errors_1 = require("./lib/errors");
const sdkShared_1 = require("./sdkShared");
const config_1 = require("./config");
/**
 * @classdesc SDK class encapsulating router functions.
 *
 */
class SdkRouter extends sdkShared_1.SdkShared {
    constructor(config, logger, chainData) {
        super(config, logger, chainData);
    }
    /**
     * Create a singleton instance of the SdkRouter class.
     *
     * @param _config - SdkConfig object.
     * @param _config.chains - Chain config, at minimum with providers for each chain.
     * @param _config.signerAddress - Signer address for transactions.
     * @param _config.logLevel - (optional) Logging severity level.
     * @param _config.network - (optional) Blockchain environment to interact with.
     * @returns providers.TransactionRequest object.
     *
     * @example:
     * ```ts
     * import { SdkRouter } from "@connext/sdk";
     *
     * const config = {
     *   "chains": {
     *     "6648936": {
     *       "providers": ["https://rpc.ankr.com/eth"]
     *     },
     *     "1869640809": {
     *       "providers": ["https://mainnet.optimism.io"]
     *     },
     *     "1886350457": {
     *       "providers": ["https://polygon-rpc.com"]
     *     },
     *   },
     *   "signerAddress": "<wallet_address>",
     * }
     *
     * const SdkRouter = await SdkRouter.create(config);
     * ```
     */
    static async create(_config, _logger, _chainData) {
        const chainData = _chainData ?? (await (0, helpers_1.getChainData)());
        if (!chainData) {
            throw new errors_1.ChainDataUndefined();
        }
        const nxtpConfig = await (0, config_1.getConfig)(_config, nxtp_txservice_1.contractDeployments, chainData);
        const logger = _logger
            ? _logger.child({ name: "SdkRouter" })
            : new nxtp_utils_1.Logger({ name: "SdkRouter", level: nxtpConfig.logLevel });
        return this._instance || (this._instance = new SdkRouter(nxtpConfig, logger, chainData));
    }
    /**
     * Returns the transaction request for adding liquidity to a router.
     *
     * @param params - addLiquidityForRouter parameters object.
     * @param params.domainId - The domain ID.
     * @param params.amount - The amount of the token to add.
     * @param params.tokenAddress - The address of the token.
     * @param params.router - The address of the router.
     * @returns providers.TransactionRequest object.
     */
    async addLiquidityForRouter(params) {
        const { requestContext, methodContext } = (0, nxtp_utils_1.createLoggingContext)(this.addLiquidityForRouter.name);
        this.logger.info("Method start", requestContext, methodContext, { params });
        const signerAddress = this.config.signerAddress;
        if (!signerAddress) {
            throw new errors_1.SignerAddressMissing();
        }
        const { domainId, amount, tokenAddress, router } = params;
        const connextContract = await this.getConnext(domainId);
        const txRequest = await connextContract.populateTransaction.addRouterLiquidityFor(amount, tokenAddress, router);
        this.logger.info(`${this.addLiquidityForRouter.name} transaction created`, requestContext, methodContext, txRequest);
        return txRequest;
    }
    /**
     * Returns the transaction request for removing liquidity from a router.
     *
     * @remarks
     * This function is permissioned to the router owner only.
     *
     * @param params - removeRouterLiquidity parameters object.
     * @param params.domainId - The domain ID.
     * @param params.amount - The amount of the token to add.
     * @param params.tokenAddress - The address of the token.
     * @param params.recipient - The address where the removed funds will be delivered.
     * @returns providers.TransactionRequest object.
     */
    async removeRouterLiquidity(params) {
        const { requestContext, methodContext } = (0, nxtp_utils_1.createLoggingContext)(this.removeRouterLiquidity.name);
        this.logger.info("Method start", requestContext, methodContext, { params });
        const signerAddress = this.config.signerAddress;
        if (!signerAddress) {
            throw new errors_1.SignerAddressMissing();
        }
        const { domainId, amount, tokenAddress, recipient } = params;
        const [connextContract, [canonicalDomain, canonicalId]] = await Promise.all([
            this.getConnext(domainId),
            this.getCanonicalTokenId(domainId, tokenAddress),
        ]);
        const txRequest = await connextContract.populateTransaction.removeRouterLiquidity({ domain: canonicalDomain, id: canonicalId }, amount, recipient);
        this.logger.info(`${this.removeRouterLiquidity.name} transaction created`, requestContext, methodContext, txRequest);
        return txRequest;
    }
    async removeRouterLiquidityFor(params) {
        const { requestContext, methodContext } = (0, nxtp_utils_1.createLoggingContext)(this.removeRouterLiquidityFor.name);
        this.logger.info("Method start", requestContext, methodContext, { params });
        const signerAddress = this.config.signerAddress;
        if (!signerAddress) {
            throw new errors_1.SignerAddressMissing();
        }
        const { domainId, amount, tokenAddress, recipient, router } = params;
        const [connextContract, [canonicalDomain, canonicalId]] = await Promise.all([
            this.getConnext(domainId),
            this.getCanonicalTokenId(domainId, tokenAddress),
        ]);
        const txRequest = await connextContract.populateTransaction.removeRouterLiquidityFor({ domain: canonicalDomain, id: canonicalId }, amount, recipient, router);
        this.logger.info(`${this.removeRouterLiquidityFor.name} transaction created`, requestContext, methodContext, txRequest);
        return txRequest;
    }
}
exports.SdkRouter = SdkRouter;
//# sourceMappingURL=sdkRouter.js.map