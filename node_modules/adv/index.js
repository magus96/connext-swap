#! /usr/bin/env node
'use strict';

const argv = require('minimist')(process.argv.slice(2));
const path = require('path');
const fs = require('fs');
const spawn = require('child_process').spawn;

const help = () => {
	console.log('adv /path/to/project/folder');
};
const modifiers_append = ['', '>', '>=', '<', '<=', '~', '^'];
const modifiers_keep = ['*', 'latest'];

if ('h' in argv){
	help();
	process.exit(0);
}

if (argv._.length === 0){
	help();
	throw new Error('Invalid arguments');
}

const p = argv._[0];
const jsonPath = path.join(p, 'package.json');

fs.readFile(jsonPath, 'utf8', (err, data) => {
	if (err) throw err;

	const json = JSON.parse(data);
	const dependencies = json.dependencies;

	if (!dependencies) {
		return console.log(`No dependencies field found in ${jsonPath}, exiting`);
	}

	let finishedCount = 0;
	const length = Object.keys(dependencies).length;

	Object.keys(dependencies).forEach(pack => {
		console.log(`checking package ${pack}...`);

		const proc = spawn('npm', ['view', pack, 'version']);
		let version = null;
		proc.stdout.on('data', data => {
			version = data.toString('utf8').replace('\n', '');
		});
		proc.stderr.on('data', data => {
			throw new Error(data.toString('utf8'));
		});
		proc.on('close', code => {
			if (code !== 0) 
				throw new Error(`exited with code ${code} when checking package ${pack}`);

			const modifier = dependencies[pack];
			if (modifiers_keep.indexOf(modifier) > -1){
				console.log(`${pack}(${modifier}): keeping ${modifier}`);
			}
			else if (modifiers_append.indexOf(modifier) > -1){
				dependencies[pack] += version;
				console.log(`${pack}(${modifier}): version ${dependencies[pack]}`);
			}
			else {
				console.log(`${pack}(${modifier}): skipping`);
			}
			finishedCount ++;
			if (finishedCount === length){
				json.dependencies = dependencies;
				fs.writeFile(jsonPath, JSON.stringify(json, null, 2), err => {
					if (err) throw err;

					console.log('\nAll done! ð');
				});
			}
		});
	});
});