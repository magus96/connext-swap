schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar stagingoptimismgoerli_swap_BigDecimal

scalar BigInt

input stagingoptimismgoerli_swap_BlockChangedFilter {
  number_gte: Int!
}

input stagingoptimismgoerli_swap_Block_height {
  hash: stagingoptimismgoerli_swap_Bytes
  number: Int
  number_gte: Int
}

scalar stagingoptimismgoerli_swap_Bytes

"""Defines the order direction, either ascending or descending"""
enum stagingoptimismgoerli_swap_OrderDirection {
  asc
  desc
}

type stagingoptimismgoerli_swap_PooledToken {
  id: ID!
  asset: stagingoptimismgoerli_swap_Bytes!
}

input stagingoptimismgoerli_swap_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: stagingoptimismgoerli_swap_Bytes
  asset_not: stagingoptimismgoerli_swap_Bytes
  asset_gt: stagingoptimismgoerli_swap_Bytes
  asset_lt: stagingoptimismgoerli_swap_Bytes
  asset_gte: stagingoptimismgoerli_swap_Bytes
  asset_lte: stagingoptimismgoerli_swap_Bytes
  asset_in: [stagingoptimismgoerli_swap_Bytes!]
  asset_not_in: [stagingoptimismgoerli_swap_Bytes!]
  asset_contains: stagingoptimismgoerli_swap_Bytes
  asset_not_contains: stagingoptimismgoerli_swap_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_PooledToken_filter]
  or: [stagingoptimismgoerli_swap_PooledToken_filter]
}

enum stagingoptimismgoerli_swap_PooledToken_orderBy {
  id
  asset
}

type Query {
  stagingoptimismgoerli_swap_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SystemInfo
  stagingoptimismgoerli_swap_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SystemInfo_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SystemInfo!]!
  stagingoptimismgoerli_swap_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_PooledToken
  stagingoptimismgoerli_swap_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_PooledToken_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_PooledToken!]!
  stagingoptimismgoerli_swap_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwap
  stagingoptimismgoerli_swap_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwap!]!
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent!]!
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent!]!
  stagingoptimismgoerli_swap_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwapExchange
  stagingoptimismgoerli_swap_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwapExchange_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwapExchange!]!
  stagingoptimismgoerli_swap_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SwapDailyVolume
  stagingoptimismgoerli_swap_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SwapDailyVolume_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SwapDailyVolume!]!
  stagingoptimismgoerli_swap_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SwapHourlyVolume
  stagingoptimismgoerli_swap_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SwapHourlyVolume!]!
  stagingoptimismgoerli_swap_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SwapWeeklyVolume
  stagingoptimismgoerli_swap_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SwapWeeklyVolume!]!
  stagingoptimismgoerli_swap_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwapEvent
  stagingoptimismgoerli_swap_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwapEvent_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwapEvent!]!
  stagingoptimismgoerli_swap_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SwapTradeVolume
  stagingoptimismgoerli_swap_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SwapTradeVolume_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli_swap__meta(block: stagingoptimismgoerli_swap_Block_height): stagingoptimismgoerli_swap__Meta_
}

type stagingoptimismgoerli_swap_StableSwap {
  id: ID!
  isActive: Boolean
  key: stagingoptimismgoerli_swap_Bytes!
  canonicalId: stagingoptimismgoerli_swap_Bytes
  domain: BigInt
  swapPool: stagingoptimismgoerli_swap_Bytes
  lpToken: stagingoptimismgoerli_swap_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens: [stagingoptimismgoerli_swap_Bytes!]!
  tokenPrecisionMultipliers: [BigInt!]!
  balances: [BigInt!]!
  adminFees: [BigInt!]!
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_swap_StableSwapEvent_orderBy, orderDirection: stagingoptimismgoerli_swap_OrderDirection, where: stagingoptimismgoerli_swap_StableSwapEvent_filter): [stagingoptimismgoerli_swap_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_swap_StableSwapExchange_orderBy, orderDirection: stagingoptimismgoerli_swap_OrderDirection, where: stagingoptimismgoerli_swap_StableSwapExchange_filter): [stagingoptimismgoerli_swap_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy, orderDirection: stagingoptimismgoerli_swap_OrderDirection, where: stagingoptimismgoerli_swap_SwapHourlyVolume_filter): [stagingoptimismgoerli_swap_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_swap_SwapDailyVolume_orderBy, orderDirection: stagingoptimismgoerli_swap_OrderDirection, where: stagingoptimismgoerli_swap_SwapDailyVolume_filter): [stagingoptimismgoerli_swap_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy, orderDirection: stagingoptimismgoerli_swap_OrderDirection, where: stagingoptimismgoerli_swap_SwapWeeklyVolume_filter): [stagingoptimismgoerli_swap_SwapWeeklyVolume!]
}

type stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent implements stagingoptimismgoerli_swap_StableSwapEvent {
  id: ID!
  stableSwap: stagingoptimismgoerli_swap_StableSwap!
  provider: stagingoptimismgoerli_swap_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  balances: [BigInt!]!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingoptimismgoerli_swap_Bytes!
}

input stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_swap_StableSwap_filter
  provider: stagingoptimismgoerli_swap_Bytes
  provider_not: stagingoptimismgoerli_swap_Bytes
  provider_gt: stagingoptimismgoerli_swap_Bytes
  provider_lt: stagingoptimismgoerli_swap_Bytes
  provider_gte: stagingoptimismgoerli_swap_Bytes
  provider_lte: stagingoptimismgoerli_swap_Bytes
  provider_in: [stagingoptimismgoerli_swap_Bytes!]
  provider_not_in: [stagingoptimismgoerli_swap_Bytes!]
  provider_contains: stagingoptimismgoerli_swap_Bytes
  provider_not_contains: stagingoptimismgoerli_swap_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingoptimismgoerli_swap_Bytes
  transaction_not: stagingoptimismgoerli_swap_Bytes
  transaction_gt: stagingoptimismgoerli_swap_Bytes
  transaction_lt: stagingoptimismgoerli_swap_Bytes
  transaction_gte: stagingoptimismgoerli_swap_Bytes
  transaction_lte: stagingoptimismgoerli_swap_Bytes
  transaction_in: [stagingoptimismgoerli_swap_Bytes!]
  transaction_not_in: [stagingoptimismgoerli_swap_Bytes!]
  transaction_contains: stagingoptimismgoerli_swap_Bytes
  transaction_not_contains: stagingoptimismgoerli_swap_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter]
  or: [stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter]
}

enum stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  balances
  block
  timestamp
  transaction
}

interface stagingoptimismgoerli_swap_StableSwapEvent {
  id: ID!
  stableSwap: stagingoptimismgoerli_swap_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingoptimismgoerli_swap_Bytes!
}

input stagingoptimismgoerli_swap_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_swap_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingoptimismgoerli_swap_Bytes
  transaction_not: stagingoptimismgoerli_swap_Bytes
  transaction_gt: stagingoptimismgoerli_swap_Bytes
  transaction_lt: stagingoptimismgoerli_swap_Bytes
  transaction_gte: stagingoptimismgoerli_swap_Bytes
  transaction_lte: stagingoptimismgoerli_swap_Bytes
  transaction_in: [stagingoptimismgoerli_swap_Bytes!]
  transaction_not_in: [stagingoptimismgoerli_swap_Bytes!]
  transaction_contains: stagingoptimismgoerli_swap_Bytes
  transaction_not_contains: stagingoptimismgoerli_swap_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_StableSwapEvent_filter]
  or: [stagingoptimismgoerli_swap_StableSwapEvent_filter]
}

enum stagingoptimismgoerli_swap_StableSwapEvent_orderBy {
  id
  stableSwap
  block
  timestamp
  transaction
}

type stagingoptimismgoerli_swap_StableSwapExchange {
  id: ID!
  stableSwap: stagingoptimismgoerli_swap_StableSwap!
  buyer: stagingoptimismgoerli_swap_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  balances: [BigInt!]!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingoptimismgoerli_swap_Bytes!
}

input stagingoptimismgoerli_swap_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_swap_StableSwap_filter
  buyer: stagingoptimismgoerli_swap_Bytes
  buyer_not: stagingoptimismgoerli_swap_Bytes
  buyer_gt: stagingoptimismgoerli_swap_Bytes
  buyer_lt: stagingoptimismgoerli_swap_Bytes
  buyer_gte: stagingoptimismgoerli_swap_Bytes
  buyer_lte: stagingoptimismgoerli_swap_Bytes
  buyer_in: [stagingoptimismgoerli_swap_Bytes!]
  buyer_not_in: [stagingoptimismgoerli_swap_Bytes!]
  buyer_contains: stagingoptimismgoerli_swap_Bytes
  buyer_not_contains: stagingoptimismgoerli_swap_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingoptimismgoerli_swap_Bytes
  transaction_not: stagingoptimismgoerli_swap_Bytes
  transaction_gt: stagingoptimismgoerli_swap_Bytes
  transaction_lt: stagingoptimismgoerli_swap_Bytes
  transaction_gte: stagingoptimismgoerli_swap_Bytes
  transaction_lte: stagingoptimismgoerli_swap_Bytes
  transaction_in: [stagingoptimismgoerli_swap_Bytes!]
  transaction_not_in: [stagingoptimismgoerli_swap_Bytes!]
  transaction_contains: stagingoptimismgoerli_swap_Bytes
  transaction_not_contains: stagingoptimismgoerli_swap_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_StableSwapExchange_filter]
  or: [stagingoptimismgoerli_swap_StableSwapExchange_filter]
}

enum stagingoptimismgoerli_swap_StableSwapExchange_orderBy {
  id
  stableSwap
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  balances
  block
  timestamp
  transaction
}

type stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent implements stagingoptimismgoerli_swap_StableSwapEvent {
  id: ID!
  stableSwap: stagingoptimismgoerli_swap_StableSwap!
  provider: stagingoptimismgoerli_swap_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  balances: [BigInt!]!
  block: BigInt!
  timestamp: BigInt!
  transaction: stagingoptimismgoerli_swap_Bytes!
}

input stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_swap_StableSwap_filter
  provider: stagingoptimismgoerli_swap_Bytes
  provider_not: stagingoptimismgoerli_swap_Bytes
  provider_gt: stagingoptimismgoerli_swap_Bytes
  provider_lt: stagingoptimismgoerli_swap_Bytes
  provider_gte: stagingoptimismgoerli_swap_Bytes
  provider_lte: stagingoptimismgoerli_swap_Bytes
  provider_in: [stagingoptimismgoerli_swap_Bytes!]
  provider_not_in: [stagingoptimismgoerli_swap_Bytes!]
  provider_contains: stagingoptimismgoerli_swap_Bytes
  provider_not_contains: stagingoptimismgoerli_swap_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: stagingoptimismgoerli_swap_Bytes
  transaction_not: stagingoptimismgoerli_swap_Bytes
  transaction_gt: stagingoptimismgoerli_swap_Bytes
  transaction_lt: stagingoptimismgoerli_swap_Bytes
  transaction_gte: stagingoptimismgoerli_swap_Bytes
  transaction_lte: stagingoptimismgoerli_swap_Bytes
  transaction_in: [stagingoptimismgoerli_swap_Bytes!]
  transaction_not_in: [stagingoptimismgoerli_swap_Bytes!]
  transaction_contains: stagingoptimismgoerli_swap_Bytes
  transaction_not_contains: stagingoptimismgoerli_swap_Bytes
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter]
  or: [stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter]
}

enum stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  balances
  block
  timestamp
  transaction
}

input stagingoptimismgoerli_swap_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: stagingoptimismgoerli_swap_Bytes
  key_not: stagingoptimismgoerli_swap_Bytes
  key_gt: stagingoptimismgoerli_swap_Bytes
  key_lt: stagingoptimismgoerli_swap_Bytes
  key_gte: stagingoptimismgoerli_swap_Bytes
  key_lte: stagingoptimismgoerli_swap_Bytes
  key_in: [stagingoptimismgoerli_swap_Bytes!]
  key_not_in: [stagingoptimismgoerli_swap_Bytes!]
  key_contains: stagingoptimismgoerli_swap_Bytes
  key_not_contains: stagingoptimismgoerli_swap_Bytes
  canonicalId: stagingoptimismgoerli_swap_Bytes
  canonicalId_not: stagingoptimismgoerli_swap_Bytes
  canonicalId_gt: stagingoptimismgoerli_swap_Bytes
  canonicalId_lt: stagingoptimismgoerli_swap_Bytes
  canonicalId_gte: stagingoptimismgoerli_swap_Bytes
  canonicalId_lte: stagingoptimismgoerli_swap_Bytes
  canonicalId_in: [stagingoptimismgoerli_swap_Bytes!]
  canonicalId_not_in: [stagingoptimismgoerli_swap_Bytes!]
  canonicalId_contains: stagingoptimismgoerli_swap_Bytes
  canonicalId_not_contains: stagingoptimismgoerli_swap_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: stagingoptimismgoerli_swap_Bytes
  swapPool_not: stagingoptimismgoerli_swap_Bytes
  swapPool_gt: stagingoptimismgoerli_swap_Bytes
  swapPool_lt: stagingoptimismgoerli_swap_Bytes
  swapPool_gte: stagingoptimismgoerli_swap_Bytes
  swapPool_lte: stagingoptimismgoerli_swap_Bytes
  swapPool_in: [stagingoptimismgoerli_swap_Bytes!]
  swapPool_not_in: [stagingoptimismgoerli_swap_Bytes!]
  swapPool_contains: stagingoptimismgoerli_swap_Bytes
  swapPool_not_contains: stagingoptimismgoerli_swap_Bytes
  lpToken: stagingoptimismgoerli_swap_Bytes
  lpToken_not: stagingoptimismgoerli_swap_Bytes
  lpToken_gt: stagingoptimismgoerli_swap_Bytes
  lpToken_lt: stagingoptimismgoerli_swap_Bytes
  lpToken_gte: stagingoptimismgoerli_swap_Bytes
  lpToken_lte: stagingoptimismgoerli_swap_Bytes
  lpToken_in: [stagingoptimismgoerli_swap_Bytes!]
  lpToken_not_in: [stagingoptimismgoerli_swap_Bytes!]
  lpToken_contains: stagingoptimismgoerli_swap_Bytes
  lpToken_not_contains: stagingoptimismgoerli_swap_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [stagingoptimismgoerli_swap_Bytes!]
  pooledTokens_not: [stagingoptimismgoerli_swap_Bytes!]
  pooledTokens_contains: [stagingoptimismgoerli_swap_Bytes!]
  pooledTokens_contains_nocase: [stagingoptimismgoerli_swap_Bytes!]
  pooledTokens_not_contains: [stagingoptimismgoerli_swap_Bytes!]
  pooledTokens_not_contains_nocase: [stagingoptimismgoerli_swap_Bytes!]
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: stagingoptimismgoerli_swap_StableSwapEvent_filter
  exchanges_: stagingoptimismgoerli_swap_StableSwapExchange_filter
  hourlyVolumes_: stagingoptimismgoerli_swap_SwapHourlyVolume_filter
  dailyVolumes_: stagingoptimismgoerli_swap_SwapDailyVolume_filter
  weeklyVolumes_: stagingoptimismgoerli_swap_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_StableSwap_filter]
  or: [stagingoptimismgoerli_swap_StableSwap_filter]
}

enum stagingoptimismgoerli_swap_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type Subscription {
  stagingoptimismgoerli_swap_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SystemInfo
  stagingoptimismgoerli_swap_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SystemInfo_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SystemInfo!]!
  stagingoptimismgoerli_swap_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_PooledToken
  stagingoptimismgoerli_swap_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_PooledToken_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_PooledToken!]!
  stagingoptimismgoerli_swap_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwap
  stagingoptimismgoerli_swap_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwap_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwap!]!
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent!]!
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent!]!
  stagingoptimismgoerli_swap_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwapExchange
  stagingoptimismgoerli_swap_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwapExchange_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwapExchange!]!
  stagingoptimismgoerli_swap_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SwapDailyVolume
  stagingoptimismgoerli_swap_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SwapDailyVolume_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SwapDailyVolume!]!
  stagingoptimismgoerli_swap_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SwapHourlyVolume
  stagingoptimismgoerli_swap_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SwapHourlyVolume!]!
  stagingoptimismgoerli_swap_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SwapWeeklyVolume
  stagingoptimismgoerli_swap_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SwapWeeklyVolume!]!
  stagingoptimismgoerli_swap_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_StableSwapEvent
  stagingoptimismgoerli_swap_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_StableSwapEvent_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_StableSwapEvent!]!
  stagingoptimismgoerli_swap_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingoptimismgoerli_swap_SwapTradeVolume
  stagingoptimismgoerli_swap_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingoptimismgoerli_swap_SwapTradeVolume_orderBy
    orderDirection: stagingoptimismgoerli_swap_OrderDirection
    where: stagingoptimismgoerli_swap_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingoptimismgoerli_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingoptimismgoerli_swap_SwapTradeVolume!]!
  """Access to subgraph metadata"""
  stagingoptimismgoerli_swap__meta(block: stagingoptimismgoerli_swap_Block_height): stagingoptimismgoerli_swap__Meta_
}

type stagingoptimismgoerli_swap_SwapDailyVolume implements stagingoptimismgoerli_swap_SwapTradeVolume {
  id: ID!
  stableSwap: stagingoptimismgoerli_swap_StableSwap!
  timestamp: BigInt!
  volume: stagingoptimismgoerli_swap_BigDecimal!
}

input stagingoptimismgoerli_swap_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_swap_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingoptimismgoerli_swap_BigDecimal
  volume_not: stagingoptimismgoerli_swap_BigDecimal
  volume_gt: stagingoptimismgoerli_swap_BigDecimal
  volume_lt: stagingoptimismgoerli_swap_BigDecimal
  volume_gte: stagingoptimismgoerli_swap_BigDecimal
  volume_lte: stagingoptimismgoerli_swap_BigDecimal
  volume_in: [stagingoptimismgoerli_swap_BigDecimal!]
  volume_not_in: [stagingoptimismgoerli_swap_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_SwapDailyVolume_filter]
  or: [stagingoptimismgoerli_swap_SwapDailyVolume_filter]
}

enum stagingoptimismgoerli_swap_SwapDailyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type stagingoptimismgoerli_swap_SwapHourlyVolume implements stagingoptimismgoerli_swap_SwapTradeVolume {
  id: ID!
  stableSwap: stagingoptimismgoerli_swap_StableSwap!
  timestamp: BigInt!
  volume: stagingoptimismgoerli_swap_BigDecimal!
}

input stagingoptimismgoerli_swap_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_swap_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingoptimismgoerli_swap_BigDecimal
  volume_not: stagingoptimismgoerli_swap_BigDecimal
  volume_gt: stagingoptimismgoerli_swap_BigDecimal
  volume_lt: stagingoptimismgoerli_swap_BigDecimal
  volume_gte: stagingoptimismgoerli_swap_BigDecimal
  volume_lte: stagingoptimismgoerli_swap_BigDecimal
  volume_in: [stagingoptimismgoerli_swap_BigDecimal!]
  volume_not_in: [stagingoptimismgoerli_swap_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_SwapHourlyVolume_filter]
  or: [stagingoptimismgoerli_swap_SwapHourlyVolume_filter]
}

enum stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

interface stagingoptimismgoerli_swap_SwapTradeVolume {
  stableSwap: stagingoptimismgoerli_swap_StableSwap!
  timestamp: BigInt!
  volume: stagingoptimismgoerli_swap_BigDecimal!
}

input stagingoptimismgoerli_swap_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_swap_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingoptimismgoerli_swap_BigDecimal
  volume_not: stagingoptimismgoerli_swap_BigDecimal
  volume_gt: stagingoptimismgoerli_swap_BigDecimal
  volume_lt: stagingoptimismgoerli_swap_BigDecimal
  volume_gte: stagingoptimismgoerli_swap_BigDecimal
  volume_lte: stagingoptimismgoerli_swap_BigDecimal
  volume_in: [stagingoptimismgoerli_swap_BigDecimal!]
  volume_not_in: [stagingoptimismgoerli_swap_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_SwapTradeVolume_filter]
  or: [stagingoptimismgoerli_swap_SwapTradeVolume_filter]
}

enum stagingoptimismgoerli_swap_SwapTradeVolume_orderBy {
  stableSwap
  timestamp
  volume
}

type stagingoptimismgoerli_swap_SwapWeeklyVolume implements stagingoptimismgoerli_swap_SwapTradeVolume {
  id: ID!
  stableSwap: stagingoptimismgoerli_swap_StableSwap!
  timestamp: BigInt!
  volume: stagingoptimismgoerli_swap_BigDecimal!
}

input stagingoptimismgoerli_swap_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: stagingoptimismgoerli_swap_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: stagingoptimismgoerli_swap_BigDecimal
  volume_not: stagingoptimismgoerli_swap_BigDecimal
  volume_gt: stagingoptimismgoerli_swap_BigDecimal
  volume_lt: stagingoptimismgoerli_swap_BigDecimal
  volume_gte: stagingoptimismgoerli_swap_BigDecimal
  volume_lte: stagingoptimismgoerli_swap_BigDecimal
  volume_in: [stagingoptimismgoerli_swap_BigDecimal!]
  volume_not_in: [stagingoptimismgoerli_swap_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_SwapWeeklyVolume_filter]
  or: [stagingoptimismgoerli_swap_SwapWeeklyVolume_filter]
}

enum stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  timestamp
  volume
}

type stagingoptimismgoerli_swap_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input stagingoptimismgoerli_swap_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingoptimismgoerli_swap_BlockChangedFilter
  and: [stagingoptimismgoerli_swap_SystemInfo_filter]
  or: [stagingoptimismgoerli_swap_SystemInfo_filter]
}

enum stagingoptimismgoerli_swap_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type stagingoptimismgoerli_swap__Block_ {
  """The hash of the block"""
  hash: stagingoptimismgoerli_swap_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type stagingoptimismgoerli_swap__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: stagingoptimismgoerli_swap__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}