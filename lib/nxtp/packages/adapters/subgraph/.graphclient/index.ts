// @ts-nocheck
import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import type { GetMeshOptions } from '@graphql-mesh/runtime';
import type { YamlConfig } from '@graphql-mesh/types';
import { PubSub } from '@graphql-mesh/utils';
import { DefaultLogger } from '@graphql-mesh/utils';
import MeshCache from "@graphql-mesh/cache-localforage";
import { fetch as fetchFn } from '@whatwg-node/fetch';

import { MeshResolvedSource } from '@graphql-mesh/runtime';
import { MeshTransform, MeshPlugin } from '@graphql-mesh/types';
import GraphqlHandler from "@graphql-mesh/graphql"
import PrefixTransform from "@graphql-mesh/transform-prefix";
import AutoPaginationTransform from "@graphprotocol/client-auto-pagination";
import StitchingMerger from "@graphql-mesh/merger-stitching";
import { printWithCache } from '@graphql-mesh/utils';
import { createMeshHTTPHandler, MeshHTTPHandler } from '@graphql-mesh/http';
import { getMesh, ExecuteMeshFn, SubscribeMeshFn, MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';
import { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';
import { path as pathModule } from '@graphql-mesh/cross-helpers';
import { ImportFn } from '@graphql-mesh/types';
import type { ConnextOptimismGoerliTypes } from './sources/Connext_OptimismGoerli/types';
import type { StableSwapXdaiTypes } from './sources/StableSwap_Xdai/types';
import type { HubStagingGoerliTypes } from './sources/Hub_Staging_Goerli/types';
import type { HubMainnetTypes } from './sources/Hub_Mainnet/types';
import type { ConnextTestGoerliTypes } from './sources/Connext_Test_Goerli/types';
import type { StableSwapStagingArbitrumGoerliTypes } from './sources/StableSwap_Staging_ArbitrumGoerli/types';
import type { ConnextTestOptimismGoerliTypes } from './sources/Connext_Test_OptimismGoerli/types';
import type { StableSwapOptimismTypes } from './sources/StableSwap_Optimism/types';
import type { StableSwapOptimismGoerliTypes } from './sources/StableSwap_OptimismGoerli/types';
import type { HubGoerliTypes } from './sources/Hub_Goerli/types';
import type { StableSwapStagingMumbaiTypes } from './sources/StableSwap_Staging_Mumbai/types';
import type { ConnextLocal1337Types } from './sources/Connext_Local1337/types';
import type { StableSwapGoerliTypes } from './sources/StableSwap_Goerli/types';
import type { StableSwapArbitrumGoerliTypes } from './sources/StableSwap_ArbitrumGoerli/types';
import type { StableSwapMumbaiTypes } from './sources/StableSwap_Mumbai/types';
import type { StableSwapBnbTypes } from './sources/StableSwap_Bnb/types';
import type { ConnextStagingOptimismGoerliTypes } from './sources/Connext_Staging_OptimismGoerli/types';
import type { StableSwapStagingGoerliTypes } from './sources/StableSwap_Staging_Goerli/types';
import type { StableSwapArbitrumOneTypes } from './sources/StableSwap_ArbitrumOne/types';
import type { ConnextLocal1338Types } from './sources/Connext_Local1338/types';
import type { ConnextOptimismTypes } from './sources/Connext_Optimism/types';
import type { ConnextStagingMumbaiTypes } from './sources/Connext_Staging_Mumbai/types';
import type { ConnextStagingArbitrumGoerliTypes } from './sources/Connext_Staging_ArbitrumGoerli/types';
import type { ConnextBnbTypes } from './sources/Connext_Bnb/types';
import type { ConnextGoerliTypes } from './sources/Connext_Goerli/types';
import type { ConnextXdaiTypes } from './sources/Connext_Xdai/types';
import type { ConnextMumbaiTypes } from './sources/Connext_Mumbai/types';
import type { ConnextPolygonTypes } from './sources/Connext_Polygon/types';
import type { ConnextMainnetTypes } from './sources/Connext_Mainnet/types';
import type { ConnextArbitrumOneTypes } from './sources/Connext_ArbitrumOne/types';
import type { ConnextArbitrumGoerliTypes } from './sources/Connext_ArbitrumGoerli/types';
import type { ConnextStagingGoerliTypes } from './sources/Connext_Staging_Goerli/types';
import type { StableSwapStagingOptimismGoerliTypes } from './sources/StableSwap_Staging_OptimismGoerli/types';
import type { StableSwapPolygonTypes } from './sources/StableSwap_Polygon/types';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };



/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  polygon_swap_BigDecimal: any;
  BigInt: any;
  polygon_swap_Bytes: any;
  optimismgoerli_BigDecimal: any;
  optimismgoerli_Bytes: any;
  stagingarbitrumgoerli_swap_BigDecimal: any;
  stagingarbitrumgoerli_swap_Bytes: any;
  arbitrumgoerli_BigDecimal: any;
  arbitrumgoerli_Bytes: any;
  stagingoptimismgoerli_swap_BigDecimal: any;
  stagingoptimismgoerli_swap_Bytes: any;
  testgoerli_BigDecimal: any;
  testgoerli_Bytes: any;
  xdai_swap_BigDecimal: any;
  xdai_swap_Bytes: any;
  staginggoerli_BigDecimal: any;
  staginggoerli_Bytes: any;
  mainnet_BigDecimal: any;
  mainnet_Bytes: any;
  testoptimismgoerli_BigDecimal: any;
  testoptimismgoerli_Bytes: any;
  optimism_swap_BigDecimal: any;
  optimism_swap_Bytes: any;
  goerli_swap_BigDecimal: any;
  goerli_swap_Bytes: any;
  optimismgoerli_swap_BigDecimal: any;
  optimismgoerli_swap_Bytes: any;
  stagingmumbai_swap_BigDecimal: any;
  stagingmumbai_swap_Bytes: any;
  goerli_BigDecimal: any;
  goerli_Bytes: any;
  local1337_BigDecimal: any;
  local1337_Bytes: any;
  bnb_swap_BigDecimal: any;
  bnb_swap_Bytes: any;
  arbitrumgoerli_swap_BigDecimal: any;
  arbitrumgoerli_swap_Bytes: any;
  mumbai_swap_BigDecimal: any;
  mumbai_swap_Bytes: any;
  optimism_BigDecimal: any;
  optimism_Bytes: any;
  staginggoerli_swap_BigDecimal: any;
  staginggoerli_swap_Bytes: any;
  stagingoptimismgoerli_BigDecimal: any;
  stagingoptimismgoerli_Bytes: any;
  stagingmumbai_BigDecimal: any;
  stagingmumbai_Bytes: any;
  arbitrumone_swap_BigDecimal: any;
  arbitrumone_swap_Bytes: any;
  local1338_BigDecimal: any;
  local1338_Bytes: any;
  stagingarbitrumgoerli_BigDecimal: any;
  stagingarbitrumgoerli_Bytes: any;
  mumbai_BigDecimal: any;
  mumbai_Bytes: any;
  bnb_BigDecimal: any;
  bnb_Bytes: any;
  polygon_BigDecimal: any;
  polygon_Bytes: any;
  xdai_BigDecimal: any;
  xdai_Bytes: any;
  arbitrumone_BigDecimal: any;
  arbitrumone_Bytes: any;
};

export type Query = {
  polygon_swap_systemInfo?: Maybe<polygon_swap_SystemInfo>;
  polygon_swap_systemInfos: Array<polygon_swap_SystemInfo>;
  polygon_swap_pooledToken?: Maybe<polygon_swap_PooledToken>;
  polygon_swap_pooledTokens: Array<polygon_swap_PooledToken>;
  polygon_swap_stableSwap?: Maybe<polygon_swap_StableSwap>;
  polygon_swap_stableSwaps: Array<polygon_swap_StableSwap>;
  polygon_swap_stableSwapAddLiquidityEvent?: Maybe<polygon_swap_StableSwapAddLiquidityEvent>;
  polygon_swap_stableSwapAddLiquidityEvents: Array<polygon_swap_StableSwapAddLiquidityEvent>;
  polygon_swap_stableSwapRemoveLiquidityEvent?: Maybe<polygon_swap_StableSwapRemoveLiquidityEvent>;
  polygon_swap_stableSwapRemoveLiquidityEvents: Array<polygon_swap_StableSwapRemoveLiquidityEvent>;
  polygon_swap_stableSwapExchange?: Maybe<polygon_swap_StableSwapExchange>;
  polygon_swap_stableSwapExchanges: Array<polygon_swap_StableSwapExchange>;
  polygon_swap_swapDailyVolume?: Maybe<polygon_swap_SwapDailyVolume>;
  polygon_swap_swapDailyVolumes: Array<polygon_swap_SwapDailyVolume>;
  polygon_swap_swapHourlyVolume?: Maybe<polygon_swap_SwapHourlyVolume>;
  polygon_swap_swapHourlyVolumes: Array<polygon_swap_SwapHourlyVolume>;
  polygon_swap_swapWeeklyVolume?: Maybe<polygon_swap_SwapWeeklyVolume>;
  polygon_swap_swapWeeklyVolumes: Array<polygon_swap_SwapWeeklyVolume>;
  polygon_swap_stableSwapEvent?: Maybe<polygon_swap_StableSwapEvent>;
  polygon_swap_stableSwapEvents: Array<polygon_swap_StableSwapEvent>;
  polygon_swap_swapTradeVolume?: Maybe<polygon_swap_SwapTradeVolume>;
  polygon_swap_swapTradeVolumes: Array<polygon_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  polygon_swap__meta?: Maybe<polygon_swap__Meta_>;
  optimismgoerli_asset?: Maybe<optimismgoerli_Asset>;
  optimismgoerli_assets: Array<optimismgoerli_Asset>;
  optimismgoerli_assetStatus?: Maybe<optimismgoerli_AssetStatus>;
  optimismgoerli_assetStatuses: Array<optimismgoerli_AssetStatus>;
  optimismgoerli_assetBalance?: Maybe<optimismgoerli_AssetBalance>;
  optimismgoerli_assetBalances: Array<optimismgoerli_AssetBalance>;
  optimismgoerli_router?: Maybe<optimismgoerli_Router>;
  optimismgoerli_routers: Array<optimismgoerli_Router>;
  optimismgoerli_setting?: Maybe<optimismgoerli_Setting>;
  optimismgoerli_settings: Array<optimismgoerli_Setting>;
  optimismgoerli_relayer?: Maybe<optimismgoerli_Relayer>;
  optimismgoerli_relayers: Array<optimismgoerli_Relayer>;
  optimismgoerli_sequencer?: Maybe<optimismgoerli_Sequencer>;
  optimismgoerli_sequencers: Array<optimismgoerli_Sequencer>;
  optimismgoerli_originTransfer?: Maybe<optimismgoerli_OriginTransfer>;
  optimismgoerli_originTransfers: Array<optimismgoerli_OriginTransfer>;
  optimismgoerli_destinationTransfer?: Maybe<optimismgoerli_DestinationTransfer>;
  optimismgoerli_destinationTransfers: Array<optimismgoerli_DestinationTransfer>;
  optimismgoerli_originMessage?: Maybe<optimismgoerli_OriginMessage>;
  optimismgoerli_originMessages: Array<optimismgoerli_OriginMessage>;
  optimismgoerli_aggregateRoot?: Maybe<optimismgoerli_AggregateRoot>;
  optimismgoerli_aggregateRoots: Array<optimismgoerli_AggregateRoot>;
  optimismgoerli_connectorMeta?: Maybe<optimismgoerli_ConnectorMeta>;
  optimismgoerli_connectorMetas: Array<optimismgoerli_ConnectorMeta>;
  optimismgoerli_rootCount?: Maybe<optimismgoerli_RootCount>;
  optimismgoerli_rootCounts: Array<optimismgoerli_RootCount>;
  optimismgoerli_rootMessageSent?: Maybe<optimismgoerli_RootMessageSent>;
  optimismgoerli_rootMessageSents: Array<optimismgoerli_RootMessageSent>;
  /** Access to subgraph metadata */
  optimismgoerli__meta?: Maybe<optimismgoerli__Meta_>;
  stagingarbitrumgoerli_swap_systemInfo?: Maybe<stagingarbitrumgoerli_swap_SystemInfo>;
  stagingarbitrumgoerli_swap_systemInfos: Array<stagingarbitrumgoerli_swap_SystemInfo>;
  stagingarbitrumgoerli_swap_pooledToken?: Maybe<stagingarbitrumgoerli_swap_PooledToken>;
  stagingarbitrumgoerli_swap_pooledTokens: Array<stagingarbitrumgoerli_swap_PooledToken>;
  stagingarbitrumgoerli_swap_stableSwap?: Maybe<stagingarbitrumgoerli_swap_StableSwap>;
  stagingarbitrumgoerli_swap_stableSwaps: Array<stagingarbitrumgoerli_swap_StableSwap>;
  stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvent?: Maybe<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvents: Array<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvents: Array<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_swap_stableSwapExchange?: Maybe<stagingarbitrumgoerli_swap_StableSwapExchange>;
  stagingarbitrumgoerli_swap_stableSwapExchanges: Array<stagingarbitrumgoerli_swap_StableSwapExchange>;
  stagingarbitrumgoerli_swap_swapDailyVolume?: Maybe<stagingarbitrumgoerli_swap_SwapDailyVolume>;
  stagingarbitrumgoerli_swap_swapDailyVolumes: Array<stagingarbitrumgoerli_swap_SwapDailyVolume>;
  stagingarbitrumgoerli_swap_swapHourlyVolume?: Maybe<stagingarbitrumgoerli_swap_SwapHourlyVolume>;
  stagingarbitrumgoerli_swap_swapHourlyVolumes: Array<stagingarbitrumgoerli_swap_SwapHourlyVolume>;
  stagingarbitrumgoerli_swap_swapWeeklyVolume?: Maybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume>;
  stagingarbitrumgoerli_swap_swapWeeklyVolumes: Array<stagingarbitrumgoerli_swap_SwapWeeklyVolume>;
  stagingarbitrumgoerli_swap_stableSwapEvent?: Maybe<stagingarbitrumgoerli_swap_StableSwapEvent>;
  stagingarbitrumgoerli_swap_stableSwapEvents: Array<stagingarbitrumgoerli_swap_StableSwapEvent>;
  stagingarbitrumgoerli_swap_swapTradeVolume?: Maybe<stagingarbitrumgoerli_swap_SwapTradeVolume>;
  stagingarbitrumgoerli_swap_swapTradeVolumes: Array<stagingarbitrumgoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingarbitrumgoerli_swap__meta?: Maybe<stagingarbitrumgoerli_swap__Meta_>;
  arbitrumgoerli_asset?: Maybe<arbitrumgoerli_Asset>;
  arbitrumgoerli_assets: Array<arbitrumgoerli_Asset>;
  arbitrumgoerli_assetStatus?: Maybe<arbitrumgoerli_AssetStatus>;
  arbitrumgoerli_assetStatuses: Array<arbitrumgoerli_AssetStatus>;
  arbitrumgoerli_assetBalance?: Maybe<arbitrumgoerli_AssetBalance>;
  arbitrumgoerli_assetBalances: Array<arbitrumgoerli_AssetBalance>;
  arbitrumgoerli_router?: Maybe<arbitrumgoerli_Router>;
  arbitrumgoerli_routers: Array<arbitrumgoerli_Router>;
  arbitrumgoerli_setting?: Maybe<arbitrumgoerli_Setting>;
  arbitrumgoerli_settings: Array<arbitrumgoerli_Setting>;
  arbitrumgoerli_relayer?: Maybe<arbitrumgoerli_Relayer>;
  arbitrumgoerli_relayers: Array<arbitrumgoerli_Relayer>;
  arbitrumgoerli_sequencer?: Maybe<arbitrumgoerli_Sequencer>;
  arbitrumgoerli_sequencers: Array<arbitrumgoerli_Sequencer>;
  arbitrumgoerli_originTransfer?: Maybe<arbitrumgoerli_OriginTransfer>;
  arbitrumgoerli_originTransfers: Array<arbitrumgoerli_OriginTransfer>;
  arbitrumgoerli_destinationTransfer?: Maybe<arbitrumgoerli_DestinationTransfer>;
  arbitrumgoerli_destinationTransfers: Array<arbitrumgoerli_DestinationTransfer>;
  arbitrumgoerli_originMessage?: Maybe<arbitrumgoerli_OriginMessage>;
  arbitrumgoerli_originMessages: Array<arbitrumgoerli_OriginMessage>;
  arbitrumgoerli_aggregateRoot?: Maybe<arbitrumgoerli_AggregateRoot>;
  arbitrumgoerli_aggregateRoots: Array<arbitrumgoerli_AggregateRoot>;
  arbitrumgoerli_connectorMeta?: Maybe<arbitrumgoerli_ConnectorMeta>;
  arbitrumgoerli_connectorMetas: Array<arbitrumgoerli_ConnectorMeta>;
  arbitrumgoerli_rootCount?: Maybe<arbitrumgoerli_RootCount>;
  arbitrumgoerli_rootCounts: Array<arbitrumgoerli_RootCount>;
  arbitrumgoerli_rootMessageSent?: Maybe<arbitrumgoerli_RootMessageSent>;
  arbitrumgoerli_rootMessageSents: Array<arbitrumgoerli_RootMessageSent>;
  /** Access to subgraph metadata */
  arbitrumgoerli__meta?: Maybe<arbitrumgoerli__Meta_>;
  stagingoptimismgoerli_swap_systemInfo?: Maybe<stagingoptimismgoerli_swap_SystemInfo>;
  stagingoptimismgoerli_swap_systemInfos: Array<stagingoptimismgoerli_swap_SystemInfo>;
  stagingoptimismgoerli_swap_pooledToken?: Maybe<stagingoptimismgoerli_swap_PooledToken>;
  stagingoptimismgoerli_swap_pooledTokens: Array<stagingoptimismgoerli_swap_PooledToken>;
  stagingoptimismgoerli_swap_stableSwap?: Maybe<stagingoptimismgoerli_swap_StableSwap>;
  stagingoptimismgoerli_swap_stableSwaps: Array<stagingoptimismgoerli_swap_StableSwap>;
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvent?: Maybe<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvents: Array<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvents: Array<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_swap_stableSwapExchange?: Maybe<stagingoptimismgoerli_swap_StableSwapExchange>;
  stagingoptimismgoerli_swap_stableSwapExchanges: Array<stagingoptimismgoerli_swap_StableSwapExchange>;
  stagingoptimismgoerli_swap_swapDailyVolume?: Maybe<stagingoptimismgoerli_swap_SwapDailyVolume>;
  stagingoptimismgoerli_swap_swapDailyVolumes: Array<stagingoptimismgoerli_swap_SwapDailyVolume>;
  stagingoptimismgoerli_swap_swapHourlyVolume?: Maybe<stagingoptimismgoerli_swap_SwapHourlyVolume>;
  stagingoptimismgoerli_swap_swapHourlyVolumes: Array<stagingoptimismgoerli_swap_SwapHourlyVolume>;
  stagingoptimismgoerli_swap_swapWeeklyVolume?: Maybe<stagingoptimismgoerli_swap_SwapWeeklyVolume>;
  stagingoptimismgoerli_swap_swapWeeklyVolumes: Array<stagingoptimismgoerli_swap_SwapWeeklyVolume>;
  stagingoptimismgoerli_swap_stableSwapEvent?: Maybe<stagingoptimismgoerli_swap_StableSwapEvent>;
  stagingoptimismgoerli_swap_stableSwapEvents: Array<stagingoptimismgoerli_swap_StableSwapEvent>;
  stagingoptimismgoerli_swap_swapTradeVolume?: Maybe<stagingoptimismgoerli_swap_SwapTradeVolume>;
  stagingoptimismgoerli_swap_swapTradeVolumes: Array<stagingoptimismgoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingoptimismgoerli_swap__meta?: Maybe<stagingoptimismgoerli_swap__Meta_>;
  testgoerli_asset?: Maybe<testgoerli_Asset>;
  testgoerli_assets: Array<testgoerli_Asset>;
  testgoerli_assetBalance?: Maybe<testgoerli_AssetBalance>;
  testgoerli_assetBalances: Array<testgoerli_AssetBalance>;
  testgoerli_router?: Maybe<testgoerli_Router>;
  testgoerli_routers: Array<testgoerli_Router>;
  testgoerli_setting?: Maybe<testgoerli_Setting>;
  testgoerli_settings: Array<testgoerli_Setting>;
  testgoerli_relayer?: Maybe<testgoerli_Relayer>;
  testgoerli_relayers: Array<testgoerli_Relayer>;
  testgoerli_stableSwap?: Maybe<testgoerli_StableSwap>;
  testgoerli_stableSwaps: Array<testgoerli_StableSwap>;
  testgoerli_sponsorVault?: Maybe<testgoerli_SponsorVault>;
  testgoerli_sponsorVaults: Array<testgoerli_SponsorVault>;
  testgoerli_originTransfer?: Maybe<testgoerli_OriginTransfer>;
  testgoerli_originTransfers: Array<testgoerli_OriginTransfer>;
  testgoerli_destinationTransfer?: Maybe<testgoerli_DestinationTransfer>;
  testgoerli_destinationTransfers: Array<testgoerli_DestinationTransfer>;
  /** Access to subgraph metadata */
  testgoerli__meta?: Maybe<testgoerli__Meta_>;
  xdai_swap_systemInfo?: Maybe<xdai_swap_SystemInfo>;
  xdai_swap_systemInfos: Array<xdai_swap_SystemInfo>;
  xdai_swap_pooledToken?: Maybe<xdai_swap_PooledToken>;
  xdai_swap_pooledTokens: Array<xdai_swap_PooledToken>;
  xdai_swap_stableSwap?: Maybe<xdai_swap_StableSwap>;
  xdai_swap_stableSwaps: Array<xdai_swap_StableSwap>;
  xdai_swap_stableSwapAddLiquidityEvent?: Maybe<xdai_swap_StableSwapAddLiquidityEvent>;
  xdai_swap_stableSwapAddLiquidityEvents: Array<xdai_swap_StableSwapAddLiquidityEvent>;
  xdai_swap_stableSwapRemoveLiquidityEvent?: Maybe<xdai_swap_StableSwapRemoveLiquidityEvent>;
  xdai_swap_stableSwapRemoveLiquidityEvents: Array<xdai_swap_StableSwapRemoveLiquidityEvent>;
  xdai_swap_stableSwapExchange?: Maybe<xdai_swap_StableSwapExchange>;
  xdai_swap_stableSwapExchanges: Array<xdai_swap_StableSwapExchange>;
  xdai_swap_swapDailyVolume?: Maybe<xdai_swap_SwapDailyVolume>;
  xdai_swap_swapDailyVolumes: Array<xdai_swap_SwapDailyVolume>;
  xdai_swap_swapHourlyVolume?: Maybe<xdai_swap_SwapHourlyVolume>;
  xdai_swap_swapHourlyVolumes: Array<xdai_swap_SwapHourlyVolume>;
  xdai_swap_swapWeeklyVolume?: Maybe<xdai_swap_SwapWeeklyVolume>;
  xdai_swap_swapWeeklyVolumes: Array<xdai_swap_SwapWeeklyVolume>;
  xdai_swap_stableSwapEvent?: Maybe<xdai_swap_StableSwapEvent>;
  xdai_swap_stableSwapEvents: Array<xdai_swap_StableSwapEvent>;
  xdai_swap_swapTradeVolume?: Maybe<xdai_swap_SwapTradeVolume>;
  xdai_swap_swapTradeVolumes: Array<xdai_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  xdai_swap__meta?: Maybe<xdai_swap__Meta_>;
  staginggoerli_rootAggregated?: Maybe<staginggoerli_RootAggregated>;
  staginggoerli_rootAggregateds: Array<staginggoerli_RootAggregated>;
  staginggoerli_rootPropagated?: Maybe<staginggoerli_RootPropagated>;
  staginggoerli_rootPropagateds: Array<staginggoerli_RootPropagated>;
  staginggoerli_aggregatedMessageRoot?: Maybe<staginggoerli_AggregatedMessageRoot>;
  staginggoerli_aggregatedMessageRoots: Array<staginggoerli_AggregatedMessageRoot>;
  staginggoerli_rootManagerMeta?: Maybe<staginggoerli_RootManagerMeta>;
  staginggoerli_rootManagerMetas: Array<staginggoerli_RootManagerMeta>;
  staginggoerli_polygonConnectorMeta?: Maybe<staginggoerli_PolygonConnectorMeta>;
  staginggoerli_polygonConnectorMetas: Array<staginggoerli_PolygonConnectorMeta>;
  staginggoerli_optimismConnectorMeta?: Maybe<staginggoerli_OptimismConnectorMeta>;
  staginggoerli_optimismConnectorMetas: Array<staginggoerli_OptimismConnectorMeta>;
  staginggoerli_bnbConnectorMeta?: Maybe<staginggoerli_BnbConnectorMeta>;
  staginggoerli_bnbConnectorMetas: Array<staginggoerli_BnbConnectorMeta>;
  staginggoerli_arbitrumConnectorMeta?: Maybe<staginggoerli_ArbitrumConnectorMeta>;
  staginggoerli_arbitrumConnectorMetas: Array<staginggoerli_ArbitrumConnectorMeta>;
  staginggoerli_gnosisConnectorMeta?: Maybe<staginggoerli_GnosisConnectorMeta>;
  staginggoerli_gnosisConnectorMetas: Array<staginggoerli_GnosisConnectorMeta>;
  staginggoerli_rootMessageProcessed?: Maybe<staginggoerli_RootMessageProcessed>;
  staginggoerli_rootMessageProcesseds: Array<staginggoerli_RootMessageProcessed>;
  /** Access to subgraph metadata */
  staginggoerli__meta?: Maybe<staginggoerli__Meta_>;
  mainnet_rootAggregated?: Maybe<mainnet_RootAggregated>;
  mainnet_rootAggregateds: Array<mainnet_RootAggregated>;
  mainnet_rootPropagated?: Maybe<mainnet_RootPropagated>;
  mainnet_rootPropagateds: Array<mainnet_RootPropagated>;
  mainnet_aggregatedMessageRoot?: Maybe<mainnet_AggregatedMessageRoot>;
  mainnet_aggregatedMessageRoots: Array<mainnet_AggregatedMessageRoot>;
  mainnet_rootManagerMeta?: Maybe<mainnet_RootManagerMeta>;
  mainnet_rootManagerMetas: Array<mainnet_RootManagerMeta>;
  mainnet_polygonConnectorMeta?: Maybe<mainnet_PolygonConnectorMeta>;
  mainnet_polygonConnectorMetas: Array<mainnet_PolygonConnectorMeta>;
  mainnet_optimismConnectorMeta?: Maybe<mainnet_OptimismConnectorMeta>;
  mainnet_optimismConnectorMetas: Array<mainnet_OptimismConnectorMeta>;
  mainnet_bnbConnectorMeta?: Maybe<mainnet_BnbConnectorMeta>;
  mainnet_bnbConnectorMetas: Array<mainnet_BnbConnectorMeta>;
  mainnet_arbitrumConnectorMeta?: Maybe<mainnet_ArbitrumConnectorMeta>;
  mainnet_arbitrumConnectorMetas: Array<mainnet_ArbitrumConnectorMeta>;
  mainnet_gnosisConnectorMeta?: Maybe<mainnet_GnosisConnectorMeta>;
  mainnet_gnosisConnectorMetas: Array<mainnet_GnosisConnectorMeta>;
  mainnet_rootMessageProcessed?: Maybe<mainnet_RootMessageProcessed>;
  mainnet_rootMessageProcesseds: Array<mainnet_RootMessageProcessed>;
  /** Access to subgraph metadata */
  mainnet__meta?: Maybe<mainnet__Meta_>;
  testoptimismgoerli_asset?: Maybe<testoptimismgoerli_Asset>;
  testoptimismgoerli_assets: Array<testoptimismgoerli_Asset>;
  testoptimismgoerli_assetBalance?: Maybe<testoptimismgoerli_AssetBalance>;
  testoptimismgoerli_assetBalances: Array<testoptimismgoerli_AssetBalance>;
  testoptimismgoerli_router?: Maybe<testoptimismgoerli_Router>;
  testoptimismgoerli_routers: Array<testoptimismgoerli_Router>;
  testoptimismgoerli_setting?: Maybe<testoptimismgoerli_Setting>;
  testoptimismgoerli_settings: Array<testoptimismgoerli_Setting>;
  testoptimismgoerli_relayer?: Maybe<testoptimismgoerli_Relayer>;
  testoptimismgoerli_relayers: Array<testoptimismgoerli_Relayer>;
  testoptimismgoerli_stableSwap?: Maybe<testoptimismgoerli_StableSwap>;
  testoptimismgoerli_stableSwaps: Array<testoptimismgoerli_StableSwap>;
  testoptimismgoerli_sponsorVault?: Maybe<testoptimismgoerli_SponsorVault>;
  testoptimismgoerli_sponsorVaults: Array<testoptimismgoerli_SponsorVault>;
  testoptimismgoerli_originTransfer?: Maybe<testoptimismgoerli_OriginTransfer>;
  testoptimismgoerli_originTransfers: Array<testoptimismgoerli_OriginTransfer>;
  testoptimismgoerli_destinationTransfer?: Maybe<testoptimismgoerli_DestinationTransfer>;
  testoptimismgoerli_destinationTransfers: Array<testoptimismgoerli_DestinationTransfer>;
  /** Access to subgraph metadata */
  testoptimismgoerli__meta?: Maybe<testoptimismgoerli__Meta_>;
  optimism_swap_systemInfo?: Maybe<optimism_swap_SystemInfo>;
  optimism_swap_systemInfos: Array<optimism_swap_SystemInfo>;
  optimism_swap_pooledToken?: Maybe<optimism_swap_PooledToken>;
  optimism_swap_pooledTokens: Array<optimism_swap_PooledToken>;
  optimism_swap_stableSwap?: Maybe<optimism_swap_StableSwap>;
  optimism_swap_stableSwaps: Array<optimism_swap_StableSwap>;
  optimism_swap_stableSwapAddLiquidityEvent?: Maybe<optimism_swap_StableSwapAddLiquidityEvent>;
  optimism_swap_stableSwapAddLiquidityEvents: Array<optimism_swap_StableSwapAddLiquidityEvent>;
  optimism_swap_stableSwapRemoveLiquidityEvent?: Maybe<optimism_swap_StableSwapRemoveLiquidityEvent>;
  optimism_swap_stableSwapRemoveLiquidityEvents: Array<optimism_swap_StableSwapRemoveLiquidityEvent>;
  optimism_swap_stableSwapExchange?: Maybe<optimism_swap_StableSwapExchange>;
  optimism_swap_stableSwapExchanges: Array<optimism_swap_StableSwapExchange>;
  optimism_swap_swapDailyVolume?: Maybe<optimism_swap_SwapDailyVolume>;
  optimism_swap_swapDailyVolumes: Array<optimism_swap_SwapDailyVolume>;
  optimism_swap_swapHourlyVolume?: Maybe<optimism_swap_SwapHourlyVolume>;
  optimism_swap_swapHourlyVolumes: Array<optimism_swap_SwapHourlyVolume>;
  optimism_swap_swapWeeklyVolume?: Maybe<optimism_swap_SwapWeeklyVolume>;
  optimism_swap_swapWeeklyVolumes: Array<optimism_swap_SwapWeeklyVolume>;
  optimism_swap_stableSwapEvent?: Maybe<optimism_swap_StableSwapEvent>;
  optimism_swap_stableSwapEvents: Array<optimism_swap_StableSwapEvent>;
  optimism_swap_swapTradeVolume?: Maybe<optimism_swap_SwapTradeVolume>;
  optimism_swap_swapTradeVolumes: Array<optimism_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  optimism_swap__meta?: Maybe<optimism_swap__Meta_>;
  goerli_swap_systemInfo?: Maybe<goerli_swap_SystemInfo>;
  goerli_swap_systemInfos: Array<goerli_swap_SystemInfo>;
  goerli_swap_pooledToken?: Maybe<goerli_swap_PooledToken>;
  goerli_swap_pooledTokens: Array<goerli_swap_PooledToken>;
  goerli_swap_stableSwap?: Maybe<goerli_swap_StableSwap>;
  goerli_swap_stableSwaps: Array<goerli_swap_StableSwap>;
  goerli_swap_stableSwapAddLiquidityEvent?: Maybe<goerli_swap_StableSwapAddLiquidityEvent>;
  goerli_swap_stableSwapAddLiquidityEvents: Array<goerli_swap_StableSwapAddLiquidityEvent>;
  goerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<goerli_swap_StableSwapRemoveLiquidityEvent>;
  goerli_swap_stableSwapRemoveLiquidityEvents: Array<goerli_swap_StableSwapRemoveLiquidityEvent>;
  goerli_swap_stableSwapExchange?: Maybe<goerli_swap_StableSwapExchange>;
  goerli_swap_stableSwapExchanges: Array<goerli_swap_StableSwapExchange>;
  goerli_swap_swapDailyVolume?: Maybe<goerli_swap_SwapDailyVolume>;
  goerli_swap_swapDailyVolumes: Array<goerli_swap_SwapDailyVolume>;
  goerli_swap_swapHourlyVolume?: Maybe<goerli_swap_SwapHourlyVolume>;
  goerli_swap_swapHourlyVolumes: Array<goerli_swap_SwapHourlyVolume>;
  goerli_swap_swapWeeklyVolume?: Maybe<goerli_swap_SwapWeeklyVolume>;
  goerli_swap_swapWeeklyVolumes: Array<goerli_swap_SwapWeeklyVolume>;
  goerli_swap_stableSwapEvent?: Maybe<goerli_swap_StableSwapEvent>;
  goerli_swap_stableSwapEvents: Array<goerli_swap_StableSwapEvent>;
  goerli_swap_swapTradeVolume?: Maybe<goerli_swap_SwapTradeVolume>;
  goerli_swap_swapTradeVolumes: Array<goerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  goerli_swap__meta?: Maybe<goerli_swap__Meta_>;
  optimismgoerli_swap_systemInfo?: Maybe<optimismgoerli_swap_SystemInfo>;
  optimismgoerli_swap_systemInfos: Array<optimismgoerli_swap_SystemInfo>;
  optimismgoerli_swap_pooledToken?: Maybe<optimismgoerli_swap_PooledToken>;
  optimismgoerli_swap_pooledTokens: Array<optimismgoerli_swap_PooledToken>;
  optimismgoerli_swap_stableSwap?: Maybe<optimismgoerli_swap_StableSwap>;
  optimismgoerli_swap_stableSwaps: Array<optimismgoerli_swap_StableSwap>;
  optimismgoerli_swap_stableSwapAddLiquidityEvent?: Maybe<optimismgoerli_swap_StableSwapAddLiquidityEvent>;
  optimismgoerli_swap_stableSwapAddLiquidityEvents: Array<optimismgoerli_swap_StableSwapAddLiquidityEvent>;
  optimismgoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<optimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_swap_stableSwapRemoveLiquidityEvents: Array<optimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_swap_stableSwapExchange?: Maybe<optimismgoerli_swap_StableSwapExchange>;
  optimismgoerli_swap_stableSwapExchanges: Array<optimismgoerli_swap_StableSwapExchange>;
  optimismgoerli_swap_swapDailyVolume?: Maybe<optimismgoerli_swap_SwapDailyVolume>;
  optimismgoerli_swap_swapDailyVolumes: Array<optimismgoerli_swap_SwapDailyVolume>;
  optimismgoerli_swap_swapHourlyVolume?: Maybe<optimismgoerli_swap_SwapHourlyVolume>;
  optimismgoerli_swap_swapHourlyVolumes: Array<optimismgoerli_swap_SwapHourlyVolume>;
  optimismgoerli_swap_swapWeeklyVolume?: Maybe<optimismgoerli_swap_SwapWeeklyVolume>;
  optimismgoerli_swap_swapWeeklyVolumes: Array<optimismgoerli_swap_SwapWeeklyVolume>;
  optimismgoerli_swap_stableSwapEvent?: Maybe<optimismgoerli_swap_StableSwapEvent>;
  optimismgoerli_swap_stableSwapEvents: Array<optimismgoerli_swap_StableSwapEvent>;
  optimismgoerli_swap_swapTradeVolume?: Maybe<optimismgoerli_swap_SwapTradeVolume>;
  optimismgoerli_swap_swapTradeVolumes: Array<optimismgoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  optimismgoerli_swap__meta?: Maybe<optimismgoerli_swap__Meta_>;
  stagingmumbai_swap_systemInfo?: Maybe<stagingmumbai_swap_SystemInfo>;
  stagingmumbai_swap_systemInfos: Array<stagingmumbai_swap_SystemInfo>;
  stagingmumbai_swap_pooledToken?: Maybe<stagingmumbai_swap_PooledToken>;
  stagingmumbai_swap_pooledTokens: Array<stagingmumbai_swap_PooledToken>;
  stagingmumbai_swap_stableSwap?: Maybe<stagingmumbai_swap_StableSwap>;
  stagingmumbai_swap_stableSwaps: Array<stagingmumbai_swap_StableSwap>;
  stagingmumbai_swap_stableSwapAddLiquidityEvent?: Maybe<stagingmumbai_swap_StableSwapAddLiquidityEvent>;
  stagingmumbai_swap_stableSwapAddLiquidityEvents: Array<stagingmumbai_swap_StableSwapAddLiquidityEvent>;
  stagingmumbai_swap_stableSwapRemoveLiquidityEvent?: Maybe<stagingmumbai_swap_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_swap_stableSwapRemoveLiquidityEvents: Array<stagingmumbai_swap_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_swap_stableSwapExchange?: Maybe<stagingmumbai_swap_StableSwapExchange>;
  stagingmumbai_swap_stableSwapExchanges: Array<stagingmumbai_swap_StableSwapExchange>;
  stagingmumbai_swap_swapDailyVolume?: Maybe<stagingmumbai_swap_SwapDailyVolume>;
  stagingmumbai_swap_swapDailyVolumes: Array<stagingmumbai_swap_SwapDailyVolume>;
  stagingmumbai_swap_swapHourlyVolume?: Maybe<stagingmumbai_swap_SwapHourlyVolume>;
  stagingmumbai_swap_swapHourlyVolumes: Array<stagingmumbai_swap_SwapHourlyVolume>;
  stagingmumbai_swap_swapWeeklyVolume?: Maybe<stagingmumbai_swap_SwapWeeklyVolume>;
  stagingmumbai_swap_swapWeeklyVolumes: Array<stagingmumbai_swap_SwapWeeklyVolume>;
  stagingmumbai_swap_stableSwapEvent?: Maybe<stagingmumbai_swap_StableSwapEvent>;
  stagingmumbai_swap_stableSwapEvents: Array<stagingmumbai_swap_StableSwapEvent>;
  stagingmumbai_swap_swapTradeVolume?: Maybe<stagingmumbai_swap_SwapTradeVolume>;
  stagingmumbai_swap_swapTradeVolumes: Array<stagingmumbai_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingmumbai_swap__meta?: Maybe<stagingmumbai_swap__Meta_>;
  goerli_rootAggregated?: Maybe<goerli_RootAggregated>;
  goerli_rootAggregateds: Array<goerli_RootAggregated>;
  goerli_rootPropagated?: Maybe<goerli_RootPropagated>;
  goerli_rootPropagateds: Array<goerli_RootPropagated>;
  goerli_aggregatedMessageRoot?: Maybe<goerli_AggregatedMessageRoot>;
  goerli_aggregatedMessageRoots: Array<goerli_AggregatedMessageRoot>;
  goerli_rootManagerMeta?: Maybe<goerli_RootManagerMeta>;
  goerli_rootManagerMetas: Array<goerli_RootManagerMeta>;
  goerli_polygonConnectorMeta?: Maybe<goerli_PolygonConnectorMeta>;
  goerli_polygonConnectorMetas: Array<goerli_PolygonConnectorMeta>;
  goerli_optimismConnectorMeta?: Maybe<goerli_OptimismConnectorMeta>;
  goerli_optimismConnectorMetas: Array<goerli_OptimismConnectorMeta>;
  goerli_bnbConnectorMeta?: Maybe<goerli_BnbConnectorMeta>;
  goerli_bnbConnectorMetas: Array<goerli_BnbConnectorMeta>;
  goerli_arbitrumConnectorMeta?: Maybe<goerli_ArbitrumConnectorMeta>;
  goerli_arbitrumConnectorMetas: Array<goerli_ArbitrumConnectorMeta>;
  goerli_gnosisConnectorMeta?: Maybe<goerli_GnosisConnectorMeta>;
  goerli_gnosisConnectorMetas: Array<goerli_GnosisConnectorMeta>;
  goerli_rootMessageProcessed?: Maybe<goerli_RootMessageProcessed>;
  goerli_rootMessageProcesseds: Array<goerli_RootMessageProcessed>;
  /** Access to subgraph metadata */
  goerli__meta?: Maybe<goerli__Meta_>;
  local1337_asset?: Maybe<local1337_Asset>;
  local1337_assets: Array<local1337_Asset>;
  local1337_assetBalance?: Maybe<local1337_AssetBalance>;
  local1337_assetBalances: Array<local1337_AssetBalance>;
  local1337_router?: Maybe<local1337_Router>;
  local1337_routers: Array<local1337_Router>;
  local1337_setting?: Maybe<local1337_Setting>;
  local1337_settings: Array<local1337_Setting>;
  local1337_relayer?: Maybe<local1337_Relayer>;
  local1337_relayers: Array<local1337_Relayer>;
  local1337_stableSwap?: Maybe<local1337_StableSwap>;
  local1337_stableSwaps: Array<local1337_StableSwap>;
  local1337_sponsorVault?: Maybe<local1337_SponsorVault>;
  local1337_sponsorVaults: Array<local1337_SponsorVault>;
  local1337_originTransfer?: Maybe<local1337_OriginTransfer>;
  local1337_originTransfers: Array<local1337_OriginTransfer>;
  local1337_destinationTransfer?: Maybe<local1337_DestinationTransfer>;
  local1337_destinationTransfers: Array<local1337_DestinationTransfer>;
  /** Access to subgraph metadata */
  local1337__meta?: Maybe<local1337__Meta_>;
  bnb_swap_systemInfo?: Maybe<bnb_swap_SystemInfo>;
  bnb_swap_systemInfos: Array<bnb_swap_SystemInfo>;
  bnb_swap_pooledToken?: Maybe<bnb_swap_PooledToken>;
  bnb_swap_pooledTokens: Array<bnb_swap_PooledToken>;
  bnb_swap_stableSwap?: Maybe<bnb_swap_StableSwap>;
  bnb_swap_stableSwaps: Array<bnb_swap_StableSwap>;
  bnb_swap_stableSwapAddLiquidityEvent?: Maybe<bnb_swap_StableSwapAddLiquidityEvent>;
  bnb_swap_stableSwapAddLiquidityEvents: Array<bnb_swap_StableSwapAddLiquidityEvent>;
  bnb_swap_stableSwapRemoveLiquidityEvent?: Maybe<bnb_swap_StableSwapRemoveLiquidityEvent>;
  bnb_swap_stableSwapRemoveLiquidityEvents: Array<bnb_swap_StableSwapRemoveLiquidityEvent>;
  bnb_swap_stableSwapExchange?: Maybe<bnb_swap_StableSwapExchange>;
  bnb_swap_stableSwapExchanges: Array<bnb_swap_StableSwapExchange>;
  bnb_swap_swapDailyVolume?: Maybe<bnb_swap_SwapDailyVolume>;
  bnb_swap_swapDailyVolumes: Array<bnb_swap_SwapDailyVolume>;
  bnb_swap_swapHourlyVolume?: Maybe<bnb_swap_SwapHourlyVolume>;
  bnb_swap_swapHourlyVolumes: Array<bnb_swap_SwapHourlyVolume>;
  bnb_swap_swapWeeklyVolume?: Maybe<bnb_swap_SwapWeeklyVolume>;
  bnb_swap_swapWeeklyVolumes: Array<bnb_swap_SwapWeeklyVolume>;
  bnb_swap_stableSwapEvent?: Maybe<bnb_swap_StableSwapEvent>;
  bnb_swap_stableSwapEvents: Array<bnb_swap_StableSwapEvent>;
  bnb_swap_swapTradeVolume?: Maybe<bnb_swap_SwapTradeVolume>;
  bnb_swap_swapTradeVolumes: Array<bnb_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  bnb_swap__meta?: Maybe<bnb_swap__Meta_>;
  arbitrumgoerli_swap_systemInfo?: Maybe<arbitrumgoerli_swap_SystemInfo>;
  arbitrumgoerli_swap_systemInfos: Array<arbitrumgoerli_swap_SystemInfo>;
  arbitrumgoerli_swap_pooledToken?: Maybe<arbitrumgoerli_swap_PooledToken>;
  arbitrumgoerli_swap_pooledTokens: Array<arbitrumgoerli_swap_PooledToken>;
  arbitrumgoerli_swap_stableSwap?: Maybe<arbitrumgoerli_swap_StableSwap>;
  arbitrumgoerli_swap_stableSwaps: Array<arbitrumgoerli_swap_StableSwap>;
  arbitrumgoerli_swap_stableSwapAddLiquidityEvent?: Maybe<arbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_swap_stableSwapAddLiquidityEvents: Array<arbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_swap_stableSwapRemoveLiquidityEvents: Array<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_swap_stableSwapExchange?: Maybe<arbitrumgoerli_swap_StableSwapExchange>;
  arbitrumgoerli_swap_stableSwapExchanges: Array<arbitrumgoerli_swap_StableSwapExchange>;
  arbitrumgoerli_swap_swapDailyVolume?: Maybe<arbitrumgoerli_swap_SwapDailyVolume>;
  arbitrumgoerli_swap_swapDailyVolumes: Array<arbitrumgoerli_swap_SwapDailyVolume>;
  arbitrumgoerli_swap_swapHourlyVolume?: Maybe<arbitrumgoerli_swap_SwapHourlyVolume>;
  arbitrumgoerli_swap_swapHourlyVolumes: Array<arbitrumgoerli_swap_SwapHourlyVolume>;
  arbitrumgoerli_swap_swapWeeklyVolume?: Maybe<arbitrumgoerli_swap_SwapWeeklyVolume>;
  arbitrumgoerli_swap_swapWeeklyVolumes: Array<arbitrumgoerli_swap_SwapWeeklyVolume>;
  arbitrumgoerli_swap_stableSwapEvent?: Maybe<arbitrumgoerli_swap_StableSwapEvent>;
  arbitrumgoerli_swap_stableSwapEvents: Array<arbitrumgoerli_swap_StableSwapEvent>;
  arbitrumgoerli_swap_swapTradeVolume?: Maybe<arbitrumgoerli_swap_SwapTradeVolume>;
  arbitrumgoerli_swap_swapTradeVolumes: Array<arbitrumgoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  arbitrumgoerli_swap__meta?: Maybe<arbitrumgoerli_swap__Meta_>;
  mumbai_swap_systemInfo?: Maybe<mumbai_swap_SystemInfo>;
  mumbai_swap_systemInfos: Array<mumbai_swap_SystemInfo>;
  mumbai_swap_pooledToken?: Maybe<mumbai_swap_PooledToken>;
  mumbai_swap_pooledTokens: Array<mumbai_swap_PooledToken>;
  mumbai_swap_stableSwap?: Maybe<mumbai_swap_StableSwap>;
  mumbai_swap_stableSwaps: Array<mumbai_swap_StableSwap>;
  mumbai_swap_stableSwapAddLiquidityEvent?: Maybe<mumbai_swap_StableSwapAddLiquidityEvent>;
  mumbai_swap_stableSwapAddLiquidityEvents: Array<mumbai_swap_StableSwapAddLiquidityEvent>;
  mumbai_swap_stableSwapRemoveLiquidityEvent?: Maybe<mumbai_swap_StableSwapRemoveLiquidityEvent>;
  mumbai_swap_stableSwapRemoveLiquidityEvents: Array<mumbai_swap_StableSwapRemoveLiquidityEvent>;
  mumbai_swap_stableSwapExchange?: Maybe<mumbai_swap_StableSwapExchange>;
  mumbai_swap_stableSwapExchanges: Array<mumbai_swap_StableSwapExchange>;
  mumbai_swap_swapDailyVolume?: Maybe<mumbai_swap_SwapDailyVolume>;
  mumbai_swap_swapDailyVolumes: Array<mumbai_swap_SwapDailyVolume>;
  mumbai_swap_swapHourlyVolume?: Maybe<mumbai_swap_SwapHourlyVolume>;
  mumbai_swap_swapHourlyVolumes: Array<mumbai_swap_SwapHourlyVolume>;
  mumbai_swap_swapWeeklyVolume?: Maybe<mumbai_swap_SwapWeeklyVolume>;
  mumbai_swap_swapWeeklyVolumes: Array<mumbai_swap_SwapWeeklyVolume>;
  mumbai_swap_stableSwapEvent?: Maybe<mumbai_swap_StableSwapEvent>;
  mumbai_swap_stableSwapEvents: Array<mumbai_swap_StableSwapEvent>;
  mumbai_swap_swapTradeVolume?: Maybe<mumbai_swap_SwapTradeVolume>;
  mumbai_swap_swapTradeVolumes: Array<mumbai_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  mumbai_swap__meta?: Maybe<mumbai_swap__Meta_>;
  optimism_asset?: Maybe<optimism_Asset>;
  optimism_assets: Array<optimism_Asset>;
  optimism_assetStatus?: Maybe<optimism_AssetStatus>;
  optimism_assetStatuses: Array<optimism_AssetStatus>;
  optimism_assetBalance?: Maybe<optimism_AssetBalance>;
  optimism_assetBalances: Array<optimism_AssetBalance>;
  optimism_router?: Maybe<optimism_Router>;
  optimism_routers: Array<optimism_Router>;
  optimism_setting?: Maybe<optimism_Setting>;
  optimism_settings: Array<optimism_Setting>;
  optimism_relayer?: Maybe<optimism_Relayer>;
  optimism_relayers: Array<optimism_Relayer>;
  optimism_sequencer?: Maybe<optimism_Sequencer>;
  optimism_sequencers: Array<optimism_Sequencer>;
  optimism_originTransfer?: Maybe<optimism_OriginTransfer>;
  optimism_originTransfers: Array<optimism_OriginTransfer>;
  optimism_destinationTransfer?: Maybe<optimism_DestinationTransfer>;
  optimism_destinationTransfers: Array<optimism_DestinationTransfer>;
  optimism_originMessage?: Maybe<optimism_OriginMessage>;
  optimism_originMessages: Array<optimism_OriginMessage>;
  optimism_aggregateRoot?: Maybe<optimism_AggregateRoot>;
  optimism_aggregateRoots: Array<optimism_AggregateRoot>;
  optimism_connectorMeta?: Maybe<optimism_ConnectorMeta>;
  optimism_connectorMetas: Array<optimism_ConnectorMeta>;
  optimism_rootCount?: Maybe<optimism_RootCount>;
  optimism_rootCounts: Array<optimism_RootCount>;
  optimism_rootMessageSent?: Maybe<optimism_RootMessageSent>;
  optimism_rootMessageSents: Array<optimism_RootMessageSent>;
  /** Access to subgraph metadata */
  optimism__meta?: Maybe<optimism__Meta_>;
  staginggoerli_swap_systemInfo?: Maybe<staginggoerli_swap_SystemInfo>;
  staginggoerli_swap_systemInfos: Array<staginggoerli_swap_SystemInfo>;
  staginggoerli_swap_pooledToken?: Maybe<staginggoerli_swap_PooledToken>;
  staginggoerli_swap_pooledTokens: Array<staginggoerli_swap_PooledToken>;
  staginggoerli_swap_stableSwap?: Maybe<staginggoerli_swap_StableSwap>;
  staginggoerli_swap_stableSwaps: Array<staginggoerli_swap_StableSwap>;
  staginggoerli_swap_stableSwapAddLiquidityEvent?: Maybe<staginggoerli_swap_StableSwapAddLiquidityEvent>;
  staginggoerli_swap_stableSwapAddLiquidityEvents: Array<staginggoerli_swap_StableSwapAddLiquidityEvent>;
  staginggoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<staginggoerli_swap_StableSwapRemoveLiquidityEvent>;
  staginggoerli_swap_stableSwapRemoveLiquidityEvents: Array<staginggoerli_swap_StableSwapRemoveLiquidityEvent>;
  staginggoerli_swap_stableSwapExchange?: Maybe<staginggoerli_swap_StableSwapExchange>;
  staginggoerli_swap_stableSwapExchanges: Array<staginggoerli_swap_StableSwapExchange>;
  staginggoerli_swap_swapDailyVolume?: Maybe<staginggoerli_swap_SwapDailyVolume>;
  staginggoerli_swap_swapDailyVolumes: Array<staginggoerli_swap_SwapDailyVolume>;
  staginggoerli_swap_swapHourlyVolume?: Maybe<staginggoerli_swap_SwapHourlyVolume>;
  staginggoerli_swap_swapHourlyVolumes: Array<staginggoerli_swap_SwapHourlyVolume>;
  staginggoerli_swap_swapWeeklyVolume?: Maybe<staginggoerli_swap_SwapWeeklyVolume>;
  staginggoerli_swap_swapWeeklyVolumes: Array<staginggoerli_swap_SwapWeeklyVolume>;
  staginggoerli_swap_stableSwapEvent?: Maybe<staginggoerli_swap_StableSwapEvent>;
  staginggoerli_swap_stableSwapEvents: Array<staginggoerli_swap_StableSwapEvent>;
  staginggoerli_swap_swapTradeVolume?: Maybe<staginggoerli_swap_SwapTradeVolume>;
  staginggoerli_swap_swapTradeVolumes: Array<staginggoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  staginggoerli_swap__meta?: Maybe<staginggoerli_swap__Meta_>;
  stagingoptimismgoerli_asset?: Maybe<stagingoptimismgoerli_Asset>;
  stagingoptimismgoerli_assets: Array<stagingoptimismgoerli_Asset>;
  stagingoptimismgoerli_assetStatus?: Maybe<stagingoptimismgoerli_AssetStatus>;
  stagingoptimismgoerli_assetStatuses: Array<stagingoptimismgoerli_AssetStatus>;
  stagingoptimismgoerli_assetBalance?: Maybe<stagingoptimismgoerli_AssetBalance>;
  stagingoptimismgoerli_assetBalances: Array<stagingoptimismgoerli_AssetBalance>;
  stagingoptimismgoerli_router?: Maybe<stagingoptimismgoerli_Router>;
  stagingoptimismgoerli_routers: Array<stagingoptimismgoerli_Router>;
  stagingoptimismgoerli_setting?: Maybe<stagingoptimismgoerli_Setting>;
  stagingoptimismgoerli_settings: Array<stagingoptimismgoerli_Setting>;
  stagingoptimismgoerli_relayer?: Maybe<stagingoptimismgoerli_Relayer>;
  stagingoptimismgoerli_relayers: Array<stagingoptimismgoerli_Relayer>;
  stagingoptimismgoerli_sequencer?: Maybe<stagingoptimismgoerli_Sequencer>;
  stagingoptimismgoerli_sequencers: Array<stagingoptimismgoerli_Sequencer>;
  stagingoptimismgoerli_originTransfer?: Maybe<stagingoptimismgoerli_OriginTransfer>;
  stagingoptimismgoerli_originTransfers: Array<stagingoptimismgoerli_OriginTransfer>;
  stagingoptimismgoerli_destinationTransfer?: Maybe<stagingoptimismgoerli_DestinationTransfer>;
  stagingoptimismgoerli_destinationTransfers: Array<stagingoptimismgoerli_DestinationTransfer>;
  stagingoptimismgoerli_originMessage?: Maybe<stagingoptimismgoerli_OriginMessage>;
  stagingoptimismgoerli_originMessages: Array<stagingoptimismgoerli_OriginMessage>;
  stagingoptimismgoerli_aggregateRoot?: Maybe<stagingoptimismgoerli_AggregateRoot>;
  stagingoptimismgoerli_aggregateRoots: Array<stagingoptimismgoerli_AggregateRoot>;
  stagingoptimismgoerli_connectorMeta?: Maybe<stagingoptimismgoerli_ConnectorMeta>;
  stagingoptimismgoerli_connectorMetas: Array<stagingoptimismgoerli_ConnectorMeta>;
  stagingoptimismgoerli_rootCount?: Maybe<stagingoptimismgoerli_RootCount>;
  stagingoptimismgoerli_rootCounts: Array<stagingoptimismgoerli_RootCount>;
  stagingoptimismgoerli_rootMessageSent?: Maybe<stagingoptimismgoerli_RootMessageSent>;
  stagingoptimismgoerli_rootMessageSents: Array<stagingoptimismgoerli_RootMessageSent>;
  /** Access to subgraph metadata */
  stagingoptimismgoerli__meta?: Maybe<stagingoptimismgoerli__Meta_>;
  stagingmumbai_asset?: Maybe<stagingmumbai_Asset>;
  stagingmumbai_assets: Array<stagingmumbai_Asset>;
  stagingmumbai_assetStatus?: Maybe<stagingmumbai_AssetStatus>;
  stagingmumbai_assetStatuses: Array<stagingmumbai_AssetStatus>;
  stagingmumbai_assetBalance?: Maybe<stagingmumbai_AssetBalance>;
  stagingmumbai_assetBalances: Array<stagingmumbai_AssetBalance>;
  stagingmumbai_router?: Maybe<stagingmumbai_Router>;
  stagingmumbai_routers: Array<stagingmumbai_Router>;
  stagingmumbai_setting?: Maybe<stagingmumbai_Setting>;
  stagingmumbai_settings: Array<stagingmumbai_Setting>;
  stagingmumbai_relayer?: Maybe<stagingmumbai_Relayer>;
  stagingmumbai_relayers: Array<stagingmumbai_Relayer>;
  stagingmumbai_sequencer?: Maybe<stagingmumbai_Sequencer>;
  stagingmumbai_sequencers: Array<stagingmumbai_Sequencer>;
  stagingmumbai_originTransfer?: Maybe<stagingmumbai_OriginTransfer>;
  stagingmumbai_originTransfers: Array<stagingmumbai_OriginTransfer>;
  stagingmumbai_destinationTransfer?: Maybe<stagingmumbai_DestinationTransfer>;
  stagingmumbai_destinationTransfers: Array<stagingmumbai_DestinationTransfer>;
  stagingmumbai_originMessage?: Maybe<stagingmumbai_OriginMessage>;
  stagingmumbai_originMessages: Array<stagingmumbai_OriginMessage>;
  stagingmumbai_aggregateRoot?: Maybe<stagingmumbai_AggregateRoot>;
  stagingmumbai_aggregateRoots: Array<stagingmumbai_AggregateRoot>;
  stagingmumbai_connectorMeta?: Maybe<stagingmumbai_ConnectorMeta>;
  stagingmumbai_connectorMetas: Array<stagingmumbai_ConnectorMeta>;
  stagingmumbai_rootCount?: Maybe<stagingmumbai_RootCount>;
  stagingmumbai_rootCounts: Array<stagingmumbai_RootCount>;
  stagingmumbai_rootMessageSent?: Maybe<stagingmumbai_RootMessageSent>;
  stagingmumbai_rootMessageSents: Array<stagingmumbai_RootMessageSent>;
  /** Access to subgraph metadata */
  stagingmumbai__meta?: Maybe<stagingmumbai__Meta_>;
  arbitrumone_swap_systemInfo?: Maybe<arbitrumone_swap_SystemInfo>;
  arbitrumone_swap_systemInfos: Array<arbitrumone_swap_SystemInfo>;
  arbitrumone_swap_pooledToken?: Maybe<arbitrumone_swap_PooledToken>;
  arbitrumone_swap_pooledTokens: Array<arbitrumone_swap_PooledToken>;
  arbitrumone_swap_stableSwap?: Maybe<arbitrumone_swap_StableSwap>;
  arbitrumone_swap_stableSwaps: Array<arbitrumone_swap_StableSwap>;
  arbitrumone_swap_stableSwapAddLiquidityEvent?: Maybe<arbitrumone_swap_StableSwapAddLiquidityEvent>;
  arbitrumone_swap_stableSwapAddLiquidityEvents: Array<arbitrumone_swap_StableSwapAddLiquidityEvent>;
  arbitrumone_swap_stableSwapRemoveLiquidityEvent?: Maybe<arbitrumone_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumone_swap_stableSwapRemoveLiquidityEvents: Array<arbitrumone_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumone_swap_stableSwapExchange?: Maybe<arbitrumone_swap_StableSwapExchange>;
  arbitrumone_swap_stableSwapExchanges: Array<arbitrumone_swap_StableSwapExchange>;
  arbitrumone_swap_swapDailyVolume?: Maybe<arbitrumone_swap_SwapDailyVolume>;
  arbitrumone_swap_swapDailyVolumes: Array<arbitrumone_swap_SwapDailyVolume>;
  arbitrumone_swap_swapHourlyVolume?: Maybe<arbitrumone_swap_SwapHourlyVolume>;
  arbitrumone_swap_swapHourlyVolumes: Array<arbitrumone_swap_SwapHourlyVolume>;
  arbitrumone_swap_swapWeeklyVolume?: Maybe<arbitrumone_swap_SwapWeeklyVolume>;
  arbitrumone_swap_swapWeeklyVolumes: Array<arbitrumone_swap_SwapWeeklyVolume>;
  arbitrumone_swap_stableSwapEvent?: Maybe<arbitrumone_swap_StableSwapEvent>;
  arbitrumone_swap_stableSwapEvents: Array<arbitrumone_swap_StableSwapEvent>;
  arbitrumone_swap_swapTradeVolume?: Maybe<arbitrumone_swap_SwapTradeVolume>;
  arbitrumone_swap_swapTradeVolumes: Array<arbitrumone_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  arbitrumone_swap__meta?: Maybe<arbitrumone_swap__Meta_>;
  local1338_asset?: Maybe<local1338_Asset>;
  local1338_assets: Array<local1338_Asset>;
  local1338_assetBalance?: Maybe<local1338_AssetBalance>;
  local1338_assetBalances: Array<local1338_AssetBalance>;
  local1338_router?: Maybe<local1338_Router>;
  local1338_routers: Array<local1338_Router>;
  local1338_setting?: Maybe<local1338_Setting>;
  local1338_settings: Array<local1338_Setting>;
  local1338_relayer?: Maybe<local1338_Relayer>;
  local1338_relayers: Array<local1338_Relayer>;
  local1338_stableSwap?: Maybe<local1338_StableSwap>;
  local1338_stableSwaps: Array<local1338_StableSwap>;
  local1338_sponsorVault?: Maybe<local1338_SponsorVault>;
  local1338_sponsorVaults: Array<local1338_SponsorVault>;
  local1338_originTransfer?: Maybe<local1338_OriginTransfer>;
  local1338_originTransfers: Array<local1338_OriginTransfer>;
  local1338_destinationTransfer?: Maybe<local1338_DestinationTransfer>;
  local1338_destinationTransfers: Array<local1338_DestinationTransfer>;
  /** Access to subgraph metadata */
  local1338__meta?: Maybe<local1338__Meta_>;
  goerli_asset?: Maybe<goerli_Asset>;
  goerli_assets: Array<goerli_Asset>;
  goerli_assetStatus?: Maybe<goerli_AssetStatus>;
  goerli_assetStatuses: Array<goerli_AssetStatus>;
  goerli_assetBalance?: Maybe<goerli_AssetBalance>;
  goerli_assetBalances: Array<goerli_AssetBalance>;
  goerli_router?: Maybe<goerli_Router>;
  goerli_routers: Array<goerli_Router>;
  goerli_setting?: Maybe<goerli_Setting>;
  goerli_settings: Array<goerli_Setting>;
  goerli_relayer?: Maybe<goerli_Relayer>;
  goerli_relayers: Array<goerli_Relayer>;
  goerli_sequencer?: Maybe<goerli_Sequencer>;
  goerli_sequencers: Array<goerli_Sequencer>;
  goerli_originTransfer?: Maybe<goerli_OriginTransfer>;
  goerli_originTransfers: Array<goerli_OriginTransfer>;
  goerli_destinationTransfer?: Maybe<goerli_DestinationTransfer>;
  goerli_destinationTransfers: Array<goerli_DestinationTransfer>;
  goerli_originMessage?: Maybe<goerli_OriginMessage>;
  goerli_originMessages: Array<goerli_OriginMessage>;
  goerli_aggregateRoot?: Maybe<goerli_AggregateRoot>;
  goerli_aggregateRoots: Array<goerli_AggregateRoot>;
  goerli_connectorMeta?: Maybe<goerli_ConnectorMeta>;
  goerli_connectorMetas: Array<goerli_ConnectorMeta>;
  goerli_rootCount?: Maybe<goerli_RootCount>;
  goerli_rootCounts: Array<goerli_RootCount>;
  goerli_rootMessageSent?: Maybe<goerli_RootMessageSent>;
  goerli_rootMessageSents: Array<goerli_RootMessageSent>;
  stagingarbitrumgoerli_asset?: Maybe<stagingarbitrumgoerli_Asset>;
  stagingarbitrumgoerli_assets: Array<stagingarbitrumgoerli_Asset>;
  stagingarbitrumgoerli_assetStatus?: Maybe<stagingarbitrumgoerli_AssetStatus>;
  stagingarbitrumgoerli_assetStatuses: Array<stagingarbitrumgoerli_AssetStatus>;
  stagingarbitrumgoerli_assetBalance?: Maybe<stagingarbitrumgoerli_AssetBalance>;
  stagingarbitrumgoerli_assetBalances: Array<stagingarbitrumgoerli_AssetBalance>;
  stagingarbitrumgoerli_router?: Maybe<stagingarbitrumgoerli_Router>;
  stagingarbitrumgoerli_routers: Array<stagingarbitrumgoerli_Router>;
  stagingarbitrumgoerli_setting?: Maybe<stagingarbitrumgoerli_Setting>;
  stagingarbitrumgoerli_settings: Array<stagingarbitrumgoerli_Setting>;
  stagingarbitrumgoerli_relayer?: Maybe<stagingarbitrumgoerli_Relayer>;
  stagingarbitrumgoerli_relayers: Array<stagingarbitrumgoerli_Relayer>;
  stagingarbitrumgoerli_sequencer?: Maybe<stagingarbitrumgoerli_Sequencer>;
  stagingarbitrumgoerli_sequencers: Array<stagingarbitrumgoerli_Sequencer>;
  stagingarbitrumgoerli_originTransfer?: Maybe<stagingarbitrumgoerli_OriginTransfer>;
  stagingarbitrumgoerli_originTransfers: Array<stagingarbitrumgoerli_OriginTransfer>;
  stagingarbitrumgoerli_destinationTransfer?: Maybe<stagingarbitrumgoerli_DestinationTransfer>;
  stagingarbitrumgoerli_destinationTransfers: Array<stagingarbitrumgoerli_DestinationTransfer>;
  stagingarbitrumgoerli_originMessage?: Maybe<stagingarbitrumgoerli_OriginMessage>;
  stagingarbitrumgoerli_originMessages: Array<stagingarbitrumgoerli_OriginMessage>;
  stagingarbitrumgoerli_aggregateRoot?: Maybe<stagingarbitrumgoerli_AggregateRoot>;
  stagingarbitrumgoerli_aggregateRoots: Array<stagingarbitrumgoerli_AggregateRoot>;
  stagingarbitrumgoerli_connectorMeta?: Maybe<stagingarbitrumgoerli_ConnectorMeta>;
  stagingarbitrumgoerli_connectorMetas: Array<stagingarbitrumgoerli_ConnectorMeta>;
  stagingarbitrumgoerli_rootCount?: Maybe<stagingarbitrumgoerli_RootCount>;
  stagingarbitrumgoerli_rootCounts: Array<stagingarbitrumgoerli_RootCount>;
  stagingarbitrumgoerli_rootMessageSent?: Maybe<stagingarbitrumgoerli_RootMessageSent>;
  stagingarbitrumgoerli_rootMessageSents: Array<stagingarbitrumgoerli_RootMessageSent>;
  /** Access to subgraph metadata */
  stagingarbitrumgoerli__meta?: Maybe<stagingarbitrumgoerli__Meta_>;
  mumbai_asset?: Maybe<mumbai_Asset>;
  mumbai_assets: Array<mumbai_Asset>;
  mumbai_assetStatus?: Maybe<mumbai_AssetStatus>;
  mumbai_assetStatuses: Array<mumbai_AssetStatus>;
  mumbai_assetBalance?: Maybe<mumbai_AssetBalance>;
  mumbai_assetBalances: Array<mumbai_AssetBalance>;
  mumbai_router?: Maybe<mumbai_Router>;
  mumbai_routers: Array<mumbai_Router>;
  mumbai_setting?: Maybe<mumbai_Setting>;
  mumbai_settings: Array<mumbai_Setting>;
  mumbai_relayer?: Maybe<mumbai_Relayer>;
  mumbai_relayers: Array<mumbai_Relayer>;
  mumbai_sequencer?: Maybe<mumbai_Sequencer>;
  mumbai_sequencers: Array<mumbai_Sequencer>;
  mumbai_originTransfer?: Maybe<mumbai_OriginTransfer>;
  mumbai_originTransfers: Array<mumbai_OriginTransfer>;
  mumbai_destinationTransfer?: Maybe<mumbai_DestinationTransfer>;
  mumbai_destinationTransfers: Array<mumbai_DestinationTransfer>;
  mumbai_originMessage?: Maybe<mumbai_OriginMessage>;
  mumbai_originMessages: Array<mumbai_OriginMessage>;
  mumbai_aggregateRoot?: Maybe<mumbai_AggregateRoot>;
  mumbai_aggregateRoots: Array<mumbai_AggregateRoot>;
  mumbai_connectorMeta?: Maybe<mumbai_ConnectorMeta>;
  mumbai_connectorMetas: Array<mumbai_ConnectorMeta>;
  mumbai_rootCount?: Maybe<mumbai_RootCount>;
  mumbai_rootCounts: Array<mumbai_RootCount>;
  mumbai_rootMessageSent?: Maybe<mumbai_RootMessageSent>;
  mumbai_rootMessageSents: Array<mumbai_RootMessageSent>;
  /** Access to subgraph metadata */
  mumbai__meta?: Maybe<mumbai__Meta_>;
  bnb_asset?: Maybe<bnb_Asset>;
  bnb_assets: Array<bnb_Asset>;
  bnb_assetStatus?: Maybe<bnb_AssetStatus>;
  bnb_assetStatuses: Array<bnb_AssetStatus>;
  bnb_assetBalance?: Maybe<bnb_AssetBalance>;
  bnb_assetBalances: Array<bnb_AssetBalance>;
  bnb_router?: Maybe<bnb_Router>;
  bnb_routers: Array<bnb_Router>;
  bnb_setting?: Maybe<bnb_Setting>;
  bnb_settings: Array<bnb_Setting>;
  bnb_relayer?: Maybe<bnb_Relayer>;
  bnb_relayers: Array<bnb_Relayer>;
  bnb_sequencer?: Maybe<bnb_Sequencer>;
  bnb_sequencers: Array<bnb_Sequencer>;
  bnb_originTransfer?: Maybe<bnb_OriginTransfer>;
  bnb_originTransfers: Array<bnb_OriginTransfer>;
  bnb_destinationTransfer?: Maybe<bnb_DestinationTransfer>;
  bnb_destinationTransfers: Array<bnb_DestinationTransfer>;
  bnb_originMessage?: Maybe<bnb_OriginMessage>;
  bnb_originMessages: Array<bnb_OriginMessage>;
  bnb_aggregateRoot?: Maybe<bnb_AggregateRoot>;
  bnb_aggregateRoots: Array<bnb_AggregateRoot>;
  bnb_connectorMeta?: Maybe<bnb_ConnectorMeta>;
  bnb_connectorMetas: Array<bnb_ConnectorMeta>;
  bnb_rootCount?: Maybe<bnb_RootCount>;
  bnb_rootCounts: Array<bnb_RootCount>;
  bnb_rootMessageSent?: Maybe<bnb_RootMessageSent>;
  bnb_rootMessageSents: Array<bnb_RootMessageSent>;
  /** Access to subgraph metadata */
  bnb__meta?: Maybe<bnb__Meta_>;
  mainnet_asset?: Maybe<mainnet_Asset>;
  mainnet_assets: Array<mainnet_Asset>;
  mainnet_assetStatus?: Maybe<mainnet_AssetStatus>;
  mainnet_assetStatuses: Array<mainnet_AssetStatus>;
  mainnet_assetBalance?: Maybe<mainnet_AssetBalance>;
  mainnet_assetBalances: Array<mainnet_AssetBalance>;
  mainnet_router?: Maybe<mainnet_Router>;
  mainnet_routers: Array<mainnet_Router>;
  mainnet_setting?: Maybe<mainnet_Setting>;
  mainnet_settings: Array<mainnet_Setting>;
  mainnet_relayer?: Maybe<mainnet_Relayer>;
  mainnet_relayers: Array<mainnet_Relayer>;
  mainnet_sequencer?: Maybe<mainnet_Sequencer>;
  mainnet_sequencers: Array<mainnet_Sequencer>;
  mainnet_originTransfer?: Maybe<mainnet_OriginTransfer>;
  mainnet_originTransfers: Array<mainnet_OriginTransfer>;
  mainnet_destinationTransfer?: Maybe<mainnet_DestinationTransfer>;
  mainnet_destinationTransfers: Array<mainnet_DestinationTransfer>;
  mainnet_originMessage?: Maybe<mainnet_OriginMessage>;
  mainnet_originMessages: Array<mainnet_OriginMessage>;
  mainnet_aggregateRoot?: Maybe<mainnet_AggregateRoot>;
  mainnet_aggregateRoots: Array<mainnet_AggregateRoot>;
  mainnet_connectorMeta?: Maybe<mainnet_ConnectorMeta>;
  mainnet_connectorMetas: Array<mainnet_ConnectorMeta>;
  mainnet_rootCount?: Maybe<mainnet_RootCount>;
  mainnet_rootCounts: Array<mainnet_RootCount>;
  mainnet_rootMessageSent?: Maybe<mainnet_RootMessageSent>;
  mainnet_rootMessageSents: Array<mainnet_RootMessageSent>;
  polygon_asset?: Maybe<polygon_Asset>;
  polygon_assets: Array<polygon_Asset>;
  polygon_assetStatus?: Maybe<polygon_AssetStatus>;
  polygon_assetStatuses: Array<polygon_AssetStatus>;
  polygon_assetBalance?: Maybe<polygon_AssetBalance>;
  polygon_assetBalances: Array<polygon_AssetBalance>;
  polygon_router?: Maybe<polygon_Router>;
  polygon_routers: Array<polygon_Router>;
  polygon_setting?: Maybe<polygon_Setting>;
  polygon_settings: Array<polygon_Setting>;
  polygon_relayer?: Maybe<polygon_Relayer>;
  polygon_relayers: Array<polygon_Relayer>;
  polygon_sequencer?: Maybe<polygon_Sequencer>;
  polygon_sequencers: Array<polygon_Sequencer>;
  polygon_originTransfer?: Maybe<polygon_OriginTransfer>;
  polygon_originTransfers: Array<polygon_OriginTransfer>;
  polygon_destinationTransfer?: Maybe<polygon_DestinationTransfer>;
  polygon_destinationTransfers: Array<polygon_DestinationTransfer>;
  polygon_originMessage?: Maybe<polygon_OriginMessage>;
  polygon_originMessages: Array<polygon_OriginMessage>;
  polygon_aggregateRoot?: Maybe<polygon_AggregateRoot>;
  polygon_aggregateRoots: Array<polygon_AggregateRoot>;
  polygon_connectorMeta?: Maybe<polygon_ConnectorMeta>;
  polygon_connectorMetas: Array<polygon_ConnectorMeta>;
  polygon_rootCount?: Maybe<polygon_RootCount>;
  polygon_rootCounts: Array<polygon_RootCount>;
  polygon_rootMessageSent?: Maybe<polygon_RootMessageSent>;
  polygon_rootMessageSents: Array<polygon_RootMessageSent>;
  /** Access to subgraph metadata */
  polygon__meta?: Maybe<polygon__Meta_>;
  xdai_asset?: Maybe<xdai_Asset>;
  xdai_assets: Array<xdai_Asset>;
  xdai_assetStatus?: Maybe<xdai_AssetStatus>;
  xdai_assetStatuses: Array<xdai_AssetStatus>;
  xdai_assetBalance?: Maybe<xdai_AssetBalance>;
  xdai_assetBalances: Array<xdai_AssetBalance>;
  xdai_router?: Maybe<xdai_Router>;
  xdai_routers: Array<xdai_Router>;
  xdai_setting?: Maybe<xdai_Setting>;
  xdai_settings: Array<xdai_Setting>;
  xdai_relayer?: Maybe<xdai_Relayer>;
  xdai_relayers: Array<xdai_Relayer>;
  xdai_sequencer?: Maybe<xdai_Sequencer>;
  xdai_sequencers: Array<xdai_Sequencer>;
  xdai_originTransfer?: Maybe<xdai_OriginTransfer>;
  xdai_originTransfers: Array<xdai_OriginTransfer>;
  xdai_destinationTransfer?: Maybe<xdai_DestinationTransfer>;
  xdai_destinationTransfers: Array<xdai_DestinationTransfer>;
  xdai_originMessage?: Maybe<xdai_OriginMessage>;
  xdai_originMessages: Array<xdai_OriginMessage>;
  xdai_aggregateRoot?: Maybe<xdai_AggregateRoot>;
  xdai_aggregateRoots: Array<xdai_AggregateRoot>;
  xdai_connectorMeta?: Maybe<xdai_ConnectorMeta>;
  xdai_connectorMetas: Array<xdai_ConnectorMeta>;
  xdai_rootCount?: Maybe<xdai_RootCount>;
  xdai_rootCounts: Array<xdai_RootCount>;
  xdai_rootMessageSent?: Maybe<xdai_RootMessageSent>;
  xdai_rootMessageSents: Array<xdai_RootMessageSent>;
  /** Access to subgraph metadata */
  xdai__meta?: Maybe<xdai__Meta_>;
  arbitrumone_asset?: Maybe<arbitrumone_Asset>;
  arbitrumone_assets: Array<arbitrumone_Asset>;
  arbitrumone_assetStatus?: Maybe<arbitrumone_AssetStatus>;
  arbitrumone_assetStatuses: Array<arbitrumone_AssetStatus>;
  arbitrumone_assetBalance?: Maybe<arbitrumone_AssetBalance>;
  arbitrumone_assetBalances: Array<arbitrumone_AssetBalance>;
  arbitrumone_router?: Maybe<arbitrumone_Router>;
  arbitrumone_routers: Array<arbitrumone_Router>;
  arbitrumone_setting?: Maybe<arbitrumone_Setting>;
  arbitrumone_settings: Array<arbitrumone_Setting>;
  arbitrumone_relayer?: Maybe<arbitrumone_Relayer>;
  arbitrumone_relayers: Array<arbitrumone_Relayer>;
  arbitrumone_sequencer?: Maybe<arbitrumone_Sequencer>;
  arbitrumone_sequencers: Array<arbitrumone_Sequencer>;
  arbitrumone_originTransfer?: Maybe<arbitrumone_OriginTransfer>;
  arbitrumone_originTransfers: Array<arbitrumone_OriginTransfer>;
  arbitrumone_destinationTransfer?: Maybe<arbitrumone_DestinationTransfer>;
  arbitrumone_destinationTransfers: Array<arbitrumone_DestinationTransfer>;
  arbitrumone_originMessage?: Maybe<arbitrumone_OriginMessage>;
  arbitrumone_originMessages: Array<arbitrumone_OriginMessage>;
  arbitrumone_aggregateRoot?: Maybe<arbitrumone_AggregateRoot>;
  arbitrumone_aggregateRoots: Array<arbitrumone_AggregateRoot>;
  arbitrumone_connectorMeta?: Maybe<arbitrumone_ConnectorMeta>;
  arbitrumone_connectorMetas: Array<arbitrumone_ConnectorMeta>;
  arbitrumone_rootCount?: Maybe<arbitrumone_RootCount>;
  arbitrumone_rootCounts: Array<arbitrumone_RootCount>;
  arbitrumone_rootMessageSent?: Maybe<arbitrumone_RootMessageSent>;
  arbitrumone_rootMessageSents: Array<arbitrumone_RootMessageSent>;
  /** Access to subgraph metadata */
  arbitrumone__meta?: Maybe<arbitrumone__Meta_>;
  staginggoerli_asset?: Maybe<staginggoerli_Asset>;
  staginggoerli_assets: Array<staginggoerli_Asset>;
  staginggoerli_assetBalance?: Maybe<staginggoerli_AssetBalance>;
  staginggoerli_assetBalances: Array<staginggoerli_AssetBalance>;
  staginggoerli_router?: Maybe<staginggoerli_Router>;
  staginggoerli_routers: Array<staginggoerli_Router>;
  staginggoerli_setting?: Maybe<staginggoerli_Setting>;
  staginggoerli_settings: Array<staginggoerli_Setting>;
  staginggoerli_relayer?: Maybe<staginggoerli_Relayer>;
  staginggoerli_relayers: Array<staginggoerli_Relayer>;
  staginggoerli_transferRelayerFee?: Maybe<staginggoerli_TransferRelayerFee>;
  staginggoerli_transferRelayerFees: Array<staginggoerli_TransferRelayerFee>;
  staginggoerli_sequencer?: Maybe<staginggoerli_Sequencer>;
  staginggoerli_sequencers: Array<staginggoerli_Sequencer>;
  staginggoerli_originTransfer?: Maybe<staginggoerli_OriginTransfer>;
  staginggoerli_originTransfers: Array<staginggoerli_OriginTransfer>;
  staginggoerli_destinationTransfer?: Maybe<staginggoerli_DestinationTransfer>;
  staginggoerli_destinationTransfers: Array<staginggoerli_DestinationTransfer>;
  staginggoerli_originMessage?: Maybe<staginggoerli_OriginMessage>;
  staginggoerli_originMessages: Array<staginggoerli_OriginMessage>;
  staginggoerli_aggregateRoot?: Maybe<staginggoerli_AggregateRoot>;
  staginggoerli_aggregateRoots: Array<staginggoerli_AggregateRoot>;
  staginggoerli_connectorMeta?: Maybe<staginggoerli_ConnectorMeta>;
  staginggoerli_connectorMetas: Array<staginggoerli_ConnectorMeta>;
  staginggoerli_rootCount?: Maybe<staginggoerli_RootCount>;
  staginggoerli_rootCounts: Array<staginggoerli_RootCount>;
  staginggoerli_rootMessageSent?: Maybe<staginggoerli_RootMessageSent>;
  staginggoerli_rootMessageSents: Array<staginggoerli_RootMessageSent>;
  staginggoerli_stableSwap?: Maybe<staginggoerli_StableSwap>;
  staginggoerli_stableSwaps: Array<staginggoerli_StableSwap>;
  staginggoerli_pooledToken?: Maybe<staginggoerli_PooledToken>;
  staginggoerli_pooledTokens: Array<staginggoerli_PooledToken>;
  staginggoerli_stableSwapAddLiquidityEvent?: Maybe<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_stableSwapAddLiquidityEvents: Array<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_stableSwapRemoveLiquidityEvent?: Maybe<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_stableSwapRemoveLiquidityEvents: Array<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_stableSwapExchange?: Maybe<staginggoerli_StableSwapExchange>;
  staginggoerli_stableSwapExchanges: Array<staginggoerli_StableSwapExchange>;
  staginggoerli_swapDailyVolume?: Maybe<staginggoerli_SwapDailyVolume>;
  staginggoerli_swapDailyVolumes: Array<staginggoerli_SwapDailyVolume>;
  staginggoerli_swapHourlyVolume?: Maybe<staginggoerli_SwapHourlyVolume>;
  staginggoerli_swapHourlyVolumes: Array<staginggoerli_SwapHourlyVolume>;
  staginggoerli_swapWeeklyVolume?: Maybe<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_swapWeeklyVolumes: Array<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_stableSwapEvent?: Maybe<staginggoerli_StableSwapEvent>;
  staginggoerli_stableSwapEvents: Array<staginggoerli_StableSwapEvent>;
  staginggoerli_swapTradeVolume?: Maybe<staginggoerli_SwapTradeVolume>;
  staginggoerli_swapTradeVolumes: Array<staginggoerli_SwapTradeVolume>;
};


export type Querypolygon_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SystemInfo_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_PooledToken_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwap_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapExchange_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapEvent_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_swap__metaArgs = {
  block?: InputMaybe<polygon_swap_Block_height>;
};


export type Queryoptimismgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Asset_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_AssetStatus_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_AssetBalance_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Router_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Setting_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Relayer_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Sequencer_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_OriginTransfer_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_OriginMessage_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_AggregateRoot_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_ConnectorMeta_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_RootCount_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_RootMessageSent_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli__metaArgs = {
  block?: InputMaybe<optimismgoerli_Block_height>;
};


export type Querystagingarbitrumgoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_PooledToken_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_swap__metaArgs = {
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
};


export type Queryarbitrumgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Asset_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_AssetStatus_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_AssetBalance_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Router_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Setting_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Relayer_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Sequencer_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_OriginTransfer_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_OriginMessage_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_AggregateRoot_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_ConnectorMeta_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_RootCount_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_RootMessageSent_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli__metaArgs = {
  block?: InputMaybe<arbitrumgoerli_Block_height>;
};


export type Querystagingoptimismgoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_PooledToken_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_swap__metaArgs = {
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
};


export type Querytestgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_Asset_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_AssetBalance_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_Router_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_Setting_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_Relayer_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_StableSwap_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_sponsorVaultArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_sponsorVaultsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_SponsorVault_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_SponsorVault_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_OriginTransfer_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestgoerli__metaArgs = {
  block?: InputMaybe<testgoerli_Block_height>;
};


export type Queryxdai_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SystemInfo_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_PooledToken_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwap_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapExchange_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapEvent_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_swap__metaArgs = {
  block?: InputMaybe<xdai_swap_Block_height>;
};


export type Querystaginggoerli_rootAggregatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootAggregatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootAggregated_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootAggregated_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootPropagatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootPropagatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootPropagated_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootPropagated_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_aggregatedMessageRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_aggregatedMessageRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_AggregatedMessageRoot_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_AggregatedMessageRoot_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootManagerMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootManagerMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootManagerMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootManagerMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_polygonConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_polygonConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_PolygonConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_PolygonConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_optimismConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_optimismConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_OptimismConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_OptimismConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_bnbConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_bnbConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_BnbConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_BnbConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_arbitrumConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_arbitrumConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_ArbitrumConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_ArbitrumConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_gnosisConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_gnosisConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_GnosisConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_GnosisConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootMessageProcessedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootMessageProcessedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootMessageProcessed_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootMessageProcessed_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli__metaArgs = {
  block?: InputMaybe<staginggoerli_Block_height>;
};


export type Querymainnet_rootAggregatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootAggregatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootAggregated_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootAggregated_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootPropagatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootPropagatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootPropagated_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootPropagated_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_aggregatedMessageRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_aggregatedMessageRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_AggregatedMessageRoot_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_AggregatedMessageRoot_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootManagerMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootManagerMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootManagerMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootManagerMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_polygonConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_polygonConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_PolygonConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_PolygonConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_optimismConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_optimismConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_OptimismConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_OptimismConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_bnbConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_bnbConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_BnbConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_BnbConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_arbitrumConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_arbitrumConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_ArbitrumConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_ArbitrumConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_gnosisConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_gnosisConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_GnosisConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_GnosisConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootMessageProcessedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootMessageProcessedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootMessageProcessed_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootMessageProcessed_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet__metaArgs = {
  block?: InputMaybe<mainnet_Block_height>;
};


export type Querytestoptimismgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_Asset_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_AssetBalance_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_Router_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_Setting_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_Relayer_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_StableSwap_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_sponsorVaultArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_sponsorVaultsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_SponsorVault_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_SponsorVault_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_OriginTransfer_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querytestoptimismgoerli__metaArgs = {
  block?: InputMaybe<testoptimismgoerli_Block_height>;
};


export type Queryoptimism_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SystemInfo_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_PooledToken_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwap_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapExchange_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapEvent_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_swap__metaArgs = {
  block?: InputMaybe<optimism_swap_Block_height>;
};


export type Querygoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SystemInfo_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_PooledToken_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwap_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_swap__metaArgs = {
  block?: InputMaybe<goerli_swap_Block_height>;
};


export type Queryoptimismgoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_PooledToken_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimismgoerli_swap__metaArgs = {
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
};


export type Querystagingmumbai_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SystemInfo_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_PooledToken_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapExchange_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapEvent_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_swap__metaArgs = {
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
};


export type Querygoerli_rootAggregatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootAggregatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootAggregated_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootAggregated_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootPropagatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootPropagatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootPropagated_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootPropagated_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_aggregatedMessageRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_aggregatedMessageRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_AggregatedMessageRoot_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_AggregatedMessageRoot_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootManagerMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootManagerMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootManagerMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootManagerMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_polygonConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_polygonConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_PolygonConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_PolygonConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_optimismConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_optimismConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_OptimismConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_OptimismConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_bnbConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_bnbConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_BnbConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_BnbConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_arbitrumConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_arbitrumConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_ArbitrumConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_ArbitrumConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_gnosisConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_gnosisConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_GnosisConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_GnosisConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootMessageProcessedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootMessageProcessedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootMessageProcessed_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootMessageProcessed_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli__metaArgs = {
  block?: InputMaybe<goerli_Block_height>;
};


export type Querylocal1337_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_Asset_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_Asset_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_AssetBalance_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_Router_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_Router_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_Setting_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_Setting_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_Relayer_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_Relayer_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_StableSwap_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_StableSwap_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_sponsorVaultArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_sponsorVaultsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_SponsorVault_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_SponsorVault_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_OriginTransfer_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_DestinationTransfer_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1337__metaArgs = {
  block?: InputMaybe<local1337_Block_height>;
};


export type Querybnb_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SystemInfo_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_PooledToken_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwap_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapExchange_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapEvent_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_swap__metaArgs = {
  block?: InputMaybe<bnb_swap_Block_height>;
};


export type Queryarbitrumgoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_PooledToken_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumgoerli_swap__metaArgs = {
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
};


export type Querymumbai_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SystemInfo_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_PooledToken_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwap_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapExchange_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapEvent_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_swap__metaArgs = {
  block?: InputMaybe<mumbai_swap_Block_height>;
};


export type Queryoptimism_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Asset_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Asset_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_AssetStatus_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_AssetBalance_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Router_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Router_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Setting_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Setting_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Relayer_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Relayer_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Sequencer_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Sequencer_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_OriginTransfer_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_DestinationTransfer_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_OriginMessage_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_AggregateRoot_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_ConnectorMeta_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_RootCount_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_RootCount_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_RootMessageSent_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryoptimism__metaArgs = {
  block?: InputMaybe<optimism_Block_height>;
};


export type Querystaginggoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_PooledToken_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swap__metaArgs = {
  block?: InputMaybe<staginggoerli_swap_Block_height>;
};


export type Querystagingoptimismgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Asset_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_AssetStatus_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_AssetBalance_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Router_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Setting_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Relayer_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Sequencer_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_OriginTransfer_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_OriginMessage_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_AggregateRoot_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_ConnectorMeta_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_RootCount_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_RootMessageSent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingoptimismgoerli__metaArgs = {
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
};


export type Querystagingmumbai_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Asset_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Asset_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_AssetStatus_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_AssetBalance_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Router_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Router_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Setting_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Setting_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Relayer_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Relayer_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Sequencer_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Sequencer_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_OriginTransfer_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_DestinationTransfer_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_OriginMessage_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_AggregateRoot_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_ConnectorMeta_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_RootCount_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_RootCount_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_RootMessageSent_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingmumbai__metaArgs = {
  block?: InputMaybe<stagingmumbai_Block_height>;
};


export type Queryarbitrumone_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SystemInfo_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_PooledToken_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapExchange_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapEvent_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_swap__metaArgs = {
  block?: InputMaybe<arbitrumone_swap_Block_height>;
};


export type Querylocal1338_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_Asset_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_Asset_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_AssetBalance_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_Router_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_Router_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_Setting_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_Setting_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_Relayer_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_Relayer_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_StableSwap_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_StableSwap_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_sponsorVaultArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_sponsorVaultsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_SponsorVault_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_SponsorVault_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_OriginTransfer_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_DestinationTransfer_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querylocal1338__metaArgs = {
  block?: InputMaybe<local1338_Block_height>;
};


export type Querygoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Asset_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Asset_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_AssetStatus_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_AssetBalance_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Router_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Router_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Setting_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Setting_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Relayer_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Sequencer_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_OriginTransfer_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_DestinationTransfer_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_OriginMessage_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_AggregateRoot_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_ConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootCount_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querygoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootMessageSent_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Asset_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_AssetStatus_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_AssetBalance_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Router_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Setting_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Relayer_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Sequencer_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_OriginTransfer_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_OriginMessage_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_AggregateRoot_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_ConnectorMeta_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_RootCount_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_RootMessageSent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystagingarbitrumgoerli__metaArgs = {
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
};


export type Querymumbai_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Asset_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Asset_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_AssetStatus_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_AssetBalance_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Router_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Router_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Setting_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Setting_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Relayer_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Relayer_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Sequencer_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Sequencer_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_OriginTransfer_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_DestinationTransfer_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_OriginMessage_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_AggregateRoot_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_ConnectorMeta_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_RootCount_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_RootCount_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_RootMessageSent_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymumbai__metaArgs = {
  block?: InputMaybe<mumbai_Block_height>;
};


export type Querybnb_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Asset_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Asset_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_AssetStatus_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_AssetBalance_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Router_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Router_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Setting_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Setting_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Relayer_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Relayer_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Sequencer_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Sequencer_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_OriginTransfer_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_DestinationTransfer_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_OriginMessage_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_AggregateRoot_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_ConnectorMeta_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_RootCount_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_RootCount_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_RootMessageSent_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querybnb__metaArgs = {
  block?: InputMaybe<bnb_Block_height>;
};


export type Querymainnet_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Asset_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Asset_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_AssetStatus_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_AssetBalance_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Router_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Router_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Setting_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Setting_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Relayer_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Relayer_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Sequencer_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Sequencer_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_OriginTransfer_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_DestinationTransfer_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_OriginMessage_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_AggregateRoot_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_ConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootCount_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootCount_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querymainnet_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootMessageSent_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Asset_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Asset_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_AssetStatus_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_AssetBalance_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Router_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Router_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Setting_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Setting_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Relayer_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Relayer_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Sequencer_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Sequencer_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_OriginTransfer_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_DestinationTransfer_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_OriginMessage_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_AggregateRoot_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_ConnectorMeta_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_RootCount_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_RootCount_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_RootMessageSent_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querypolygon__metaArgs = {
  block?: InputMaybe<polygon_Block_height>;
};


export type Queryxdai_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Asset_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Asset_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_AssetStatus_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_AssetBalance_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Router_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Router_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Setting_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Setting_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Relayer_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Relayer_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Sequencer_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Sequencer_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_OriginTransfer_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_DestinationTransfer_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_OriginMessage_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_AggregateRoot_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_ConnectorMeta_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_RootCount_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_RootCount_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_RootMessageSent_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryxdai__metaArgs = {
  block?: InputMaybe<xdai_Block_height>;
};


export type Queryarbitrumone_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Asset_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Asset_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_AssetStatus_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_AssetBalance_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Router_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Router_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Setting_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Setting_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Relayer_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Relayer_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Sequencer_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Sequencer_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_OriginTransfer_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_DestinationTransfer_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_OriginMessage_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_AggregateRoot_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_ConnectorMeta_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_RootCount_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_RootCount_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_RootMessageSent_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Queryarbitrumone__metaArgs = {
  block?: InputMaybe<arbitrumone_Block_height>;
};


export type Querystaginggoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Asset_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_AssetBalance_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Router_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Router_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Setting_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Relayer_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_transferRelayerFeeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_transferRelayerFeesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_TransferRelayerFee_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_TransferRelayerFee_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Sequencer_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_OriginTransfer_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_DestinationTransfer_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_OriginMessage_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_AggregateRoot_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_ConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootCount_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootMessageSent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwap_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_PooledToken_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapExchange_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Querystaginggoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};

export type Subscription = {
  polygon_swap_systemInfo?: Maybe<polygon_swap_SystemInfo>;
  polygon_swap_systemInfos: Array<polygon_swap_SystemInfo>;
  polygon_swap_pooledToken?: Maybe<polygon_swap_PooledToken>;
  polygon_swap_pooledTokens: Array<polygon_swap_PooledToken>;
  polygon_swap_stableSwap?: Maybe<polygon_swap_StableSwap>;
  polygon_swap_stableSwaps: Array<polygon_swap_StableSwap>;
  polygon_swap_stableSwapAddLiquidityEvent?: Maybe<polygon_swap_StableSwapAddLiquidityEvent>;
  polygon_swap_stableSwapAddLiquidityEvents: Array<polygon_swap_StableSwapAddLiquidityEvent>;
  polygon_swap_stableSwapRemoveLiquidityEvent?: Maybe<polygon_swap_StableSwapRemoveLiquidityEvent>;
  polygon_swap_stableSwapRemoveLiquidityEvents: Array<polygon_swap_StableSwapRemoveLiquidityEvent>;
  polygon_swap_stableSwapExchange?: Maybe<polygon_swap_StableSwapExchange>;
  polygon_swap_stableSwapExchanges: Array<polygon_swap_StableSwapExchange>;
  polygon_swap_swapDailyVolume?: Maybe<polygon_swap_SwapDailyVolume>;
  polygon_swap_swapDailyVolumes: Array<polygon_swap_SwapDailyVolume>;
  polygon_swap_swapHourlyVolume?: Maybe<polygon_swap_SwapHourlyVolume>;
  polygon_swap_swapHourlyVolumes: Array<polygon_swap_SwapHourlyVolume>;
  polygon_swap_swapWeeklyVolume?: Maybe<polygon_swap_SwapWeeklyVolume>;
  polygon_swap_swapWeeklyVolumes: Array<polygon_swap_SwapWeeklyVolume>;
  polygon_swap_stableSwapEvent?: Maybe<polygon_swap_StableSwapEvent>;
  polygon_swap_stableSwapEvents: Array<polygon_swap_StableSwapEvent>;
  polygon_swap_swapTradeVolume?: Maybe<polygon_swap_SwapTradeVolume>;
  polygon_swap_swapTradeVolumes: Array<polygon_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  polygon_swap__meta?: Maybe<polygon_swap__Meta_>;
  optimismgoerli_asset?: Maybe<optimismgoerli_Asset>;
  optimismgoerli_assets: Array<optimismgoerli_Asset>;
  optimismgoerli_assetStatus?: Maybe<optimismgoerli_AssetStatus>;
  optimismgoerli_assetStatuses: Array<optimismgoerli_AssetStatus>;
  optimismgoerli_assetBalance?: Maybe<optimismgoerli_AssetBalance>;
  optimismgoerli_assetBalances: Array<optimismgoerli_AssetBalance>;
  optimismgoerli_router?: Maybe<optimismgoerli_Router>;
  optimismgoerli_routers: Array<optimismgoerli_Router>;
  optimismgoerli_setting?: Maybe<optimismgoerli_Setting>;
  optimismgoerli_settings: Array<optimismgoerli_Setting>;
  optimismgoerli_relayer?: Maybe<optimismgoerli_Relayer>;
  optimismgoerli_relayers: Array<optimismgoerli_Relayer>;
  optimismgoerli_sequencer?: Maybe<optimismgoerli_Sequencer>;
  optimismgoerli_sequencers: Array<optimismgoerli_Sequencer>;
  optimismgoerli_originTransfer?: Maybe<optimismgoerli_OriginTransfer>;
  optimismgoerli_originTransfers: Array<optimismgoerli_OriginTransfer>;
  optimismgoerli_destinationTransfer?: Maybe<optimismgoerli_DestinationTransfer>;
  optimismgoerli_destinationTransfers: Array<optimismgoerli_DestinationTransfer>;
  optimismgoerli_originMessage?: Maybe<optimismgoerli_OriginMessage>;
  optimismgoerli_originMessages: Array<optimismgoerli_OriginMessage>;
  optimismgoerli_aggregateRoot?: Maybe<optimismgoerli_AggregateRoot>;
  optimismgoerli_aggregateRoots: Array<optimismgoerli_AggregateRoot>;
  optimismgoerli_connectorMeta?: Maybe<optimismgoerli_ConnectorMeta>;
  optimismgoerli_connectorMetas: Array<optimismgoerli_ConnectorMeta>;
  optimismgoerli_rootCount?: Maybe<optimismgoerli_RootCount>;
  optimismgoerli_rootCounts: Array<optimismgoerli_RootCount>;
  optimismgoerli_rootMessageSent?: Maybe<optimismgoerli_RootMessageSent>;
  optimismgoerli_rootMessageSents: Array<optimismgoerli_RootMessageSent>;
  /** Access to subgraph metadata */
  optimismgoerli__meta?: Maybe<optimismgoerli__Meta_>;
  stagingarbitrumgoerli_swap_systemInfo?: Maybe<stagingarbitrumgoerli_swap_SystemInfo>;
  stagingarbitrumgoerli_swap_systemInfos: Array<stagingarbitrumgoerli_swap_SystemInfo>;
  stagingarbitrumgoerli_swap_pooledToken?: Maybe<stagingarbitrumgoerli_swap_PooledToken>;
  stagingarbitrumgoerli_swap_pooledTokens: Array<stagingarbitrumgoerli_swap_PooledToken>;
  stagingarbitrumgoerli_swap_stableSwap?: Maybe<stagingarbitrumgoerli_swap_StableSwap>;
  stagingarbitrumgoerli_swap_stableSwaps: Array<stagingarbitrumgoerli_swap_StableSwap>;
  stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvent?: Maybe<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvents: Array<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvents: Array<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_swap_stableSwapExchange?: Maybe<stagingarbitrumgoerli_swap_StableSwapExchange>;
  stagingarbitrumgoerli_swap_stableSwapExchanges: Array<stagingarbitrumgoerli_swap_StableSwapExchange>;
  stagingarbitrumgoerli_swap_swapDailyVolume?: Maybe<stagingarbitrumgoerli_swap_SwapDailyVolume>;
  stagingarbitrumgoerli_swap_swapDailyVolumes: Array<stagingarbitrumgoerli_swap_SwapDailyVolume>;
  stagingarbitrumgoerli_swap_swapHourlyVolume?: Maybe<stagingarbitrumgoerli_swap_SwapHourlyVolume>;
  stagingarbitrumgoerli_swap_swapHourlyVolumes: Array<stagingarbitrumgoerli_swap_SwapHourlyVolume>;
  stagingarbitrumgoerli_swap_swapWeeklyVolume?: Maybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume>;
  stagingarbitrumgoerli_swap_swapWeeklyVolumes: Array<stagingarbitrumgoerli_swap_SwapWeeklyVolume>;
  stagingarbitrumgoerli_swap_stableSwapEvent?: Maybe<stagingarbitrumgoerli_swap_StableSwapEvent>;
  stagingarbitrumgoerli_swap_stableSwapEvents: Array<stagingarbitrumgoerli_swap_StableSwapEvent>;
  stagingarbitrumgoerli_swap_swapTradeVolume?: Maybe<stagingarbitrumgoerli_swap_SwapTradeVolume>;
  stagingarbitrumgoerli_swap_swapTradeVolumes: Array<stagingarbitrumgoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingarbitrumgoerli_swap__meta?: Maybe<stagingarbitrumgoerli_swap__Meta_>;
  arbitrumgoerli_asset?: Maybe<arbitrumgoerli_Asset>;
  arbitrumgoerli_assets: Array<arbitrumgoerli_Asset>;
  arbitrumgoerli_assetStatus?: Maybe<arbitrumgoerli_AssetStatus>;
  arbitrumgoerli_assetStatuses: Array<arbitrumgoerli_AssetStatus>;
  arbitrumgoerli_assetBalance?: Maybe<arbitrumgoerli_AssetBalance>;
  arbitrumgoerli_assetBalances: Array<arbitrumgoerli_AssetBalance>;
  arbitrumgoerli_router?: Maybe<arbitrumgoerli_Router>;
  arbitrumgoerli_routers: Array<arbitrumgoerli_Router>;
  arbitrumgoerli_setting?: Maybe<arbitrumgoerli_Setting>;
  arbitrumgoerli_settings: Array<arbitrumgoerli_Setting>;
  arbitrumgoerli_relayer?: Maybe<arbitrumgoerli_Relayer>;
  arbitrumgoerli_relayers: Array<arbitrumgoerli_Relayer>;
  arbitrumgoerli_sequencer?: Maybe<arbitrumgoerli_Sequencer>;
  arbitrumgoerli_sequencers: Array<arbitrumgoerli_Sequencer>;
  arbitrumgoerli_originTransfer?: Maybe<arbitrumgoerli_OriginTransfer>;
  arbitrumgoerli_originTransfers: Array<arbitrumgoerli_OriginTransfer>;
  arbitrumgoerli_destinationTransfer?: Maybe<arbitrumgoerli_DestinationTransfer>;
  arbitrumgoerli_destinationTransfers: Array<arbitrumgoerli_DestinationTransfer>;
  arbitrumgoerli_originMessage?: Maybe<arbitrumgoerli_OriginMessage>;
  arbitrumgoerli_originMessages: Array<arbitrumgoerli_OriginMessage>;
  arbitrumgoerli_aggregateRoot?: Maybe<arbitrumgoerli_AggregateRoot>;
  arbitrumgoerli_aggregateRoots: Array<arbitrumgoerli_AggregateRoot>;
  arbitrumgoerli_connectorMeta?: Maybe<arbitrumgoerli_ConnectorMeta>;
  arbitrumgoerli_connectorMetas: Array<arbitrumgoerli_ConnectorMeta>;
  arbitrumgoerli_rootCount?: Maybe<arbitrumgoerli_RootCount>;
  arbitrumgoerli_rootCounts: Array<arbitrumgoerli_RootCount>;
  arbitrumgoerli_rootMessageSent?: Maybe<arbitrumgoerli_RootMessageSent>;
  arbitrumgoerli_rootMessageSents: Array<arbitrumgoerli_RootMessageSent>;
  /** Access to subgraph metadata */
  arbitrumgoerli__meta?: Maybe<arbitrumgoerli__Meta_>;
  stagingoptimismgoerli_swap_systemInfo?: Maybe<stagingoptimismgoerli_swap_SystemInfo>;
  stagingoptimismgoerli_swap_systemInfos: Array<stagingoptimismgoerli_swap_SystemInfo>;
  stagingoptimismgoerli_swap_pooledToken?: Maybe<stagingoptimismgoerli_swap_PooledToken>;
  stagingoptimismgoerli_swap_pooledTokens: Array<stagingoptimismgoerli_swap_PooledToken>;
  stagingoptimismgoerli_swap_stableSwap?: Maybe<stagingoptimismgoerli_swap_StableSwap>;
  stagingoptimismgoerli_swap_stableSwaps: Array<stagingoptimismgoerli_swap_StableSwap>;
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvent?: Maybe<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvents: Array<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvents: Array<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_swap_stableSwapExchange?: Maybe<stagingoptimismgoerli_swap_StableSwapExchange>;
  stagingoptimismgoerli_swap_stableSwapExchanges: Array<stagingoptimismgoerli_swap_StableSwapExchange>;
  stagingoptimismgoerli_swap_swapDailyVolume?: Maybe<stagingoptimismgoerli_swap_SwapDailyVolume>;
  stagingoptimismgoerli_swap_swapDailyVolumes: Array<stagingoptimismgoerli_swap_SwapDailyVolume>;
  stagingoptimismgoerli_swap_swapHourlyVolume?: Maybe<stagingoptimismgoerli_swap_SwapHourlyVolume>;
  stagingoptimismgoerli_swap_swapHourlyVolumes: Array<stagingoptimismgoerli_swap_SwapHourlyVolume>;
  stagingoptimismgoerli_swap_swapWeeklyVolume?: Maybe<stagingoptimismgoerli_swap_SwapWeeklyVolume>;
  stagingoptimismgoerli_swap_swapWeeklyVolumes: Array<stagingoptimismgoerli_swap_SwapWeeklyVolume>;
  stagingoptimismgoerli_swap_stableSwapEvent?: Maybe<stagingoptimismgoerli_swap_StableSwapEvent>;
  stagingoptimismgoerli_swap_stableSwapEvents: Array<stagingoptimismgoerli_swap_StableSwapEvent>;
  stagingoptimismgoerli_swap_swapTradeVolume?: Maybe<stagingoptimismgoerli_swap_SwapTradeVolume>;
  stagingoptimismgoerli_swap_swapTradeVolumes: Array<stagingoptimismgoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingoptimismgoerli_swap__meta?: Maybe<stagingoptimismgoerli_swap__Meta_>;
  testgoerli_asset?: Maybe<testgoerli_Asset>;
  testgoerli_assets: Array<testgoerli_Asset>;
  testgoerli_assetBalance?: Maybe<testgoerli_AssetBalance>;
  testgoerli_assetBalances: Array<testgoerli_AssetBalance>;
  testgoerli_router?: Maybe<testgoerli_Router>;
  testgoerli_routers: Array<testgoerli_Router>;
  testgoerli_setting?: Maybe<testgoerli_Setting>;
  testgoerli_settings: Array<testgoerli_Setting>;
  testgoerli_relayer?: Maybe<testgoerli_Relayer>;
  testgoerli_relayers: Array<testgoerli_Relayer>;
  testgoerli_stableSwap?: Maybe<testgoerli_StableSwap>;
  testgoerli_stableSwaps: Array<testgoerli_StableSwap>;
  testgoerli_sponsorVault?: Maybe<testgoerli_SponsorVault>;
  testgoerli_sponsorVaults: Array<testgoerli_SponsorVault>;
  testgoerli_originTransfer?: Maybe<testgoerli_OriginTransfer>;
  testgoerli_originTransfers: Array<testgoerli_OriginTransfer>;
  testgoerli_destinationTransfer?: Maybe<testgoerli_DestinationTransfer>;
  testgoerli_destinationTransfers: Array<testgoerli_DestinationTransfer>;
  /** Access to subgraph metadata */
  testgoerli__meta?: Maybe<testgoerli__Meta_>;
  xdai_swap_systemInfo?: Maybe<xdai_swap_SystemInfo>;
  xdai_swap_systemInfos: Array<xdai_swap_SystemInfo>;
  xdai_swap_pooledToken?: Maybe<xdai_swap_PooledToken>;
  xdai_swap_pooledTokens: Array<xdai_swap_PooledToken>;
  xdai_swap_stableSwap?: Maybe<xdai_swap_StableSwap>;
  xdai_swap_stableSwaps: Array<xdai_swap_StableSwap>;
  xdai_swap_stableSwapAddLiquidityEvent?: Maybe<xdai_swap_StableSwapAddLiquidityEvent>;
  xdai_swap_stableSwapAddLiquidityEvents: Array<xdai_swap_StableSwapAddLiquidityEvent>;
  xdai_swap_stableSwapRemoveLiquidityEvent?: Maybe<xdai_swap_StableSwapRemoveLiquidityEvent>;
  xdai_swap_stableSwapRemoveLiquidityEvents: Array<xdai_swap_StableSwapRemoveLiquidityEvent>;
  xdai_swap_stableSwapExchange?: Maybe<xdai_swap_StableSwapExchange>;
  xdai_swap_stableSwapExchanges: Array<xdai_swap_StableSwapExchange>;
  xdai_swap_swapDailyVolume?: Maybe<xdai_swap_SwapDailyVolume>;
  xdai_swap_swapDailyVolumes: Array<xdai_swap_SwapDailyVolume>;
  xdai_swap_swapHourlyVolume?: Maybe<xdai_swap_SwapHourlyVolume>;
  xdai_swap_swapHourlyVolumes: Array<xdai_swap_SwapHourlyVolume>;
  xdai_swap_swapWeeklyVolume?: Maybe<xdai_swap_SwapWeeklyVolume>;
  xdai_swap_swapWeeklyVolumes: Array<xdai_swap_SwapWeeklyVolume>;
  xdai_swap_stableSwapEvent?: Maybe<xdai_swap_StableSwapEvent>;
  xdai_swap_stableSwapEvents: Array<xdai_swap_StableSwapEvent>;
  xdai_swap_swapTradeVolume?: Maybe<xdai_swap_SwapTradeVolume>;
  xdai_swap_swapTradeVolumes: Array<xdai_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  xdai_swap__meta?: Maybe<xdai_swap__Meta_>;
  staginggoerli_rootAggregated?: Maybe<staginggoerli_RootAggregated>;
  staginggoerli_rootAggregateds: Array<staginggoerli_RootAggregated>;
  staginggoerli_rootPropagated?: Maybe<staginggoerli_RootPropagated>;
  staginggoerli_rootPropagateds: Array<staginggoerli_RootPropagated>;
  staginggoerli_aggregatedMessageRoot?: Maybe<staginggoerli_AggregatedMessageRoot>;
  staginggoerli_aggregatedMessageRoots: Array<staginggoerli_AggregatedMessageRoot>;
  staginggoerli_rootManagerMeta?: Maybe<staginggoerli_RootManagerMeta>;
  staginggoerli_rootManagerMetas: Array<staginggoerli_RootManagerMeta>;
  staginggoerli_polygonConnectorMeta?: Maybe<staginggoerli_PolygonConnectorMeta>;
  staginggoerli_polygonConnectorMetas: Array<staginggoerli_PolygonConnectorMeta>;
  staginggoerli_optimismConnectorMeta?: Maybe<staginggoerli_OptimismConnectorMeta>;
  staginggoerli_optimismConnectorMetas: Array<staginggoerli_OptimismConnectorMeta>;
  staginggoerli_bnbConnectorMeta?: Maybe<staginggoerli_BnbConnectorMeta>;
  staginggoerli_bnbConnectorMetas: Array<staginggoerli_BnbConnectorMeta>;
  staginggoerli_arbitrumConnectorMeta?: Maybe<staginggoerli_ArbitrumConnectorMeta>;
  staginggoerli_arbitrumConnectorMetas: Array<staginggoerli_ArbitrumConnectorMeta>;
  staginggoerli_gnosisConnectorMeta?: Maybe<staginggoerli_GnosisConnectorMeta>;
  staginggoerli_gnosisConnectorMetas: Array<staginggoerli_GnosisConnectorMeta>;
  staginggoerli_rootMessageProcessed?: Maybe<staginggoerli_RootMessageProcessed>;
  staginggoerli_rootMessageProcesseds: Array<staginggoerli_RootMessageProcessed>;
  /** Access to subgraph metadata */
  staginggoerli__meta?: Maybe<staginggoerli__Meta_>;
  mainnet_rootAggregated?: Maybe<mainnet_RootAggregated>;
  mainnet_rootAggregateds: Array<mainnet_RootAggregated>;
  mainnet_rootPropagated?: Maybe<mainnet_RootPropagated>;
  mainnet_rootPropagateds: Array<mainnet_RootPropagated>;
  mainnet_aggregatedMessageRoot?: Maybe<mainnet_AggregatedMessageRoot>;
  mainnet_aggregatedMessageRoots: Array<mainnet_AggregatedMessageRoot>;
  mainnet_rootManagerMeta?: Maybe<mainnet_RootManagerMeta>;
  mainnet_rootManagerMetas: Array<mainnet_RootManagerMeta>;
  mainnet_polygonConnectorMeta?: Maybe<mainnet_PolygonConnectorMeta>;
  mainnet_polygonConnectorMetas: Array<mainnet_PolygonConnectorMeta>;
  mainnet_optimismConnectorMeta?: Maybe<mainnet_OptimismConnectorMeta>;
  mainnet_optimismConnectorMetas: Array<mainnet_OptimismConnectorMeta>;
  mainnet_bnbConnectorMeta?: Maybe<mainnet_BnbConnectorMeta>;
  mainnet_bnbConnectorMetas: Array<mainnet_BnbConnectorMeta>;
  mainnet_arbitrumConnectorMeta?: Maybe<mainnet_ArbitrumConnectorMeta>;
  mainnet_arbitrumConnectorMetas: Array<mainnet_ArbitrumConnectorMeta>;
  mainnet_gnosisConnectorMeta?: Maybe<mainnet_GnosisConnectorMeta>;
  mainnet_gnosisConnectorMetas: Array<mainnet_GnosisConnectorMeta>;
  mainnet_rootMessageProcessed?: Maybe<mainnet_RootMessageProcessed>;
  mainnet_rootMessageProcesseds: Array<mainnet_RootMessageProcessed>;
  /** Access to subgraph metadata */
  mainnet__meta?: Maybe<mainnet__Meta_>;
  testoptimismgoerli_asset?: Maybe<testoptimismgoerli_Asset>;
  testoptimismgoerli_assets: Array<testoptimismgoerli_Asset>;
  testoptimismgoerli_assetBalance?: Maybe<testoptimismgoerli_AssetBalance>;
  testoptimismgoerli_assetBalances: Array<testoptimismgoerli_AssetBalance>;
  testoptimismgoerli_router?: Maybe<testoptimismgoerli_Router>;
  testoptimismgoerli_routers: Array<testoptimismgoerli_Router>;
  testoptimismgoerli_setting?: Maybe<testoptimismgoerli_Setting>;
  testoptimismgoerli_settings: Array<testoptimismgoerli_Setting>;
  testoptimismgoerli_relayer?: Maybe<testoptimismgoerli_Relayer>;
  testoptimismgoerli_relayers: Array<testoptimismgoerli_Relayer>;
  testoptimismgoerli_stableSwap?: Maybe<testoptimismgoerli_StableSwap>;
  testoptimismgoerli_stableSwaps: Array<testoptimismgoerli_StableSwap>;
  testoptimismgoerli_sponsorVault?: Maybe<testoptimismgoerli_SponsorVault>;
  testoptimismgoerli_sponsorVaults: Array<testoptimismgoerli_SponsorVault>;
  testoptimismgoerli_originTransfer?: Maybe<testoptimismgoerli_OriginTransfer>;
  testoptimismgoerli_originTransfers: Array<testoptimismgoerli_OriginTransfer>;
  testoptimismgoerli_destinationTransfer?: Maybe<testoptimismgoerli_DestinationTransfer>;
  testoptimismgoerli_destinationTransfers: Array<testoptimismgoerli_DestinationTransfer>;
  /** Access to subgraph metadata */
  testoptimismgoerli__meta?: Maybe<testoptimismgoerli__Meta_>;
  optimism_swap_systemInfo?: Maybe<optimism_swap_SystemInfo>;
  optimism_swap_systemInfos: Array<optimism_swap_SystemInfo>;
  optimism_swap_pooledToken?: Maybe<optimism_swap_PooledToken>;
  optimism_swap_pooledTokens: Array<optimism_swap_PooledToken>;
  optimism_swap_stableSwap?: Maybe<optimism_swap_StableSwap>;
  optimism_swap_stableSwaps: Array<optimism_swap_StableSwap>;
  optimism_swap_stableSwapAddLiquidityEvent?: Maybe<optimism_swap_StableSwapAddLiquidityEvent>;
  optimism_swap_stableSwapAddLiquidityEvents: Array<optimism_swap_StableSwapAddLiquidityEvent>;
  optimism_swap_stableSwapRemoveLiquidityEvent?: Maybe<optimism_swap_StableSwapRemoveLiquidityEvent>;
  optimism_swap_stableSwapRemoveLiquidityEvents: Array<optimism_swap_StableSwapRemoveLiquidityEvent>;
  optimism_swap_stableSwapExchange?: Maybe<optimism_swap_StableSwapExchange>;
  optimism_swap_stableSwapExchanges: Array<optimism_swap_StableSwapExchange>;
  optimism_swap_swapDailyVolume?: Maybe<optimism_swap_SwapDailyVolume>;
  optimism_swap_swapDailyVolumes: Array<optimism_swap_SwapDailyVolume>;
  optimism_swap_swapHourlyVolume?: Maybe<optimism_swap_SwapHourlyVolume>;
  optimism_swap_swapHourlyVolumes: Array<optimism_swap_SwapHourlyVolume>;
  optimism_swap_swapWeeklyVolume?: Maybe<optimism_swap_SwapWeeklyVolume>;
  optimism_swap_swapWeeklyVolumes: Array<optimism_swap_SwapWeeklyVolume>;
  optimism_swap_stableSwapEvent?: Maybe<optimism_swap_StableSwapEvent>;
  optimism_swap_stableSwapEvents: Array<optimism_swap_StableSwapEvent>;
  optimism_swap_swapTradeVolume?: Maybe<optimism_swap_SwapTradeVolume>;
  optimism_swap_swapTradeVolumes: Array<optimism_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  optimism_swap__meta?: Maybe<optimism_swap__Meta_>;
  goerli_swap_systemInfo?: Maybe<goerli_swap_SystemInfo>;
  goerli_swap_systemInfos: Array<goerli_swap_SystemInfo>;
  goerli_swap_pooledToken?: Maybe<goerli_swap_PooledToken>;
  goerli_swap_pooledTokens: Array<goerli_swap_PooledToken>;
  goerli_swap_stableSwap?: Maybe<goerli_swap_StableSwap>;
  goerli_swap_stableSwaps: Array<goerli_swap_StableSwap>;
  goerli_swap_stableSwapAddLiquidityEvent?: Maybe<goerli_swap_StableSwapAddLiquidityEvent>;
  goerli_swap_stableSwapAddLiquidityEvents: Array<goerli_swap_StableSwapAddLiquidityEvent>;
  goerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<goerli_swap_StableSwapRemoveLiquidityEvent>;
  goerli_swap_stableSwapRemoveLiquidityEvents: Array<goerli_swap_StableSwapRemoveLiquidityEvent>;
  goerli_swap_stableSwapExchange?: Maybe<goerli_swap_StableSwapExchange>;
  goerli_swap_stableSwapExchanges: Array<goerli_swap_StableSwapExchange>;
  goerli_swap_swapDailyVolume?: Maybe<goerli_swap_SwapDailyVolume>;
  goerli_swap_swapDailyVolumes: Array<goerli_swap_SwapDailyVolume>;
  goerli_swap_swapHourlyVolume?: Maybe<goerli_swap_SwapHourlyVolume>;
  goerli_swap_swapHourlyVolumes: Array<goerli_swap_SwapHourlyVolume>;
  goerli_swap_swapWeeklyVolume?: Maybe<goerli_swap_SwapWeeklyVolume>;
  goerli_swap_swapWeeklyVolumes: Array<goerli_swap_SwapWeeklyVolume>;
  goerli_swap_stableSwapEvent?: Maybe<goerli_swap_StableSwapEvent>;
  goerli_swap_stableSwapEvents: Array<goerli_swap_StableSwapEvent>;
  goerli_swap_swapTradeVolume?: Maybe<goerli_swap_SwapTradeVolume>;
  goerli_swap_swapTradeVolumes: Array<goerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  goerli_swap__meta?: Maybe<goerli_swap__Meta_>;
  optimismgoerli_swap_systemInfo?: Maybe<optimismgoerli_swap_SystemInfo>;
  optimismgoerli_swap_systemInfos: Array<optimismgoerli_swap_SystemInfo>;
  optimismgoerli_swap_pooledToken?: Maybe<optimismgoerli_swap_PooledToken>;
  optimismgoerli_swap_pooledTokens: Array<optimismgoerli_swap_PooledToken>;
  optimismgoerli_swap_stableSwap?: Maybe<optimismgoerli_swap_StableSwap>;
  optimismgoerli_swap_stableSwaps: Array<optimismgoerli_swap_StableSwap>;
  optimismgoerli_swap_stableSwapAddLiquidityEvent?: Maybe<optimismgoerli_swap_StableSwapAddLiquidityEvent>;
  optimismgoerli_swap_stableSwapAddLiquidityEvents: Array<optimismgoerli_swap_StableSwapAddLiquidityEvent>;
  optimismgoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<optimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_swap_stableSwapRemoveLiquidityEvents: Array<optimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_swap_stableSwapExchange?: Maybe<optimismgoerli_swap_StableSwapExchange>;
  optimismgoerli_swap_stableSwapExchanges: Array<optimismgoerli_swap_StableSwapExchange>;
  optimismgoerli_swap_swapDailyVolume?: Maybe<optimismgoerli_swap_SwapDailyVolume>;
  optimismgoerli_swap_swapDailyVolumes: Array<optimismgoerli_swap_SwapDailyVolume>;
  optimismgoerli_swap_swapHourlyVolume?: Maybe<optimismgoerli_swap_SwapHourlyVolume>;
  optimismgoerli_swap_swapHourlyVolumes: Array<optimismgoerli_swap_SwapHourlyVolume>;
  optimismgoerli_swap_swapWeeklyVolume?: Maybe<optimismgoerli_swap_SwapWeeklyVolume>;
  optimismgoerli_swap_swapWeeklyVolumes: Array<optimismgoerli_swap_SwapWeeklyVolume>;
  optimismgoerli_swap_stableSwapEvent?: Maybe<optimismgoerli_swap_StableSwapEvent>;
  optimismgoerli_swap_stableSwapEvents: Array<optimismgoerli_swap_StableSwapEvent>;
  optimismgoerli_swap_swapTradeVolume?: Maybe<optimismgoerli_swap_SwapTradeVolume>;
  optimismgoerli_swap_swapTradeVolumes: Array<optimismgoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  optimismgoerli_swap__meta?: Maybe<optimismgoerli_swap__Meta_>;
  stagingmumbai_swap_systemInfo?: Maybe<stagingmumbai_swap_SystemInfo>;
  stagingmumbai_swap_systemInfos: Array<stagingmumbai_swap_SystemInfo>;
  stagingmumbai_swap_pooledToken?: Maybe<stagingmumbai_swap_PooledToken>;
  stagingmumbai_swap_pooledTokens: Array<stagingmumbai_swap_PooledToken>;
  stagingmumbai_swap_stableSwap?: Maybe<stagingmumbai_swap_StableSwap>;
  stagingmumbai_swap_stableSwaps: Array<stagingmumbai_swap_StableSwap>;
  stagingmumbai_swap_stableSwapAddLiquidityEvent?: Maybe<stagingmumbai_swap_StableSwapAddLiquidityEvent>;
  stagingmumbai_swap_stableSwapAddLiquidityEvents: Array<stagingmumbai_swap_StableSwapAddLiquidityEvent>;
  stagingmumbai_swap_stableSwapRemoveLiquidityEvent?: Maybe<stagingmumbai_swap_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_swap_stableSwapRemoveLiquidityEvents: Array<stagingmumbai_swap_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_swap_stableSwapExchange?: Maybe<stagingmumbai_swap_StableSwapExchange>;
  stagingmumbai_swap_stableSwapExchanges: Array<stagingmumbai_swap_StableSwapExchange>;
  stagingmumbai_swap_swapDailyVolume?: Maybe<stagingmumbai_swap_SwapDailyVolume>;
  stagingmumbai_swap_swapDailyVolumes: Array<stagingmumbai_swap_SwapDailyVolume>;
  stagingmumbai_swap_swapHourlyVolume?: Maybe<stagingmumbai_swap_SwapHourlyVolume>;
  stagingmumbai_swap_swapHourlyVolumes: Array<stagingmumbai_swap_SwapHourlyVolume>;
  stagingmumbai_swap_swapWeeklyVolume?: Maybe<stagingmumbai_swap_SwapWeeklyVolume>;
  stagingmumbai_swap_swapWeeklyVolumes: Array<stagingmumbai_swap_SwapWeeklyVolume>;
  stagingmumbai_swap_stableSwapEvent?: Maybe<stagingmumbai_swap_StableSwapEvent>;
  stagingmumbai_swap_stableSwapEvents: Array<stagingmumbai_swap_StableSwapEvent>;
  stagingmumbai_swap_swapTradeVolume?: Maybe<stagingmumbai_swap_SwapTradeVolume>;
  stagingmumbai_swap_swapTradeVolumes: Array<stagingmumbai_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  stagingmumbai_swap__meta?: Maybe<stagingmumbai_swap__Meta_>;
  goerli_rootAggregated?: Maybe<goerli_RootAggregated>;
  goerli_rootAggregateds: Array<goerli_RootAggregated>;
  goerli_rootPropagated?: Maybe<goerli_RootPropagated>;
  goerli_rootPropagateds: Array<goerli_RootPropagated>;
  goerli_aggregatedMessageRoot?: Maybe<goerli_AggregatedMessageRoot>;
  goerli_aggregatedMessageRoots: Array<goerli_AggregatedMessageRoot>;
  goerli_rootManagerMeta?: Maybe<goerli_RootManagerMeta>;
  goerli_rootManagerMetas: Array<goerli_RootManagerMeta>;
  goerli_polygonConnectorMeta?: Maybe<goerli_PolygonConnectorMeta>;
  goerli_polygonConnectorMetas: Array<goerli_PolygonConnectorMeta>;
  goerli_optimismConnectorMeta?: Maybe<goerli_OptimismConnectorMeta>;
  goerli_optimismConnectorMetas: Array<goerli_OptimismConnectorMeta>;
  goerli_bnbConnectorMeta?: Maybe<goerli_BnbConnectorMeta>;
  goerli_bnbConnectorMetas: Array<goerli_BnbConnectorMeta>;
  goerli_arbitrumConnectorMeta?: Maybe<goerli_ArbitrumConnectorMeta>;
  goerli_arbitrumConnectorMetas: Array<goerli_ArbitrumConnectorMeta>;
  goerli_gnosisConnectorMeta?: Maybe<goerli_GnosisConnectorMeta>;
  goerli_gnosisConnectorMetas: Array<goerli_GnosisConnectorMeta>;
  goerli_rootMessageProcessed?: Maybe<goerli_RootMessageProcessed>;
  goerli_rootMessageProcesseds: Array<goerli_RootMessageProcessed>;
  /** Access to subgraph metadata */
  goerli__meta?: Maybe<goerli__Meta_>;
  local1337_asset?: Maybe<local1337_Asset>;
  local1337_assets: Array<local1337_Asset>;
  local1337_assetBalance?: Maybe<local1337_AssetBalance>;
  local1337_assetBalances: Array<local1337_AssetBalance>;
  local1337_router?: Maybe<local1337_Router>;
  local1337_routers: Array<local1337_Router>;
  local1337_setting?: Maybe<local1337_Setting>;
  local1337_settings: Array<local1337_Setting>;
  local1337_relayer?: Maybe<local1337_Relayer>;
  local1337_relayers: Array<local1337_Relayer>;
  local1337_stableSwap?: Maybe<local1337_StableSwap>;
  local1337_stableSwaps: Array<local1337_StableSwap>;
  local1337_sponsorVault?: Maybe<local1337_SponsorVault>;
  local1337_sponsorVaults: Array<local1337_SponsorVault>;
  local1337_originTransfer?: Maybe<local1337_OriginTransfer>;
  local1337_originTransfers: Array<local1337_OriginTransfer>;
  local1337_destinationTransfer?: Maybe<local1337_DestinationTransfer>;
  local1337_destinationTransfers: Array<local1337_DestinationTransfer>;
  /** Access to subgraph metadata */
  local1337__meta?: Maybe<local1337__Meta_>;
  bnb_swap_systemInfo?: Maybe<bnb_swap_SystemInfo>;
  bnb_swap_systemInfos: Array<bnb_swap_SystemInfo>;
  bnb_swap_pooledToken?: Maybe<bnb_swap_PooledToken>;
  bnb_swap_pooledTokens: Array<bnb_swap_PooledToken>;
  bnb_swap_stableSwap?: Maybe<bnb_swap_StableSwap>;
  bnb_swap_stableSwaps: Array<bnb_swap_StableSwap>;
  bnb_swap_stableSwapAddLiquidityEvent?: Maybe<bnb_swap_StableSwapAddLiquidityEvent>;
  bnb_swap_stableSwapAddLiquidityEvents: Array<bnb_swap_StableSwapAddLiquidityEvent>;
  bnb_swap_stableSwapRemoveLiquidityEvent?: Maybe<bnb_swap_StableSwapRemoveLiquidityEvent>;
  bnb_swap_stableSwapRemoveLiquidityEvents: Array<bnb_swap_StableSwapRemoveLiquidityEvent>;
  bnb_swap_stableSwapExchange?: Maybe<bnb_swap_StableSwapExchange>;
  bnb_swap_stableSwapExchanges: Array<bnb_swap_StableSwapExchange>;
  bnb_swap_swapDailyVolume?: Maybe<bnb_swap_SwapDailyVolume>;
  bnb_swap_swapDailyVolumes: Array<bnb_swap_SwapDailyVolume>;
  bnb_swap_swapHourlyVolume?: Maybe<bnb_swap_SwapHourlyVolume>;
  bnb_swap_swapHourlyVolumes: Array<bnb_swap_SwapHourlyVolume>;
  bnb_swap_swapWeeklyVolume?: Maybe<bnb_swap_SwapWeeklyVolume>;
  bnb_swap_swapWeeklyVolumes: Array<bnb_swap_SwapWeeklyVolume>;
  bnb_swap_stableSwapEvent?: Maybe<bnb_swap_StableSwapEvent>;
  bnb_swap_stableSwapEvents: Array<bnb_swap_StableSwapEvent>;
  bnb_swap_swapTradeVolume?: Maybe<bnb_swap_SwapTradeVolume>;
  bnb_swap_swapTradeVolumes: Array<bnb_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  bnb_swap__meta?: Maybe<bnb_swap__Meta_>;
  arbitrumgoerli_swap_systemInfo?: Maybe<arbitrumgoerli_swap_SystemInfo>;
  arbitrumgoerli_swap_systemInfos: Array<arbitrumgoerli_swap_SystemInfo>;
  arbitrumgoerli_swap_pooledToken?: Maybe<arbitrumgoerli_swap_PooledToken>;
  arbitrumgoerli_swap_pooledTokens: Array<arbitrumgoerli_swap_PooledToken>;
  arbitrumgoerli_swap_stableSwap?: Maybe<arbitrumgoerli_swap_StableSwap>;
  arbitrumgoerli_swap_stableSwaps: Array<arbitrumgoerli_swap_StableSwap>;
  arbitrumgoerli_swap_stableSwapAddLiquidityEvent?: Maybe<arbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_swap_stableSwapAddLiquidityEvents: Array<arbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_swap_stableSwapRemoveLiquidityEvents: Array<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_swap_stableSwapExchange?: Maybe<arbitrumgoerli_swap_StableSwapExchange>;
  arbitrumgoerli_swap_stableSwapExchanges: Array<arbitrumgoerli_swap_StableSwapExchange>;
  arbitrumgoerli_swap_swapDailyVolume?: Maybe<arbitrumgoerli_swap_SwapDailyVolume>;
  arbitrumgoerli_swap_swapDailyVolumes: Array<arbitrumgoerli_swap_SwapDailyVolume>;
  arbitrumgoerli_swap_swapHourlyVolume?: Maybe<arbitrumgoerli_swap_SwapHourlyVolume>;
  arbitrumgoerli_swap_swapHourlyVolumes: Array<arbitrumgoerli_swap_SwapHourlyVolume>;
  arbitrumgoerli_swap_swapWeeklyVolume?: Maybe<arbitrumgoerli_swap_SwapWeeklyVolume>;
  arbitrumgoerli_swap_swapWeeklyVolumes: Array<arbitrumgoerli_swap_SwapWeeklyVolume>;
  arbitrumgoerli_swap_stableSwapEvent?: Maybe<arbitrumgoerli_swap_StableSwapEvent>;
  arbitrumgoerli_swap_stableSwapEvents: Array<arbitrumgoerli_swap_StableSwapEvent>;
  arbitrumgoerli_swap_swapTradeVolume?: Maybe<arbitrumgoerli_swap_SwapTradeVolume>;
  arbitrumgoerli_swap_swapTradeVolumes: Array<arbitrumgoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  arbitrumgoerli_swap__meta?: Maybe<arbitrumgoerli_swap__Meta_>;
  mumbai_swap_systemInfo?: Maybe<mumbai_swap_SystemInfo>;
  mumbai_swap_systemInfos: Array<mumbai_swap_SystemInfo>;
  mumbai_swap_pooledToken?: Maybe<mumbai_swap_PooledToken>;
  mumbai_swap_pooledTokens: Array<mumbai_swap_PooledToken>;
  mumbai_swap_stableSwap?: Maybe<mumbai_swap_StableSwap>;
  mumbai_swap_stableSwaps: Array<mumbai_swap_StableSwap>;
  mumbai_swap_stableSwapAddLiquidityEvent?: Maybe<mumbai_swap_StableSwapAddLiquidityEvent>;
  mumbai_swap_stableSwapAddLiquidityEvents: Array<mumbai_swap_StableSwapAddLiquidityEvent>;
  mumbai_swap_stableSwapRemoveLiquidityEvent?: Maybe<mumbai_swap_StableSwapRemoveLiquidityEvent>;
  mumbai_swap_stableSwapRemoveLiquidityEvents: Array<mumbai_swap_StableSwapRemoveLiquidityEvent>;
  mumbai_swap_stableSwapExchange?: Maybe<mumbai_swap_StableSwapExchange>;
  mumbai_swap_stableSwapExchanges: Array<mumbai_swap_StableSwapExchange>;
  mumbai_swap_swapDailyVolume?: Maybe<mumbai_swap_SwapDailyVolume>;
  mumbai_swap_swapDailyVolumes: Array<mumbai_swap_SwapDailyVolume>;
  mumbai_swap_swapHourlyVolume?: Maybe<mumbai_swap_SwapHourlyVolume>;
  mumbai_swap_swapHourlyVolumes: Array<mumbai_swap_SwapHourlyVolume>;
  mumbai_swap_swapWeeklyVolume?: Maybe<mumbai_swap_SwapWeeklyVolume>;
  mumbai_swap_swapWeeklyVolumes: Array<mumbai_swap_SwapWeeklyVolume>;
  mumbai_swap_stableSwapEvent?: Maybe<mumbai_swap_StableSwapEvent>;
  mumbai_swap_stableSwapEvents: Array<mumbai_swap_StableSwapEvent>;
  mumbai_swap_swapTradeVolume?: Maybe<mumbai_swap_SwapTradeVolume>;
  mumbai_swap_swapTradeVolumes: Array<mumbai_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  mumbai_swap__meta?: Maybe<mumbai_swap__Meta_>;
  optimism_asset?: Maybe<optimism_Asset>;
  optimism_assets: Array<optimism_Asset>;
  optimism_assetStatus?: Maybe<optimism_AssetStatus>;
  optimism_assetStatuses: Array<optimism_AssetStatus>;
  optimism_assetBalance?: Maybe<optimism_AssetBalance>;
  optimism_assetBalances: Array<optimism_AssetBalance>;
  optimism_router?: Maybe<optimism_Router>;
  optimism_routers: Array<optimism_Router>;
  optimism_setting?: Maybe<optimism_Setting>;
  optimism_settings: Array<optimism_Setting>;
  optimism_relayer?: Maybe<optimism_Relayer>;
  optimism_relayers: Array<optimism_Relayer>;
  optimism_sequencer?: Maybe<optimism_Sequencer>;
  optimism_sequencers: Array<optimism_Sequencer>;
  optimism_originTransfer?: Maybe<optimism_OriginTransfer>;
  optimism_originTransfers: Array<optimism_OriginTransfer>;
  optimism_destinationTransfer?: Maybe<optimism_DestinationTransfer>;
  optimism_destinationTransfers: Array<optimism_DestinationTransfer>;
  optimism_originMessage?: Maybe<optimism_OriginMessage>;
  optimism_originMessages: Array<optimism_OriginMessage>;
  optimism_aggregateRoot?: Maybe<optimism_AggregateRoot>;
  optimism_aggregateRoots: Array<optimism_AggregateRoot>;
  optimism_connectorMeta?: Maybe<optimism_ConnectorMeta>;
  optimism_connectorMetas: Array<optimism_ConnectorMeta>;
  optimism_rootCount?: Maybe<optimism_RootCount>;
  optimism_rootCounts: Array<optimism_RootCount>;
  optimism_rootMessageSent?: Maybe<optimism_RootMessageSent>;
  optimism_rootMessageSents: Array<optimism_RootMessageSent>;
  /** Access to subgraph metadata */
  optimism__meta?: Maybe<optimism__Meta_>;
  staginggoerli_swap_systemInfo?: Maybe<staginggoerli_swap_SystemInfo>;
  staginggoerli_swap_systemInfos: Array<staginggoerli_swap_SystemInfo>;
  staginggoerli_swap_pooledToken?: Maybe<staginggoerli_swap_PooledToken>;
  staginggoerli_swap_pooledTokens: Array<staginggoerli_swap_PooledToken>;
  staginggoerli_swap_stableSwap?: Maybe<staginggoerli_swap_StableSwap>;
  staginggoerli_swap_stableSwaps: Array<staginggoerli_swap_StableSwap>;
  staginggoerli_swap_stableSwapAddLiquidityEvent?: Maybe<staginggoerli_swap_StableSwapAddLiquidityEvent>;
  staginggoerli_swap_stableSwapAddLiquidityEvents: Array<staginggoerli_swap_StableSwapAddLiquidityEvent>;
  staginggoerli_swap_stableSwapRemoveLiquidityEvent?: Maybe<staginggoerli_swap_StableSwapRemoveLiquidityEvent>;
  staginggoerli_swap_stableSwapRemoveLiquidityEvents: Array<staginggoerli_swap_StableSwapRemoveLiquidityEvent>;
  staginggoerli_swap_stableSwapExchange?: Maybe<staginggoerli_swap_StableSwapExchange>;
  staginggoerli_swap_stableSwapExchanges: Array<staginggoerli_swap_StableSwapExchange>;
  staginggoerli_swap_swapDailyVolume?: Maybe<staginggoerli_swap_SwapDailyVolume>;
  staginggoerli_swap_swapDailyVolumes: Array<staginggoerli_swap_SwapDailyVolume>;
  staginggoerli_swap_swapHourlyVolume?: Maybe<staginggoerli_swap_SwapHourlyVolume>;
  staginggoerli_swap_swapHourlyVolumes: Array<staginggoerli_swap_SwapHourlyVolume>;
  staginggoerli_swap_swapWeeklyVolume?: Maybe<staginggoerli_swap_SwapWeeklyVolume>;
  staginggoerli_swap_swapWeeklyVolumes: Array<staginggoerli_swap_SwapWeeklyVolume>;
  staginggoerli_swap_stableSwapEvent?: Maybe<staginggoerli_swap_StableSwapEvent>;
  staginggoerli_swap_stableSwapEvents: Array<staginggoerli_swap_StableSwapEvent>;
  staginggoerli_swap_swapTradeVolume?: Maybe<staginggoerli_swap_SwapTradeVolume>;
  staginggoerli_swap_swapTradeVolumes: Array<staginggoerli_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  staginggoerli_swap__meta?: Maybe<staginggoerli_swap__Meta_>;
  stagingoptimismgoerli_asset?: Maybe<stagingoptimismgoerli_Asset>;
  stagingoptimismgoerli_assets: Array<stagingoptimismgoerli_Asset>;
  stagingoptimismgoerli_assetStatus?: Maybe<stagingoptimismgoerli_AssetStatus>;
  stagingoptimismgoerli_assetStatuses: Array<stagingoptimismgoerli_AssetStatus>;
  stagingoptimismgoerli_assetBalance?: Maybe<stagingoptimismgoerli_AssetBalance>;
  stagingoptimismgoerli_assetBalances: Array<stagingoptimismgoerli_AssetBalance>;
  stagingoptimismgoerli_router?: Maybe<stagingoptimismgoerli_Router>;
  stagingoptimismgoerli_routers: Array<stagingoptimismgoerli_Router>;
  stagingoptimismgoerli_setting?: Maybe<stagingoptimismgoerli_Setting>;
  stagingoptimismgoerli_settings: Array<stagingoptimismgoerli_Setting>;
  stagingoptimismgoerli_relayer?: Maybe<stagingoptimismgoerli_Relayer>;
  stagingoptimismgoerli_relayers: Array<stagingoptimismgoerli_Relayer>;
  stagingoptimismgoerli_sequencer?: Maybe<stagingoptimismgoerli_Sequencer>;
  stagingoptimismgoerli_sequencers: Array<stagingoptimismgoerli_Sequencer>;
  stagingoptimismgoerli_originTransfer?: Maybe<stagingoptimismgoerli_OriginTransfer>;
  stagingoptimismgoerli_originTransfers: Array<stagingoptimismgoerli_OriginTransfer>;
  stagingoptimismgoerli_destinationTransfer?: Maybe<stagingoptimismgoerli_DestinationTransfer>;
  stagingoptimismgoerli_destinationTransfers: Array<stagingoptimismgoerli_DestinationTransfer>;
  stagingoptimismgoerli_originMessage?: Maybe<stagingoptimismgoerli_OriginMessage>;
  stagingoptimismgoerli_originMessages: Array<stagingoptimismgoerli_OriginMessage>;
  stagingoptimismgoerli_aggregateRoot?: Maybe<stagingoptimismgoerli_AggregateRoot>;
  stagingoptimismgoerli_aggregateRoots: Array<stagingoptimismgoerli_AggregateRoot>;
  stagingoptimismgoerli_connectorMeta?: Maybe<stagingoptimismgoerli_ConnectorMeta>;
  stagingoptimismgoerli_connectorMetas: Array<stagingoptimismgoerli_ConnectorMeta>;
  stagingoptimismgoerli_rootCount?: Maybe<stagingoptimismgoerli_RootCount>;
  stagingoptimismgoerli_rootCounts: Array<stagingoptimismgoerli_RootCount>;
  stagingoptimismgoerli_rootMessageSent?: Maybe<stagingoptimismgoerli_RootMessageSent>;
  stagingoptimismgoerli_rootMessageSents: Array<stagingoptimismgoerli_RootMessageSent>;
  /** Access to subgraph metadata */
  stagingoptimismgoerli__meta?: Maybe<stagingoptimismgoerli__Meta_>;
  stagingmumbai_asset?: Maybe<stagingmumbai_Asset>;
  stagingmumbai_assets: Array<stagingmumbai_Asset>;
  stagingmumbai_assetStatus?: Maybe<stagingmumbai_AssetStatus>;
  stagingmumbai_assetStatuses: Array<stagingmumbai_AssetStatus>;
  stagingmumbai_assetBalance?: Maybe<stagingmumbai_AssetBalance>;
  stagingmumbai_assetBalances: Array<stagingmumbai_AssetBalance>;
  stagingmumbai_router?: Maybe<stagingmumbai_Router>;
  stagingmumbai_routers: Array<stagingmumbai_Router>;
  stagingmumbai_setting?: Maybe<stagingmumbai_Setting>;
  stagingmumbai_settings: Array<stagingmumbai_Setting>;
  stagingmumbai_relayer?: Maybe<stagingmumbai_Relayer>;
  stagingmumbai_relayers: Array<stagingmumbai_Relayer>;
  stagingmumbai_sequencer?: Maybe<stagingmumbai_Sequencer>;
  stagingmumbai_sequencers: Array<stagingmumbai_Sequencer>;
  stagingmumbai_originTransfer?: Maybe<stagingmumbai_OriginTransfer>;
  stagingmumbai_originTransfers: Array<stagingmumbai_OriginTransfer>;
  stagingmumbai_destinationTransfer?: Maybe<stagingmumbai_DestinationTransfer>;
  stagingmumbai_destinationTransfers: Array<stagingmumbai_DestinationTransfer>;
  stagingmumbai_originMessage?: Maybe<stagingmumbai_OriginMessage>;
  stagingmumbai_originMessages: Array<stagingmumbai_OriginMessage>;
  stagingmumbai_aggregateRoot?: Maybe<stagingmumbai_AggregateRoot>;
  stagingmumbai_aggregateRoots: Array<stagingmumbai_AggregateRoot>;
  stagingmumbai_connectorMeta?: Maybe<stagingmumbai_ConnectorMeta>;
  stagingmumbai_connectorMetas: Array<stagingmumbai_ConnectorMeta>;
  stagingmumbai_rootCount?: Maybe<stagingmumbai_RootCount>;
  stagingmumbai_rootCounts: Array<stagingmumbai_RootCount>;
  stagingmumbai_rootMessageSent?: Maybe<stagingmumbai_RootMessageSent>;
  stagingmumbai_rootMessageSents: Array<stagingmumbai_RootMessageSent>;
  /** Access to subgraph metadata */
  stagingmumbai__meta?: Maybe<stagingmumbai__Meta_>;
  arbitrumone_swap_systemInfo?: Maybe<arbitrumone_swap_SystemInfo>;
  arbitrumone_swap_systemInfos: Array<arbitrumone_swap_SystemInfo>;
  arbitrumone_swap_pooledToken?: Maybe<arbitrumone_swap_PooledToken>;
  arbitrumone_swap_pooledTokens: Array<arbitrumone_swap_PooledToken>;
  arbitrumone_swap_stableSwap?: Maybe<arbitrumone_swap_StableSwap>;
  arbitrumone_swap_stableSwaps: Array<arbitrumone_swap_StableSwap>;
  arbitrumone_swap_stableSwapAddLiquidityEvent?: Maybe<arbitrumone_swap_StableSwapAddLiquidityEvent>;
  arbitrumone_swap_stableSwapAddLiquidityEvents: Array<arbitrumone_swap_StableSwapAddLiquidityEvent>;
  arbitrumone_swap_stableSwapRemoveLiquidityEvent?: Maybe<arbitrumone_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumone_swap_stableSwapRemoveLiquidityEvents: Array<arbitrumone_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumone_swap_stableSwapExchange?: Maybe<arbitrumone_swap_StableSwapExchange>;
  arbitrumone_swap_stableSwapExchanges: Array<arbitrumone_swap_StableSwapExchange>;
  arbitrumone_swap_swapDailyVolume?: Maybe<arbitrumone_swap_SwapDailyVolume>;
  arbitrumone_swap_swapDailyVolumes: Array<arbitrumone_swap_SwapDailyVolume>;
  arbitrumone_swap_swapHourlyVolume?: Maybe<arbitrumone_swap_SwapHourlyVolume>;
  arbitrumone_swap_swapHourlyVolumes: Array<arbitrumone_swap_SwapHourlyVolume>;
  arbitrumone_swap_swapWeeklyVolume?: Maybe<arbitrumone_swap_SwapWeeklyVolume>;
  arbitrumone_swap_swapWeeklyVolumes: Array<arbitrumone_swap_SwapWeeklyVolume>;
  arbitrumone_swap_stableSwapEvent?: Maybe<arbitrumone_swap_StableSwapEvent>;
  arbitrumone_swap_stableSwapEvents: Array<arbitrumone_swap_StableSwapEvent>;
  arbitrumone_swap_swapTradeVolume?: Maybe<arbitrumone_swap_SwapTradeVolume>;
  arbitrumone_swap_swapTradeVolumes: Array<arbitrumone_swap_SwapTradeVolume>;
  /** Access to subgraph metadata */
  arbitrumone_swap__meta?: Maybe<arbitrumone_swap__Meta_>;
  local1338_asset?: Maybe<local1338_Asset>;
  local1338_assets: Array<local1338_Asset>;
  local1338_assetBalance?: Maybe<local1338_AssetBalance>;
  local1338_assetBalances: Array<local1338_AssetBalance>;
  local1338_router?: Maybe<local1338_Router>;
  local1338_routers: Array<local1338_Router>;
  local1338_setting?: Maybe<local1338_Setting>;
  local1338_settings: Array<local1338_Setting>;
  local1338_relayer?: Maybe<local1338_Relayer>;
  local1338_relayers: Array<local1338_Relayer>;
  local1338_stableSwap?: Maybe<local1338_StableSwap>;
  local1338_stableSwaps: Array<local1338_StableSwap>;
  local1338_sponsorVault?: Maybe<local1338_SponsorVault>;
  local1338_sponsorVaults: Array<local1338_SponsorVault>;
  local1338_originTransfer?: Maybe<local1338_OriginTransfer>;
  local1338_originTransfers: Array<local1338_OriginTransfer>;
  local1338_destinationTransfer?: Maybe<local1338_DestinationTransfer>;
  local1338_destinationTransfers: Array<local1338_DestinationTransfer>;
  /** Access to subgraph metadata */
  local1338__meta?: Maybe<local1338__Meta_>;
  goerli_asset?: Maybe<goerli_Asset>;
  goerli_assets: Array<goerli_Asset>;
  goerli_assetStatus?: Maybe<goerli_AssetStatus>;
  goerli_assetStatuses: Array<goerli_AssetStatus>;
  goerli_assetBalance?: Maybe<goerli_AssetBalance>;
  goerli_assetBalances: Array<goerli_AssetBalance>;
  goerli_router?: Maybe<goerli_Router>;
  goerli_routers: Array<goerli_Router>;
  goerli_setting?: Maybe<goerli_Setting>;
  goerli_settings: Array<goerli_Setting>;
  goerli_relayer?: Maybe<goerli_Relayer>;
  goerli_relayers: Array<goerli_Relayer>;
  goerli_sequencer?: Maybe<goerli_Sequencer>;
  goerli_sequencers: Array<goerli_Sequencer>;
  goerli_originTransfer?: Maybe<goerli_OriginTransfer>;
  goerli_originTransfers: Array<goerli_OriginTransfer>;
  goerli_destinationTransfer?: Maybe<goerli_DestinationTransfer>;
  goerli_destinationTransfers: Array<goerli_DestinationTransfer>;
  goerli_originMessage?: Maybe<goerli_OriginMessage>;
  goerli_originMessages: Array<goerli_OriginMessage>;
  goerli_aggregateRoot?: Maybe<goerli_AggregateRoot>;
  goerli_aggregateRoots: Array<goerli_AggregateRoot>;
  goerli_connectorMeta?: Maybe<goerli_ConnectorMeta>;
  goerli_connectorMetas: Array<goerli_ConnectorMeta>;
  goerli_rootCount?: Maybe<goerli_RootCount>;
  goerli_rootCounts: Array<goerli_RootCount>;
  goerli_rootMessageSent?: Maybe<goerli_RootMessageSent>;
  goerli_rootMessageSents: Array<goerli_RootMessageSent>;
  stagingarbitrumgoerli_asset?: Maybe<stagingarbitrumgoerli_Asset>;
  stagingarbitrumgoerli_assets: Array<stagingarbitrumgoerli_Asset>;
  stagingarbitrumgoerli_assetStatus?: Maybe<stagingarbitrumgoerli_AssetStatus>;
  stagingarbitrumgoerli_assetStatuses: Array<stagingarbitrumgoerli_AssetStatus>;
  stagingarbitrumgoerli_assetBalance?: Maybe<stagingarbitrumgoerli_AssetBalance>;
  stagingarbitrumgoerli_assetBalances: Array<stagingarbitrumgoerli_AssetBalance>;
  stagingarbitrumgoerli_router?: Maybe<stagingarbitrumgoerli_Router>;
  stagingarbitrumgoerli_routers: Array<stagingarbitrumgoerli_Router>;
  stagingarbitrumgoerli_setting?: Maybe<stagingarbitrumgoerli_Setting>;
  stagingarbitrumgoerli_settings: Array<stagingarbitrumgoerli_Setting>;
  stagingarbitrumgoerli_relayer?: Maybe<stagingarbitrumgoerli_Relayer>;
  stagingarbitrumgoerli_relayers: Array<stagingarbitrumgoerli_Relayer>;
  stagingarbitrumgoerli_sequencer?: Maybe<stagingarbitrumgoerli_Sequencer>;
  stagingarbitrumgoerli_sequencers: Array<stagingarbitrumgoerli_Sequencer>;
  stagingarbitrumgoerli_originTransfer?: Maybe<stagingarbitrumgoerli_OriginTransfer>;
  stagingarbitrumgoerli_originTransfers: Array<stagingarbitrumgoerli_OriginTransfer>;
  stagingarbitrumgoerli_destinationTransfer?: Maybe<stagingarbitrumgoerli_DestinationTransfer>;
  stagingarbitrumgoerli_destinationTransfers: Array<stagingarbitrumgoerli_DestinationTransfer>;
  stagingarbitrumgoerli_originMessage?: Maybe<stagingarbitrumgoerli_OriginMessage>;
  stagingarbitrumgoerli_originMessages: Array<stagingarbitrumgoerli_OriginMessage>;
  stagingarbitrumgoerli_aggregateRoot?: Maybe<stagingarbitrumgoerli_AggregateRoot>;
  stagingarbitrumgoerli_aggregateRoots: Array<stagingarbitrumgoerli_AggregateRoot>;
  stagingarbitrumgoerli_connectorMeta?: Maybe<stagingarbitrumgoerli_ConnectorMeta>;
  stagingarbitrumgoerli_connectorMetas: Array<stagingarbitrumgoerli_ConnectorMeta>;
  stagingarbitrumgoerli_rootCount?: Maybe<stagingarbitrumgoerli_RootCount>;
  stagingarbitrumgoerli_rootCounts: Array<stagingarbitrumgoerli_RootCount>;
  stagingarbitrumgoerli_rootMessageSent?: Maybe<stagingarbitrumgoerli_RootMessageSent>;
  stagingarbitrumgoerli_rootMessageSents: Array<stagingarbitrumgoerli_RootMessageSent>;
  /** Access to subgraph metadata */
  stagingarbitrumgoerli__meta?: Maybe<stagingarbitrumgoerli__Meta_>;
  mumbai_asset?: Maybe<mumbai_Asset>;
  mumbai_assets: Array<mumbai_Asset>;
  mumbai_assetStatus?: Maybe<mumbai_AssetStatus>;
  mumbai_assetStatuses: Array<mumbai_AssetStatus>;
  mumbai_assetBalance?: Maybe<mumbai_AssetBalance>;
  mumbai_assetBalances: Array<mumbai_AssetBalance>;
  mumbai_router?: Maybe<mumbai_Router>;
  mumbai_routers: Array<mumbai_Router>;
  mumbai_setting?: Maybe<mumbai_Setting>;
  mumbai_settings: Array<mumbai_Setting>;
  mumbai_relayer?: Maybe<mumbai_Relayer>;
  mumbai_relayers: Array<mumbai_Relayer>;
  mumbai_sequencer?: Maybe<mumbai_Sequencer>;
  mumbai_sequencers: Array<mumbai_Sequencer>;
  mumbai_originTransfer?: Maybe<mumbai_OriginTransfer>;
  mumbai_originTransfers: Array<mumbai_OriginTransfer>;
  mumbai_destinationTransfer?: Maybe<mumbai_DestinationTransfer>;
  mumbai_destinationTransfers: Array<mumbai_DestinationTransfer>;
  mumbai_originMessage?: Maybe<mumbai_OriginMessage>;
  mumbai_originMessages: Array<mumbai_OriginMessage>;
  mumbai_aggregateRoot?: Maybe<mumbai_AggregateRoot>;
  mumbai_aggregateRoots: Array<mumbai_AggregateRoot>;
  mumbai_connectorMeta?: Maybe<mumbai_ConnectorMeta>;
  mumbai_connectorMetas: Array<mumbai_ConnectorMeta>;
  mumbai_rootCount?: Maybe<mumbai_RootCount>;
  mumbai_rootCounts: Array<mumbai_RootCount>;
  mumbai_rootMessageSent?: Maybe<mumbai_RootMessageSent>;
  mumbai_rootMessageSents: Array<mumbai_RootMessageSent>;
  /** Access to subgraph metadata */
  mumbai__meta?: Maybe<mumbai__Meta_>;
  bnb_asset?: Maybe<bnb_Asset>;
  bnb_assets: Array<bnb_Asset>;
  bnb_assetStatus?: Maybe<bnb_AssetStatus>;
  bnb_assetStatuses: Array<bnb_AssetStatus>;
  bnb_assetBalance?: Maybe<bnb_AssetBalance>;
  bnb_assetBalances: Array<bnb_AssetBalance>;
  bnb_router?: Maybe<bnb_Router>;
  bnb_routers: Array<bnb_Router>;
  bnb_setting?: Maybe<bnb_Setting>;
  bnb_settings: Array<bnb_Setting>;
  bnb_relayer?: Maybe<bnb_Relayer>;
  bnb_relayers: Array<bnb_Relayer>;
  bnb_sequencer?: Maybe<bnb_Sequencer>;
  bnb_sequencers: Array<bnb_Sequencer>;
  bnb_originTransfer?: Maybe<bnb_OriginTransfer>;
  bnb_originTransfers: Array<bnb_OriginTransfer>;
  bnb_destinationTransfer?: Maybe<bnb_DestinationTransfer>;
  bnb_destinationTransfers: Array<bnb_DestinationTransfer>;
  bnb_originMessage?: Maybe<bnb_OriginMessage>;
  bnb_originMessages: Array<bnb_OriginMessage>;
  bnb_aggregateRoot?: Maybe<bnb_AggregateRoot>;
  bnb_aggregateRoots: Array<bnb_AggregateRoot>;
  bnb_connectorMeta?: Maybe<bnb_ConnectorMeta>;
  bnb_connectorMetas: Array<bnb_ConnectorMeta>;
  bnb_rootCount?: Maybe<bnb_RootCount>;
  bnb_rootCounts: Array<bnb_RootCount>;
  bnb_rootMessageSent?: Maybe<bnb_RootMessageSent>;
  bnb_rootMessageSents: Array<bnb_RootMessageSent>;
  /** Access to subgraph metadata */
  bnb__meta?: Maybe<bnb__Meta_>;
  mainnet_asset?: Maybe<mainnet_Asset>;
  mainnet_assets: Array<mainnet_Asset>;
  mainnet_assetStatus?: Maybe<mainnet_AssetStatus>;
  mainnet_assetStatuses: Array<mainnet_AssetStatus>;
  mainnet_assetBalance?: Maybe<mainnet_AssetBalance>;
  mainnet_assetBalances: Array<mainnet_AssetBalance>;
  mainnet_router?: Maybe<mainnet_Router>;
  mainnet_routers: Array<mainnet_Router>;
  mainnet_setting?: Maybe<mainnet_Setting>;
  mainnet_settings: Array<mainnet_Setting>;
  mainnet_relayer?: Maybe<mainnet_Relayer>;
  mainnet_relayers: Array<mainnet_Relayer>;
  mainnet_sequencer?: Maybe<mainnet_Sequencer>;
  mainnet_sequencers: Array<mainnet_Sequencer>;
  mainnet_originTransfer?: Maybe<mainnet_OriginTransfer>;
  mainnet_originTransfers: Array<mainnet_OriginTransfer>;
  mainnet_destinationTransfer?: Maybe<mainnet_DestinationTransfer>;
  mainnet_destinationTransfers: Array<mainnet_DestinationTransfer>;
  mainnet_originMessage?: Maybe<mainnet_OriginMessage>;
  mainnet_originMessages: Array<mainnet_OriginMessage>;
  mainnet_aggregateRoot?: Maybe<mainnet_AggregateRoot>;
  mainnet_aggregateRoots: Array<mainnet_AggregateRoot>;
  mainnet_connectorMeta?: Maybe<mainnet_ConnectorMeta>;
  mainnet_connectorMetas: Array<mainnet_ConnectorMeta>;
  mainnet_rootCount?: Maybe<mainnet_RootCount>;
  mainnet_rootCounts: Array<mainnet_RootCount>;
  mainnet_rootMessageSent?: Maybe<mainnet_RootMessageSent>;
  mainnet_rootMessageSents: Array<mainnet_RootMessageSent>;
  polygon_asset?: Maybe<polygon_Asset>;
  polygon_assets: Array<polygon_Asset>;
  polygon_assetStatus?: Maybe<polygon_AssetStatus>;
  polygon_assetStatuses: Array<polygon_AssetStatus>;
  polygon_assetBalance?: Maybe<polygon_AssetBalance>;
  polygon_assetBalances: Array<polygon_AssetBalance>;
  polygon_router?: Maybe<polygon_Router>;
  polygon_routers: Array<polygon_Router>;
  polygon_setting?: Maybe<polygon_Setting>;
  polygon_settings: Array<polygon_Setting>;
  polygon_relayer?: Maybe<polygon_Relayer>;
  polygon_relayers: Array<polygon_Relayer>;
  polygon_sequencer?: Maybe<polygon_Sequencer>;
  polygon_sequencers: Array<polygon_Sequencer>;
  polygon_originTransfer?: Maybe<polygon_OriginTransfer>;
  polygon_originTransfers: Array<polygon_OriginTransfer>;
  polygon_destinationTransfer?: Maybe<polygon_DestinationTransfer>;
  polygon_destinationTransfers: Array<polygon_DestinationTransfer>;
  polygon_originMessage?: Maybe<polygon_OriginMessage>;
  polygon_originMessages: Array<polygon_OriginMessage>;
  polygon_aggregateRoot?: Maybe<polygon_AggregateRoot>;
  polygon_aggregateRoots: Array<polygon_AggregateRoot>;
  polygon_connectorMeta?: Maybe<polygon_ConnectorMeta>;
  polygon_connectorMetas: Array<polygon_ConnectorMeta>;
  polygon_rootCount?: Maybe<polygon_RootCount>;
  polygon_rootCounts: Array<polygon_RootCount>;
  polygon_rootMessageSent?: Maybe<polygon_RootMessageSent>;
  polygon_rootMessageSents: Array<polygon_RootMessageSent>;
  /** Access to subgraph metadata */
  polygon__meta?: Maybe<polygon__Meta_>;
  xdai_asset?: Maybe<xdai_Asset>;
  xdai_assets: Array<xdai_Asset>;
  xdai_assetStatus?: Maybe<xdai_AssetStatus>;
  xdai_assetStatuses: Array<xdai_AssetStatus>;
  xdai_assetBalance?: Maybe<xdai_AssetBalance>;
  xdai_assetBalances: Array<xdai_AssetBalance>;
  xdai_router?: Maybe<xdai_Router>;
  xdai_routers: Array<xdai_Router>;
  xdai_setting?: Maybe<xdai_Setting>;
  xdai_settings: Array<xdai_Setting>;
  xdai_relayer?: Maybe<xdai_Relayer>;
  xdai_relayers: Array<xdai_Relayer>;
  xdai_sequencer?: Maybe<xdai_Sequencer>;
  xdai_sequencers: Array<xdai_Sequencer>;
  xdai_originTransfer?: Maybe<xdai_OriginTransfer>;
  xdai_originTransfers: Array<xdai_OriginTransfer>;
  xdai_destinationTransfer?: Maybe<xdai_DestinationTransfer>;
  xdai_destinationTransfers: Array<xdai_DestinationTransfer>;
  xdai_originMessage?: Maybe<xdai_OriginMessage>;
  xdai_originMessages: Array<xdai_OriginMessage>;
  xdai_aggregateRoot?: Maybe<xdai_AggregateRoot>;
  xdai_aggregateRoots: Array<xdai_AggregateRoot>;
  xdai_connectorMeta?: Maybe<xdai_ConnectorMeta>;
  xdai_connectorMetas: Array<xdai_ConnectorMeta>;
  xdai_rootCount?: Maybe<xdai_RootCount>;
  xdai_rootCounts: Array<xdai_RootCount>;
  xdai_rootMessageSent?: Maybe<xdai_RootMessageSent>;
  xdai_rootMessageSents: Array<xdai_RootMessageSent>;
  /** Access to subgraph metadata */
  xdai__meta?: Maybe<xdai__Meta_>;
  arbitrumone_asset?: Maybe<arbitrumone_Asset>;
  arbitrumone_assets: Array<arbitrumone_Asset>;
  arbitrumone_assetStatus?: Maybe<arbitrumone_AssetStatus>;
  arbitrumone_assetStatuses: Array<arbitrumone_AssetStatus>;
  arbitrumone_assetBalance?: Maybe<arbitrumone_AssetBalance>;
  arbitrumone_assetBalances: Array<arbitrumone_AssetBalance>;
  arbitrumone_router?: Maybe<arbitrumone_Router>;
  arbitrumone_routers: Array<arbitrumone_Router>;
  arbitrumone_setting?: Maybe<arbitrumone_Setting>;
  arbitrumone_settings: Array<arbitrumone_Setting>;
  arbitrumone_relayer?: Maybe<arbitrumone_Relayer>;
  arbitrumone_relayers: Array<arbitrumone_Relayer>;
  arbitrumone_sequencer?: Maybe<arbitrumone_Sequencer>;
  arbitrumone_sequencers: Array<arbitrumone_Sequencer>;
  arbitrumone_originTransfer?: Maybe<arbitrumone_OriginTransfer>;
  arbitrumone_originTransfers: Array<arbitrumone_OriginTransfer>;
  arbitrumone_destinationTransfer?: Maybe<arbitrumone_DestinationTransfer>;
  arbitrumone_destinationTransfers: Array<arbitrumone_DestinationTransfer>;
  arbitrumone_originMessage?: Maybe<arbitrumone_OriginMessage>;
  arbitrumone_originMessages: Array<arbitrumone_OriginMessage>;
  arbitrumone_aggregateRoot?: Maybe<arbitrumone_AggregateRoot>;
  arbitrumone_aggregateRoots: Array<arbitrumone_AggregateRoot>;
  arbitrumone_connectorMeta?: Maybe<arbitrumone_ConnectorMeta>;
  arbitrumone_connectorMetas: Array<arbitrumone_ConnectorMeta>;
  arbitrumone_rootCount?: Maybe<arbitrumone_RootCount>;
  arbitrumone_rootCounts: Array<arbitrumone_RootCount>;
  arbitrumone_rootMessageSent?: Maybe<arbitrumone_RootMessageSent>;
  arbitrumone_rootMessageSents: Array<arbitrumone_RootMessageSent>;
  /** Access to subgraph metadata */
  arbitrumone__meta?: Maybe<arbitrumone__Meta_>;
  staginggoerli_asset?: Maybe<staginggoerli_Asset>;
  staginggoerli_assets: Array<staginggoerli_Asset>;
  staginggoerli_assetBalance?: Maybe<staginggoerli_AssetBalance>;
  staginggoerli_assetBalances: Array<staginggoerli_AssetBalance>;
  staginggoerli_router?: Maybe<staginggoerli_Router>;
  staginggoerli_routers: Array<staginggoerli_Router>;
  staginggoerli_setting?: Maybe<staginggoerli_Setting>;
  staginggoerli_settings: Array<staginggoerli_Setting>;
  staginggoerli_relayer?: Maybe<staginggoerli_Relayer>;
  staginggoerli_relayers: Array<staginggoerli_Relayer>;
  staginggoerli_transferRelayerFee?: Maybe<staginggoerli_TransferRelayerFee>;
  staginggoerli_transferRelayerFees: Array<staginggoerli_TransferRelayerFee>;
  staginggoerli_sequencer?: Maybe<staginggoerli_Sequencer>;
  staginggoerli_sequencers: Array<staginggoerli_Sequencer>;
  staginggoerli_originTransfer?: Maybe<staginggoerli_OriginTransfer>;
  staginggoerli_originTransfers: Array<staginggoerli_OriginTransfer>;
  staginggoerli_destinationTransfer?: Maybe<staginggoerli_DestinationTransfer>;
  staginggoerli_destinationTransfers: Array<staginggoerli_DestinationTransfer>;
  staginggoerli_originMessage?: Maybe<staginggoerli_OriginMessage>;
  staginggoerli_originMessages: Array<staginggoerli_OriginMessage>;
  staginggoerli_aggregateRoot?: Maybe<staginggoerli_AggregateRoot>;
  staginggoerli_aggregateRoots: Array<staginggoerli_AggregateRoot>;
  staginggoerli_connectorMeta?: Maybe<staginggoerli_ConnectorMeta>;
  staginggoerli_connectorMetas: Array<staginggoerli_ConnectorMeta>;
  staginggoerli_rootCount?: Maybe<staginggoerli_RootCount>;
  staginggoerli_rootCounts: Array<staginggoerli_RootCount>;
  staginggoerli_rootMessageSent?: Maybe<staginggoerli_RootMessageSent>;
  staginggoerli_rootMessageSents: Array<staginggoerli_RootMessageSent>;
  staginggoerli_stableSwap?: Maybe<staginggoerli_StableSwap>;
  staginggoerli_stableSwaps: Array<staginggoerli_StableSwap>;
  staginggoerli_pooledToken?: Maybe<staginggoerli_PooledToken>;
  staginggoerli_pooledTokens: Array<staginggoerli_PooledToken>;
  staginggoerli_stableSwapAddLiquidityEvent?: Maybe<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_stableSwapAddLiquidityEvents: Array<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_stableSwapRemoveLiquidityEvent?: Maybe<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_stableSwapRemoveLiquidityEvents: Array<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_stableSwapExchange?: Maybe<staginggoerli_StableSwapExchange>;
  staginggoerli_stableSwapExchanges: Array<staginggoerli_StableSwapExchange>;
  staginggoerli_swapDailyVolume?: Maybe<staginggoerli_SwapDailyVolume>;
  staginggoerli_swapDailyVolumes: Array<staginggoerli_SwapDailyVolume>;
  staginggoerli_swapHourlyVolume?: Maybe<staginggoerli_SwapHourlyVolume>;
  staginggoerli_swapHourlyVolumes: Array<staginggoerli_SwapHourlyVolume>;
  staginggoerli_swapWeeklyVolume?: Maybe<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_swapWeeklyVolumes: Array<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_stableSwapEvent?: Maybe<staginggoerli_StableSwapEvent>;
  staginggoerli_stableSwapEvents: Array<staginggoerli_StableSwapEvent>;
  staginggoerli_swapTradeVolume?: Maybe<staginggoerli_SwapTradeVolume>;
  staginggoerli_swapTradeVolumes: Array<staginggoerli_SwapTradeVolume>;
};


export type Subscriptionpolygon_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SystemInfo_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_PooledToken_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwap_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapExchange_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapEvent_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<polygon_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_swap__metaArgs = {
  block?: InputMaybe<polygon_swap_Block_height>;
};


export type Subscriptionoptimismgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Asset_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_AssetStatus_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_AssetBalance_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Router_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Setting_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Relayer_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Sequencer_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_OriginTransfer_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_OriginMessage_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_AggregateRoot_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_ConnectorMeta_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_RootCount_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_RootMessageSent_filter>;
  block?: InputMaybe<optimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli__metaArgs = {
  block?: InputMaybe<optimismgoerli_Block_height>;
};


export type Subscriptionstagingarbitrumgoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_PooledToken_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_swap__metaArgs = {
  block?: InputMaybe<stagingarbitrumgoerli_swap_Block_height>;
};


export type Subscriptionarbitrumgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Asset_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_AssetStatus_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_AssetBalance_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Router_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Setting_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Relayer_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Sequencer_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_OriginTransfer_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_OriginMessage_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_AggregateRoot_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_ConnectorMeta_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_RootCount_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_RootMessageSent_filter>;
  block?: InputMaybe<arbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli__metaArgs = {
  block?: InputMaybe<arbitrumgoerli_Block_height>;
};


export type Subscriptionstagingoptimismgoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_PooledToken_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_swap__metaArgs = {
  block?: InputMaybe<stagingoptimismgoerli_swap_Block_height>;
};


export type Subscriptiontestgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_Asset_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_AssetBalance_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_Router_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_Setting_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_Relayer_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_StableSwap_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_sponsorVaultArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_sponsorVaultsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_SponsorVault_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_SponsorVault_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_OriginTransfer_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<testgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestgoerli__metaArgs = {
  block?: InputMaybe<testgoerli_Block_height>;
};


export type Subscriptionxdai_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SystemInfo_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_PooledToken_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwap_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapExchange_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapEvent_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<xdai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_swap__metaArgs = {
  block?: InputMaybe<xdai_swap_Block_height>;
};


export type Subscriptionstaginggoerli_rootAggregatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootAggregatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootAggregated_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootAggregated_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootPropagatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootPropagatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootPropagated_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootPropagated_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_aggregatedMessageRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_aggregatedMessageRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_AggregatedMessageRoot_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_AggregatedMessageRoot_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootManagerMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootManagerMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootManagerMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootManagerMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_polygonConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_polygonConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_PolygonConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_PolygonConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_optimismConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_optimismConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_OptimismConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_OptimismConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_bnbConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_bnbConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_BnbConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_BnbConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_arbitrumConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_arbitrumConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_ArbitrumConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_ArbitrumConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_gnosisConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_gnosisConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_GnosisConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_GnosisConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootMessageProcessedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootMessageProcessedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootMessageProcessed_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootMessageProcessed_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli__metaArgs = {
  block?: InputMaybe<staginggoerli_Block_height>;
};


export type Subscriptionmainnet_rootAggregatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootAggregatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootAggregated_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootAggregated_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootPropagatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootPropagatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootPropagated_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootPropagated_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_aggregatedMessageRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_aggregatedMessageRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_AggregatedMessageRoot_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_AggregatedMessageRoot_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootManagerMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootManagerMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootManagerMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootManagerMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_polygonConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_polygonConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_PolygonConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_PolygonConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_optimismConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_optimismConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_OptimismConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_OptimismConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_bnbConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_bnbConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_BnbConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_BnbConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_arbitrumConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_arbitrumConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_ArbitrumConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_ArbitrumConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_gnosisConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_gnosisConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_GnosisConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_GnosisConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootMessageProcessedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootMessageProcessedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootMessageProcessed_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootMessageProcessed_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet__metaArgs = {
  block?: InputMaybe<mainnet_Block_height>;
};


export type Subscriptiontestoptimismgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_Asset_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_AssetBalance_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_Router_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_Setting_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_Relayer_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_StableSwap_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_sponsorVaultArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_sponsorVaultsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_SponsorVault_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_SponsorVault_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_OriginTransfer_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<testoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiontestoptimismgoerli__metaArgs = {
  block?: InputMaybe<testoptimismgoerli_Block_height>;
};


export type Subscriptionoptimism_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SystemInfo_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_PooledToken_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwap_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapExchange_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapEvent_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<optimism_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_swap__metaArgs = {
  block?: InputMaybe<optimism_swap_Block_height>;
};


export type Subscriptiongoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SystemInfo_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_PooledToken_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwap_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<goerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_swap__metaArgs = {
  block?: InputMaybe<goerli_swap_Block_height>;
};


export type Subscriptionoptimismgoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_PooledToken_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimismgoerli_swap__metaArgs = {
  block?: InputMaybe<optimismgoerli_swap_Block_height>;
};


export type Subscriptionstagingmumbai_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SystemInfo_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_PooledToken_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapExchange_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapEvent_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_swap__metaArgs = {
  block?: InputMaybe<stagingmumbai_swap_Block_height>;
};


export type Subscriptiongoerli_rootAggregatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootAggregatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootAggregated_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootAggregated_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootPropagatedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootPropagatedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootPropagated_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootPropagated_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_aggregatedMessageRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_aggregatedMessageRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_AggregatedMessageRoot_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_AggregatedMessageRoot_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootManagerMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootManagerMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootManagerMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootManagerMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_polygonConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_polygonConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_PolygonConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_PolygonConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_optimismConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_optimismConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_OptimismConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_OptimismConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_bnbConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_bnbConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_BnbConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_BnbConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_arbitrumConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_arbitrumConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_ArbitrumConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_ArbitrumConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_gnosisConnectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_gnosisConnectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_GnosisConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_GnosisConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootMessageProcessedArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootMessageProcessedsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootMessageProcessed_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootMessageProcessed_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli__metaArgs = {
  block?: InputMaybe<goerli_Block_height>;
};


export type Subscriptionlocal1337_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_Asset_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_Asset_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_AssetBalance_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_Router_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_Router_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_Setting_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_Setting_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_Relayer_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_Relayer_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_StableSwap_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_StableSwap_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_sponsorVaultArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_sponsorVaultsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_SponsorVault_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_SponsorVault_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_OriginTransfer_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_DestinationTransfer_filter>;
  block?: InputMaybe<local1337_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1337__metaArgs = {
  block?: InputMaybe<local1337_Block_height>;
};


export type Subscriptionbnb_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SystemInfo_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_PooledToken_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwap_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapExchange_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapEvent_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<bnb_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_swap__metaArgs = {
  block?: InputMaybe<bnb_swap_Block_height>;
};


export type Subscriptionarbitrumgoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_PooledToken_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumgoerli_swap__metaArgs = {
  block?: InputMaybe<arbitrumgoerli_swap_Block_height>;
};


export type Subscriptionmumbai_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SystemInfo_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_PooledToken_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwap_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapExchange_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapEvent_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<mumbai_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_swap__metaArgs = {
  block?: InputMaybe<mumbai_swap_Block_height>;
};


export type Subscriptionoptimism_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Asset_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Asset_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_AssetStatus_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_AssetBalance_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Router_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Router_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Setting_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Setting_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Relayer_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Relayer_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Sequencer_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Sequencer_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_OriginTransfer_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_DestinationTransfer_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_OriginMessage_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_AggregateRoot_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_ConnectorMeta_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_RootCount_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_RootCount_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_RootMessageSent_filter>;
  block?: InputMaybe<optimism_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionoptimism__metaArgs = {
  block?: InputMaybe<optimism_Block_height>;
};


export type Subscriptionstaginggoerli_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SystemInfo_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_PooledToken_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapExchange_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapEvent_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<staginggoerli_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swap__metaArgs = {
  block?: InputMaybe<staginggoerli_swap_Block_height>;
};


export type Subscriptionstagingoptimismgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Asset_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_AssetStatus_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_AssetBalance_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Router_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Setting_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Relayer_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Sequencer_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_OriginTransfer_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_OriginMessage_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_AggregateRoot_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_ConnectorMeta_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_RootCount_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_RootMessageSent_filter>;
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingoptimismgoerli__metaArgs = {
  block?: InputMaybe<stagingoptimismgoerli_Block_height>;
};


export type Subscriptionstagingmumbai_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Asset_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Asset_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_AssetStatus_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_AssetBalance_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Router_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Router_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Setting_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Setting_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Relayer_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Relayer_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Sequencer_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Sequencer_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_OriginTransfer_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_DestinationTransfer_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_OriginMessage_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_AggregateRoot_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_ConnectorMeta_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_RootCount_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_RootCount_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_RootMessageSent_filter>;
  block?: InputMaybe<stagingmumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingmumbai__metaArgs = {
  block?: InputMaybe<stagingmumbai_Block_height>;
};


export type Subscriptionarbitrumone_swap_systemInfoArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_systemInfosArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SystemInfo_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SystemInfo_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_PooledToken_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_PooledToken_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwap_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapExchange_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapDailyVolume_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapHourlyVolume_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapWeeklyVolume_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapEvent_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapTradeVolume_filter>;
  block?: InputMaybe<arbitrumone_swap_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_swap__metaArgs = {
  block?: InputMaybe<arbitrumone_swap_Block_height>;
};


export type Subscriptionlocal1338_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_Asset_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_Asset_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_AssetBalance_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_Router_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_Router_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_Setting_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_Setting_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_Relayer_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_Relayer_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_StableSwap_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_StableSwap_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_sponsorVaultArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_sponsorVaultsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_SponsorVault_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_SponsorVault_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_OriginTransfer_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_DestinationTransfer_filter>;
  block?: InputMaybe<local1338_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionlocal1338__metaArgs = {
  block?: InputMaybe<local1338_Block_height>;
};


export type Subscriptiongoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Asset_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Asset_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_AssetStatus_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_AssetBalance_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Router_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Router_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Setting_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Setting_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Relayer_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Sequencer_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_OriginTransfer_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_DestinationTransfer_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_OriginMessage_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_AggregateRoot_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_ConnectorMeta_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootCount_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptiongoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_RootMessageSent_filter>;
  block?: InputMaybe<goerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Asset_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_AssetStatus_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_AssetBalance_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Router_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Setting_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Relayer_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Sequencer_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_OriginTransfer_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_DestinationTransfer_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_OriginMessage_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_AggregateRoot_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_ConnectorMeta_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_RootCount_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_RootMessageSent_filter>;
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstagingarbitrumgoerli__metaArgs = {
  block?: InputMaybe<stagingarbitrumgoerli_Block_height>;
};


export type Subscriptionmumbai_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Asset_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Asset_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_AssetStatus_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_AssetBalance_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Router_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Router_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Setting_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Setting_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Relayer_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Relayer_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Sequencer_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Sequencer_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_OriginTransfer_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_DestinationTransfer_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_OriginMessage_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_AggregateRoot_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_ConnectorMeta_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_RootCount_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_RootCount_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_RootMessageSent_filter>;
  block?: InputMaybe<mumbai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmumbai__metaArgs = {
  block?: InputMaybe<mumbai_Block_height>;
};


export type Subscriptionbnb_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Asset_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Asset_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_AssetStatus_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_AssetBalance_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Router_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Router_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Setting_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Setting_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Relayer_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Relayer_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Sequencer_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Sequencer_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_OriginTransfer_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_DestinationTransfer_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_OriginMessage_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_AggregateRoot_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_ConnectorMeta_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_RootCount_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_RootCount_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_RootMessageSent_filter>;
  block?: InputMaybe<bnb_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionbnb__metaArgs = {
  block?: InputMaybe<bnb_Block_height>;
};


export type Subscriptionmainnet_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Asset_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Asset_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_AssetStatus_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_AssetBalance_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Router_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Router_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Setting_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Setting_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Relayer_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Relayer_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Sequencer_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Sequencer_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_OriginTransfer_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_DestinationTransfer_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_OriginMessage_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_AggregateRoot_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_ConnectorMeta_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootCount_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootCount_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionmainnet_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_RootMessageSent_filter>;
  block?: InputMaybe<mainnet_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Asset_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Asset_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_AssetStatus_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_AssetBalance_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Router_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Router_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Setting_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Setting_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Relayer_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Relayer_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Sequencer_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Sequencer_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_OriginTransfer_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_DestinationTransfer_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_OriginMessage_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_AggregateRoot_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_ConnectorMeta_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_RootCount_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_RootCount_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_RootMessageSent_filter>;
  block?: InputMaybe<polygon_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionpolygon__metaArgs = {
  block?: InputMaybe<polygon_Block_height>;
};


export type Subscriptionxdai_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Asset_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Asset_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_AssetStatus_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_AssetBalance_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Router_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Router_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Setting_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Setting_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Relayer_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Relayer_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Sequencer_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Sequencer_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_OriginTransfer_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_DestinationTransfer_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_OriginMessage_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_AggregateRoot_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_ConnectorMeta_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_RootCount_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_RootCount_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_RootMessageSent_filter>;
  block?: InputMaybe<xdai_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionxdai__metaArgs = {
  block?: InputMaybe<xdai_Block_height>;
};


export type Subscriptionarbitrumone_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Asset_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Asset_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_assetStatusArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_assetStatusesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_AssetStatus_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_AssetStatus_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_AssetBalance_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Router_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Router_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Setting_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Setting_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Relayer_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Relayer_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Sequencer_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Sequencer_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_OriginTransfer_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_DestinationTransfer_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_OriginMessage_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_AggregateRoot_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_ConnectorMeta_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_RootCount_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_RootCount_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_RootMessageSent_filter>;
  block?: InputMaybe<arbitrumone_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionarbitrumone__metaArgs = {
  block?: InputMaybe<arbitrumone_Block_height>;
};


export type Subscriptionstaginggoerli_assetArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_assetsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Asset_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Asset_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_assetBalanceArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_assetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_AssetBalance_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_routerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_routersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Router_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Router_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_settingArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_settingsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Setting_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Setting_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_relayerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_relayersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Relayer_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Relayer_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_transferRelayerFeeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_transferRelayerFeesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_TransferRelayerFee_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_TransferRelayerFee_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_sequencerArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_sequencersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Sequencer_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Sequencer_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_originTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_originTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_OriginTransfer_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_OriginTransfer_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_destinationTransferArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_destinationTransfersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_DestinationTransfer_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_DestinationTransfer_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_originMessageArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_originMessagesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_OriginMessage_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_OriginMessage_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_aggregateRootArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_aggregateRootsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_AggregateRoot_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_AggregateRoot_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_connectorMetaArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_connectorMetasArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_ConnectorMeta_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_ConnectorMeta_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootCountArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootCountsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootCount_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootCount_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootMessageSentArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_rootMessageSentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_RootMessageSent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_RootMessageSent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwap_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwap_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_pooledTokenArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_pooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_PooledToken_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapAddLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapAddLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapRemoveLiquidityEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapRemoveLiquidityEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapExchangeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapExchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapExchange_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapDailyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapDailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapDailyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapHourlyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapHourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapHourlyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapWeeklyVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapWeeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapWeeklyVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapEventArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_stableSwapEventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_StableSwapEvent_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapTradeVolumeArgs = {
  id: Scalars['ID'];
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};


export type Subscriptionstaginggoerli_swapTradeVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_SwapTradeVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_SwapTradeVolume_filter>;
  block?: InputMaybe<staginggoerli_Block_height>;
  subgraphError?: _SubgraphErrorPolicy_;
};

export type polygon_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type polygon_swap_Block_height = {
  hash?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type polygon_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type polygon_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['polygon_swap_Bytes'];
};

export type polygon_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_PooledToken_filter>>>;
};

export type polygon_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type polygon_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['polygon_swap_Bytes'];
  canonicalId?: Maybe<Scalars['polygon_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['polygon_swap_Bytes']>;
  lpToken?: Maybe<Scalars['polygon_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['polygon_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<polygon_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<polygon_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<polygon_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<polygon_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<polygon_swap_SwapWeeklyVolume>>;
};


export type polygon_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapEvent_filter>;
};


export type polygon_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_StableSwapExchange_filter>;
};


export type polygon_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapHourlyVolume_filter>;
};


export type polygon_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapDailyVolume_filter>;
};


export type polygon_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<polygon_swap_OrderDirection>;
  where?: InputMaybe<polygon_swap_SwapWeeklyVolume_filter>;
};

export type polygon_swap_StableSwapAddLiquidityEvent = polygon_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: polygon_swap_StableSwap;
  provider: Scalars['polygon_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['polygon_swap_Bytes'];
};

export type polygon_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type polygon_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type polygon_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: polygon_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['polygon_swap_Bytes'];
};

export type polygon_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwapEvent_filter>>>;
};

export type polygon_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type polygon_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: polygon_swap_StableSwap;
  buyer: Scalars['polygon_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['polygon_swap_Bytes'];
};

export type polygon_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwapExchange_filter>>>;
};

export type polygon_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type polygon_swap_StableSwapRemoveLiquidityEvent = polygon_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: polygon_swap_StableSwap;
  provider: Scalars['polygon_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['polygon_swap_Bytes'];
};

export type polygon_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type polygon_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type polygon_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['polygon_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['polygon_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<polygon_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<polygon_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<polygon_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<polygon_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<polygon_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_StableSwap_filter>>>;
};

export type polygon_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type polygon_swap_SwapDailyVolume = polygon_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: polygon_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['polygon_swap_BigDecimal'];
};

export type polygon_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['polygon_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['polygon_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_SwapDailyVolume_filter>>>;
};

export type polygon_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type polygon_swap_SwapHourlyVolume = polygon_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: polygon_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['polygon_swap_BigDecimal'];
};

export type polygon_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['polygon_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['polygon_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_SwapHourlyVolume_filter>>>;
};

export type polygon_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type polygon_swap_SwapTradeVolume = {
  stableSwap: polygon_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['polygon_swap_BigDecimal'];
};

export type polygon_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['polygon_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['polygon_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_SwapTradeVolume_filter>>>;
};

export type polygon_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type polygon_swap_SwapWeeklyVolume = polygon_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: polygon_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['polygon_swap_BigDecimal'];
};

export type polygon_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<polygon_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['polygon_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['polygon_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['polygon_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_SwapWeeklyVolume_filter>>>;
};

export type polygon_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type polygon_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type polygon_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_swap_SystemInfo_filter>>>;
};

export type polygon_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type polygon_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['polygon_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type polygon_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: polygon_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type _SubgraphErrorPolicy_ =
  /** Data will be returned even if the subgraph has indexing errors */
  | 'allow'
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  | 'deny';

export type optimismgoerli_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['optimismgoerli_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type optimismgoerli_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_AggregateRoot_filter>>>;
};

export type optimismgoerli_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type optimismgoerli_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId?: Maybe<Scalars['optimismgoerli_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['optimismgoerli_Bytes']>;
  localAsset?: Maybe<Scalars['optimismgoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<optimismgoerli_AssetStatus>;
};

export type optimismgoerli_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: optimismgoerli_Router;
  asset: optimismgoerli_Asset;
  feesEarned: Scalars['BigInt'];
};

export type optimismgoerli_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<optimismgoerli_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<optimismgoerli_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_AssetBalance_filter>>>;
};

export type optimismgoerli_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type optimismgoerli_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type optimismgoerli_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_AssetStatus_filter>>>;
};

export type optimismgoerli_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type optimismgoerli_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  localAsset?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<optimismgoerli_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_Asset_filter>>>;
};

export type optimismgoerli_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type optimismgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type optimismgoerli_Block_height = {
  hash?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type optimismgoerli_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['optimismgoerli_Bytes']>;
  rootManager?: Maybe<Scalars['optimismgoerli_Bytes']>;
  mirrorConnector?: Maybe<Scalars['optimismgoerli_Bytes']>;
};

export type optimismgoerli_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_ConnectorMeta_filter>>>;
};

export type optimismgoerli_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type optimismgoerli_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['optimismgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<optimismgoerli_TransferStatus>;
  routers?: Maybe<Array<optimismgoerli_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['optimismgoerli_Bytes']>;
  delegate?: Maybe<Scalars['optimismgoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['optimismgoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['optimismgoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['optimismgoerli_Bytes']>;
  asset?: Maybe<optimismgoerli_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['optimismgoerli_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['optimismgoerli_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['optimismgoerli_Bytes']>;
  reconciledCaller?: Maybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['optimismgoerli_Bytes']>;
};


export type optimismgoerli_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_Router_filter>;
};

export type optimismgoerli_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<optimismgoerli_TransferStatus>;
  status_not?: InputMaybe<optimismgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<optimismgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<optimismgoerli_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<optimismgoerli_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<optimismgoerli_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_DestinationTransfer_filter>>>;
};

export type optimismgoerli_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type optimismgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type optimismgoerli_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['optimismgoerli_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['optimismgoerli_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['optimismgoerli_Bytes']>;
  root?: Maybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['optimismgoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<optimismgoerli_RootCount>;
};

export type optimismgoerli_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  leaf_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  message_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  message_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  message_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  message_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  message_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  message_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<optimismgoerli_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_OriginMessage_filter>>>;
};

export type optimismgoerli_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type optimismgoerli_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['optimismgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<optimismgoerli_TransferStatus>;
  messageHash?: Maybe<Scalars['optimismgoerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['optimismgoerli_Bytes']>;
  delegate?: Maybe<Scalars['optimismgoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['optimismgoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['optimismgoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['optimismgoerli_Bytes']>;
  asset?: Maybe<optimismgoerli_Asset>;
  message?: Maybe<optimismgoerli_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['optimismgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['optimismgoerli_Bytes']>;
};

export type optimismgoerli_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<optimismgoerli_TransferStatus>;
  status_not?: InputMaybe<optimismgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<optimismgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<optimismgoerli_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<optimismgoerli_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<optimismgoerli_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_OriginTransfer_filter>>>;
};

export type optimismgoerli_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type optimismgoerli_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['optimismgoerli_Bytes']>;
};

export type optimismgoerli_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  relayer_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_Relayer_filter>>>;
};

export type optimismgoerli_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type optimismgoerli_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type optimismgoerli_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_RootCount_filter>>>;
};

export type optimismgoerli_RootCount_orderBy =
  | 'id'
  | 'count';

export type optimismgoerli_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['optimismgoerli_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['optimismgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type optimismgoerli_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_RootMessageSent_filter>>>;
};

export type optimismgoerli_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type optimismgoerli_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['optimismgoerli_Bytes']>;
  recipient?: Maybe<Scalars['optimismgoerli_Bytes']>;
  proposedOwner?: Maybe<Scalars['optimismgoerli_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<optimismgoerli_AssetBalance>;
};


export type optimismgoerli_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_OrderDirection>;
  where?: InputMaybe<optimismgoerli_AssetBalance_filter>;
};

export type optimismgoerli_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  owner_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  owner_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  owner_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  owner_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  owner_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  recipient?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  recipient_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<optimismgoerli_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_Router_filter>>>;
};

export type optimismgoerli_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type optimismgoerli_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['optimismgoerli_Bytes']>;
};

export type optimismgoerli_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_Sequencer_filter>>>;
};

export type optimismgoerli_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type optimismgoerli_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['optimismgoerli_Bytes'];
};

export type optimismgoerli_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['optimismgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['optimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_Setting_filter>>>;
};

export type optimismgoerli_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type optimismgoerli_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type optimismgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['optimismgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type optimismgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: optimismgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type stagingarbitrumgoerli_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type stagingarbitrumgoerli_swap_Block_height = {
  hash?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type stagingarbitrumgoerli_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type stagingarbitrumgoerli_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['stagingarbitrumgoerli_swap_Bytes'];
};

export type stagingarbitrumgoerli_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_PooledToken_filter>>>;
};

export type stagingarbitrumgoerli_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type stagingarbitrumgoerli_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['stagingarbitrumgoerli_swap_Bytes'];
  canonicalId?: Maybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  lpToken?: Maybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<stagingarbitrumgoerli_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<stagingarbitrumgoerli_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<stagingarbitrumgoerli_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<stagingarbitrumgoerli_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<stagingarbitrumgoerli_swap_SwapWeeklyVolume>>;
};


export type stagingarbitrumgoerli_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapEvent_filter>;
};


export type stagingarbitrumgoerli_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapExchange_filter>;
};


export type stagingarbitrumgoerli_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapHourlyVolume_filter>;
};


export type stagingarbitrumgoerli_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapDailyVolume_filter>;
};


export type stagingarbitrumgoerli_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter>;
};

export type stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent = stagingarbitrumgoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_swap_StableSwap;
  provider: Scalars['stagingarbitrumgoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingarbitrumgoerli_swap_Bytes'];
};

export type stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingarbitrumgoerli_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingarbitrumgoerli_swap_Bytes'];
};

export type stagingarbitrumgoerli_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwapEvent_filter>>>;
};

export type stagingarbitrumgoerli_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingarbitrumgoerli_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_swap_StableSwap;
  buyer: Scalars['stagingarbitrumgoerli_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingarbitrumgoerli_swap_Bytes'];
};

export type stagingarbitrumgoerli_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwapExchange_filter>>>;
};

export type stagingarbitrumgoerli_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent = stagingarbitrumgoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_swap_StableSwap;
  provider: Scalars['stagingarbitrumgoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingarbitrumgoerli_swap_Bytes'];
};

export type stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingarbitrumgoerli_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<stagingarbitrumgoerli_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<stagingarbitrumgoerli_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>>>;
};

export type stagingarbitrumgoerli_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type stagingarbitrumgoerli_swap_SwapDailyVolume = stagingarbitrumgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingarbitrumgoerli_swap_BigDecimal'];
};

export type stagingarbitrumgoerli_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SwapDailyVolume_filter>>>;
};

export type stagingarbitrumgoerli_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingarbitrumgoerli_swap_SwapHourlyVolume = stagingarbitrumgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingarbitrumgoerli_swap_BigDecimal'];
};

export type stagingarbitrumgoerli_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SwapHourlyVolume_filter>>>;
};

export type stagingarbitrumgoerli_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingarbitrumgoerli_swap_SwapTradeVolume = {
  stableSwap: stagingarbitrumgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingarbitrumgoerli_swap_BigDecimal'];
};

export type stagingarbitrumgoerli_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SwapTradeVolume_filter>>>;
};

export type stagingarbitrumgoerli_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingarbitrumgoerli_swap_SwapWeeklyVolume = stagingarbitrumgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingarbitrumgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingarbitrumgoerli_swap_BigDecimal'];
};

export type stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingarbitrumgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter>>>;
};

export type stagingarbitrumgoerli_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingarbitrumgoerli_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type stagingarbitrumgoerli_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_swap_SystemInfo_filter>>>;
};

export type stagingarbitrumgoerli_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type stagingarbitrumgoerli_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type stagingarbitrumgoerli_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: stagingarbitrumgoerli_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type arbitrumgoerli_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['arbitrumgoerli_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type arbitrumgoerli_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_AggregateRoot_filter>>>;
};

export type arbitrumgoerli_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type arbitrumgoerli_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  localAsset?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<arbitrumgoerli_AssetStatus>;
};

export type arbitrumgoerli_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: arbitrumgoerli_Router;
  asset: arbitrumgoerli_Asset;
  feesEarned: Scalars['BigInt'];
};

export type arbitrumgoerli_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<arbitrumgoerli_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<arbitrumgoerli_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_AssetBalance_filter>>>;
};

export type arbitrumgoerli_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type arbitrumgoerli_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type arbitrumgoerli_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_AssetStatus_filter>>>;
};

export type arbitrumgoerli_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type arbitrumgoerli_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  localAsset?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<arbitrumgoerli_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Asset_filter>>>;
};

export type arbitrumgoerli_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type arbitrumgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type arbitrumgoerli_Block_height = {
  hash?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type arbitrumgoerli_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  rootManager?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  mirrorConnector?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
};

export type arbitrumgoerli_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_ConnectorMeta_filter>>>;
};

export type arbitrumgoerli_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type arbitrumgoerli_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<arbitrumgoerli_TransferStatus>;
  routers?: Maybe<Array<arbitrumgoerli_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  asset?: Maybe<arbitrumgoerli_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledCaller?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
};


export type arbitrumgoerli_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_Router_filter>;
};

export type arbitrumgoerli_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<arbitrumgoerli_TransferStatus>;
  status_not?: InputMaybe<arbitrumgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<arbitrumgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<arbitrumgoerli_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<arbitrumgoerli_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<arbitrumgoerli_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_DestinationTransfer_filter>>>;
};

export type arbitrumgoerli_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type arbitrumgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type arbitrumgoerli_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  root?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<arbitrumgoerli_RootCount>;
};

export type arbitrumgoerli_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  leaf_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  message_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  message_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  message_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  message_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  message_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  message_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<arbitrumgoerli_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_OriginMessage_filter>>>;
};

export type arbitrumgoerli_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type arbitrumgoerli_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<arbitrumgoerli_TransferStatus>;
  messageHash?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  asset?: Maybe<arbitrumgoerli_Asset>;
  message?: Maybe<arbitrumgoerli_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
};

export type arbitrumgoerli_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<arbitrumgoerli_TransferStatus>;
  status_not?: InputMaybe<arbitrumgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<arbitrumgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<arbitrumgoerli_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<arbitrumgoerli_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<arbitrumgoerli_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_OriginTransfer_filter>>>;
};

export type arbitrumgoerli_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type arbitrumgoerli_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
};

export type arbitrumgoerli_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  relayer_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Relayer_filter>>>;
};

export type arbitrumgoerli_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type arbitrumgoerli_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type arbitrumgoerli_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_RootCount_filter>>>;
};

export type arbitrumgoerli_RootCount_orderBy =
  | 'id'
  | 'count';

export type arbitrumgoerli_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type arbitrumgoerli_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_RootMessageSent_filter>>>;
};

export type arbitrumgoerli_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type arbitrumgoerli_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  recipient?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedOwner?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<arbitrumgoerli_AssetBalance>;
};


export type arbitrumgoerli_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_AssetBalance_filter>;
};

export type arbitrumgoerli_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  owner_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  owner_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  owner_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  owner_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  owner_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  recipient?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  recipient_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<arbitrumgoerli_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Router_filter>>>;
};

export type arbitrumgoerli_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type arbitrumgoerli_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
};

export type arbitrumgoerli_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Sequencer_filter>>>;
};

export type arbitrumgoerli_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type arbitrumgoerli_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['arbitrumgoerli_Bytes'];
};

export type arbitrumgoerli_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['arbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_Setting_filter>>>;
};

export type arbitrumgoerli_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type arbitrumgoerli_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type arbitrumgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['arbitrumgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type arbitrumgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: arbitrumgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type stagingoptimismgoerli_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type stagingoptimismgoerli_swap_Block_height = {
  hash?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type stagingoptimismgoerli_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type stagingoptimismgoerli_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['stagingoptimismgoerli_swap_Bytes'];
};

export type stagingoptimismgoerli_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_PooledToken_filter>>>;
};

export type stagingoptimismgoerli_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type stagingoptimismgoerli_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['stagingoptimismgoerli_swap_Bytes'];
  canonicalId?: Maybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  lpToken?: Maybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<stagingoptimismgoerli_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<stagingoptimismgoerli_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<stagingoptimismgoerli_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<stagingoptimismgoerli_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<stagingoptimismgoerli_swap_SwapWeeklyVolume>>;
};


export type stagingoptimismgoerli_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapEvent_filter>;
};


export type stagingoptimismgoerli_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_StableSwapExchange_filter>;
};


export type stagingoptimismgoerli_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapHourlyVolume_filter>;
};


export type stagingoptimismgoerli_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapDailyVolume_filter>;
};


export type stagingoptimismgoerli_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_swap_SwapWeeklyVolume_filter>;
};

export type stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent = stagingoptimismgoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_swap_StableSwap;
  provider: Scalars['stagingoptimismgoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingoptimismgoerli_swap_Bytes'];
};

export type stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingoptimismgoerli_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingoptimismgoerli_swap_Bytes'];
};

export type stagingoptimismgoerli_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwapEvent_filter>>>;
};

export type stagingoptimismgoerli_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingoptimismgoerli_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_swap_StableSwap;
  buyer: Scalars['stagingoptimismgoerli_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingoptimismgoerli_swap_Bytes'];
};

export type stagingoptimismgoerli_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwapExchange_filter>>>;
};

export type stagingoptimismgoerli_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent = stagingoptimismgoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_swap_StableSwap;
  provider: Scalars['stagingoptimismgoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingoptimismgoerli_swap_Bytes'];
};

export type stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingoptimismgoerli_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<stagingoptimismgoerli_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<stagingoptimismgoerli_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<stagingoptimismgoerli_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<stagingoptimismgoerli_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<stagingoptimismgoerli_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>>>;
};

export type stagingoptimismgoerli_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type stagingoptimismgoerli_swap_SwapDailyVolume = stagingoptimismgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingoptimismgoerli_swap_BigDecimal'];
};

export type stagingoptimismgoerli_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SwapDailyVolume_filter>>>;
};

export type stagingoptimismgoerli_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingoptimismgoerli_swap_SwapHourlyVolume = stagingoptimismgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingoptimismgoerli_swap_BigDecimal'];
};

export type stagingoptimismgoerli_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SwapHourlyVolume_filter>>>;
};

export type stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingoptimismgoerli_swap_SwapTradeVolume = {
  stableSwap: stagingoptimismgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingoptimismgoerli_swap_BigDecimal'];
};

export type stagingoptimismgoerli_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SwapTradeVolume_filter>>>;
};

export type stagingoptimismgoerli_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingoptimismgoerli_swap_SwapWeeklyVolume = stagingoptimismgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingoptimismgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingoptimismgoerli_swap_BigDecimal'];
};

export type stagingoptimismgoerli_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingoptimismgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SwapWeeklyVolume_filter>>>;
};

export type stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingoptimismgoerli_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type stagingoptimismgoerli_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_swap_SystemInfo_filter>>>;
};

export type stagingoptimismgoerli_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type stagingoptimismgoerli_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type stagingoptimismgoerli_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: stagingoptimismgoerli_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type testgoerli_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['testgoerli_Bytes']>;
  local: Scalars['testgoerli_Bytes'];
  adoptedAsset: Scalars['testgoerli_Bytes'];
  canonicalId: Scalars['testgoerli_Bytes'];
  canonicalDomain: Scalars['BigInt'];
  blockNumber: Scalars['BigInt'];
};

export type testgoerli_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: testgoerli_Router;
  asset: testgoerli_Asset;
};

export type testgoerli_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<testgoerli_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<testgoerli_Asset_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testgoerli_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testgoerli_AssetBalance_filter>>>;
};

export type testgoerli_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset';

export type testgoerli_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['testgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  local?: InputMaybe<Scalars['testgoerli_Bytes']>;
  local_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  local_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  local_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  local_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  local_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  local_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  local_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  local_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  local_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  adoptedAsset?: InputMaybe<Scalars['testgoerli_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testgoerli_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testgoerli_Asset_filter>>>;
};

export type testgoerli_Asset_orderBy =
  | 'id'
  | 'key'
  | 'local'
  | 'adoptedAsset'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'blockNumber';

export type testgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type testgoerli_Block_height = {
  hash?: InputMaybe<Scalars['testgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type testgoerli_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['testgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['testgoerli_Bytes']>;
  callData?: Maybe<Scalars['testgoerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  agent?: Maybe<Scalars['testgoerli_Bytes']>;
  recovery?: Maybe<Scalars['testgoerli_Bytes']>;
  forceSlow?: Maybe<Scalars['Boolean']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callback?: Maybe<Scalars['testgoerli_Bytes']>;
  callbackFee?: Maybe<Scalars['BigInt']>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  destinationMinOut?: Maybe<Scalars['BigInt']>;
  status?: Maybe<testgoerli_TransferStatus>;
  routers?: Maybe<Array<testgoerli_Router>>;
  originSender?: Maybe<Scalars['testgoerli_Bytes']>;
  transactingAsset?: Maybe<Scalars['testgoerli_Bytes']>;
  transactingAmount?: Maybe<Scalars['BigInt']>;
  localAsset?: Maybe<Scalars['testgoerli_Bytes']>;
  localAmount?: Maybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['testgoerli_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['testgoerli_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledCaller?: Maybe<Scalars['testgoerli_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['testgoerli_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
};


export type testgoerli_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_Router_filter>;
};

export type testgoerli_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  agent?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  agent_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  agent_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  recovery_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  recovery_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  forceSlow?: InputMaybe<Scalars['Boolean']>;
  forceSlow_not?: InputMaybe<Scalars['Boolean']>;
  forceSlow_in?: InputMaybe<Array<Scalars['Boolean']>>;
  forceSlow_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callback?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  callback_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  callback_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callbackFee?: InputMaybe<Scalars['BigInt']>;
  callbackFee_not?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  callbackFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_not?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<testgoerli_TransferStatus>;
  status_not?: InputMaybe<testgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<testgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<testgoerli_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<testgoerli_Router_filter>;
  originSender?: InputMaybe<Scalars['testgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transactingAsset_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transactingAsset_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAmount?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_not?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  localAsset?: InputMaybe<Scalars['testgoerli_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  localAmount?: InputMaybe<Scalars['BigInt']>;
  localAmount_not?: InputMaybe<Scalars['BigInt']>;
  localAmount_gt?: InputMaybe<Scalars['BigInt']>;
  localAmount_lt?: InputMaybe<Scalars['BigInt']>;
  localAmount_gte?: InputMaybe<Scalars['BigInt']>;
  localAmount_lte?: InputMaybe<Scalars['BigInt']>;
  localAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  localAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sponsorVaultRelayerFee?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_not?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sponsorVaultRelayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledCaller?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testgoerli_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testgoerli_DestinationTransfer_filter>>>;
};

export type testgoerli_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'to'
  | 'callData'
  | 'originDomain'
  | 'destinationDomain'
  | 'agent'
  | 'recovery'
  | 'forceSlow'
  | 'receiveLocal'
  | 'callback'
  | 'callbackFee'
  | 'relayerFee'
  | 'destinationMinOut'
  | 'status'
  | 'routers'
  | 'originSender'
  | 'transactingAsset'
  | 'transactingAmount'
  | 'localAsset'
  | 'localAmount'
  | 'sponsorVaultRelayerFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber';

/** Defines the order direction, either ascending or descending */
export type testgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type testgoerli_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['testgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['testgoerli_Bytes']>;
  callData?: Maybe<Scalars['testgoerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  agent?: Maybe<Scalars['testgoerli_Bytes']>;
  recovery?: Maybe<Scalars['testgoerli_Bytes']>;
  forceSlow?: Maybe<Scalars['Boolean']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callback?: Maybe<Scalars['testgoerli_Bytes']>;
  callbackFee?: Maybe<Scalars['BigInt']>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  destinationMinOut?: Maybe<Scalars['BigInt']>;
  status?: Maybe<testgoerli_TransferStatus>;
  originMinOut?: Maybe<Scalars['BigInt']>;
  transactingAsset?: Maybe<Scalars['testgoerli_Bytes']>;
  transactingAmount?: Maybe<Scalars['BigInt']>;
  bridgedAsset?: Maybe<Scalars['testgoerli_Bytes']>;
  bridgedAmount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['testgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['testgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type testgoerli_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  agent?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  agent_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  agent_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  agent_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  recovery_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  recovery_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recovery_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  forceSlow?: InputMaybe<Scalars['Boolean']>;
  forceSlow_not?: InputMaybe<Scalars['Boolean']>;
  forceSlow_in?: InputMaybe<Array<Scalars['Boolean']>>;
  forceSlow_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callback?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  callback_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  callback_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callback_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  callbackFee?: InputMaybe<Scalars['BigInt']>;
  callbackFee_not?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  callbackFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_not?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<testgoerli_TransferStatus>;
  status_not?: InputMaybe<testgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<testgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<testgoerli_TransferStatus>>;
  originMinOut?: InputMaybe<Scalars['BigInt']>;
  originMinOut_not?: InputMaybe<Scalars['BigInt']>;
  originMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  originMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  originMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  originMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  originMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAsset?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transactingAsset_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transactingAsset_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAsset_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactingAmount?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_not?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAsset?: InputMaybe<Scalars['testgoerli_Bytes']>;
  bridgedAsset_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  bridgedAsset_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  bridgedAsset_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  bridgedAsset_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  bridgedAsset_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  bridgedAsset_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  bridgedAsset_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  bridgedAsset_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  bridgedAsset_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  bridgedAmount?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testgoerli_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testgoerli_OriginTransfer_filter>>>;
};

export type testgoerli_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'to'
  | 'callData'
  | 'originDomain'
  | 'destinationDomain'
  | 'agent'
  | 'recovery'
  | 'forceSlow'
  | 'receiveLocal'
  | 'callback'
  | 'callbackFee'
  | 'relayerFee'
  | 'destinationMinOut'
  | 'status'
  | 'originMinOut'
  | 'transactingAsset'
  | 'transactingAmount'
  | 'bridgedAsset'
  | 'bridgedAmount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type testgoerli_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['testgoerli_Bytes']>;
};

export type testgoerli_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['testgoerli_Bytes']>;
  relayer_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testgoerli_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testgoerli_Relayer_filter>>>;
};

export type testgoerli_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type testgoerli_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['testgoerli_Bytes']>;
  recipient?: Maybe<Scalars['testgoerli_Bytes']>;
  proposedOwner?: Maybe<Scalars['testgoerli_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<testgoerli_AssetBalance>;
};


export type testgoerli_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<testgoerli_OrderDirection>;
  where?: InputMaybe<testgoerli_AssetBalance_filter>;
};

export type testgoerli_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['testgoerli_Bytes']>;
  owner_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  owner_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  owner_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  owner_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  owner_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recipient?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recipient_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['testgoerli_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<testgoerli_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testgoerli_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testgoerli_Router_filter>>>;
};

export type testgoerli_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type testgoerli_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['testgoerli_Bytes'];
};

export type testgoerli_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testgoerli_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testgoerli_Setting_filter>>>;
};

export type testgoerli_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type testgoerli_SponsorVault = {
  id: Scalars['ID'];
  sponsorVault: Scalars['testgoerli_Bytes'];
};

export type testgoerli_SponsorVault_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  sponsorVault?: InputMaybe<Scalars['testgoerli_Bytes']>;
  sponsorVault_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  sponsorVault_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  sponsorVault_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  sponsorVault_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  sponsorVault_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  sponsorVault_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  sponsorVault_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  sponsorVault_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  sponsorVault_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testgoerli_SponsorVault_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testgoerli_SponsorVault_filter>>>;
};

export type testgoerli_SponsorVault_orderBy =
  | 'id'
  | 'sponsorVault';

export type testgoerli_StableSwap = {
  id: Scalars['ID'];
  canonicalId: Scalars['testgoerli_Bytes'];
  domain?: Maybe<Scalars['BigInt']>;
  swapPool: Scalars['testgoerli_Bytes'];
};

export type testgoerli_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  canonicalId?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['testgoerli_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['testgoerli_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['testgoerli_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['testgoerli_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['testgoerli_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['testgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testgoerli_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testgoerli_StableSwap_filter>>>;
};

export type testgoerli_StableSwap_orderBy =
  | 'id'
  | 'canonicalId'
  | 'domain'
  | 'swapPool';

export type testgoerli_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type testgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['testgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type testgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: testgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type xdai_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type xdai_swap_Block_height = {
  hash?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type xdai_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type xdai_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['xdai_swap_Bytes'];
};

export type xdai_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_PooledToken_filter>>>;
};

export type xdai_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type xdai_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['xdai_swap_Bytes'];
  canonicalId?: Maybe<Scalars['xdai_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['xdai_swap_Bytes']>;
  lpToken?: Maybe<Scalars['xdai_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['xdai_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<xdai_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<xdai_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<xdai_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<xdai_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<xdai_swap_SwapWeeklyVolume>>;
};


export type xdai_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapEvent_filter>;
};


export type xdai_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_StableSwapExchange_filter>;
};


export type xdai_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapHourlyVolume_filter>;
};


export type xdai_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapDailyVolume_filter>;
};


export type xdai_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<xdai_swap_OrderDirection>;
  where?: InputMaybe<xdai_swap_SwapWeeklyVolume_filter>;
};

export type xdai_swap_StableSwapAddLiquidityEvent = xdai_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: xdai_swap_StableSwap;
  provider: Scalars['xdai_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['xdai_swap_Bytes'];
};

export type xdai_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type xdai_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type xdai_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: xdai_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['xdai_swap_Bytes'];
};

export type xdai_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwapEvent_filter>>>;
};

export type xdai_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type xdai_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: xdai_swap_StableSwap;
  buyer: Scalars['xdai_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['xdai_swap_Bytes'];
};

export type xdai_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwapExchange_filter>>>;
};

export type xdai_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type xdai_swap_StableSwapRemoveLiquidityEvent = xdai_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: xdai_swap_StableSwap;
  provider: Scalars['xdai_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['xdai_swap_Bytes'];
};

export type xdai_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type xdai_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type xdai_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['xdai_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['xdai_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<xdai_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<xdai_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<xdai_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<xdai_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<xdai_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_StableSwap_filter>>>;
};

export type xdai_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type xdai_swap_SwapDailyVolume = xdai_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: xdai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['xdai_swap_BigDecimal'];
};

export type xdai_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['xdai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['xdai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_SwapDailyVolume_filter>>>;
};

export type xdai_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type xdai_swap_SwapHourlyVolume = xdai_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: xdai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['xdai_swap_BigDecimal'];
};

export type xdai_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['xdai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['xdai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_SwapHourlyVolume_filter>>>;
};

export type xdai_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type xdai_swap_SwapTradeVolume = {
  stableSwap: xdai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['xdai_swap_BigDecimal'];
};

export type xdai_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['xdai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['xdai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_SwapTradeVolume_filter>>>;
};

export type xdai_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type xdai_swap_SwapWeeklyVolume = xdai_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: xdai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['xdai_swap_BigDecimal'];
};

export type xdai_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<xdai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['xdai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['xdai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['xdai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_SwapWeeklyVolume_filter>>>;
};

export type xdai_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type xdai_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type xdai_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_swap_SystemInfo_filter>>>;
};

export type xdai_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type xdai_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['xdai_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type xdai_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: xdai_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type staginggoerli_AggregatedMessageRoot = {
  id: Scalars['ID'];
  index: Scalars['BigInt'];
  receivedRoot: Scalars['staginggoerli_Bytes'];
  domain?: Maybe<Scalars['BigInt']>;
};

export type staginggoerli_AggregatedMessageRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  receivedRoot?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  receivedRoot_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  receivedRoot_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_AggregatedMessageRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_AggregatedMessageRoot_filter>>>;
};

export type staginggoerli_AggregatedMessageRoot_orderBy =
  | 'id'
  | 'index'
  | 'receivedRoot'
  | 'domain';

export type staginggoerli_ArbitrumConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['staginggoerli_Bytes'];
  rootManager: Scalars['staginggoerli_Bytes'];
  mirrorConnector: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_ArbitrumConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_ArbitrumConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_ArbitrumConnectorMeta_filter>>>;
};

export type staginggoerli_ArbitrumConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type staginggoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type staginggoerli_Block_height = {
  hash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type staginggoerli_BnbConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['staginggoerli_Bytes'];
  rootManager: Scalars['staginggoerli_Bytes'];
  mirrorConnector: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_BnbConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_BnbConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_BnbConnectorMeta_filter>>>;
};

export type staginggoerli_BnbConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type staginggoerli_GnosisConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['staginggoerli_Bytes'];
  rootManager: Scalars['staginggoerli_Bytes'];
  mirrorConnector: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_GnosisConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_GnosisConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_GnosisConnectorMeta_filter>>>;
};

export type staginggoerli_GnosisConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type staginggoerli_OptimismConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['staginggoerli_Bytes'];
  rootManager: Scalars['staginggoerli_Bytes'];
  mirrorConnector: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_OptimismConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_OptimismConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_OptimismConnectorMeta_filter>>>;
};

export type staginggoerli_OptimismConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

/** Defines the order direction, either ascending or descending */
export type staginggoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type staginggoerli_PolygonConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['staginggoerli_Bytes'];
  rootManager: Scalars['staginggoerli_Bytes'];
  mirrorConnector: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_PolygonConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_PolygonConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_PolygonConnectorMeta_filter>>>;
};

export type staginggoerli_PolygonConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type staginggoerli_RootAggregated = {
  id: Scalars['ID'];
  domain: Scalars['BigInt'];
  receivedRoot: Scalars['staginggoerli_Bytes'];
  index: Scalars['BigInt'];
};

export type staginggoerli_RootAggregated_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  receivedRoot?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  receivedRoot_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  receivedRoot_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receivedRoot_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_RootAggregated_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_RootAggregated_filter>>>;
};

export type staginggoerli_RootAggregated_orderBy =
  | 'id'
  | 'domain'
  | 'receivedRoot'
  | 'index';

export type staginggoerli_RootManagerMeta = {
  id: Scalars['ID'];
  domains?: Maybe<Array<Scalars['BigInt']>>;
  connectors?: Maybe<Array<Scalars['staginggoerli_Bytes']>>;
};

export type staginggoerli_RootManagerMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domains?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_not?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  connectors?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  connectors_not?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  connectors_contains?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  connectors_contains_nocase?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  connectors_not_contains?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  connectors_not_contains_nocase?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_RootManagerMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_RootManagerMeta_filter>>>;
};

export type staginggoerli_RootManagerMeta_orderBy =
  | 'id'
  | 'domains'
  | 'connectors';

export type staginggoerli_RootMessageProcessed = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  root?: Maybe<Scalars['staginggoerli_Bytes']>;
  caller?: Maybe<Scalars['staginggoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['staginggoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type staginggoerli_RootMessageProcessed_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_RootMessageProcessed_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_RootMessageProcessed_filter>>>;
};

export type staginggoerli_RootMessageProcessed_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type staginggoerli_RootPropagated = {
  id: Scalars['ID'];
  aggregate: Scalars['staginggoerli_Bytes'];
  domainsHash: Scalars['staginggoerli_Bytes'];
  count: Scalars['BigInt'];
};

export type staginggoerli_RootPropagated_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  aggregate?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  aggregate_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  aggregate_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  aggregate_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  aggregate_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  aggregate_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  aggregate_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  aggregate_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  aggregate_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  aggregate_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domainsHash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domainsHash_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domainsHash_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domainsHash_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domainsHash_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domainsHash_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domainsHash_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  domainsHash_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  domainsHash_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domainsHash_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_RootPropagated_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_RootPropagated_filter>>>;
};

export type staginggoerli_RootPropagated_orderBy =
  | 'id'
  | 'aggregate'
  | 'domainsHash'
  | 'count';

export type staginggoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['staginggoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type staginggoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: staginggoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type mainnet_AggregatedMessageRoot = {
  id: Scalars['ID'];
  index: Scalars['BigInt'];
  receivedRoot: Scalars['mainnet_Bytes'];
  domain?: Maybe<Scalars['BigInt']>;
};

export type mainnet_AggregatedMessageRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  receivedRoot?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  receivedRoot_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  receivedRoot_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_AggregatedMessageRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_AggregatedMessageRoot_filter>>>;
};

export type mainnet_AggregatedMessageRoot_orderBy =
  | 'id'
  | 'index'
  | 'receivedRoot'
  | 'domain';

export type mainnet_ArbitrumConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['mainnet_Bytes'];
  rootManager: Scalars['mainnet_Bytes'];
  mirrorConnector: Scalars['mainnet_Bytes'];
};

export type mainnet_ArbitrumConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_ArbitrumConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_ArbitrumConnectorMeta_filter>>>;
};

export type mainnet_ArbitrumConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type mainnet_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type mainnet_Block_height = {
  hash?: InputMaybe<Scalars['mainnet_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type mainnet_BnbConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['mainnet_Bytes'];
  rootManager: Scalars['mainnet_Bytes'];
  mirrorConnector: Scalars['mainnet_Bytes'];
};

export type mainnet_BnbConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_BnbConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_BnbConnectorMeta_filter>>>;
};

export type mainnet_BnbConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type mainnet_GnosisConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['mainnet_Bytes'];
  rootManager: Scalars['mainnet_Bytes'];
  mirrorConnector: Scalars['mainnet_Bytes'];
};

export type mainnet_GnosisConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_GnosisConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_GnosisConnectorMeta_filter>>>;
};

export type mainnet_GnosisConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type mainnet_OptimismConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['mainnet_Bytes'];
  rootManager: Scalars['mainnet_Bytes'];
  mirrorConnector: Scalars['mainnet_Bytes'];
};

export type mainnet_OptimismConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_OptimismConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_OptimismConnectorMeta_filter>>>;
};

export type mainnet_OptimismConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

/** Defines the order direction, either ascending or descending */
export type mainnet_OrderDirection =
  | 'asc'
  | 'desc';

export type mainnet_PolygonConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['mainnet_Bytes'];
  rootManager: Scalars['mainnet_Bytes'];
  mirrorConnector: Scalars['mainnet_Bytes'];
};

export type mainnet_PolygonConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_PolygonConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_PolygonConnectorMeta_filter>>>;
};

export type mainnet_PolygonConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type mainnet_RootAggregated = {
  id: Scalars['ID'];
  domain: Scalars['BigInt'];
  receivedRoot: Scalars['mainnet_Bytes'];
  index: Scalars['BigInt'];
};

export type mainnet_RootAggregated_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  receivedRoot?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  receivedRoot_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  receivedRoot_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  receivedRoot_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_RootAggregated_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_RootAggregated_filter>>>;
};

export type mainnet_RootAggregated_orderBy =
  | 'id'
  | 'domain'
  | 'receivedRoot'
  | 'index';

export type mainnet_RootManagerMeta = {
  id: Scalars['ID'];
  domains?: Maybe<Array<Scalars['BigInt']>>;
  connectors?: Maybe<Array<Scalars['mainnet_Bytes']>>;
};

export type mainnet_RootManagerMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domains?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_not?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  connectors?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  connectors_not?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  connectors_contains?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  connectors_contains_nocase?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  connectors_not_contains?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  connectors_not_contains_nocase?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_RootManagerMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_RootManagerMeta_filter>>>;
};

export type mainnet_RootManagerMeta_orderBy =
  | 'id'
  | 'domains'
  | 'connectors';

export type mainnet_RootMessageProcessed = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  root?: Maybe<Scalars['mainnet_Bytes']>;
  caller?: Maybe<Scalars['mainnet_Bytes']>;
  transactionHash?: Maybe<Scalars['mainnet_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type mainnet_RootMessageProcessed_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  root_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_RootMessageProcessed_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_RootMessageProcessed_filter>>>;
};

export type mainnet_RootMessageProcessed_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type mainnet_RootPropagated = {
  id: Scalars['ID'];
  aggregate: Scalars['mainnet_Bytes'];
  domainsHash: Scalars['mainnet_Bytes'];
  count: Scalars['BigInt'];
};

export type mainnet_RootPropagated_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  aggregate?: InputMaybe<Scalars['mainnet_Bytes']>;
  aggregate_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  aggregate_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  aggregate_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  aggregate_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  aggregate_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  aggregate_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  aggregate_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  aggregate_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  aggregate_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  domainsHash?: InputMaybe<Scalars['mainnet_Bytes']>;
  domainsHash_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  domainsHash_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  domainsHash_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  domainsHash_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  domainsHash_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  domainsHash_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  domainsHash_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  domainsHash_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  domainsHash_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_RootPropagated_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_RootPropagated_filter>>>;
};

export type mainnet_RootPropagated_orderBy =
  | 'id'
  | 'aggregate'
  | 'domainsHash'
  | 'count';

export type mainnet__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['mainnet_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type mainnet__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: mainnet__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type testoptimismgoerli_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  local: Scalars['testoptimismgoerli_Bytes'];
  adoptedAsset: Scalars['testoptimismgoerli_Bytes'];
  canonicalId: Scalars['testoptimismgoerli_Bytes'];
  canonicalDomain: Scalars['BigInt'];
  blockNumber: Scalars['BigInt'];
};

export type testoptimismgoerli_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: testoptimismgoerli_Router;
  asset: testoptimismgoerli_Asset;
};

export type testoptimismgoerli_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<testoptimismgoerli_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<testoptimismgoerli_Asset_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testoptimismgoerli_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testoptimismgoerli_AssetBalance_filter>>>;
};

export type testoptimismgoerli_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset';

export type testoptimismgoerli_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  local?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  local_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  local_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  local_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  local_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  local_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  local_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  local_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  local_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  local_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  adoptedAsset?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testoptimismgoerli_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testoptimismgoerli_Asset_filter>>>;
};

export type testoptimismgoerli_Asset_orderBy =
  | 'id'
  | 'key'
  | 'local'
  | 'adoptedAsset'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'blockNumber';

export type testoptimismgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type testoptimismgoerli_Block_height = {
  hash?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type testoptimismgoerli_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  callData?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  agent?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  forceSlow?: Maybe<Scalars['Boolean']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callback?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  callbackFee?: Maybe<Scalars['BigInt']>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  destinationMinOut?: Maybe<Scalars['BigInt']>;
  status?: Maybe<testoptimismgoerli_TransferStatus>;
  routers?: Maybe<Array<testoptimismgoerli_Router>>;
  originSender?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAmount?: Maybe<Scalars['BigInt']>;
  localAsset?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  localAmount?: Maybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledCaller?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
};


export type testoptimismgoerli_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_Router_filter>;
};

export type testoptimismgoerli_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  agent?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  agent_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  agent_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  recovery_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  recovery_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  forceSlow?: InputMaybe<Scalars['Boolean']>;
  forceSlow_not?: InputMaybe<Scalars['Boolean']>;
  forceSlow_in?: InputMaybe<Array<Scalars['Boolean']>>;
  forceSlow_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callback?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  callback_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  callback_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callbackFee?: InputMaybe<Scalars['BigInt']>;
  callbackFee_not?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  callbackFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_not?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<testoptimismgoerli_TransferStatus>;
  status_not?: InputMaybe<testoptimismgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<testoptimismgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<testoptimismgoerli_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<testoptimismgoerli_Router_filter>;
  originSender?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transactingAsset_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transactingAsset_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAmount?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_not?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  localAsset?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  localAmount?: InputMaybe<Scalars['BigInt']>;
  localAmount_not?: InputMaybe<Scalars['BigInt']>;
  localAmount_gt?: InputMaybe<Scalars['BigInt']>;
  localAmount_lt?: InputMaybe<Scalars['BigInt']>;
  localAmount_gte?: InputMaybe<Scalars['BigInt']>;
  localAmount_lte?: InputMaybe<Scalars['BigInt']>;
  localAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  localAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sponsorVaultRelayerFee?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_not?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sponsorVaultRelayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledCaller?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testoptimismgoerli_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testoptimismgoerli_DestinationTransfer_filter>>>;
};

export type testoptimismgoerli_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'to'
  | 'callData'
  | 'originDomain'
  | 'destinationDomain'
  | 'agent'
  | 'recovery'
  | 'forceSlow'
  | 'receiveLocal'
  | 'callback'
  | 'callbackFee'
  | 'relayerFee'
  | 'destinationMinOut'
  | 'status'
  | 'routers'
  | 'originSender'
  | 'transactingAsset'
  | 'transactingAmount'
  | 'localAsset'
  | 'localAmount'
  | 'sponsorVaultRelayerFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber';

/** Defines the order direction, either ascending or descending */
export type testoptimismgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type testoptimismgoerli_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  callData?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  agent?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  forceSlow?: Maybe<Scalars['Boolean']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callback?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  callbackFee?: Maybe<Scalars['BigInt']>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  destinationMinOut?: Maybe<Scalars['BigInt']>;
  status?: Maybe<testoptimismgoerli_TransferStatus>;
  originMinOut?: Maybe<Scalars['BigInt']>;
  transactingAsset?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAmount?: Maybe<Scalars['BigInt']>;
  bridgedAsset?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  bridgedAmount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type testoptimismgoerli_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  agent?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  agent_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  agent_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  agent_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  recovery_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  recovery_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recovery_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  forceSlow?: InputMaybe<Scalars['Boolean']>;
  forceSlow_not?: InputMaybe<Scalars['Boolean']>;
  forceSlow_in?: InputMaybe<Array<Scalars['Boolean']>>;
  forceSlow_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callback?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  callback_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  callback_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callback_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  callbackFee?: InputMaybe<Scalars['BigInt']>;
  callbackFee_not?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  callbackFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_not?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<testoptimismgoerli_TransferStatus>;
  status_not?: InputMaybe<testoptimismgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<testoptimismgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<testoptimismgoerli_TransferStatus>>;
  originMinOut?: InputMaybe<Scalars['BigInt']>;
  originMinOut_not?: InputMaybe<Scalars['BigInt']>;
  originMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  originMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  originMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  originMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  originMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAsset?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transactingAsset_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transactingAsset_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAsset_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactingAmount?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_not?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAsset?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  bridgedAsset_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  bridgedAsset_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  bridgedAsset_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  bridgedAsset_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  bridgedAsset_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  bridgedAsset_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  bridgedAsset_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  bridgedAsset_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  bridgedAsset_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  bridgedAmount?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testoptimismgoerli_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testoptimismgoerli_OriginTransfer_filter>>>;
};

export type testoptimismgoerli_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'to'
  | 'callData'
  | 'originDomain'
  | 'destinationDomain'
  | 'agent'
  | 'recovery'
  | 'forceSlow'
  | 'receiveLocal'
  | 'callback'
  | 'callbackFee'
  | 'relayerFee'
  | 'destinationMinOut'
  | 'status'
  | 'originMinOut'
  | 'transactingAsset'
  | 'transactingAmount'
  | 'bridgedAsset'
  | 'bridgedAmount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type testoptimismgoerli_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
};

export type testoptimismgoerli_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  relayer_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testoptimismgoerli_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testoptimismgoerli_Relayer_filter>>>;
};

export type testoptimismgoerli_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type testoptimismgoerli_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  recipient?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedOwner?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<testoptimismgoerli_AssetBalance>;
};


export type testoptimismgoerli_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<testoptimismgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<testoptimismgoerli_OrderDirection>;
  where?: InputMaybe<testoptimismgoerli_AssetBalance_filter>;
};

export type testoptimismgoerli_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  owner_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  owner_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  owner_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  owner_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  owner_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recipient?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recipient_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<testoptimismgoerli_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testoptimismgoerli_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testoptimismgoerli_Router_filter>>>;
};

export type testoptimismgoerli_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type testoptimismgoerli_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['testoptimismgoerli_Bytes'];
};

export type testoptimismgoerli_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testoptimismgoerli_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testoptimismgoerli_Setting_filter>>>;
};

export type testoptimismgoerli_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type testoptimismgoerli_SponsorVault = {
  id: Scalars['ID'];
  sponsorVault: Scalars['testoptimismgoerli_Bytes'];
};

export type testoptimismgoerli_SponsorVault_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  sponsorVault?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  sponsorVault_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  sponsorVault_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  sponsorVault_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  sponsorVault_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  sponsorVault_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  sponsorVault_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  sponsorVault_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  sponsorVault_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  sponsorVault_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testoptimismgoerli_SponsorVault_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testoptimismgoerli_SponsorVault_filter>>>;
};

export type testoptimismgoerli_SponsorVault_orderBy =
  | 'id'
  | 'sponsorVault';

export type testoptimismgoerli_StableSwap = {
  id: Scalars['ID'];
  canonicalId: Scalars['testoptimismgoerli_Bytes'];
  domain?: Maybe<Scalars['BigInt']>;
  swapPool: Scalars['testoptimismgoerli_Bytes'];
};

export type testoptimismgoerli_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  canonicalId?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['testoptimismgoerli_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['testoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<testoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<testoptimismgoerli_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<testoptimismgoerli_StableSwap_filter>>>;
};

export type testoptimismgoerli_StableSwap_orderBy =
  | 'id'
  | 'canonicalId'
  | 'domain'
  | 'swapPool';

export type testoptimismgoerli_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type testoptimismgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['testoptimismgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type testoptimismgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: testoptimismgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type optimism_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type optimism_swap_Block_height = {
  hash?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type optimism_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type optimism_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['optimism_swap_Bytes'];
};

export type optimism_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_PooledToken_filter>>>;
};

export type optimism_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type optimism_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['optimism_swap_Bytes'];
  canonicalId?: Maybe<Scalars['optimism_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['optimism_swap_Bytes']>;
  lpToken?: Maybe<Scalars['optimism_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['optimism_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<optimism_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<optimism_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<optimism_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<optimism_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<optimism_swap_SwapWeeklyVolume>>;
};


export type optimism_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapEvent_filter>;
};


export type optimism_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_StableSwapExchange_filter>;
};


export type optimism_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapHourlyVolume_filter>;
};


export type optimism_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapDailyVolume_filter>;
};


export type optimism_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimism_swap_OrderDirection>;
  where?: InputMaybe<optimism_swap_SwapWeeklyVolume_filter>;
};

export type optimism_swap_StableSwapAddLiquidityEvent = optimism_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: optimism_swap_StableSwap;
  provider: Scalars['optimism_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimism_swap_Bytes'];
};

export type optimism_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type optimism_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimism_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: optimism_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimism_swap_Bytes'];
};

export type optimism_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwapEvent_filter>>>;
};

export type optimism_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimism_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: optimism_swap_StableSwap;
  buyer: Scalars['optimism_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimism_swap_Bytes'];
};

export type optimism_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwapExchange_filter>>>;
};

export type optimism_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimism_swap_StableSwapRemoveLiquidityEvent = optimism_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: optimism_swap_StableSwap;
  provider: Scalars['optimism_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimism_swap_Bytes'];
};

export type optimism_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type optimism_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimism_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['optimism_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['optimism_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<optimism_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<optimism_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<optimism_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<optimism_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<optimism_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_StableSwap_filter>>>;
};

export type optimism_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type optimism_swap_SwapDailyVolume = optimism_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimism_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimism_swap_BigDecimal'];
};

export type optimism_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimism_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimism_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_SwapDailyVolume_filter>>>;
};

export type optimism_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimism_swap_SwapHourlyVolume = optimism_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimism_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimism_swap_BigDecimal'];
};

export type optimism_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimism_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimism_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_SwapHourlyVolume_filter>>>;
};

export type optimism_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimism_swap_SwapTradeVolume = {
  stableSwap: optimism_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimism_swap_BigDecimal'];
};

export type optimism_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimism_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimism_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_SwapTradeVolume_filter>>>;
};

export type optimism_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimism_swap_SwapWeeklyVolume = optimism_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimism_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimism_swap_BigDecimal'];
};

export type optimism_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimism_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimism_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimism_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimism_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_SwapWeeklyVolume_filter>>>;
};

export type optimism_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimism_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type optimism_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_swap_SystemInfo_filter>>>;
};

export type optimism_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type optimism_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['optimism_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type optimism_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: optimism_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type goerli_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type goerli_swap_Block_height = {
  hash?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type goerli_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type goerli_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['goerli_swap_Bytes'];
};

export type goerli_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_PooledToken_filter>>>;
};

export type goerli_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type goerli_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['goerli_swap_Bytes'];
  canonicalId?: Maybe<Scalars['goerli_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['goerli_swap_Bytes']>;
  lpToken?: Maybe<Scalars['goerli_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['goerli_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<goerli_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<goerli_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<goerli_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<goerli_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<goerli_swap_SwapWeeklyVolume>>;
};


export type goerli_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapEvent_filter>;
};


export type goerli_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_StableSwapExchange_filter>;
};


export type goerli_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapHourlyVolume_filter>;
};


export type goerli_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapDailyVolume_filter>;
};


export type goerli_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<goerli_swap_OrderDirection>;
  where?: InputMaybe<goerli_swap_SwapWeeklyVolume_filter>;
};

export type goerli_swap_StableSwapAddLiquidityEvent = goerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: goerli_swap_StableSwap;
  provider: Scalars['goerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['goerli_swap_Bytes'];
};

export type goerli_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type goerli_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type goerli_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: goerli_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['goerli_swap_Bytes'];
};

export type goerli_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwapEvent_filter>>>;
};

export type goerli_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type goerli_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: goerli_swap_StableSwap;
  buyer: Scalars['goerli_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['goerli_swap_Bytes'];
};

export type goerli_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwapExchange_filter>>>;
};

export type goerli_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type goerli_swap_StableSwapRemoveLiquidityEvent = goerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: goerli_swap_StableSwap;
  provider: Scalars['goerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['goerli_swap_Bytes'];
};

export type goerli_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type goerli_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type goerli_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['goerli_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['goerli_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<goerli_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<goerli_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<goerli_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<goerli_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<goerli_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_StableSwap_filter>>>;
};

export type goerli_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type goerli_swap_SwapDailyVolume = goerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: goerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['goerli_swap_BigDecimal'];
};

export type goerli_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['goerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['goerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_SwapDailyVolume_filter>>>;
};

export type goerli_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type goerli_swap_SwapHourlyVolume = goerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: goerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['goerli_swap_BigDecimal'];
};

export type goerli_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['goerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['goerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_SwapHourlyVolume_filter>>>;
};

export type goerli_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type goerli_swap_SwapTradeVolume = {
  stableSwap: goerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['goerli_swap_BigDecimal'];
};

export type goerli_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['goerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['goerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_SwapTradeVolume_filter>>>;
};

export type goerli_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type goerli_swap_SwapWeeklyVolume = goerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: goerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['goerli_swap_BigDecimal'];
};

export type goerli_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<goerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['goerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['goerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['goerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_SwapWeeklyVolume_filter>>>;
};

export type goerli_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type goerli_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type goerli_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_swap_SystemInfo_filter>>>;
};

export type goerli_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type goerli_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['goerli_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type goerli_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: goerli_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type optimismgoerli_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type optimismgoerli_swap_Block_height = {
  hash?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type optimismgoerli_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type optimismgoerli_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['optimismgoerli_swap_Bytes'];
};

export type optimismgoerli_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_PooledToken_filter>>>;
};

export type optimismgoerli_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type optimismgoerli_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['optimismgoerli_swap_Bytes'];
  canonicalId?: Maybe<Scalars['optimismgoerli_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['optimismgoerli_swap_Bytes']>;
  lpToken?: Maybe<Scalars['optimismgoerli_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['optimismgoerli_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<optimismgoerli_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<optimismgoerli_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<optimismgoerli_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<optimismgoerli_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<optimismgoerli_swap_SwapWeeklyVolume>>;
};


export type optimismgoerli_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapEvent_filter>;
};


export type optimismgoerli_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_StableSwapExchange_filter>;
};


export type optimismgoerli_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapHourlyVolume_filter>;
};


export type optimismgoerli_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapDailyVolume_filter>;
};


export type optimismgoerli_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimismgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<optimismgoerli_swap_OrderDirection>;
  where?: InputMaybe<optimismgoerli_swap_SwapWeeklyVolume_filter>;
};

export type optimismgoerli_swap_StableSwapAddLiquidityEvent = optimismgoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_swap_StableSwap;
  provider: Scalars['optimismgoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimismgoerli_swap_Bytes'];
};

export type optimismgoerli_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type optimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimismgoerli_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimismgoerli_swap_Bytes'];
};

export type optimismgoerli_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwapEvent_filter>>>;
};

export type optimismgoerli_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimismgoerli_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_swap_StableSwap;
  buyer: Scalars['optimismgoerli_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimismgoerli_swap_Bytes'];
};

export type optimismgoerli_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwapExchange_filter>>>;
};

export type optimismgoerli_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimismgoerli_swap_StableSwapRemoveLiquidityEvent = optimismgoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_swap_StableSwap;
  provider: Scalars['optimismgoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['optimismgoerli_swap_Bytes'];
};

export type optimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type optimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type optimismgoerli_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['optimismgoerli_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['optimismgoerli_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<optimismgoerli_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<optimismgoerli_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<optimismgoerli_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<optimismgoerli_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<optimismgoerli_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_StableSwap_filter>>>;
};

export type optimismgoerli_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type optimismgoerli_swap_SwapDailyVolume = optimismgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimismgoerli_swap_BigDecimal'];
};

export type optimismgoerli_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SwapDailyVolume_filter>>>;
};

export type optimismgoerli_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimismgoerli_swap_SwapHourlyVolume = optimismgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimismgoerli_swap_BigDecimal'];
};

export type optimismgoerli_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SwapHourlyVolume_filter>>>;
};

export type optimismgoerli_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimismgoerli_swap_SwapTradeVolume = {
  stableSwap: optimismgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimismgoerli_swap_BigDecimal'];
};

export type optimismgoerli_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SwapTradeVolume_filter>>>;
};

export type optimismgoerli_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimismgoerli_swap_SwapWeeklyVolume = optimismgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: optimismgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['optimismgoerli_swap_BigDecimal'];
};

export type optimismgoerli_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<optimismgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['optimismgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['optimismgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SwapWeeklyVolume_filter>>>;
};

export type optimismgoerli_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type optimismgoerli_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type optimismgoerli_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimismgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimismgoerli_swap_SystemInfo_filter>>>;
};

export type optimismgoerli_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type optimismgoerli_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['optimismgoerli_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type optimismgoerli_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: optimismgoerli_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type stagingmumbai_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type stagingmumbai_swap_Block_height = {
  hash?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type stagingmumbai_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type stagingmumbai_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['stagingmumbai_swap_Bytes'];
};

export type stagingmumbai_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_PooledToken_filter>>>;
};

export type stagingmumbai_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type stagingmumbai_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['stagingmumbai_swap_Bytes'];
  canonicalId?: Maybe<Scalars['stagingmumbai_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['stagingmumbai_swap_Bytes']>;
  lpToken?: Maybe<Scalars['stagingmumbai_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['stagingmumbai_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<stagingmumbai_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<stagingmumbai_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<stagingmumbai_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<stagingmumbai_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<stagingmumbai_swap_SwapWeeklyVolume>>;
};


export type stagingmumbai_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapEvent_filter>;
};


export type stagingmumbai_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_StableSwapExchange_filter>;
};


export type stagingmumbai_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapHourlyVolume_filter>;
};


export type stagingmumbai_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapDailyVolume_filter>;
};


export type stagingmumbai_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_swap_OrderDirection>;
  where?: InputMaybe<stagingmumbai_swap_SwapWeeklyVolume_filter>;
};

export type stagingmumbai_swap_StableSwapAddLiquidityEvent = stagingmumbai_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_swap_StableSwap;
  provider: Scalars['stagingmumbai_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingmumbai_swap_Bytes'];
};

export type stagingmumbai_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type stagingmumbai_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingmumbai_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingmumbai_swap_Bytes'];
};

export type stagingmumbai_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwapEvent_filter>>>;
};

export type stagingmumbai_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingmumbai_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_swap_StableSwap;
  buyer: Scalars['stagingmumbai_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingmumbai_swap_Bytes'];
};

export type stagingmumbai_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwapExchange_filter>>>;
};

export type stagingmumbai_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingmumbai_swap_StableSwapRemoveLiquidityEvent = stagingmumbai_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_swap_StableSwap;
  provider: Scalars['stagingmumbai_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['stagingmumbai_swap_Bytes'];
};

export type stagingmumbai_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type stagingmumbai_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type stagingmumbai_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['stagingmumbai_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['stagingmumbai_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<stagingmumbai_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<stagingmumbai_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<stagingmumbai_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<stagingmumbai_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<stagingmumbai_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_StableSwap_filter>>>;
};

export type stagingmumbai_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type stagingmumbai_swap_SwapDailyVolume = stagingmumbai_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingmumbai_swap_BigDecimal'];
};

export type stagingmumbai_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SwapDailyVolume_filter>>>;
};

export type stagingmumbai_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingmumbai_swap_SwapHourlyVolume = stagingmumbai_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingmumbai_swap_BigDecimal'];
};

export type stagingmumbai_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SwapHourlyVolume_filter>>>;
};

export type stagingmumbai_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingmumbai_swap_SwapTradeVolume = {
  stableSwap: stagingmumbai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingmumbai_swap_BigDecimal'];
};

export type stagingmumbai_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SwapTradeVolume_filter>>>;
};

export type stagingmumbai_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingmumbai_swap_SwapWeeklyVolume = stagingmumbai_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: stagingmumbai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['stagingmumbai_swap_BigDecimal'];
};

export type stagingmumbai_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<stagingmumbai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['stagingmumbai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['stagingmumbai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SwapWeeklyVolume_filter>>>;
};

export type stagingmumbai_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type stagingmumbai_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type stagingmumbai_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_swap_SystemInfo_filter>>>;
};

export type stagingmumbai_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type stagingmumbai_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['stagingmumbai_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type stagingmumbai_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: stagingmumbai_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type goerli_AggregatedMessageRoot = {
  id: Scalars['ID'];
  index: Scalars['BigInt'];
  receivedRoot: Scalars['goerli_Bytes'];
  domain?: Maybe<Scalars['BigInt']>;
};

export type goerli_AggregatedMessageRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  receivedRoot?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_not?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  receivedRoot_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  receivedRoot_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_AggregatedMessageRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_AggregatedMessageRoot_filter>>>;
};

export type goerli_AggregatedMessageRoot_orderBy =
  | 'id'
  | 'index'
  | 'receivedRoot'
  | 'domain';

export type goerli_ArbitrumConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['goerli_Bytes'];
  rootManager: Scalars['goerli_Bytes'];
  mirrorConnector: Scalars['goerli_Bytes'];
};

export type goerli_ArbitrumConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_ArbitrumConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_ArbitrumConnectorMeta_filter>>>;
};

export type goerli_ArbitrumConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type goerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type goerli_Block_height = {
  hash?: InputMaybe<Scalars['goerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type goerli_BnbConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['goerli_Bytes'];
  rootManager: Scalars['goerli_Bytes'];
  mirrorConnector: Scalars['goerli_Bytes'];
};

export type goerli_BnbConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_BnbConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_BnbConnectorMeta_filter>>>;
};

export type goerli_BnbConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type goerli_GnosisConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['goerli_Bytes'];
  rootManager: Scalars['goerli_Bytes'];
  mirrorConnector: Scalars['goerli_Bytes'];
};

export type goerli_GnosisConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_GnosisConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_GnosisConnectorMeta_filter>>>;
};

export type goerli_GnosisConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type goerli_OptimismConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['goerli_Bytes'];
  rootManager: Scalars['goerli_Bytes'];
  mirrorConnector: Scalars['goerli_Bytes'];
};

export type goerli_OptimismConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_OptimismConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_OptimismConnectorMeta_filter>>>;
};

export type goerli_OptimismConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

/** Defines the order direction, either ascending or descending */
export type goerli_OrderDirection =
  | 'asc'
  | 'desc';

export type goerli_PolygonConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  amb: Scalars['goerli_Bytes'];
  rootManager: Scalars['goerli_Bytes'];
  mirrorConnector: Scalars['goerli_Bytes'];
};

export type goerli_PolygonConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_PolygonConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_PolygonConnectorMeta_filter>>>;
};

export type goerli_PolygonConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type goerli_RootAggregated = {
  id: Scalars['ID'];
  domain: Scalars['BigInt'];
  receivedRoot: Scalars['goerli_Bytes'];
  index: Scalars['BigInt'];
};

export type goerli_RootAggregated_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  receivedRoot?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_not?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  receivedRoot_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  receivedRoot_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  receivedRoot_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_RootAggregated_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_RootAggregated_filter>>>;
};

export type goerli_RootAggregated_orderBy =
  | 'id'
  | 'domain'
  | 'receivedRoot'
  | 'index';

export type goerli_RootManagerMeta = {
  id: Scalars['ID'];
  domains?: Maybe<Array<Scalars['BigInt']>>;
  connectors?: Maybe<Array<Scalars['goerli_Bytes']>>;
};

export type goerli_RootManagerMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  domains?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_not?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  domains_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  connectors?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  connectors_not?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  connectors_contains?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  connectors_contains_nocase?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  connectors_not_contains?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  connectors_not_contains_nocase?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_RootManagerMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_RootManagerMeta_filter>>>;
};

export type goerli_RootManagerMeta_orderBy =
  | 'id'
  | 'domains'
  | 'connectors';

export type goerli_RootMessageProcessed = {
  id: Scalars['ID'];
  spokeDomain: Scalars['BigInt'];
  hubDomain: Scalars['BigInt'];
  root?: Maybe<Scalars['goerli_Bytes']>;
  caller?: Maybe<Scalars['goerli_Bytes']>;
  transactionHash?: Maybe<Scalars['goerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type goerli_RootMessageProcessed_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['goerli_Bytes']>;
  root_not?: InputMaybe<Scalars['goerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  caller?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_RootMessageProcessed_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_RootMessageProcessed_filter>>>;
};

export type goerli_RootMessageProcessed_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type goerli_RootPropagated = {
  id: Scalars['ID'];
  aggregate: Scalars['goerli_Bytes'];
  domainsHash: Scalars['goerli_Bytes'];
  count: Scalars['BigInt'];
};

export type goerli_RootPropagated_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  aggregate?: InputMaybe<Scalars['goerli_Bytes']>;
  aggregate_not?: InputMaybe<Scalars['goerli_Bytes']>;
  aggregate_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  aggregate_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  aggregate_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  aggregate_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  aggregate_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  aggregate_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  aggregate_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  aggregate_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  domainsHash?: InputMaybe<Scalars['goerli_Bytes']>;
  domainsHash_not?: InputMaybe<Scalars['goerli_Bytes']>;
  domainsHash_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  domainsHash_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  domainsHash_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  domainsHash_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  domainsHash_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  domainsHash_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  domainsHash_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  domainsHash_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_RootPropagated_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_RootPropagated_filter>>>;
};

export type goerli_RootPropagated_orderBy =
  | 'id'
  | 'aggregate'
  | 'domainsHash'
  | 'count';

export type goerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['goerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type goerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: goerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type local1337_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['local1337_Bytes']>;
  local: Scalars['local1337_Bytes'];
  adoptedAsset: Scalars['local1337_Bytes'];
  canonicalId: Scalars['local1337_Bytes'];
  canonicalDomain: Scalars['BigInt'];
  blockNumber: Scalars['BigInt'];
};

export type local1337_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: local1337_Router;
  asset: local1337_Asset;
};

export type local1337_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<local1337_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<local1337_Asset_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1337_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1337_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1337_AssetBalance_filter>>>;
};

export type local1337_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset';

export type local1337_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['local1337_Bytes']>;
  key_not?: InputMaybe<Scalars['local1337_Bytes']>;
  key_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  key_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  key_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  key_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  key_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  local?: InputMaybe<Scalars['local1337_Bytes']>;
  local_not?: InputMaybe<Scalars['local1337_Bytes']>;
  local_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  local_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  local_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  local_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  local_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  local_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  local_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  local_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  adoptedAsset?: InputMaybe<Scalars['local1337_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['local1337_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1337_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1337_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1337_Asset_filter>>>;
};

export type local1337_Asset_orderBy =
  | 'id'
  | 'key'
  | 'local'
  | 'adoptedAsset'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'blockNumber';

export type local1337_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type local1337_Block_height = {
  hash?: InputMaybe<Scalars['local1337_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type local1337_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['local1337_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['local1337_Bytes']>;
  callData?: Maybe<Scalars['local1337_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  agent?: Maybe<Scalars['local1337_Bytes']>;
  recovery?: Maybe<Scalars['local1337_Bytes']>;
  forceSlow?: Maybe<Scalars['Boolean']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callback?: Maybe<Scalars['local1337_Bytes']>;
  callbackFee?: Maybe<Scalars['BigInt']>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  destinationMinOut?: Maybe<Scalars['BigInt']>;
  status?: Maybe<local1337_TransferStatus>;
  routers?: Maybe<Array<local1337_Router>>;
  originSender?: Maybe<Scalars['local1337_Bytes']>;
  transactingAsset?: Maybe<Scalars['local1337_Bytes']>;
  transactingAmount?: Maybe<Scalars['BigInt']>;
  localAsset?: Maybe<Scalars['local1337_Bytes']>;
  localAmount?: Maybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['local1337_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['local1337_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledCaller?: Maybe<Scalars['local1337_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['local1337_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
};


export type local1337_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_Router_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_Router_filter>;
};

export type local1337_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_not?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['local1337_Bytes']>;
  to_not?: InputMaybe<Scalars['local1337_Bytes']>;
  to_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  to_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  to_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  to_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  to_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  callData?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_not?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  agent?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_not?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  agent_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  agent_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_not?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  recovery_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  recovery_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  forceSlow?: InputMaybe<Scalars['Boolean']>;
  forceSlow_not?: InputMaybe<Scalars['Boolean']>;
  forceSlow_in?: InputMaybe<Array<Scalars['Boolean']>>;
  forceSlow_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callback?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_not?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  callback_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  callback_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  callbackFee?: InputMaybe<Scalars['BigInt']>;
  callbackFee_not?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  callbackFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_not?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<local1337_TransferStatus>;
  status_not?: InputMaybe<local1337_TransferStatus>;
  status_in?: InputMaybe<Array<local1337_TransferStatus>>;
  status_not_in?: InputMaybe<Array<local1337_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<local1337_Router_filter>;
  originSender?: InputMaybe<Scalars['local1337_Bytes']>;
  originSender_not?: InputMaybe<Scalars['local1337_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_not?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transactingAsset_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transactingAsset_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAmount?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_not?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  localAsset?: InputMaybe<Scalars['local1337_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['local1337_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  localAmount?: InputMaybe<Scalars['BigInt']>;
  localAmount_not?: InputMaybe<Scalars['BigInt']>;
  localAmount_gt?: InputMaybe<Scalars['BigInt']>;
  localAmount_lt?: InputMaybe<Scalars['BigInt']>;
  localAmount_gte?: InputMaybe<Scalars['BigInt']>;
  localAmount_lte?: InputMaybe<Scalars['BigInt']>;
  localAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  localAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sponsorVaultRelayerFee?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_not?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sponsorVaultRelayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['local1337_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['local1337_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['local1337_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['local1337_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledCaller?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1337_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1337_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1337_DestinationTransfer_filter>>>;
};

export type local1337_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'to'
  | 'callData'
  | 'originDomain'
  | 'destinationDomain'
  | 'agent'
  | 'recovery'
  | 'forceSlow'
  | 'receiveLocal'
  | 'callback'
  | 'callbackFee'
  | 'relayerFee'
  | 'destinationMinOut'
  | 'status'
  | 'routers'
  | 'originSender'
  | 'transactingAsset'
  | 'transactingAmount'
  | 'localAsset'
  | 'localAmount'
  | 'sponsorVaultRelayerFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber';

/** Defines the order direction, either ascending or descending */
export type local1337_OrderDirection =
  | 'asc'
  | 'desc';

export type local1337_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['local1337_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['local1337_Bytes']>;
  callData?: Maybe<Scalars['local1337_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  agent?: Maybe<Scalars['local1337_Bytes']>;
  recovery?: Maybe<Scalars['local1337_Bytes']>;
  forceSlow?: Maybe<Scalars['Boolean']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callback?: Maybe<Scalars['local1337_Bytes']>;
  callbackFee?: Maybe<Scalars['BigInt']>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  destinationMinOut?: Maybe<Scalars['BigInt']>;
  status?: Maybe<local1337_TransferStatus>;
  originMinOut?: Maybe<Scalars['BigInt']>;
  transactingAsset?: Maybe<Scalars['local1337_Bytes']>;
  transactingAmount?: Maybe<Scalars['BigInt']>;
  bridgedAsset?: Maybe<Scalars['local1337_Bytes']>;
  bridgedAmount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['local1337_Bytes']>;
  transactionHash?: Maybe<Scalars['local1337_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type local1337_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_not?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['local1337_Bytes']>;
  to_not?: InputMaybe<Scalars['local1337_Bytes']>;
  to_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  to_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  to_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  to_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  to_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  callData?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_not?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  agent?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_not?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  agent_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  agent_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  agent_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_not?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  recovery_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  recovery_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  recovery_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  forceSlow?: InputMaybe<Scalars['Boolean']>;
  forceSlow_not?: InputMaybe<Scalars['Boolean']>;
  forceSlow_in?: InputMaybe<Array<Scalars['Boolean']>>;
  forceSlow_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callback?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_not?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  callback_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  callback_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  callback_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  callbackFee?: InputMaybe<Scalars['BigInt']>;
  callbackFee_not?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  callbackFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_not?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<local1337_TransferStatus>;
  status_not?: InputMaybe<local1337_TransferStatus>;
  status_in?: InputMaybe<Array<local1337_TransferStatus>>;
  status_not_in?: InputMaybe<Array<local1337_TransferStatus>>;
  originMinOut?: InputMaybe<Scalars['BigInt']>;
  originMinOut_not?: InputMaybe<Scalars['BigInt']>;
  originMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  originMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  originMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  originMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  originMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAsset?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_not?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transactingAsset_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transactingAsset_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAsset_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  transactingAmount?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_not?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAsset?: InputMaybe<Scalars['local1337_Bytes']>;
  bridgedAsset_not?: InputMaybe<Scalars['local1337_Bytes']>;
  bridgedAsset_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  bridgedAsset_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  bridgedAsset_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  bridgedAsset_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  bridgedAsset_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  bridgedAsset_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  bridgedAsset_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  bridgedAsset_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  bridgedAmount?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_not?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  transactionHash?: InputMaybe<Scalars['local1337_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['local1337_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1337_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1337_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1337_OriginTransfer_filter>>>;
};

export type local1337_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'to'
  | 'callData'
  | 'originDomain'
  | 'destinationDomain'
  | 'agent'
  | 'recovery'
  | 'forceSlow'
  | 'receiveLocal'
  | 'callback'
  | 'callbackFee'
  | 'relayerFee'
  | 'destinationMinOut'
  | 'status'
  | 'originMinOut'
  | 'transactingAsset'
  | 'transactingAmount'
  | 'bridgedAsset'
  | 'bridgedAmount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type local1337_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['local1337_Bytes']>;
};

export type local1337_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['local1337_Bytes']>;
  relayer_not?: InputMaybe<Scalars['local1337_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1337_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1337_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1337_Relayer_filter>>>;
};

export type local1337_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type local1337_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['local1337_Bytes']>;
  recipient?: Maybe<Scalars['local1337_Bytes']>;
  proposedOwner?: Maybe<Scalars['local1337_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<local1337_AssetBalance>;
};


export type local1337_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1337_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<local1337_OrderDirection>;
  where?: InputMaybe<local1337_AssetBalance_filter>;
};

export type local1337_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['local1337_Bytes']>;
  owner_not?: InputMaybe<Scalars['local1337_Bytes']>;
  owner_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  owner_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  owner_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  owner_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  recipient?: InputMaybe<Scalars['local1337_Bytes']>;
  recipient_not?: InputMaybe<Scalars['local1337_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['local1337_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['local1337_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<local1337_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1337_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1337_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1337_Router_filter>>>;
};

export type local1337_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type local1337_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['local1337_Bytes'];
};

export type local1337_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_not?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1337_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1337_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1337_Setting_filter>>>;
};

export type local1337_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type local1337_SponsorVault = {
  id: Scalars['ID'];
  sponsorVault: Scalars['local1337_Bytes'];
};

export type local1337_SponsorVault_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  sponsorVault?: InputMaybe<Scalars['local1337_Bytes']>;
  sponsorVault_not?: InputMaybe<Scalars['local1337_Bytes']>;
  sponsorVault_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  sponsorVault_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  sponsorVault_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  sponsorVault_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  sponsorVault_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  sponsorVault_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  sponsorVault_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  sponsorVault_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1337_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1337_SponsorVault_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1337_SponsorVault_filter>>>;
};

export type local1337_SponsorVault_orderBy =
  | 'id'
  | 'sponsorVault';

export type local1337_StableSwap = {
  id: Scalars['ID'];
  canonicalId: Scalars['local1337_Bytes'];
  domain?: Maybe<Scalars['BigInt']>;
  swapPool: Scalars['local1337_Bytes'];
};

export type local1337_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  canonicalId?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['local1337_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['local1337_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['local1337_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['local1337_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['local1337_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['local1337_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['local1337_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['local1337_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1337_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1337_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1337_StableSwap_filter>>>;
};

export type local1337_StableSwap_orderBy =
  | 'id'
  | 'canonicalId'
  | 'domain'
  | 'swapPool';

export type local1337_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type local1337__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['local1337_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type local1337__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: local1337__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type bnb_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type bnb_swap_Block_height = {
  hash?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type bnb_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type bnb_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['bnb_swap_Bytes'];
};

export type bnb_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_PooledToken_filter>>>;
};

export type bnb_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type bnb_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['bnb_swap_Bytes'];
  canonicalId?: Maybe<Scalars['bnb_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['bnb_swap_Bytes']>;
  lpToken?: Maybe<Scalars['bnb_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['bnb_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<bnb_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<bnb_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<bnb_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<bnb_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<bnb_swap_SwapWeeklyVolume>>;
};


export type bnb_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapEvent_filter>;
};


export type bnb_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_StableSwapExchange_filter>;
};


export type bnb_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapHourlyVolume_filter>;
};


export type bnb_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapDailyVolume_filter>;
};


export type bnb_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<bnb_swap_OrderDirection>;
  where?: InputMaybe<bnb_swap_SwapWeeklyVolume_filter>;
};

export type bnb_swap_StableSwapAddLiquidityEvent = bnb_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: bnb_swap_StableSwap;
  provider: Scalars['bnb_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['bnb_swap_Bytes'];
};

export type bnb_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type bnb_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type bnb_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: bnb_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['bnb_swap_Bytes'];
};

export type bnb_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwapEvent_filter>>>;
};

export type bnb_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type bnb_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: bnb_swap_StableSwap;
  buyer: Scalars['bnb_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['bnb_swap_Bytes'];
};

export type bnb_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwapExchange_filter>>>;
};

export type bnb_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type bnb_swap_StableSwapRemoveLiquidityEvent = bnb_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: bnb_swap_StableSwap;
  provider: Scalars['bnb_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['bnb_swap_Bytes'];
};

export type bnb_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type bnb_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type bnb_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['bnb_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['bnb_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<bnb_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<bnb_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<bnb_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<bnb_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<bnb_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_StableSwap_filter>>>;
};

export type bnb_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type bnb_swap_SwapDailyVolume = bnb_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: bnb_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['bnb_swap_BigDecimal'];
};

export type bnb_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['bnb_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['bnb_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_SwapDailyVolume_filter>>>;
};

export type bnb_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type bnb_swap_SwapHourlyVolume = bnb_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: bnb_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['bnb_swap_BigDecimal'];
};

export type bnb_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['bnb_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['bnb_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_SwapHourlyVolume_filter>>>;
};

export type bnb_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type bnb_swap_SwapTradeVolume = {
  stableSwap: bnb_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['bnb_swap_BigDecimal'];
};

export type bnb_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['bnb_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['bnb_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_SwapTradeVolume_filter>>>;
};

export type bnb_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type bnb_swap_SwapWeeklyVolume = bnb_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: bnb_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['bnb_swap_BigDecimal'];
};

export type bnb_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<bnb_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['bnb_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['bnb_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['bnb_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_SwapWeeklyVolume_filter>>>;
};

export type bnb_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type bnb_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type bnb_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_swap_SystemInfo_filter>>>;
};

export type bnb_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type bnb_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['bnb_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type bnb_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: bnb_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type arbitrumgoerli_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type arbitrumgoerli_swap_Block_height = {
  hash?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type arbitrumgoerli_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type arbitrumgoerli_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['arbitrumgoerli_swap_Bytes'];
};

export type arbitrumgoerli_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_PooledToken_filter>>>;
};

export type arbitrumgoerli_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type arbitrumgoerli_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['arbitrumgoerli_swap_Bytes'];
  canonicalId?: Maybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  lpToken?: Maybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['arbitrumgoerli_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<arbitrumgoerli_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<arbitrumgoerli_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<arbitrumgoerli_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<arbitrumgoerli_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<arbitrumgoerli_swap_SwapWeeklyVolume>>;
};


export type arbitrumgoerli_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapEvent_filter>;
};


export type arbitrumgoerli_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_StableSwapExchange_filter>;
};


export type arbitrumgoerli_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapHourlyVolume_filter>;
};


export type arbitrumgoerli_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapDailyVolume_filter>;
};


export type arbitrumgoerli_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumgoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumgoerli_swap_OrderDirection>;
  where?: InputMaybe<arbitrumgoerli_swap_SwapWeeklyVolume_filter>;
};

export type arbitrumgoerli_swap_StableSwapAddLiquidityEvent = arbitrumgoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_swap_StableSwap;
  provider: Scalars['arbitrumgoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumgoerli_swap_Bytes'];
};

export type arbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type arbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumgoerli_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumgoerli_swap_Bytes'];
};

export type arbitrumgoerli_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwapEvent_filter>>>;
};

export type arbitrumgoerli_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumgoerli_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_swap_StableSwap;
  buyer: Scalars['arbitrumgoerli_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumgoerli_swap_Bytes'];
};

export type arbitrumgoerli_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwapExchange_filter>>>;
};

export type arbitrumgoerli_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent = arbitrumgoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_swap_StableSwap;
  provider: Scalars['arbitrumgoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumgoerli_swap_Bytes'];
};

export type arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumgoerli_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<arbitrumgoerli_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<arbitrumgoerli_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<arbitrumgoerli_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<arbitrumgoerli_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<arbitrumgoerli_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_StableSwap_filter>>>;
};

export type arbitrumgoerli_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type arbitrumgoerli_swap_SwapDailyVolume = arbitrumgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumgoerli_swap_BigDecimal'];
};

export type arbitrumgoerli_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SwapDailyVolume_filter>>>;
};

export type arbitrumgoerli_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumgoerli_swap_SwapHourlyVolume = arbitrumgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumgoerli_swap_BigDecimal'];
};

export type arbitrumgoerli_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SwapHourlyVolume_filter>>>;
};

export type arbitrumgoerli_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumgoerli_swap_SwapTradeVolume = {
  stableSwap: arbitrumgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumgoerli_swap_BigDecimal'];
};

export type arbitrumgoerli_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SwapTradeVolume_filter>>>;
};

export type arbitrumgoerli_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumgoerli_swap_SwapWeeklyVolume = arbitrumgoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumgoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumgoerli_swap_BigDecimal'];
};

export type arbitrumgoerli_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumgoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumgoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SwapWeeklyVolume_filter>>>;
};

export type arbitrumgoerli_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumgoerli_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type arbitrumgoerli_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumgoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumgoerli_swap_SystemInfo_filter>>>;
};

export type arbitrumgoerli_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type arbitrumgoerli_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['arbitrumgoerli_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type arbitrumgoerli_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: arbitrumgoerli_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type mumbai_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type mumbai_swap_Block_height = {
  hash?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type mumbai_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type mumbai_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['mumbai_swap_Bytes'];
};

export type mumbai_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_PooledToken_filter>>>;
};

export type mumbai_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type mumbai_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['mumbai_swap_Bytes'];
  canonicalId?: Maybe<Scalars['mumbai_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['mumbai_swap_Bytes']>;
  lpToken?: Maybe<Scalars['mumbai_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['mumbai_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<mumbai_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<mumbai_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<mumbai_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<mumbai_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<mumbai_swap_SwapWeeklyVolume>>;
};


export type mumbai_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapEvent_filter>;
};


export type mumbai_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_StableSwapExchange_filter>;
};


export type mumbai_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapHourlyVolume_filter>;
};


export type mumbai_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapDailyVolume_filter>;
};


export type mumbai_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<mumbai_swap_OrderDirection>;
  where?: InputMaybe<mumbai_swap_SwapWeeklyVolume_filter>;
};

export type mumbai_swap_StableSwapAddLiquidityEvent = mumbai_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: mumbai_swap_StableSwap;
  provider: Scalars['mumbai_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['mumbai_swap_Bytes'];
};

export type mumbai_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type mumbai_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type mumbai_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: mumbai_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['mumbai_swap_Bytes'];
};

export type mumbai_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwapEvent_filter>>>;
};

export type mumbai_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type mumbai_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: mumbai_swap_StableSwap;
  buyer: Scalars['mumbai_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['mumbai_swap_Bytes'];
};

export type mumbai_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwapExchange_filter>>>;
};

export type mumbai_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type mumbai_swap_StableSwapRemoveLiquidityEvent = mumbai_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: mumbai_swap_StableSwap;
  provider: Scalars['mumbai_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['mumbai_swap_Bytes'];
};

export type mumbai_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type mumbai_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type mumbai_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['mumbai_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['mumbai_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<mumbai_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<mumbai_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<mumbai_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<mumbai_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<mumbai_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_StableSwap_filter>>>;
};

export type mumbai_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type mumbai_swap_SwapDailyVolume = mumbai_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: mumbai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['mumbai_swap_BigDecimal'];
};

export type mumbai_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['mumbai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['mumbai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_SwapDailyVolume_filter>>>;
};

export type mumbai_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type mumbai_swap_SwapHourlyVolume = mumbai_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: mumbai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['mumbai_swap_BigDecimal'];
};

export type mumbai_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['mumbai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['mumbai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_SwapHourlyVolume_filter>>>;
};

export type mumbai_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type mumbai_swap_SwapTradeVolume = {
  stableSwap: mumbai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['mumbai_swap_BigDecimal'];
};

export type mumbai_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['mumbai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['mumbai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_SwapTradeVolume_filter>>>;
};

export type mumbai_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type mumbai_swap_SwapWeeklyVolume = mumbai_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: mumbai_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['mumbai_swap_BigDecimal'];
};

export type mumbai_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<mumbai_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['mumbai_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['mumbai_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['mumbai_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_SwapWeeklyVolume_filter>>>;
};

export type mumbai_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type mumbai_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type mumbai_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_swap_SystemInfo_filter>>>;
};

export type mumbai_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type mumbai_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['mumbai_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type mumbai_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: mumbai_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type optimism_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['optimism_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type optimism_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['optimism_Bytes']>;
  root_not?: InputMaybe<Scalars['optimism_Bytes']>;
  root_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  root_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  root_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  root_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  root_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_AggregateRoot_filter>>>;
};

export type optimism_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type optimism_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['optimism_Bytes']>;
  canonicalId?: Maybe<Scalars['optimism_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['optimism_Bytes']>;
  localAsset?: Maybe<Scalars['optimism_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<optimism_AssetStatus>;
};

export type optimism_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: optimism_Router;
  asset: optimism_Asset;
  feesEarned: Scalars['BigInt'];
};

export type optimism_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<optimism_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<optimism_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_AssetBalance_filter>>>;
};

export type optimism_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type optimism_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type optimism_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_AssetStatus_filter>>>;
};

export type optimism_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type optimism_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['optimism_Bytes']>;
  key_not?: InputMaybe<Scalars['optimism_Bytes']>;
  key_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  key_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  key_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  key_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  key_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['optimism_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['optimism_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  localAsset?: InputMaybe<Scalars['optimism_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['optimism_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<optimism_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_Asset_filter>>>;
};

export type optimism_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type optimism_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type optimism_Block_height = {
  hash?: InputMaybe<Scalars['optimism_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type optimism_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['optimism_Bytes']>;
  rootManager?: Maybe<Scalars['optimism_Bytes']>;
  mirrorConnector?: Maybe<Scalars['optimism_Bytes']>;
};

export type optimism_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['optimism_Bytes']>;
  amb_not?: InputMaybe<Scalars['optimism_Bytes']>;
  amb_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  amb_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  amb_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  amb_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  rootManager?: InputMaybe<Scalars['optimism_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['optimism_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['optimism_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['optimism_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_ConnectorMeta_filter>>>;
};

export type optimism_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type optimism_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['optimism_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<optimism_TransferStatus>;
  routers?: Maybe<Array<optimism_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['optimism_Bytes']>;
  delegate?: Maybe<Scalars['optimism_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['optimism_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['optimism_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['optimism_Bytes']>;
  asset?: Maybe<optimism_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['optimism_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['optimism_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['optimism_Bytes']>;
  reconciledCaller?: Maybe<Scalars['optimism_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['optimism_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['optimism_Bytes']>;
};


export type optimism_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_Router_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_Router_filter>;
};

export type optimism_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<optimism_TransferStatus>;
  status_not?: InputMaybe<optimism_TransferStatus>;
  status_in?: InputMaybe<Array<optimism_TransferStatus>>;
  status_not_in?: InputMaybe<Array<optimism_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<optimism_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['optimism_Bytes']>;
  to_not?: InputMaybe<Scalars['optimism_Bytes']>;
  to_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  to_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  to_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  to_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  to_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_not?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_not?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_not?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<optimism_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['optimism_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['optimism_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_DestinationTransfer_filter>>>;
};

export type optimism_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type optimism_OrderDirection =
  | 'asc'
  | 'desc';

export type optimism_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['optimism_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['optimism_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['optimism_Bytes']>;
  root?: Maybe<Scalars['optimism_Bytes']>;
  transactionHash?: Maybe<Scalars['optimism_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<optimism_RootCount>;
};

export type optimism_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['optimism_Bytes']>;
  leaf_not?: InputMaybe<Scalars['optimism_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['optimism_Bytes']>;
  message_not?: InputMaybe<Scalars['optimism_Bytes']>;
  message_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  message_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  message_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  message_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  message_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  root?: InputMaybe<Scalars['optimism_Bytes']>;
  root_not?: InputMaybe<Scalars['optimism_Bytes']>;
  root_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  root_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  root_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  root_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  root_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<optimism_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_OriginMessage_filter>>>;
};

export type optimism_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type optimism_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['optimism_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<optimism_TransferStatus>;
  messageHash?: Maybe<Scalars['optimism_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['optimism_Bytes']>;
  delegate?: Maybe<Scalars['optimism_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['optimism_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['optimism_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['optimism_Bytes']>;
  asset?: Maybe<optimism_Asset>;
  message?: Maybe<optimism_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['optimism_Bytes']>;
  transactionHash?: Maybe<Scalars['optimism_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['optimism_Bytes']>;
};

export type optimism_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<optimism_TransferStatus>;
  status_not?: InputMaybe<optimism_TransferStatus>;
  status_in?: InputMaybe<Array<optimism_TransferStatus>>;
  status_not_in?: InputMaybe<Array<optimism_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['optimism_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['optimism_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['optimism_Bytes']>;
  to_not?: InputMaybe<Scalars['optimism_Bytes']>;
  to_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  to_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  to_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  to_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  to_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_not?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_not?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_not?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<optimism_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<optimism_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_not?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['optimism_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['optimism_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_OriginTransfer_filter>>>;
};

export type optimism_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type optimism_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['optimism_Bytes']>;
};

export type optimism_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['optimism_Bytes']>;
  relayer_not?: InputMaybe<Scalars['optimism_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_Relayer_filter>>>;
};

export type optimism_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type optimism_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type optimism_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_RootCount_filter>>>;
};

export type optimism_RootCount_orderBy =
  | 'id'
  | 'count';

export type optimism_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['optimism_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['optimism_Bytes']>;
  transactionHash?: Maybe<Scalars['optimism_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type optimism_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['optimism_Bytes']>;
  root_not?: InputMaybe<Scalars['optimism_Bytes']>;
  root_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  root_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  root_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  root_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  root_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_not?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_RootMessageSent_filter>>>;
};

export type optimism_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type optimism_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['optimism_Bytes']>;
  recipient?: Maybe<Scalars['optimism_Bytes']>;
  proposedOwner?: Maybe<Scalars['optimism_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<optimism_AssetBalance>;
};


export type optimism_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<optimism_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<optimism_OrderDirection>;
  where?: InputMaybe<optimism_AssetBalance_filter>;
};

export type optimism_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['optimism_Bytes']>;
  owner_not?: InputMaybe<Scalars['optimism_Bytes']>;
  owner_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  owner_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  owner_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  owner_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  recipient?: InputMaybe<Scalars['optimism_Bytes']>;
  recipient_not?: InputMaybe<Scalars['optimism_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['optimism_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['optimism_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<optimism_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_Router_filter>>>;
};

export type optimism_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type optimism_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['optimism_Bytes']>;
};

export type optimism_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['optimism_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['optimism_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_Sequencer_filter>>>;
};

export type optimism_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type optimism_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['optimism_Bytes'];
};

export type optimism_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_not?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_gt?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_lt?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_gte?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_lte?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['optimism_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['optimism_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<optimism_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<optimism_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<optimism_Setting_filter>>>;
};

export type optimism_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type optimism_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type optimism__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['optimism_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type optimism__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: optimism__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type staginggoerli_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type staginggoerli_swap_Block_height = {
  hash?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type staginggoerli_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type staginggoerli_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['staginggoerli_swap_Bytes'];
};

export type staginggoerli_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_PooledToken_filter>>>;
};

export type staginggoerli_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type staginggoerli_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['staginggoerli_swap_Bytes'];
  canonicalId?: Maybe<Scalars['staginggoerli_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['staginggoerli_swap_Bytes']>;
  lpToken?: Maybe<Scalars['staginggoerli_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['staginggoerli_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<staginggoerli_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<staginggoerli_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<staginggoerli_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<staginggoerli_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<staginggoerli_swap_SwapWeeklyVolume>>;
};


export type staginggoerli_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapEvent_filter>;
};


export type staginggoerli_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_StableSwapExchange_filter>;
};


export type staginggoerli_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapHourlyVolume_filter>;
};


export type staginggoerli_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapDailyVolume_filter>;
};


export type staginggoerli_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_swap_OrderDirection>;
  where?: InputMaybe<staginggoerli_swap_SwapWeeklyVolume_filter>;
};

export type staginggoerli_swap_StableSwapAddLiquidityEvent = staginggoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_swap_StableSwap;
  provider: Scalars['staginggoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_swap_Bytes'];
};

export type staginggoerli_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type staginggoerli_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: staginggoerli_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_swap_Bytes'];
};

export type staginggoerli_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwapEvent_filter>>>;
};

export type staginggoerli_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: staginggoerli_swap_StableSwap;
  buyer: Scalars['staginggoerli_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_swap_Bytes'];
};

export type staginggoerli_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwapExchange_filter>>>;
};

export type staginggoerli_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_swap_StableSwapRemoveLiquidityEvent = staginggoerli_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_swap_StableSwap;
  provider: Scalars['staginggoerli_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_swap_Bytes'];
};

export type staginggoerli_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type staginggoerli_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['staginggoerli_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['staginggoerli_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<staginggoerli_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<staginggoerli_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<staginggoerli_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<staginggoerli_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<staginggoerli_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_StableSwap_filter>>>;
};

export type staginggoerli_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type staginggoerli_swap_SwapDailyVolume = staginggoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_swap_BigDecimal'];
};

export type staginggoerli_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SwapDailyVolume_filter>>>;
};

export type staginggoerli_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_swap_SwapHourlyVolume = staginggoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_swap_BigDecimal'];
};

export type staginggoerli_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SwapHourlyVolume_filter>>>;
};

export type staginggoerli_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_swap_SwapTradeVolume = {
  stableSwap: staginggoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_swap_BigDecimal'];
};

export type staginggoerli_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SwapTradeVolume_filter>>>;
};

export type staginggoerli_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_swap_SwapWeeklyVolume = staginggoerli_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_swap_BigDecimal'];
};

export type staginggoerli_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SwapWeeklyVolume_filter>>>;
};

export type staginggoerli_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type staginggoerli_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_swap_SystemInfo_filter>>>;
};

export type staginggoerli_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type staginggoerli_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['staginggoerli_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type staginggoerli_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: staginggoerli_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type stagingoptimismgoerli_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['stagingoptimismgoerli_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type stagingoptimismgoerli_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_AggregateRoot_filter>>>;
};

export type stagingoptimismgoerli_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type stagingoptimismgoerli_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  localAsset?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<stagingoptimismgoerli_AssetStatus>;
};

export type stagingoptimismgoerli_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: stagingoptimismgoerli_Router;
  asset: stagingoptimismgoerli_Asset;
  feesEarned: Scalars['BigInt'];
};

export type stagingoptimismgoerli_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<stagingoptimismgoerli_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<stagingoptimismgoerli_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_AssetBalance_filter>>>;
};

export type stagingoptimismgoerli_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type stagingoptimismgoerli_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type stagingoptimismgoerli_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_AssetStatus_filter>>>;
};

export type stagingoptimismgoerli_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type stagingoptimismgoerli_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  localAsset?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<stagingoptimismgoerli_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Asset_filter>>>;
};

export type stagingoptimismgoerli_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type stagingoptimismgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type stagingoptimismgoerli_Block_height = {
  hash?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type stagingoptimismgoerli_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  rootManager?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  mirrorConnector?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
};

export type stagingoptimismgoerli_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_ConnectorMeta_filter>>>;
};

export type stagingoptimismgoerli_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type stagingoptimismgoerli_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<stagingoptimismgoerli_TransferStatus>;
  routers?: Maybe<Array<stagingoptimismgoerli_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset?: Maybe<stagingoptimismgoerli_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledCaller?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
};


export type stagingoptimismgoerli_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_Router_filter>;
};

export type stagingoptimismgoerli_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<stagingoptimismgoerli_TransferStatus>;
  status_not?: InputMaybe<stagingoptimismgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<stagingoptimismgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<stagingoptimismgoerli_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<stagingoptimismgoerli_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<stagingoptimismgoerli_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_DestinationTransfer_filter>>>;
};

export type stagingoptimismgoerli_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type stagingoptimismgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type stagingoptimismgoerli_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<stagingoptimismgoerli_RootCount>;
};

export type stagingoptimismgoerli_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  leaf_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  message_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  message_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  message_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  message_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  message_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  message_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<stagingoptimismgoerli_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_OriginMessage_filter>>>;
};

export type stagingoptimismgoerli_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type stagingoptimismgoerli_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<stagingoptimismgoerli_TransferStatus>;
  messageHash?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset?: Maybe<stagingoptimismgoerli_Asset>;
  message?: Maybe<stagingoptimismgoerli_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
};

export type stagingoptimismgoerli_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<stagingoptimismgoerli_TransferStatus>;
  status_not?: InputMaybe<stagingoptimismgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<stagingoptimismgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<stagingoptimismgoerli_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<stagingoptimismgoerli_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<stagingoptimismgoerli_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_OriginTransfer_filter>>>;
};

export type stagingoptimismgoerli_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type stagingoptimismgoerli_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
};

export type stagingoptimismgoerli_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  relayer_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Relayer_filter>>>;
};

export type stagingoptimismgoerli_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type stagingoptimismgoerli_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type stagingoptimismgoerli_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_RootCount_filter>>>;
};

export type stagingoptimismgoerli_RootCount_orderBy =
  | 'id'
  | 'count';

export type stagingoptimismgoerli_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type stagingoptimismgoerli_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_RootMessageSent_filter>>>;
};

export type stagingoptimismgoerli_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type stagingoptimismgoerli_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  recipient?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedOwner?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<stagingoptimismgoerli_AssetBalance>;
};


export type stagingoptimismgoerli_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingoptimismgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<stagingoptimismgoerli_OrderDirection>;
  where?: InputMaybe<stagingoptimismgoerli_AssetBalance_filter>;
};

export type stagingoptimismgoerli_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  owner_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  owner_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  owner_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  owner_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  owner_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  recipient?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  recipient_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<stagingoptimismgoerli_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Router_filter>>>;
};

export type stagingoptimismgoerli_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type stagingoptimismgoerli_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
};

export type stagingoptimismgoerli_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Sequencer_filter>>>;
};

export type stagingoptimismgoerli_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type stagingoptimismgoerli_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['stagingoptimismgoerli_Bytes'];
};

export type stagingoptimismgoerli_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['stagingoptimismgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingoptimismgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingoptimismgoerli_Setting_filter>>>;
};

export type stagingoptimismgoerli_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type stagingoptimismgoerli_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type stagingoptimismgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['stagingoptimismgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type stagingoptimismgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: stagingoptimismgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type stagingmumbai_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['stagingmumbai_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type stagingmumbai_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  root_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_AggregateRoot_filter>>>;
};

export type stagingmumbai_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type stagingmumbai_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId?: Maybe<Scalars['stagingmumbai_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['stagingmumbai_Bytes']>;
  localAsset?: Maybe<Scalars['stagingmumbai_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<stagingmumbai_AssetStatus>;
};

export type stagingmumbai_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: stagingmumbai_Router;
  asset: stagingmumbai_Asset;
  feesEarned: Scalars['BigInt'];
};

export type stagingmumbai_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<stagingmumbai_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<stagingmumbai_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_AssetBalance_filter>>>;
};

export type stagingmumbai_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type stagingmumbai_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type stagingmumbai_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_AssetStatus_filter>>>;
};

export type stagingmumbai_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type stagingmumbai_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  key_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  localAsset?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<stagingmumbai_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_Asset_filter>>>;
};

export type stagingmumbai_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type stagingmumbai_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type stagingmumbai_Block_height = {
  hash?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type stagingmumbai_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['stagingmumbai_Bytes']>;
  rootManager?: Maybe<Scalars['stagingmumbai_Bytes']>;
  mirrorConnector?: Maybe<Scalars['stagingmumbai_Bytes']>;
};

export type stagingmumbai_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  amb_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  amb_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  amb_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  amb_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  amb_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  rootManager?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_ConnectorMeta_filter>>>;
};

export type stagingmumbai_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type stagingmumbai_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['stagingmumbai_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<stagingmumbai_TransferStatus>;
  routers?: Maybe<Array<stagingmumbai_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['stagingmumbai_Bytes']>;
  delegate?: Maybe<Scalars['stagingmumbai_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['stagingmumbai_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['stagingmumbai_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['stagingmumbai_Bytes']>;
  asset?: Maybe<stagingmumbai_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['stagingmumbai_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['stagingmumbai_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['stagingmumbai_Bytes']>;
  reconciledCaller?: Maybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['stagingmumbai_Bytes']>;
};


export type stagingmumbai_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_Router_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_Router_filter>;
};

export type stagingmumbai_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<stagingmumbai_TransferStatus>;
  status_not?: InputMaybe<stagingmumbai_TransferStatus>;
  status_in?: InputMaybe<Array<stagingmumbai_TransferStatus>>;
  status_not_in?: InputMaybe<Array<stagingmumbai_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<stagingmumbai_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  to_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<stagingmumbai_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_DestinationTransfer_filter>>>;
};

export type stagingmumbai_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type stagingmumbai_OrderDirection =
  | 'asc'
  | 'desc';

export type stagingmumbai_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['stagingmumbai_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['stagingmumbai_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['stagingmumbai_Bytes']>;
  root?: Maybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash?: Maybe<Scalars['stagingmumbai_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<stagingmumbai_RootCount>;
};

export type stagingmumbai_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  leaf_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  message_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  message_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  message_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  message_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  message_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  message_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  root_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<stagingmumbai_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_OriginMessage_filter>>>;
};

export type stagingmumbai_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type stagingmumbai_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['stagingmumbai_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<stagingmumbai_TransferStatus>;
  messageHash?: Maybe<Scalars['stagingmumbai_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['stagingmumbai_Bytes']>;
  delegate?: Maybe<Scalars['stagingmumbai_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['stagingmumbai_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['stagingmumbai_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['stagingmumbai_Bytes']>;
  asset?: Maybe<stagingmumbai_Asset>;
  message?: Maybe<stagingmumbai_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash?: Maybe<Scalars['stagingmumbai_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['stagingmumbai_Bytes']>;
};

export type stagingmumbai_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<stagingmumbai_TransferStatus>;
  status_not?: InputMaybe<stagingmumbai_TransferStatus>;
  status_in?: InputMaybe<Array<stagingmumbai_TransferStatus>>;
  status_not_in?: InputMaybe<Array<stagingmumbai_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  to_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<stagingmumbai_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<stagingmumbai_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_OriginTransfer_filter>>>;
};

export type stagingmumbai_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type stagingmumbai_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['stagingmumbai_Bytes']>;
};

export type stagingmumbai_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  relayer_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_Relayer_filter>>>;
};

export type stagingmumbai_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type stagingmumbai_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type stagingmumbai_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_RootCount_filter>>>;
};

export type stagingmumbai_RootCount_orderBy =
  | 'id'
  | 'count';

export type stagingmumbai_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['stagingmumbai_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash?: Maybe<Scalars['stagingmumbai_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type stagingmumbai_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  root_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_RootMessageSent_filter>>>;
};

export type stagingmumbai_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type stagingmumbai_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['stagingmumbai_Bytes']>;
  recipient?: Maybe<Scalars['stagingmumbai_Bytes']>;
  proposedOwner?: Maybe<Scalars['stagingmumbai_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<stagingmumbai_AssetBalance>;
};


export type stagingmumbai_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingmumbai_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<stagingmumbai_OrderDirection>;
  where?: InputMaybe<stagingmumbai_AssetBalance_filter>;
};

export type stagingmumbai_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  owner_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  owner_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  owner_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  owner_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  owner_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  recipient?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  recipient_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<stagingmumbai_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_Router_filter>>>;
};

export type stagingmumbai_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type stagingmumbai_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['stagingmumbai_Bytes']>;
};

export type stagingmumbai_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_Sequencer_filter>>>;
};

export type stagingmumbai_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type stagingmumbai_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['stagingmumbai_Bytes'];
};

export type stagingmumbai_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_not?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_gt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_lt?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_gte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_lte?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['stagingmumbai_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['stagingmumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingmumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingmumbai_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingmumbai_Setting_filter>>>;
};

export type stagingmumbai_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type stagingmumbai_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type stagingmumbai__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['stagingmumbai_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type stagingmumbai__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: stagingmumbai__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type arbitrumone_swap_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type arbitrumone_swap_Block_height = {
  hash?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

/** Defines the order direction, either ascending or descending */
export type arbitrumone_swap_OrderDirection =
  | 'asc'
  | 'desc';

export type arbitrumone_swap_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['arbitrumone_swap_Bytes'];
};

export type arbitrumone_swap_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  asset_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  asset_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  asset_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  asset_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  asset_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_PooledToken_filter>>>;
};

export type arbitrumone_swap_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type arbitrumone_swap_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key: Scalars['arbitrumone_swap_Bytes'];
  canonicalId?: Maybe<Scalars['arbitrumone_swap_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['arbitrumone_swap_Bytes']>;
  lpToken?: Maybe<Scalars['arbitrumone_swap_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<Scalars['arbitrumone_swap_Bytes']>;
  tokenPrecisionMultipliers: Array<Scalars['BigInt']>;
  balances: Array<Scalars['BigInt']>;
  adminFees: Array<Scalars['BigInt']>;
  virtualPrice: Scalars['BigInt'];
  invariant: Scalars['BigInt'];
  lpTokenSupply: Scalars['BigInt'];
  events?: Maybe<Array<arbitrumone_swap_StableSwapEvent>>;
  exchanges?: Maybe<Array<arbitrumone_swap_StableSwapExchange>>;
  hourlyVolumes?: Maybe<Array<arbitrumone_swap_SwapHourlyVolume>>;
  dailyVolumes?: Maybe<Array<arbitrumone_swap_SwapDailyVolume>>;
  weeklyVolumes?: Maybe<Array<arbitrumone_swap_SwapWeeklyVolume>>;
};


export type arbitrumone_swap_StableSwapeventsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapEvent_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapEvent_filter>;
};


export type arbitrumone_swap_StableSwapexchangesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_StableSwapExchange_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_StableSwapExchange_filter>;
};


export type arbitrumone_swap_StableSwaphourlyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapHourlyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapHourlyVolume_filter>;
};


export type arbitrumone_swap_StableSwapdailyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapDailyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapDailyVolume_filter>;
};


export type arbitrumone_swap_StableSwapweeklyVolumesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_swap_SwapWeeklyVolume_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_swap_OrderDirection>;
  where?: InputMaybe<arbitrumone_swap_SwapWeeklyVolume_filter>;
};

export type arbitrumone_swap_StableSwapAddLiquidityEvent = arbitrumone_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_swap_StableSwap;
  provider: Scalars['arbitrumone_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumone_swap_Bytes'];
};

export type arbitrumone_swap_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwapAddLiquidityEvent_filter>>>;
};

export type arbitrumone_swap_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumone_swap_StableSwapEvent = {
  id: Scalars['ID'];
  stableSwap: arbitrumone_swap_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumone_swap_Bytes'];
};

export type arbitrumone_swap_StableSwapEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwapEvent_filter>>>;
};

export type arbitrumone_swap_StableSwapEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumone_swap_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: arbitrumone_swap_StableSwap;
  buyer: Scalars['arbitrumone_swap_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumone_swap_Bytes'];
};

export type arbitrumone_swap_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  buyer_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwapExchange_filter>>>;
};

export type arbitrumone_swap_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumone_swap_StableSwapRemoveLiquidityEvent = arbitrumone_swap_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_swap_StableSwap;
  provider: Scalars['arbitrumone_swap_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  balances: Array<Scalars['BigInt']>;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['arbitrumone_swap_Bytes'];
};

export type arbitrumone_swap_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  provider?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type arbitrumone_swap_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'balances'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type arbitrumone_swap_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  key_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  key_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  key_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  key_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  key_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  key_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  canonicalId?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  lpToken?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['arbitrumone_swap_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['arbitrumone_swap_Bytes']>>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_not?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lt?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_gte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_lte?: InputMaybe<Scalars['BigInt']>;
  virtualPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  virtualPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  events_?: InputMaybe<arbitrumone_swap_StableSwapEvent_filter>;
  exchanges_?: InputMaybe<arbitrumone_swap_StableSwapExchange_filter>;
  hourlyVolumes_?: InputMaybe<arbitrumone_swap_SwapHourlyVolume_filter>;
  dailyVolumes_?: InputMaybe<arbitrumone_swap_SwapDailyVolume_filter>;
  weeklyVolumes_?: InputMaybe<arbitrumone_swap_SwapWeeklyVolume_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_StableSwap_filter>>>;
};

export type arbitrumone_swap_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'virtualPrice'
  | 'invariant'
  | 'lpTokenSupply'
  | 'events'
  | 'exchanges'
  | 'hourlyVolumes'
  | 'dailyVolumes'
  | 'weeklyVolumes';

export type arbitrumone_swap_SwapDailyVolume = arbitrumone_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumone_swap_BigDecimal'];
};

export type arbitrumone_swap_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumone_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SwapDailyVolume_filter>>>;
};

export type arbitrumone_swap_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumone_swap_SwapHourlyVolume = arbitrumone_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumone_swap_BigDecimal'];
};

export type arbitrumone_swap_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumone_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SwapHourlyVolume_filter>>>;
};

export type arbitrumone_swap_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumone_swap_SwapTradeVolume = {
  stableSwap: arbitrumone_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumone_swap_BigDecimal'];
};

export type arbitrumone_swap_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumone_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SwapTradeVolume_filter>>>;
};

export type arbitrumone_swap_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumone_swap_SwapWeeklyVolume = arbitrumone_swap_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: arbitrumone_swap_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['arbitrumone_swap_BigDecimal'];
};

export type arbitrumone_swap_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<arbitrumone_swap_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['arbitrumone_swap_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['arbitrumone_swap_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['arbitrumone_swap_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SwapWeeklyVolume_filter>>>;
};

export type arbitrumone_swap_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type arbitrumone_swap_SystemInfo = {
  id: Scalars['ID'];
  exchangeCount: Scalars['BigInt'];
  swapCount: Scalars['BigInt'];
};

export type arbitrumone_swap_SystemInfo_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  exchangeCount?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_not?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lt?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_gte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_lte?: InputMaybe<Scalars['BigInt']>;
  exchangeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  exchangeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount?: InputMaybe<Scalars['BigInt']>;
  swapCount_not?: InputMaybe<Scalars['BigInt']>;
  swapCount_gt?: InputMaybe<Scalars['BigInt']>;
  swapCount_lt?: InputMaybe<Scalars['BigInt']>;
  swapCount_gte?: InputMaybe<Scalars['BigInt']>;
  swapCount_lte?: InputMaybe<Scalars['BigInt']>;
  swapCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_swap_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SystemInfo_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_swap_SystemInfo_filter>>>;
};

export type arbitrumone_swap_SystemInfo_orderBy =
  | 'id'
  | 'exchangeCount'
  | 'swapCount';

export type arbitrumone_swap__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['arbitrumone_swap_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type arbitrumone_swap__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: arbitrumone_swap__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type local1338_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['local1338_Bytes']>;
  local: Scalars['local1338_Bytes'];
  adoptedAsset: Scalars['local1338_Bytes'];
  canonicalId: Scalars['local1338_Bytes'];
  canonicalDomain: Scalars['BigInt'];
  blockNumber: Scalars['BigInt'];
};

export type local1338_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: local1338_Router;
  asset: local1338_Asset;
};

export type local1338_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<local1338_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<local1338_Asset_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1338_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1338_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1338_AssetBalance_filter>>>;
};

export type local1338_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset';

export type local1338_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['local1338_Bytes']>;
  key_not?: InputMaybe<Scalars['local1338_Bytes']>;
  key_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  key_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  key_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  key_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  key_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  local?: InputMaybe<Scalars['local1338_Bytes']>;
  local_not?: InputMaybe<Scalars['local1338_Bytes']>;
  local_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  local_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  local_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  local_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  local_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  local_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  local_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  local_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  adoptedAsset?: InputMaybe<Scalars['local1338_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['local1338_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1338_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1338_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1338_Asset_filter>>>;
};

export type local1338_Asset_orderBy =
  | 'id'
  | 'key'
  | 'local'
  | 'adoptedAsset'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'blockNumber';

export type local1338_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type local1338_Block_height = {
  hash?: InputMaybe<Scalars['local1338_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type local1338_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['local1338_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['local1338_Bytes']>;
  callData?: Maybe<Scalars['local1338_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  agent?: Maybe<Scalars['local1338_Bytes']>;
  recovery?: Maybe<Scalars['local1338_Bytes']>;
  forceSlow?: Maybe<Scalars['Boolean']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callback?: Maybe<Scalars['local1338_Bytes']>;
  callbackFee?: Maybe<Scalars['BigInt']>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  destinationMinOut?: Maybe<Scalars['BigInt']>;
  status?: Maybe<local1338_TransferStatus>;
  routers?: Maybe<Array<local1338_Router>>;
  originSender?: Maybe<Scalars['local1338_Bytes']>;
  transactingAsset?: Maybe<Scalars['local1338_Bytes']>;
  transactingAmount?: Maybe<Scalars['BigInt']>;
  localAsset?: Maybe<Scalars['local1338_Bytes']>;
  localAmount?: Maybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['local1338_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['local1338_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledCaller?: Maybe<Scalars['local1338_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['local1338_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
};


export type local1338_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_Router_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_Router_filter>;
};

export type local1338_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_not?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['local1338_Bytes']>;
  to_not?: InputMaybe<Scalars['local1338_Bytes']>;
  to_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  to_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  to_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  to_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  to_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  callData?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_not?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  agent?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_not?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  agent_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  agent_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_not?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  recovery_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  recovery_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  forceSlow?: InputMaybe<Scalars['Boolean']>;
  forceSlow_not?: InputMaybe<Scalars['Boolean']>;
  forceSlow_in?: InputMaybe<Array<Scalars['Boolean']>>;
  forceSlow_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callback?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_not?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  callback_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  callback_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  callbackFee?: InputMaybe<Scalars['BigInt']>;
  callbackFee_not?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  callbackFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_not?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<local1338_TransferStatus>;
  status_not?: InputMaybe<local1338_TransferStatus>;
  status_in?: InputMaybe<Array<local1338_TransferStatus>>;
  status_not_in?: InputMaybe<Array<local1338_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<local1338_Router_filter>;
  originSender?: InputMaybe<Scalars['local1338_Bytes']>;
  originSender_not?: InputMaybe<Scalars['local1338_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_not?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transactingAsset_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transactingAsset_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAmount?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_not?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  localAsset?: InputMaybe<Scalars['local1338_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['local1338_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  localAmount?: InputMaybe<Scalars['BigInt']>;
  localAmount_not?: InputMaybe<Scalars['BigInt']>;
  localAmount_gt?: InputMaybe<Scalars['BigInt']>;
  localAmount_lt?: InputMaybe<Scalars['BigInt']>;
  localAmount_gte?: InputMaybe<Scalars['BigInt']>;
  localAmount_lte?: InputMaybe<Scalars['BigInt']>;
  localAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  localAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sponsorVaultRelayerFee?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_not?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  sponsorVaultRelayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sponsorVaultRelayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['local1338_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['local1338_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['local1338_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['local1338_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledCaller?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1338_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1338_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1338_DestinationTransfer_filter>>>;
};

export type local1338_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'to'
  | 'callData'
  | 'originDomain'
  | 'destinationDomain'
  | 'agent'
  | 'recovery'
  | 'forceSlow'
  | 'receiveLocal'
  | 'callback'
  | 'callbackFee'
  | 'relayerFee'
  | 'destinationMinOut'
  | 'status'
  | 'routers'
  | 'originSender'
  | 'transactingAsset'
  | 'transactingAmount'
  | 'localAsset'
  | 'localAmount'
  | 'sponsorVaultRelayerFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber';

/** Defines the order direction, either ascending or descending */
export type local1338_OrderDirection =
  | 'asc'
  | 'desc';

export type local1338_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['local1338_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['local1338_Bytes']>;
  callData?: Maybe<Scalars['local1338_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  agent?: Maybe<Scalars['local1338_Bytes']>;
  recovery?: Maybe<Scalars['local1338_Bytes']>;
  forceSlow?: Maybe<Scalars['Boolean']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callback?: Maybe<Scalars['local1338_Bytes']>;
  callbackFee?: Maybe<Scalars['BigInt']>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  destinationMinOut?: Maybe<Scalars['BigInt']>;
  status?: Maybe<local1338_TransferStatus>;
  originMinOut?: Maybe<Scalars['BigInt']>;
  transactingAsset?: Maybe<Scalars['local1338_Bytes']>;
  transactingAmount?: Maybe<Scalars['BigInt']>;
  bridgedAsset?: Maybe<Scalars['local1338_Bytes']>;
  bridgedAmount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['local1338_Bytes']>;
  transactionHash?: Maybe<Scalars['local1338_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type local1338_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_not?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['local1338_Bytes']>;
  to_not?: InputMaybe<Scalars['local1338_Bytes']>;
  to_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  to_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  to_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  to_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  to_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  callData?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_not?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  agent?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_not?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  agent_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  agent_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  agent_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_not?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  recovery_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  recovery_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  recovery_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  forceSlow?: InputMaybe<Scalars['Boolean']>;
  forceSlow_not?: InputMaybe<Scalars['Boolean']>;
  forceSlow_in?: InputMaybe<Array<Scalars['Boolean']>>;
  forceSlow_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callback?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_not?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  callback_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  callback_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  callback_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  callbackFee?: InputMaybe<Scalars['BigInt']>;
  callbackFee_not?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lt?: InputMaybe<Scalars['BigInt']>;
  callbackFee_gte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_lte?: InputMaybe<Scalars['BigInt']>;
  callbackFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  callbackFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_not?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  destinationMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<local1338_TransferStatus>;
  status_not?: InputMaybe<local1338_TransferStatus>;
  status_in?: InputMaybe<Array<local1338_TransferStatus>>;
  status_not_in?: InputMaybe<Array<local1338_TransferStatus>>;
  originMinOut?: InputMaybe<Scalars['BigInt']>;
  originMinOut_not?: InputMaybe<Scalars['BigInt']>;
  originMinOut_gt?: InputMaybe<Scalars['BigInt']>;
  originMinOut_lt?: InputMaybe<Scalars['BigInt']>;
  originMinOut_gte?: InputMaybe<Scalars['BigInt']>;
  originMinOut_lte?: InputMaybe<Scalars['BigInt']>;
  originMinOut_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originMinOut_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAsset?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_not?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transactingAsset_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transactingAsset_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAsset_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  transactingAmount?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_not?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lt?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_gte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_lte?: InputMaybe<Scalars['BigInt']>;
  transactingAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transactingAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAsset?: InputMaybe<Scalars['local1338_Bytes']>;
  bridgedAsset_not?: InputMaybe<Scalars['local1338_Bytes']>;
  bridgedAsset_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  bridgedAsset_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  bridgedAsset_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  bridgedAsset_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  bridgedAsset_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  bridgedAsset_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  bridgedAsset_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  bridgedAsset_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  bridgedAmount?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_not?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  transactionHash?: InputMaybe<Scalars['local1338_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['local1338_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1338_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1338_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1338_OriginTransfer_filter>>>;
};

export type local1338_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'to'
  | 'callData'
  | 'originDomain'
  | 'destinationDomain'
  | 'agent'
  | 'recovery'
  | 'forceSlow'
  | 'receiveLocal'
  | 'callback'
  | 'callbackFee'
  | 'relayerFee'
  | 'destinationMinOut'
  | 'status'
  | 'originMinOut'
  | 'transactingAsset'
  | 'transactingAmount'
  | 'bridgedAsset'
  | 'bridgedAmount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type local1338_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['local1338_Bytes']>;
};

export type local1338_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['local1338_Bytes']>;
  relayer_not?: InputMaybe<Scalars['local1338_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1338_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1338_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1338_Relayer_filter>>>;
};

export type local1338_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type local1338_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['local1338_Bytes']>;
  recipient?: Maybe<Scalars['local1338_Bytes']>;
  proposedOwner?: Maybe<Scalars['local1338_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<local1338_AssetBalance>;
};


export type local1338_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<local1338_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<local1338_OrderDirection>;
  where?: InputMaybe<local1338_AssetBalance_filter>;
};

export type local1338_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['local1338_Bytes']>;
  owner_not?: InputMaybe<Scalars['local1338_Bytes']>;
  owner_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  owner_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  owner_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  owner_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  recipient?: InputMaybe<Scalars['local1338_Bytes']>;
  recipient_not?: InputMaybe<Scalars['local1338_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['local1338_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['local1338_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<local1338_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1338_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1338_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1338_Router_filter>>>;
};

export type local1338_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type local1338_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['local1338_Bytes'];
};

export type local1338_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_not?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1338_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1338_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1338_Setting_filter>>>;
};

export type local1338_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type local1338_SponsorVault = {
  id: Scalars['ID'];
  sponsorVault: Scalars['local1338_Bytes'];
};

export type local1338_SponsorVault_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  sponsorVault?: InputMaybe<Scalars['local1338_Bytes']>;
  sponsorVault_not?: InputMaybe<Scalars['local1338_Bytes']>;
  sponsorVault_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  sponsorVault_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  sponsorVault_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  sponsorVault_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  sponsorVault_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  sponsorVault_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  sponsorVault_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  sponsorVault_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1338_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1338_SponsorVault_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1338_SponsorVault_filter>>>;
};

export type local1338_SponsorVault_orderBy =
  | 'id'
  | 'sponsorVault';

export type local1338_StableSwap = {
  id: Scalars['ID'];
  canonicalId: Scalars['local1338_Bytes'];
  domain?: Maybe<Scalars['BigInt']>;
  swapPool: Scalars['local1338_Bytes'];
};

export type local1338_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  canonicalId?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['local1338_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['local1338_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['local1338_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['local1338_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['local1338_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['local1338_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['local1338_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['local1338_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<local1338_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<local1338_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<local1338_StableSwap_filter>>>;
};

export type local1338_StableSwap_orderBy =
  | 'id'
  | 'canonicalId'
  | 'domain'
  | 'swapPool';

export type local1338_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type local1338__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['local1338_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type local1338__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: local1338__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type goerli_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['goerli_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type goerli_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['goerli_Bytes']>;
  root_not?: InputMaybe<Scalars['goerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_AggregateRoot_filter>>>;
};

export type goerli_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type goerli_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['goerli_Bytes']>;
  canonicalId?: Maybe<Scalars['goerli_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['goerli_Bytes']>;
  localAsset?: Maybe<Scalars['goerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<goerli_AssetStatus>;
};

export type goerli_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: goerli_Router;
  asset: goerli_Asset;
  feesEarned: Scalars['BigInt'];
};

export type goerli_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<goerli_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<goerli_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_AssetBalance_filter>>>;
};

export type goerli_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type goerli_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type goerli_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_AssetStatus_filter>>>;
};

export type goerli_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type goerli_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['goerli_Bytes']>;
  key_not?: InputMaybe<Scalars['goerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['goerli_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['goerli_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  localAsset?: InputMaybe<Scalars['goerli_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['goerli_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<goerli_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_Asset_filter>>>;
};

export type goerli_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type goerli_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['goerli_Bytes']>;
  rootManager?: Maybe<Scalars['goerli_Bytes']>;
  mirrorConnector?: Maybe<Scalars['goerli_Bytes']>;
};

export type goerli_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_ConnectorMeta_filter>>>;
};

export type goerli_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type goerli_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['goerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<goerli_TransferStatus>;
  routers?: Maybe<Array<goerli_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['goerli_Bytes']>;
  delegate?: Maybe<Scalars['goerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['goerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['goerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['goerli_Bytes']>;
  asset?: Maybe<goerli_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['goerli_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['goerli_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['goerli_Bytes']>;
  reconciledCaller?: Maybe<Scalars['goerli_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['goerli_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['goerli_Bytes']>;
};


export type goerli_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_Router_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_Router_filter>;
};

export type goerli_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<goerli_TransferStatus>;
  status_not?: InputMaybe<goerli_TransferStatus>;
  status_in?: InputMaybe<Array<goerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<goerli_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<goerli_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['goerli_Bytes']>;
  to_not?: InputMaybe<Scalars['goerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<goerli_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['goerli_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['goerli_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_DestinationTransfer_filter>>>;
};

export type goerli_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

export type goerli_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['goerli_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['goerli_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['goerli_Bytes']>;
  root?: Maybe<Scalars['goerli_Bytes']>;
  transactionHash?: Maybe<Scalars['goerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<goerli_RootCount>;
};

export type goerli_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['goerli_Bytes']>;
  leaf_not?: InputMaybe<Scalars['goerli_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['goerli_Bytes']>;
  message_not?: InputMaybe<Scalars['goerli_Bytes']>;
  message_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  message_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  message_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  message_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  message_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  root?: InputMaybe<Scalars['goerli_Bytes']>;
  root_not?: InputMaybe<Scalars['goerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<goerli_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_OriginMessage_filter>>>;
};

export type goerli_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type goerli_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['goerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<goerli_TransferStatus>;
  messageHash?: Maybe<Scalars['goerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['goerli_Bytes']>;
  delegate?: Maybe<Scalars['goerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['goerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['goerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['goerli_Bytes']>;
  asset?: Maybe<goerli_Asset>;
  message?: Maybe<goerli_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['goerli_Bytes']>;
  transactionHash?: Maybe<Scalars['goerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['goerli_Bytes']>;
};

export type goerli_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<goerli_TransferStatus>;
  status_not?: InputMaybe<goerli_TransferStatus>;
  status_in?: InputMaybe<Array<goerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<goerli_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['goerli_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['goerli_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['goerli_Bytes']>;
  to_not?: InputMaybe<Scalars['goerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<goerli_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<goerli_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['goerli_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['goerli_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_OriginTransfer_filter>>>;
};

export type goerli_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type goerli_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['goerli_Bytes']>;
};

export type goerli_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['goerli_Bytes']>;
  relayer_not?: InputMaybe<Scalars['goerli_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_Relayer_filter>>>;
};

export type goerli_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type goerli_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type goerli_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_RootCount_filter>>>;
};

export type goerli_RootCount_orderBy =
  | 'id'
  | 'count';

export type goerli_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['goerli_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['goerli_Bytes']>;
  transactionHash?: Maybe<Scalars['goerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type goerli_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['goerli_Bytes']>;
  root_not?: InputMaybe<Scalars['goerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_RootMessageSent_filter>>>;
};

export type goerli_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type goerli_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['goerli_Bytes']>;
  recipient?: Maybe<Scalars['goerli_Bytes']>;
  proposedOwner?: Maybe<Scalars['goerli_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<goerli_AssetBalance>;
};


export type goerli_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<goerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<goerli_OrderDirection>;
  where?: InputMaybe<goerli_AssetBalance_filter>;
};

export type goerli_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['goerli_Bytes']>;
  owner_not?: InputMaybe<Scalars['goerli_Bytes']>;
  owner_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  owner_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  owner_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  owner_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  recipient?: InputMaybe<Scalars['goerli_Bytes']>;
  recipient_not?: InputMaybe<Scalars['goerli_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['goerli_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['goerli_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<goerli_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_Router_filter>>>;
};

export type goerli_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type goerli_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['goerli_Bytes']>;
};

export type goerli_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['goerli_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['goerli_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_Sequencer_filter>>>;
};

export type goerli_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type goerli_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['goerli_Bytes'];
};

export type goerli_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['goerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['goerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<goerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<goerli_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<goerli_Setting_filter>>>;
};

export type goerli_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type goerli_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type stagingarbitrumgoerli_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['stagingarbitrumgoerli_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type stagingarbitrumgoerli_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_AggregateRoot_filter>>>;
};

export type stagingarbitrumgoerli_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type stagingarbitrumgoerli_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  localAsset?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<stagingarbitrumgoerli_AssetStatus>;
};

export type stagingarbitrumgoerli_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: stagingarbitrumgoerli_Router;
  asset: stagingarbitrumgoerli_Asset;
  feesEarned: Scalars['BigInt'];
};

export type stagingarbitrumgoerli_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<stagingarbitrumgoerli_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<stagingarbitrumgoerli_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_AssetBalance_filter>>>;
};

export type stagingarbitrumgoerli_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type stagingarbitrumgoerli_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type stagingarbitrumgoerli_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_AssetStatus_filter>>>;
};

export type stagingarbitrumgoerli_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type stagingarbitrumgoerli_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  localAsset?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<stagingarbitrumgoerli_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Asset_filter>>>;
};

export type stagingarbitrumgoerli_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type stagingarbitrumgoerli_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type stagingarbitrumgoerli_Block_height = {
  hash?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type stagingarbitrumgoerli_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  rootManager?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  mirrorConnector?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
};

export type stagingarbitrumgoerli_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_ConnectorMeta_filter>>>;
};

export type stagingarbitrumgoerli_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type stagingarbitrumgoerli_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<stagingarbitrumgoerli_TransferStatus>;
  routers?: Maybe<Array<stagingarbitrumgoerli_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset?: Maybe<stagingarbitrumgoerli_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledCaller?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
};


export type stagingarbitrumgoerli_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_Router_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_Router_filter>;
};

export type stagingarbitrumgoerli_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<stagingarbitrumgoerli_TransferStatus>;
  status_not?: InputMaybe<stagingarbitrumgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<stagingarbitrumgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<stagingarbitrumgoerli_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<stagingarbitrumgoerli_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<stagingarbitrumgoerli_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_DestinationTransfer_filter>>>;
};

export type stagingarbitrumgoerli_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type stagingarbitrumgoerli_OrderDirection =
  | 'asc'
  | 'desc';

export type stagingarbitrumgoerli_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<stagingarbitrumgoerli_RootCount>;
};

export type stagingarbitrumgoerli_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  leaf_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  message_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  message_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  message_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  message_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  message_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  message_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<stagingarbitrumgoerli_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_OriginMessage_filter>>>;
};

export type stagingarbitrumgoerli_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type stagingarbitrumgoerli_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<stagingarbitrumgoerli_TransferStatus>;
  messageHash?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset?: Maybe<stagingarbitrumgoerli_Asset>;
  message?: Maybe<stagingarbitrumgoerli_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
};

export type stagingarbitrumgoerli_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<stagingarbitrumgoerli_TransferStatus>;
  status_not?: InputMaybe<stagingarbitrumgoerli_TransferStatus>;
  status_in?: InputMaybe<Array<stagingarbitrumgoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<stagingarbitrumgoerli_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<stagingarbitrumgoerli_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<stagingarbitrumgoerli_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_OriginTransfer_filter>>>;
};

export type stagingarbitrumgoerli_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type stagingarbitrumgoerli_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
};

export type stagingarbitrumgoerli_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  relayer_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Relayer_filter>>>;
};

export type stagingarbitrumgoerli_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type stagingarbitrumgoerli_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type stagingarbitrumgoerli_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_RootCount_filter>>>;
};

export type stagingarbitrumgoerli_RootCount_orderBy =
  | 'id'
  | 'count';

export type stagingarbitrumgoerli_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type stagingarbitrumgoerli_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_RootMessageSent_filter>>>;
};

export type stagingarbitrumgoerli_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type stagingarbitrumgoerli_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  recipient?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedOwner?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<stagingarbitrumgoerli_AssetBalance>;
};


export type stagingarbitrumgoerli_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<stagingarbitrumgoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<stagingarbitrumgoerli_OrderDirection>;
  where?: InputMaybe<stagingarbitrumgoerli_AssetBalance_filter>;
};

export type stagingarbitrumgoerli_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  owner_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  owner_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  owner_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  owner_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  owner_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  recipient?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  recipient_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<stagingarbitrumgoerli_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Router_filter>>>;
};

export type stagingarbitrumgoerli_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type stagingarbitrumgoerli_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
};

export type stagingarbitrumgoerli_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Sequencer_filter>>>;
};

export type stagingarbitrumgoerli_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type stagingarbitrumgoerli_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['stagingarbitrumgoerli_Bytes'];
};

export type stagingarbitrumgoerli_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['stagingarbitrumgoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<stagingarbitrumgoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<stagingarbitrumgoerli_Setting_filter>>>;
};

export type stagingarbitrumgoerli_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type stagingarbitrumgoerli_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type stagingarbitrumgoerli__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['stagingarbitrumgoerli_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type stagingarbitrumgoerli__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: stagingarbitrumgoerli__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type mumbai_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['mumbai_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type mumbai_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  root_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_AggregateRoot_filter>>>;
};

export type mumbai_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type mumbai_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['mumbai_Bytes']>;
  canonicalId?: Maybe<Scalars['mumbai_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['mumbai_Bytes']>;
  localAsset?: Maybe<Scalars['mumbai_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<mumbai_AssetStatus>;
};

export type mumbai_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: mumbai_Router;
  asset: mumbai_Asset;
  feesEarned: Scalars['BigInt'];
};

export type mumbai_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<mumbai_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<mumbai_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_AssetBalance_filter>>>;
};

export type mumbai_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type mumbai_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type mumbai_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_AssetStatus_filter>>>;
};

export type mumbai_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type mumbai_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  key_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['mumbai_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  localAsset?: InputMaybe<Scalars['mumbai_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<mumbai_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_Asset_filter>>>;
};

export type mumbai_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type mumbai_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type mumbai_Block_height = {
  hash?: InputMaybe<Scalars['mumbai_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type mumbai_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['mumbai_Bytes']>;
  rootManager?: Maybe<Scalars['mumbai_Bytes']>;
  mirrorConnector?: Maybe<Scalars['mumbai_Bytes']>;
};

export type mumbai_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['mumbai_Bytes']>;
  amb_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  amb_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  amb_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  amb_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  amb_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  rootManager?: InputMaybe<Scalars['mumbai_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['mumbai_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_ConnectorMeta_filter>>>;
};

export type mumbai_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type mumbai_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['mumbai_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<mumbai_TransferStatus>;
  routers?: Maybe<Array<mumbai_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['mumbai_Bytes']>;
  delegate?: Maybe<Scalars['mumbai_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['mumbai_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['mumbai_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['mumbai_Bytes']>;
  asset?: Maybe<mumbai_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['mumbai_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['mumbai_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['mumbai_Bytes']>;
  reconciledCaller?: Maybe<Scalars['mumbai_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['mumbai_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['mumbai_Bytes']>;
};


export type mumbai_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_Router_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_Router_filter>;
};

export type mumbai_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<mumbai_TransferStatus>;
  status_not?: InputMaybe<mumbai_TransferStatus>;
  status_in?: InputMaybe<Array<mumbai_TransferStatus>>;
  status_not_in?: InputMaybe<Array<mumbai_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<mumbai_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  to_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<mumbai_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_DestinationTransfer_filter>>>;
};

export type mumbai_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type mumbai_OrderDirection =
  | 'asc'
  | 'desc';

export type mumbai_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['mumbai_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['mumbai_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['mumbai_Bytes']>;
  root?: Maybe<Scalars['mumbai_Bytes']>;
  transactionHash?: Maybe<Scalars['mumbai_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<mumbai_RootCount>;
};

export type mumbai_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['mumbai_Bytes']>;
  leaf_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['mumbai_Bytes']>;
  message_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  message_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  message_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  message_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  message_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  message_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  root?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  root_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<mumbai_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_OriginMessage_filter>>>;
};

export type mumbai_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type mumbai_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['mumbai_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<mumbai_TransferStatus>;
  messageHash?: Maybe<Scalars['mumbai_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['mumbai_Bytes']>;
  delegate?: Maybe<Scalars['mumbai_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['mumbai_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['mumbai_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['mumbai_Bytes']>;
  asset?: Maybe<mumbai_Asset>;
  message?: Maybe<mumbai_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['mumbai_Bytes']>;
  transactionHash?: Maybe<Scalars['mumbai_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['mumbai_Bytes']>;
};

export type mumbai_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<mumbai_TransferStatus>;
  status_not?: InputMaybe<mumbai_TransferStatus>;
  status_in?: InputMaybe<Array<mumbai_TransferStatus>>;
  status_not_in?: InputMaybe<Array<mumbai_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['mumbai_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  to_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<mumbai_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<mumbai_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['mumbai_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_OriginTransfer_filter>>>;
};

export type mumbai_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type mumbai_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['mumbai_Bytes']>;
};

export type mumbai_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['mumbai_Bytes']>;
  relayer_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_Relayer_filter>>>;
};

export type mumbai_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type mumbai_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type mumbai_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_RootCount_filter>>>;
};

export type mumbai_RootCount_orderBy =
  | 'id'
  | 'count';

export type mumbai_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['mumbai_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['mumbai_Bytes']>;
  transactionHash?: Maybe<Scalars['mumbai_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type mumbai_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  root_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_RootMessageSent_filter>>>;
};

export type mumbai_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type mumbai_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['mumbai_Bytes']>;
  recipient?: Maybe<Scalars['mumbai_Bytes']>;
  proposedOwner?: Maybe<Scalars['mumbai_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<mumbai_AssetBalance>;
};


export type mumbai_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mumbai_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<mumbai_OrderDirection>;
  where?: InputMaybe<mumbai_AssetBalance_filter>;
};

export type mumbai_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['mumbai_Bytes']>;
  owner_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  owner_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  owner_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  owner_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  owner_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  recipient?: InputMaybe<Scalars['mumbai_Bytes']>;
  recipient_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['mumbai_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<mumbai_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_Router_filter>>>;
};

export type mumbai_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type mumbai_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['mumbai_Bytes']>;
};

export type mumbai_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['mumbai_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_Sequencer_filter>>>;
};

export type mumbai_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type mumbai_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['mumbai_Bytes'];
};

export type mumbai_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_not?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_gt?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_lt?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_gte?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_lte?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['mumbai_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['mumbai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mumbai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mumbai_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mumbai_Setting_filter>>>;
};

export type mumbai_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type mumbai_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type mumbai__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['mumbai_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type mumbai__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: mumbai__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type bnb_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['bnb_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type bnb_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['bnb_Bytes']>;
  root_not?: InputMaybe<Scalars['bnb_Bytes']>;
  root_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  root_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  root_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  root_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  root_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_AggregateRoot_filter>>>;
};

export type bnb_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type bnb_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['bnb_Bytes']>;
  canonicalId?: Maybe<Scalars['bnb_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['bnb_Bytes']>;
  localAsset?: Maybe<Scalars['bnb_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<bnb_AssetStatus>;
};

export type bnb_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: bnb_Router;
  asset: bnb_Asset;
  feesEarned: Scalars['BigInt'];
};

export type bnb_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<bnb_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<bnb_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_AssetBalance_filter>>>;
};

export type bnb_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type bnb_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type bnb_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_AssetStatus_filter>>>;
};

export type bnb_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type bnb_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['bnb_Bytes']>;
  key_not?: InputMaybe<Scalars['bnb_Bytes']>;
  key_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  key_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  key_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  key_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  key_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['bnb_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['bnb_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  localAsset?: InputMaybe<Scalars['bnb_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['bnb_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<bnb_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_Asset_filter>>>;
};

export type bnb_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type bnb_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type bnb_Block_height = {
  hash?: InputMaybe<Scalars['bnb_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type bnb_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['bnb_Bytes']>;
  rootManager?: Maybe<Scalars['bnb_Bytes']>;
  mirrorConnector?: Maybe<Scalars['bnb_Bytes']>;
};

export type bnb_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['bnb_Bytes']>;
  amb_not?: InputMaybe<Scalars['bnb_Bytes']>;
  amb_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  amb_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  amb_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  amb_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  rootManager?: InputMaybe<Scalars['bnb_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['bnb_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['bnb_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['bnb_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_ConnectorMeta_filter>>>;
};

export type bnb_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type bnb_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['bnb_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<bnb_TransferStatus>;
  routers?: Maybe<Array<bnb_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['bnb_Bytes']>;
  delegate?: Maybe<Scalars['bnb_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['bnb_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['bnb_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['bnb_Bytes']>;
  asset?: Maybe<bnb_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['bnb_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['bnb_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['bnb_Bytes']>;
  reconciledCaller?: Maybe<Scalars['bnb_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['bnb_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['bnb_Bytes']>;
};


export type bnb_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_Router_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_Router_filter>;
};

export type bnb_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<bnb_TransferStatus>;
  status_not?: InputMaybe<bnb_TransferStatus>;
  status_in?: InputMaybe<Array<bnb_TransferStatus>>;
  status_not_in?: InputMaybe<Array<bnb_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<bnb_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['bnb_Bytes']>;
  to_not?: InputMaybe<Scalars['bnb_Bytes']>;
  to_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  to_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  to_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  to_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  to_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_not?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_not?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_not?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<bnb_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['bnb_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['bnb_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_DestinationTransfer_filter>>>;
};

export type bnb_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type bnb_OrderDirection =
  | 'asc'
  | 'desc';

export type bnb_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['bnb_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['bnb_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['bnb_Bytes']>;
  root?: Maybe<Scalars['bnb_Bytes']>;
  transactionHash?: Maybe<Scalars['bnb_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<bnb_RootCount>;
};

export type bnb_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['bnb_Bytes']>;
  leaf_not?: InputMaybe<Scalars['bnb_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['bnb_Bytes']>;
  message_not?: InputMaybe<Scalars['bnb_Bytes']>;
  message_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  message_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  message_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  message_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  message_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  root?: InputMaybe<Scalars['bnb_Bytes']>;
  root_not?: InputMaybe<Scalars['bnb_Bytes']>;
  root_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  root_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  root_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  root_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  root_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<bnb_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_OriginMessage_filter>>>;
};

export type bnb_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type bnb_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['bnb_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<bnb_TransferStatus>;
  messageHash?: Maybe<Scalars['bnb_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['bnb_Bytes']>;
  delegate?: Maybe<Scalars['bnb_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['bnb_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['bnb_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['bnb_Bytes']>;
  asset?: Maybe<bnb_Asset>;
  message?: Maybe<bnb_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['bnb_Bytes']>;
  transactionHash?: Maybe<Scalars['bnb_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['bnb_Bytes']>;
};

export type bnb_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<bnb_TransferStatus>;
  status_not?: InputMaybe<bnb_TransferStatus>;
  status_in?: InputMaybe<Array<bnb_TransferStatus>>;
  status_not_in?: InputMaybe<Array<bnb_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['bnb_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['bnb_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['bnb_Bytes']>;
  to_not?: InputMaybe<Scalars['bnb_Bytes']>;
  to_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  to_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  to_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  to_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  to_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_not?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_not?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_not?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<bnb_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<bnb_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_not?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['bnb_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['bnb_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_OriginTransfer_filter>>>;
};

export type bnb_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type bnb_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['bnb_Bytes']>;
};

export type bnb_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['bnb_Bytes']>;
  relayer_not?: InputMaybe<Scalars['bnb_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_Relayer_filter>>>;
};

export type bnb_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type bnb_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type bnb_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_RootCount_filter>>>;
};

export type bnb_RootCount_orderBy =
  | 'id'
  | 'count';

export type bnb_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['bnb_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['bnb_Bytes']>;
  transactionHash?: Maybe<Scalars['bnb_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type bnb_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['bnb_Bytes']>;
  root_not?: InputMaybe<Scalars['bnb_Bytes']>;
  root_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  root_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  root_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  root_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  root_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_not?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_RootMessageSent_filter>>>;
};

export type bnb_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type bnb_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['bnb_Bytes']>;
  recipient?: Maybe<Scalars['bnb_Bytes']>;
  proposedOwner?: Maybe<Scalars['bnb_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<bnb_AssetBalance>;
};


export type bnb_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<bnb_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<bnb_OrderDirection>;
  where?: InputMaybe<bnb_AssetBalance_filter>;
};

export type bnb_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['bnb_Bytes']>;
  owner_not?: InputMaybe<Scalars['bnb_Bytes']>;
  owner_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  owner_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  owner_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  owner_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  recipient?: InputMaybe<Scalars['bnb_Bytes']>;
  recipient_not?: InputMaybe<Scalars['bnb_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['bnb_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['bnb_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<bnb_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_Router_filter>>>;
};

export type bnb_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type bnb_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['bnb_Bytes']>;
};

export type bnb_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['bnb_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['bnb_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_Sequencer_filter>>>;
};

export type bnb_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type bnb_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['bnb_Bytes'];
};

export type bnb_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_not?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_gt?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_lt?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_gte?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_lte?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['bnb_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['bnb_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<bnb_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<bnb_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<bnb_Setting_filter>>>;
};

export type bnb_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type bnb_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type bnb__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['bnb_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type bnb__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: bnb__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type mainnet_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['mainnet_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type mainnet_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  root_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_AggregateRoot_filter>>>;
};

export type mainnet_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type mainnet_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['mainnet_Bytes']>;
  canonicalId?: Maybe<Scalars['mainnet_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['mainnet_Bytes']>;
  localAsset?: Maybe<Scalars['mainnet_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<mainnet_AssetStatus>;
};

export type mainnet_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: mainnet_Router;
  asset: mainnet_Asset;
  feesEarned: Scalars['BigInt'];
};

export type mainnet_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<mainnet_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<mainnet_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_AssetBalance_filter>>>;
};

export type mainnet_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type mainnet_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type mainnet_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_AssetStatus_filter>>>;
};

export type mainnet_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type mainnet_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['mainnet_Bytes']>;
  key_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  key_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  key_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  key_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  key_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  key_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['mainnet_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  localAsset?: InputMaybe<Scalars['mainnet_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<mainnet_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_Asset_filter>>>;
};

export type mainnet_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type mainnet_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['mainnet_Bytes']>;
  rootManager?: Maybe<Scalars['mainnet_Bytes']>;
  mirrorConnector?: Maybe<Scalars['mainnet_Bytes']>;
};

export type mainnet_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_ConnectorMeta_filter>>>;
};

export type mainnet_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type mainnet_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['mainnet_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<mainnet_TransferStatus>;
  routers?: Maybe<Array<mainnet_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['mainnet_Bytes']>;
  delegate?: Maybe<Scalars['mainnet_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['mainnet_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['mainnet_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['mainnet_Bytes']>;
  asset?: Maybe<mainnet_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['mainnet_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['mainnet_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['mainnet_Bytes']>;
  reconciledCaller?: Maybe<Scalars['mainnet_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['mainnet_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['mainnet_Bytes']>;
};


export type mainnet_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_Router_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_Router_filter>;
};

export type mainnet_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<mainnet_TransferStatus>;
  status_not?: InputMaybe<mainnet_TransferStatus>;
  status_in?: InputMaybe<Array<mainnet_TransferStatus>>;
  status_not_in?: InputMaybe<Array<mainnet_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<mainnet_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  to_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<mainnet_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_DestinationTransfer_filter>>>;
};

export type mainnet_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

export type mainnet_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['mainnet_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['mainnet_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['mainnet_Bytes']>;
  root?: Maybe<Scalars['mainnet_Bytes']>;
  transactionHash?: Maybe<Scalars['mainnet_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<mainnet_RootCount>;
};

export type mainnet_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['mainnet_Bytes']>;
  leaf_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['mainnet_Bytes']>;
  message_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  message_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  message_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  message_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  message_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  message_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  root?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  root_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<mainnet_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_OriginMessage_filter>>>;
};

export type mainnet_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type mainnet_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['mainnet_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<mainnet_TransferStatus>;
  messageHash?: Maybe<Scalars['mainnet_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['mainnet_Bytes']>;
  delegate?: Maybe<Scalars['mainnet_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['mainnet_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['mainnet_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['mainnet_Bytes']>;
  asset?: Maybe<mainnet_Asset>;
  message?: Maybe<mainnet_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['mainnet_Bytes']>;
  transactionHash?: Maybe<Scalars['mainnet_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['mainnet_Bytes']>;
};

export type mainnet_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<mainnet_TransferStatus>;
  status_not?: InputMaybe<mainnet_TransferStatus>;
  status_in?: InputMaybe<Array<mainnet_TransferStatus>>;
  status_not_in?: InputMaybe<Array<mainnet_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['mainnet_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  to_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<mainnet_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<mainnet_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['mainnet_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_OriginTransfer_filter>>>;
};

export type mainnet_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type mainnet_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['mainnet_Bytes']>;
};

export type mainnet_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['mainnet_Bytes']>;
  relayer_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_Relayer_filter>>>;
};

export type mainnet_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type mainnet_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type mainnet_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_RootCount_filter>>>;
};

export type mainnet_RootCount_orderBy =
  | 'id'
  | 'count';

export type mainnet_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['mainnet_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['mainnet_Bytes']>;
  transactionHash?: Maybe<Scalars['mainnet_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type mainnet_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  root_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_RootMessageSent_filter>>>;
};

export type mainnet_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type mainnet_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['mainnet_Bytes']>;
  recipient?: Maybe<Scalars['mainnet_Bytes']>;
  proposedOwner?: Maybe<Scalars['mainnet_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<mainnet_AssetBalance>;
};


export type mainnet_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<mainnet_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<mainnet_OrderDirection>;
  where?: InputMaybe<mainnet_AssetBalance_filter>;
};

export type mainnet_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['mainnet_Bytes']>;
  owner_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  owner_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  owner_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  owner_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  owner_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  recipient?: InputMaybe<Scalars['mainnet_Bytes']>;
  recipient_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['mainnet_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<mainnet_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_Router_filter>>>;
};

export type mainnet_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type mainnet_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['mainnet_Bytes']>;
};

export type mainnet_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['mainnet_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_Sequencer_filter>>>;
};

export type mainnet_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type mainnet_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['mainnet_Bytes'];
};

export type mainnet_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_not?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_gt?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_lt?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_gte?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_lte?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['mainnet_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['mainnet_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<mainnet_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<mainnet_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<mainnet_Setting_filter>>>;
};

export type mainnet_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type mainnet_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type polygon_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['polygon_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type polygon_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['polygon_Bytes']>;
  root_not?: InputMaybe<Scalars['polygon_Bytes']>;
  root_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  root_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  root_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  root_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  root_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_AggregateRoot_filter>>>;
};

export type polygon_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type polygon_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['polygon_Bytes']>;
  canonicalId?: Maybe<Scalars['polygon_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['polygon_Bytes']>;
  localAsset?: Maybe<Scalars['polygon_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<polygon_AssetStatus>;
};

export type polygon_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: polygon_Router;
  asset: polygon_Asset;
  feesEarned: Scalars['BigInt'];
};

export type polygon_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<polygon_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<polygon_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_AssetBalance_filter>>>;
};

export type polygon_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type polygon_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type polygon_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_AssetStatus_filter>>>;
};

export type polygon_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type polygon_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['polygon_Bytes']>;
  key_not?: InputMaybe<Scalars['polygon_Bytes']>;
  key_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  key_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  key_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  key_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  key_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['polygon_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['polygon_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  localAsset?: InputMaybe<Scalars['polygon_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['polygon_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<polygon_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_Asset_filter>>>;
};

export type polygon_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type polygon_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type polygon_Block_height = {
  hash?: InputMaybe<Scalars['polygon_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type polygon_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['polygon_Bytes']>;
  rootManager?: Maybe<Scalars['polygon_Bytes']>;
  mirrorConnector?: Maybe<Scalars['polygon_Bytes']>;
};

export type polygon_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['polygon_Bytes']>;
  amb_not?: InputMaybe<Scalars['polygon_Bytes']>;
  amb_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  amb_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  amb_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  amb_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  rootManager?: InputMaybe<Scalars['polygon_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['polygon_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['polygon_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['polygon_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_ConnectorMeta_filter>>>;
};

export type polygon_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type polygon_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['polygon_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<polygon_TransferStatus>;
  routers?: Maybe<Array<polygon_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['polygon_Bytes']>;
  delegate?: Maybe<Scalars['polygon_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['polygon_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['polygon_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['polygon_Bytes']>;
  asset?: Maybe<polygon_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['polygon_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['polygon_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['polygon_Bytes']>;
  reconciledCaller?: Maybe<Scalars['polygon_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['polygon_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['polygon_Bytes']>;
};


export type polygon_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_Router_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_Router_filter>;
};

export type polygon_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<polygon_TransferStatus>;
  status_not?: InputMaybe<polygon_TransferStatus>;
  status_in?: InputMaybe<Array<polygon_TransferStatus>>;
  status_not_in?: InputMaybe<Array<polygon_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<polygon_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['polygon_Bytes']>;
  to_not?: InputMaybe<Scalars['polygon_Bytes']>;
  to_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  to_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  to_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  to_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  to_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_not?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_not?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_not?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<polygon_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['polygon_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['polygon_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_DestinationTransfer_filter>>>;
};

export type polygon_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type polygon_OrderDirection =
  | 'asc'
  | 'desc';

export type polygon_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['polygon_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['polygon_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['polygon_Bytes']>;
  root?: Maybe<Scalars['polygon_Bytes']>;
  transactionHash?: Maybe<Scalars['polygon_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<polygon_RootCount>;
};

export type polygon_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['polygon_Bytes']>;
  leaf_not?: InputMaybe<Scalars['polygon_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['polygon_Bytes']>;
  message_not?: InputMaybe<Scalars['polygon_Bytes']>;
  message_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  message_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  message_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  message_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  message_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  root?: InputMaybe<Scalars['polygon_Bytes']>;
  root_not?: InputMaybe<Scalars['polygon_Bytes']>;
  root_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  root_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  root_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  root_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  root_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<polygon_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_OriginMessage_filter>>>;
};

export type polygon_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type polygon_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['polygon_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<polygon_TransferStatus>;
  messageHash?: Maybe<Scalars['polygon_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['polygon_Bytes']>;
  delegate?: Maybe<Scalars['polygon_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['polygon_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['polygon_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['polygon_Bytes']>;
  asset?: Maybe<polygon_Asset>;
  message?: Maybe<polygon_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['polygon_Bytes']>;
  transactionHash?: Maybe<Scalars['polygon_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['polygon_Bytes']>;
};

export type polygon_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<polygon_TransferStatus>;
  status_not?: InputMaybe<polygon_TransferStatus>;
  status_in?: InputMaybe<Array<polygon_TransferStatus>>;
  status_not_in?: InputMaybe<Array<polygon_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['polygon_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['polygon_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['polygon_Bytes']>;
  to_not?: InputMaybe<Scalars['polygon_Bytes']>;
  to_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  to_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  to_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  to_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  to_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_not?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_not?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_not?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<polygon_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<polygon_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_not?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['polygon_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['polygon_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_OriginTransfer_filter>>>;
};

export type polygon_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type polygon_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['polygon_Bytes']>;
};

export type polygon_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['polygon_Bytes']>;
  relayer_not?: InputMaybe<Scalars['polygon_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_Relayer_filter>>>;
};

export type polygon_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type polygon_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type polygon_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_RootCount_filter>>>;
};

export type polygon_RootCount_orderBy =
  | 'id'
  | 'count';

export type polygon_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['polygon_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['polygon_Bytes']>;
  transactionHash?: Maybe<Scalars['polygon_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type polygon_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['polygon_Bytes']>;
  root_not?: InputMaybe<Scalars['polygon_Bytes']>;
  root_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  root_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  root_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  root_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  root_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_not?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_RootMessageSent_filter>>>;
};

export type polygon_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type polygon_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['polygon_Bytes']>;
  recipient?: Maybe<Scalars['polygon_Bytes']>;
  proposedOwner?: Maybe<Scalars['polygon_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<polygon_AssetBalance>;
};


export type polygon_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<polygon_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<polygon_OrderDirection>;
  where?: InputMaybe<polygon_AssetBalance_filter>;
};

export type polygon_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['polygon_Bytes']>;
  owner_not?: InputMaybe<Scalars['polygon_Bytes']>;
  owner_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  owner_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  owner_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  owner_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  recipient?: InputMaybe<Scalars['polygon_Bytes']>;
  recipient_not?: InputMaybe<Scalars['polygon_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['polygon_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['polygon_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<polygon_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_Router_filter>>>;
};

export type polygon_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type polygon_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['polygon_Bytes']>;
};

export type polygon_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['polygon_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['polygon_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_Sequencer_filter>>>;
};

export type polygon_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type polygon_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['polygon_Bytes'];
};

export type polygon_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_not?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_gt?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_lt?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_gte?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_lte?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['polygon_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['polygon_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<polygon_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<polygon_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<polygon_Setting_filter>>>;
};

export type polygon_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type polygon_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type polygon__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['polygon_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type polygon__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: polygon__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type xdai_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['xdai_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type xdai_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['xdai_Bytes']>;
  root_not?: InputMaybe<Scalars['xdai_Bytes']>;
  root_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  root_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  root_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  root_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  root_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_AggregateRoot_filter>>>;
};

export type xdai_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type xdai_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['xdai_Bytes']>;
  canonicalId?: Maybe<Scalars['xdai_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['xdai_Bytes']>;
  localAsset?: Maybe<Scalars['xdai_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<xdai_AssetStatus>;
};

export type xdai_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: xdai_Router;
  asset: xdai_Asset;
  feesEarned: Scalars['BigInt'];
};

export type xdai_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<xdai_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<xdai_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_AssetBalance_filter>>>;
};

export type xdai_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type xdai_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type xdai_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_AssetStatus_filter>>>;
};

export type xdai_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type xdai_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['xdai_Bytes']>;
  key_not?: InputMaybe<Scalars['xdai_Bytes']>;
  key_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  key_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  key_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  key_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  key_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['xdai_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['xdai_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  localAsset?: InputMaybe<Scalars['xdai_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['xdai_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<xdai_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_Asset_filter>>>;
};

export type xdai_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type xdai_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type xdai_Block_height = {
  hash?: InputMaybe<Scalars['xdai_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type xdai_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['xdai_Bytes']>;
  rootManager?: Maybe<Scalars['xdai_Bytes']>;
  mirrorConnector?: Maybe<Scalars['xdai_Bytes']>;
};

export type xdai_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['xdai_Bytes']>;
  amb_not?: InputMaybe<Scalars['xdai_Bytes']>;
  amb_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  amb_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  amb_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  amb_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  rootManager?: InputMaybe<Scalars['xdai_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['xdai_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['xdai_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['xdai_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_ConnectorMeta_filter>>>;
};

export type xdai_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type xdai_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['xdai_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<xdai_TransferStatus>;
  routers?: Maybe<Array<xdai_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['xdai_Bytes']>;
  delegate?: Maybe<Scalars['xdai_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['xdai_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['xdai_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['xdai_Bytes']>;
  asset?: Maybe<xdai_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['xdai_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['xdai_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['xdai_Bytes']>;
  reconciledCaller?: Maybe<Scalars['xdai_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['xdai_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['xdai_Bytes']>;
};


export type xdai_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_Router_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_Router_filter>;
};

export type xdai_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<xdai_TransferStatus>;
  status_not?: InputMaybe<xdai_TransferStatus>;
  status_in?: InputMaybe<Array<xdai_TransferStatus>>;
  status_not_in?: InputMaybe<Array<xdai_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<xdai_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['xdai_Bytes']>;
  to_not?: InputMaybe<Scalars['xdai_Bytes']>;
  to_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  to_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  to_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  to_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  to_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_not?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_not?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_not?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<xdai_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['xdai_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['xdai_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_DestinationTransfer_filter>>>;
};

export type xdai_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type xdai_OrderDirection =
  | 'asc'
  | 'desc';

export type xdai_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['xdai_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['xdai_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['xdai_Bytes']>;
  root?: Maybe<Scalars['xdai_Bytes']>;
  transactionHash?: Maybe<Scalars['xdai_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<xdai_RootCount>;
};

export type xdai_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['xdai_Bytes']>;
  leaf_not?: InputMaybe<Scalars['xdai_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['xdai_Bytes']>;
  message_not?: InputMaybe<Scalars['xdai_Bytes']>;
  message_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  message_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  message_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  message_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  message_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  root?: InputMaybe<Scalars['xdai_Bytes']>;
  root_not?: InputMaybe<Scalars['xdai_Bytes']>;
  root_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  root_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  root_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  root_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  root_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<xdai_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_OriginMessage_filter>>>;
};

export type xdai_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type xdai_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['xdai_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<xdai_TransferStatus>;
  messageHash?: Maybe<Scalars['xdai_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['xdai_Bytes']>;
  delegate?: Maybe<Scalars['xdai_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['xdai_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['xdai_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['xdai_Bytes']>;
  asset?: Maybe<xdai_Asset>;
  message?: Maybe<xdai_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['xdai_Bytes']>;
  transactionHash?: Maybe<Scalars['xdai_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['xdai_Bytes']>;
};

export type xdai_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<xdai_TransferStatus>;
  status_not?: InputMaybe<xdai_TransferStatus>;
  status_in?: InputMaybe<Array<xdai_TransferStatus>>;
  status_not_in?: InputMaybe<Array<xdai_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['xdai_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['xdai_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['xdai_Bytes']>;
  to_not?: InputMaybe<Scalars['xdai_Bytes']>;
  to_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  to_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  to_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  to_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  to_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_not?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_not?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_not?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<xdai_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<xdai_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_not?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['xdai_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['xdai_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_OriginTransfer_filter>>>;
};

export type xdai_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type xdai_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['xdai_Bytes']>;
};

export type xdai_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['xdai_Bytes']>;
  relayer_not?: InputMaybe<Scalars['xdai_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_Relayer_filter>>>;
};

export type xdai_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type xdai_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type xdai_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_RootCount_filter>>>;
};

export type xdai_RootCount_orderBy =
  | 'id'
  | 'count';

export type xdai_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['xdai_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['xdai_Bytes']>;
  transactionHash?: Maybe<Scalars['xdai_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type xdai_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['xdai_Bytes']>;
  root_not?: InputMaybe<Scalars['xdai_Bytes']>;
  root_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  root_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  root_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  root_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  root_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_not?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_RootMessageSent_filter>>>;
};

export type xdai_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type xdai_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['xdai_Bytes']>;
  recipient?: Maybe<Scalars['xdai_Bytes']>;
  proposedOwner?: Maybe<Scalars['xdai_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<xdai_AssetBalance>;
};


export type xdai_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<xdai_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<xdai_OrderDirection>;
  where?: InputMaybe<xdai_AssetBalance_filter>;
};

export type xdai_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['xdai_Bytes']>;
  owner_not?: InputMaybe<Scalars['xdai_Bytes']>;
  owner_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  owner_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  owner_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  owner_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  recipient?: InputMaybe<Scalars['xdai_Bytes']>;
  recipient_not?: InputMaybe<Scalars['xdai_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['xdai_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['xdai_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<xdai_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_Router_filter>>>;
};

export type xdai_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type xdai_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['xdai_Bytes']>;
};

export type xdai_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['xdai_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['xdai_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_Sequencer_filter>>>;
};

export type xdai_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type xdai_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['xdai_Bytes'];
};

export type xdai_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_not?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_gt?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_lt?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_gte?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_lte?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['xdai_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['xdai_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<xdai_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<xdai_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<xdai_Setting_filter>>>;
};

export type xdai_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type xdai_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type xdai__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['xdai_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type xdai__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: xdai__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type arbitrumone_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['arbitrumone_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type arbitrumone_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  root_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_AggregateRoot_filter>>>;
};

export type arbitrumone_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type arbitrumone_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['arbitrumone_Bytes']>;
  canonicalId?: Maybe<Scalars['arbitrumone_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['arbitrumone_Bytes']>;
  localAsset?: Maybe<Scalars['arbitrumone_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  status?: Maybe<arbitrumone_AssetStatus>;
};

export type arbitrumone_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: arbitrumone_Router;
  asset: arbitrumone_Asset;
  feesEarned: Scalars['BigInt'];
};

export type arbitrumone_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<arbitrumone_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<arbitrumone_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_AssetBalance_filter>>>;
};

export type arbitrumone_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type arbitrumone_AssetStatus = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Boolean']>;
};

export type arbitrumone_AssetStatus_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  status?: InputMaybe<Scalars['Boolean']>;
  status_not?: InputMaybe<Scalars['Boolean']>;
  status_in?: InputMaybe<Array<Scalars['Boolean']>>;
  status_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_AssetStatus_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_AssetStatus_filter>>>;
};

export type arbitrumone_AssetStatus_orderBy =
  | 'id'
  | 'status';

export type arbitrumone_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  key_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  localAsset?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<Scalars['String']>;
  status_not?: InputMaybe<Scalars['String']>;
  status_gt?: InputMaybe<Scalars['String']>;
  status_lt?: InputMaybe<Scalars['String']>;
  status_gte?: InputMaybe<Scalars['String']>;
  status_lte?: InputMaybe<Scalars['String']>;
  status_in?: InputMaybe<Array<Scalars['String']>>;
  status_not_in?: InputMaybe<Array<Scalars['String']>>;
  status_contains?: InputMaybe<Scalars['String']>;
  status_contains_nocase?: InputMaybe<Scalars['String']>;
  status_not_contains?: InputMaybe<Scalars['String']>;
  status_not_contains_nocase?: InputMaybe<Scalars['String']>;
  status_starts_with?: InputMaybe<Scalars['String']>;
  status_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_starts_with?: InputMaybe<Scalars['String']>;
  status_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  status_ends_with?: InputMaybe<Scalars['String']>;
  status_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_not_ends_with?: InputMaybe<Scalars['String']>;
  status_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  status_?: InputMaybe<arbitrumone_AssetStatus_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_Asset_filter>>>;
};

export type arbitrumone_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber'
  | 'status';

export type arbitrumone_BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type arbitrumone_Block_height = {
  hash?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type arbitrumone_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['arbitrumone_Bytes']>;
  rootManager?: Maybe<Scalars['arbitrumone_Bytes']>;
  mirrorConnector?: Maybe<Scalars['arbitrumone_Bytes']>;
};

export type arbitrumone_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  amb_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  amb_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  amb_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  amb_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  amb_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  rootManager?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_ConnectorMeta_filter>>>;
};

export type arbitrumone_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type arbitrumone_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['arbitrumone_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<arbitrumone_TransferStatus>;
  routers?: Maybe<Array<arbitrumone_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['arbitrumone_Bytes']>;
  delegate?: Maybe<Scalars['arbitrumone_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['arbitrumone_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  bumpSlippageCount?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['arbitrumone_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['arbitrumone_Bytes']>;
  asset?: Maybe<arbitrumone_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['arbitrumone_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['arbitrumone_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['arbitrumone_Bytes']>;
  reconciledCaller?: Maybe<Scalars['arbitrumone_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['arbitrumone_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['arbitrumone_Bytes']>;
};


export type arbitrumone_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_Router_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_Router_filter>;
};

export type arbitrumone_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<arbitrumone_TransferStatus>;
  status_not?: InputMaybe<arbitrumone_TransferStatus>;
  status_in?: InputMaybe<Array<arbitrumone_TransferStatus>>;
  status_not_in?: InputMaybe<Array<arbitrumone_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<arbitrumone_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  to_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpSlippageCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpSlippageCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<arbitrumone_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_DestinationTransfer_filter>>>;
};

export type arbitrumone_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'bumpSlippageCount'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

/** Defines the order direction, either ascending or descending */
export type arbitrumone_OrderDirection =
  | 'asc'
  | 'desc';

export type arbitrumone_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['arbitrumone_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['arbitrumone_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['arbitrumone_Bytes']>;
  root?: Maybe<Scalars['arbitrumone_Bytes']>;
  transactionHash?: Maybe<Scalars['arbitrumone_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<arbitrumone_RootCount>;
};

export type arbitrumone_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  leaf_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  message_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  message_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  message_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  message_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  message_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  message_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  root_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<arbitrumone_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_OriginMessage_filter>>>;
};

export type arbitrumone_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type arbitrumone_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['arbitrumone_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<arbitrumone_TransferStatus>;
  messageHash?: Maybe<Scalars['arbitrumone_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['arbitrumone_Bytes']>;
  delegate?: Maybe<Scalars['arbitrumone_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['arbitrumone_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['arbitrumone_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['arbitrumone_Bytes']>;
  asset?: Maybe<arbitrumone_Asset>;
  message?: Maybe<arbitrumone_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  bumpRelayerFeeCount?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['arbitrumone_Bytes']>;
  transactionHash?: Maybe<Scalars['arbitrumone_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['arbitrumone_Bytes']>;
};

export type arbitrumone_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<arbitrumone_TransferStatus>;
  status_not?: InputMaybe<arbitrumone_TransferStatus>;
  status_in?: InputMaybe<Array<arbitrumone_TransferStatus>>;
  status_not_in?: InputMaybe<Array<arbitrumone_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  to_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<arbitrumone_Asset_filter>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<arbitrumone_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_not?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lt?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_gte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_lte?: InputMaybe<Scalars['BigInt']>;
  bumpRelayerFeeCount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bumpRelayerFeeCount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_OriginTransfer_filter>>>;
};

export type arbitrumone_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'message'
  | 'relayerFee'
  | 'bumpRelayerFeeCount'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type arbitrumone_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['arbitrumone_Bytes']>;
};

export type arbitrumone_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  relayer_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_Relayer_filter>>>;
};

export type arbitrumone_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type arbitrumone_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type arbitrumone_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_RootCount_filter>>>;
};

export type arbitrumone_RootCount_orderBy =
  | 'id'
  | 'count';

export type arbitrumone_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['arbitrumone_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['arbitrumone_Bytes']>;
  transactionHash?: Maybe<Scalars['arbitrumone_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type arbitrumone_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  root_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_RootMessageSent_filter>>>;
};

export type arbitrumone_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type arbitrumone_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['arbitrumone_Bytes']>;
  recipient?: Maybe<Scalars['arbitrumone_Bytes']>;
  proposedOwner?: Maybe<Scalars['arbitrumone_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<arbitrumone_AssetBalance>;
};


export type arbitrumone_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<arbitrumone_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<arbitrumone_OrderDirection>;
  where?: InputMaybe<arbitrumone_AssetBalance_filter>;
};

export type arbitrumone_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  owner_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  owner_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  owner_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  owner_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  owner_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  recipient?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  recipient_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<arbitrumone_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_Router_filter>>>;
};

export type arbitrumone_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type arbitrumone_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['arbitrumone_Bytes']>;
};

export type arbitrumone_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_Sequencer_filter>>>;
};

export type arbitrumone_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type arbitrumone_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['arbitrumone_Bytes'];
};

export type arbitrumone_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_not?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_gt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_lt?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_gte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_lte?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['arbitrumone_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['arbitrumone_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<arbitrumone_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<arbitrumone_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<arbitrumone_Setting_filter>>>;
};

export type arbitrumone_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type arbitrumone_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type arbitrumone__Block_ = {
  /** The hash of the block */
  hash?: Maybe<Scalars['arbitrumone_Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type arbitrumone__Meta_ = {
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: arbitrumone__Block_;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export type staginggoerli_AggregateRoot = {
  id: Scalars['ID'];
  root: Scalars['staginggoerli_Bytes'];
  blockNumber: Scalars['BigInt'];
};

export type staginggoerli_AggregateRoot_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  root?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_AggregateRoot_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_AggregateRoot_filter>>>;
};

export type staginggoerli_AggregateRoot_orderBy =
  | 'id'
  | 'root'
  | 'blockNumber';

export type staginggoerli_Asset = {
  id: Scalars['ID'];
  key?: Maybe<Scalars['staginggoerli_Bytes']>;
  canonicalId?: Maybe<Scalars['staginggoerli_Bytes']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  adoptedAsset?: Maybe<Scalars['staginggoerli_Bytes']>;
  localAsset?: Maybe<Scalars['staginggoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type staginggoerli_AssetBalance = {
  id: Scalars['ID'];
  amount: Scalars['BigInt'];
  router: staginggoerli_Router;
  asset: staginggoerli_Asset;
  feesEarned: Scalars['BigInt'];
};

export type staginggoerli_AssetBalance_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  router?: InputMaybe<Scalars['String']>;
  router_not?: InputMaybe<Scalars['String']>;
  router_gt?: InputMaybe<Scalars['String']>;
  router_lt?: InputMaybe<Scalars['String']>;
  router_gte?: InputMaybe<Scalars['String']>;
  router_lte?: InputMaybe<Scalars['String']>;
  router_in?: InputMaybe<Array<Scalars['String']>>;
  router_not_in?: InputMaybe<Array<Scalars['String']>>;
  router_contains?: InputMaybe<Scalars['String']>;
  router_contains_nocase?: InputMaybe<Scalars['String']>;
  router_not_contains?: InputMaybe<Scalars['String']>;
  router_not_contains_nocase?: InputMaybe<Scalars['String']>;
  router_starts_with?: InputMaybe<Scalars['String']>;
  router_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_starts_with?: InputMaybe<Scalars['String']>;
  router_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  router_ends_with?: InputMaybe<Scalars['String']>;
  router_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_not_ends_with?: InputMaybe<Scalars['String']>;
  router_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  router_?: InputMaybe<staginggoerli_Router_filter>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<staginggoerli_Asset_filter>;
  feesEarned?: InputMaybe<Scalars['BigInt']>;
  feesEarned_not?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lt?: InputMaybe<Scalars['BigInt']>;
  feesEarned_gte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_lte?: InputMaybe<Scalars['BigInt']>;
  feesEarned_in?: InputMaybe<Array<Scalars['BigInt']>>;
  feesEarned_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_AssetBalance_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_AssetBalance_filter>>>;
};

export type staginggoerli_AssetBalance_orderBy =
  | 'id'
  | 'amount'
  | 'router'
  | 'asset'
  | 'feesEarned';

export type staginggoerli_Asset_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  key?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adoptedAsset?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  adoptedAsset_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  adoptedAsset_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  adoptedAsset_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  adoptedAsset_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  adoptedAsset_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  adoptedAsset_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  adoptedAsset_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  adoptedAsset_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  adoptedAsset_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  localAsset?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  localAsset_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  localAsset_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  localAsset_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  localAsset_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  localAsset_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  localAsset_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  localAsset_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  localAsset_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  localAsset_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_Asset_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_Asset_filter>>>;
};

export type staginggoerli_Asset_orderBy =
  | 'id'
  | 'key'
  | 'canonicalId'
  | 'canonicalDomain'
  | 'adoptedAsset'
  | 'localAsset'
  | 'blockNumber';

export type staginggoerli_ConnectorMeta = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  amb?: Maybe<Scalars['staginggoerli_Bytes']>;
  rootManager?: Maybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector?: Maybe<Scalars['staginggoerli_Bytes']>;
};

export type staginggoerli_ConnectorMeta_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amb?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  amb_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  amb_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  rootManager_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  rootManager_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  mirrorConnector_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  mirrorConnector_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_ConnectorMeta_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_ConnectorMeta_filter>>>;
};

export type staginggoerli_ConnectorMeta_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'amb'
  | 'rootManager'
  | 'mirrorConnector';

export type staginggoerli_DestinationTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['staginggoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<staginggoerli_TransferStatus>;
  routers?: Maybe<Array<staginggoerli_Router>>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['staginggoerli_Bytes']>;
  delegate?: Maybe<Scalars['staginggoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['staginggoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['staginggoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['staginggoerli_Bytes']>;
  asset?: Maybe<staginggoerli_Asset>;
  amount?: Maybe<Scalars['BigInt']>;
  routersFee?: Maybe<Scalars['BigInt']>;
  executedCaller?: Maybe<Scalars['staginggoerli_Bytes']>;
  executedTransactionHash?: Maybe<Scalars['staginggoerli_Bytes']>;
  executedTimestamp?: Maybe<Scalars['BigInt']>;
  executedGasPrice?: Maybe<Scalars['BigInt']>;
  executedGasLimit?: Maybe<Scalars['BigInt']>;
  executedBlockNumber?: Maybe<Scalars['BigInt']>;
  executedTxOrigin?: Maybe<Scalars['staginggoerli_Bytes']>;
  reconciledCaller?: Maybe<Scalars['staginggoerli_Bytes']>;
  reconciledTransactionHash?: Maybe<Scalars['staginggoerli_Bytes']>;
  reconciledTimestamp?: Maybe<Scalars['BigInt']>;
  reconciledGasPrice?: Maybe<Scalars['BigInt']>;
  reconciledGasLimit?: Maybe<Scalars['BigInt']>;
  reconciledBlockNumber?: Maybe<Scalars['BigInt']>;
  reconciledTxOrigin?: Maybe<Scalars['staginggoerli_Bytes']>;
};


export type staginggoerli_DestinationTransferroutersArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_Router_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_Router_filter>;
};

export type staginggoerli_DestinationTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<staginggoerli_TransferStatus>;
  status_not?: InputMaybe<staginggoerli_TransferStatus>;
  status_in?: InputMaybe<Array<staginggoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<staginggoerli_TransferStatus>>;
  routers?: InputMaybe<Array<Scalars['String']>>;
  routers_not?: InputMaybe<Array<Scalars['String']>>;
  routers_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  routers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  routers_?: InputMaybe<staginggoerli_Router_filter>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<staginggoerli_Asset_filter>;
  amount?: InputMaybe<Scalars['BigInt']>;
  amount_not?: InputMaybe<Scalars['BigInt']>;
  amount_gt?: InputMaybe<Scalars['BigInt']>;
  amount_lt?: InputMaybe<Scalars['BigInt']>;
  amount_gte?: InputMaybe<Scalars['BigInt']>;
  amount_lte?: InputMaybe<Scalars['BigInt']>;
  amount_in?: InputMaybe<Array<Scalars['BigInt']>>;
  amount_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee?: InputMaybe<Scalars['BigInt']>;
  routersFee_not?: InputMaybe<Scalars['BigInt']>;
  routersFee_gt?: InputMaybe<Scalars['BigInt']>;
  routersFee_lt?: InputMaybe<Scalars['BigInt']>;
  routersFee_gte?: InputMaybe<Scalars['BigInt']>;
  routersFee_lte?: InputMaybe<Scalars['BigInt']>;
  routersFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  routersFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedCaller?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedCaller_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedCaller_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedCaller_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedCaller_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedCaller_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedCaller_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  executedCaller_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  executedCaller_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedCaller_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTransactionHash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTransactionHash_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTransactionHash_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTransactionHash_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTransactionHash_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTransactionHash_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTransactionHash_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  executedTransactionHash_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  executedTransactionHash_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTransactionHash_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTimestamp?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  executedGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  executedBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  executedTxOrigin?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTxOrigin_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTxOrigin_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTxOrigin_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTxOrigin_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTxOrigin_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTxOrigin_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  executedTxOrigin_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  executedTxOrigin_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  executedTxOrigin_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledCaller?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledCaller_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledCaller_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledCaller_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledCaller_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledCaller_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledCaller_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  reconciledCaller_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  reconciledCaller_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledCaller_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTransactionHash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTransactionHash_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTransactionHash_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTransactionHash_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTransactionHash_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTransactionHash_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTransactionHash_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  reconciledTransactionHash_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  reconciledTransactionHash_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTransactionHash_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTimestamp?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_not?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledGasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledGasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_not?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  reconciledBlockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledBlockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  reconciledTxOrigin?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTxOrigin_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTxOrigin_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTxOrigin_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTxOrigin_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTxOrigin_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTxOrigin_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  reconciledTxOrigin_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  reconciledTxOrigin_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  reconciledTxOrigin_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_DestinationTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_DestinationTransfer_filter>>>;
};

export type staginggoerli_DestinationTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'routers'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'amount'
  | 'routersFee'
  | 'executedCaller'
  | 'executedTransactionHash'
  | 'executedTimestamp'
  | 'executedGasPrice'
  | 'executedGasLimit'
  | 'executedBlockNumber'
  | 'executedTxOrigin'
  | 'reconciledCaller'
  | 'reconciledTransactionHash'
  | 'reconciledTimestamp'
  | 'reconciledGasPrice'
  | 'reconciledGasLimit'
  | 'reconciledBlockNumber'
  | 'reconciledTxOrigin';

export type staginggoerli_OriginMessage = {
  id: Scalars['ID'];
  transferId?: Maybe<Scalars['staginggoerli_Bytes']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  leaf?: Maybe<Scalars['staginggoerli_Bytes']>;
  index?: Maybe<Scalars['BigInt']>;
  message?: Maybe<Scalars['staginggoerli_Bytes']>;
  root?: Maybe<Scalars['staginggoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['staginggoerli_Bytes']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  rootCount?: Maybe<staginggoerli_RootCount>;
};

export type staginggoerli_OriginMessage_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  leaf?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  leaf_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  leaf_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  leaf_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  leaf_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  leaf_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  leaf_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  leaf_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  leaf_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  leaf_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  index?: InputMaybe<Scalars['BigInt']>;
  index_not?: InputMaybe<Scalars['BigInt']>;
  index_gt?: InputMaybe<Scalars['BigInt']>;
  index_lt?: InputMaybe<Scalars['BigInt']>;
  index_gte?: InputMaybe<Scalars['BigInt']>;
  index_lte?: InputMaybe<Scalars['BigInt']>;
  index_in?: InputMaybe<Array<Scalars['BigInt']>>;
  index_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  message?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  message_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  message_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  message_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  message_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  message_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  message_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  message_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  message_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  message_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  rootCount?: InputMaybe<Scalars['String']>;
  rootCount_not?: InputMaybe<Scalars['String']>;
  rootCount_gt?: InputMaybe<Scalars['String']>;
  rootCount_lt?: InputMaybe<Scalars['String']>;
  rootCount_gte?: InputMaybe<Scalars['String']>;
  rootCount_lte?: InputMaybe<Scalars['String']>;
  rootCount_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_not_in?: InputMaybe<Array<Scalars['String']>>;
  rootCount_contains?: InputMaybe<Scalars['String']>;
  rootCount_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_contains?: InputMaybe<Scalars['String']>;
  rootCount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  rootCount_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with?: InputMaybe<Scalars['String']>;
  rootCount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with?: InputMaybe<Scalars['String']>;
  rootCount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  rootCount_?: InputMaybe<staginggoerli_RootCount_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_OriginMessage_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_OriginMessage_filter>>>;
};

export type staginggoerli_OriginMessage_orderBy =
  | 'id'
  | 'transferId'
  | 'destinationDomain'
  | 'leaf'
  | 'index'
  | 'message'
  | 'root'
  | 'transactionHash'
  | 'blockNumber'
  | 'rootCount';

export type staginggoerli_OriginTransfer = {
  id: Scalars['ID'];
  chainId?: Maybe<Scalars['BigInt']>;
  transferId?: Maybe<Scalars['staginggoerli_Bytes']>;
  nonce?: Maybe<Scalars['BigInt']>;
  status?: Maybe<staginggoerli_TransferStatus>;
  messageHash?: Maybe<Scalars['staginggoerli_Bytes']>;
  originDomain?: Maybe<Scalars['BigInt']>;
  destinationDomain?: Maybe<Scalars['BigInt']>;
  canonicalDomain?: Maybe<Scalars['BigInt']>;
  to?: Maybe<Scalars['staginggoerli_Bytes']>;
  delegate?: Maybe<Scalars['staginggoerli_Bytes']>;
  receiveLocal?: Maybe<Scalars['Boolean']>;
  callData?: Maybe<Scalars['staginggoerli_Bytes']>;
  slippage?: Maybe<Scalars['BigInt']>;
  originSender?: Maybe<Scalars['staginggoerli_Bytes']>;
  bridgedAmt?: Maybe<Scalars['BigInt']>;
  normalizedIn?: Maybe<Scalars['BigInt']>;
  canonicalId?: Maybe<Scalars['staginggoerli_Bytes']>;
  asset?: Maybe<staginggoerli_Asset>;
  transacting?: Maybe<Scalars['staginggoerli_Bytes']>;
  message?: Maybe<staginggoerli_OriginMessage>;
  relayerFee?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['staginggoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['staginggoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
  txOrigin?: Maybe<Scalars['staginggoerli_Bytes']>;
};

export type staginggoerli_OriginTransfer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  chainId?: InputMaybe<Scalars['BigInt']>;
  chainId_not?: InputMaybe<Scalars['BigInt']>;
  chainId_gt?: InputMaybe<Scalars['BigInt']>;
  chainId_lt?: InputMaybe<Scalars['BigInt']>;
  chainId_gte?: InputMaybe<Scalars['BigInt']>;
  chainId_lte?: InputMaybe<Scalars['BigInt']>;
  chainId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  chainId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transferId?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  nonce?: InputMaybe<Scalars['BigInt']>;
  nonce_not?: InputMaybe<Scalars['BigInt']>;
  nonce_gt?: InputMaybe<Scalars['BigInt']>;
  nonce_lt?: InputMaybe<Scalars['BigInt']>;
  nonce_gte?: InputMaybe<Scalars['BigInt']>;
  nonce_lte?: InputMaybe<Scalars['BigInt']>;
  nonce_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nonce_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<staginggoerli_TransferStatus>;
  status_not?: InputMaybe<staginggoerli_TransferStatus>;
  status_in?: InputMaybe<Array<staginggoerli_TransferStatus>>;
  status_not_in?: InputMaybe<Array<staginggoerli_TransferStatus>>;
  messageHash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  messageHash_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  messageHash_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  messageHash_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  messageHash_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  messageHash_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  messageHash_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  messageHash_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  messageHash_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  messageHash_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originDomain?: InputMaybe<Scalars['BigInt']>;
  originDomain_not?: InputMaybe<Scalars['BigInt']>;
  originDomain_gt?: InputMaybe<Scalars['BigInt']>;
  originDomain_lt?: InputMaybe<Scalars['BigInt']>;
  originDomain_gte?: InputMaybe<Scalars['BigInt']>;
  originDomain_lte?: InputMaybe<Scalars['BigInt']>;
  originDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_not?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lt?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_gte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_lte?: InputMaybe<Scalars['BigInt']>;
  destinationDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  destinationDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_not?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lt?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_gte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_lte?: InputMaybe<Scalars['BigInt']>;
  canonicalDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  to?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  to_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  to_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  to_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  delegate_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  delegate_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  receiveLocal?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_not?: InputMaybe<Scalars['Boolean']>;
  receiveLocal_in?: InputMaybe<Array<Scalars['Boolean']>>;
  receiveLocal_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  callData?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  callData_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  callData_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  callData_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  slippage?: InputMaybe<Scalars['BigInt']>;
  slippage_not?: InputMaybe<Scalars['BigInt']>;
  slippage_gt?: InputMaybe<Scalars['BigInt']>;
  slippage_lt?: InputMaybe<Scalars['BigInt']>;
  slippage_gte?: InputMaybe<Scalars['BigInt']>;
  slippage_lte?: InputMaybe<Scalars['BigInt']>;
  slippage_in?: InputMaybe<Array<Scalars['BigInt']>>;
  slippage_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  originSender?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  originSender_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  originSender_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  originSender_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  bridgedAmt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_not?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lt?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_gte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_lte?: InputMaybe<Scalars['BigInt']>;
  bridgedAmt_in?: InputMaybe<Array<Scalars['BigInt']>>;
  bridgedAmt_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_not?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lt?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_gte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_lte?: InputMaybe<Scalars['BigInt']>;
  normalizedIn_in?: InputMaybe<Array<Scalars['BigInt']>>;
  normalizedIn_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  canonicalId?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<staginggoerli_Asset_filter>;
  transacting?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transacting_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transacting_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transacting_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transacting_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transacting_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transacting_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transacting_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transacting_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transacting_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  message?: InputMaybe<Scalars['String']>;
  message_not?: InputMaybe<Scalars['String']>;
  message_gt?: InputMaybe<Scalars['String']>;
  message_lt?: InputMaybe<Scalars['String']>;
  message_gte?: InputMaybe<Scalars['String']>;
  message_lte?: InputMaybe<Scalars['String']>;
  message_in?: InputMaybe<Array<Scalars['String']>>;
  message_not_in?: InputMaybe<Array<Scalars['String']>>;
  message_contains?: InputMaybe<Scalars['String']>;
  message_contains_nocase?: InputMaybe<Scalars['String']>;
  message_not_contains?: InputMaybe<Scalars['String']>;
  message_not_contains_nocase?: InputMaybe<Scalars['String']>;
  message_starts_with?: InputMaybe<Scalars['String']>;
  message_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_starts_with?: InputMaybe<Scalars['String']>;
  message_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  message_ends_with?: InputMaybe<Scalars['String']>;
  message_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_not_ends_with?: InputMaybe<Scalars['String']>;
  message_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  message_?: InputMaybe<staginggoerli_OriginMessage_filter>;
  relayerFee?: InputMaybe<Scalars['BigInt']>;
  relayerFee_not?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lt?: InputMaybe<Scalars['BigInt']>;
  relayerFee_gte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_lte?: InputMaybe<Scalars['BigInt']>;
  relayerFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  relayerFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  txOrigin?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  txOrigin_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  txOrigin_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  txOrigin_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  txOrigin_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  txOrigin_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  txOrigin_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  txOrigin_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  txOrigin_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  txOrigin_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_OriginTransfer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_OriginTransfer_filter>>>;
};

export type staginggoerli_OriginTransfer_orderBy =
  | 'id'
  | 'chainId'
  | 'transferId'
  | 'nonce'
  | 'status'
  | 'messageHash'
  | 'originDomain'
  | 'destinationDomain'
  | 'canonicalDomain'
  | 'to'
  | 'delegate'
  | 'receiveLocal'
  | 'callData'
  | 'slippage'
  | 'originSender'
  | 'bridgedAmt'
  | 'normalizedIn'
  | 'canonicalId'
  | 'asset'
  | 'transacting'
  | 'message'
  | 'relayerFee'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber'
  | 'txOrigin';

export type staginggoerli_PooledToken = {
  id: Scalars['ID'];
  asset: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_PooledToken_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  asset?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  asset_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  asset_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  asset_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_PooledToken_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_PooledToken_filter>>>;
};

export type staginggoerli_PooledToken_orderBy =
  | 'id'
  | 'asset';

export type staginggoerli_Relayer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  relayer?: Maybe<Scalars['staginggoerli_Bytes']>;
};

export type staginggoerli_Relayer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  relayer?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  relayer_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  relayer_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  relayer_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  relayer_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  relayer_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  relayer_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  relayer_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  relayer_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  relayer_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_Relayer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_Relayer_filter>>>;
};

export type staginggoerli_Relayer_orderBy =
  | 'id'
  | 'isActive'
  | 'relayer';

export type staginggoerli_RootCount = {
  id: Scalars['ID'];
  count?: Maybe<Scalars['BigInt']>;
};

export type staginggoerli_RootCount_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_RootCount_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_RootCount_filter>>>;
};

export type staginggoerli_RootCount_orderBy =
  | 'id'
  | 'count';

export type staginggoerli_RootMessageSent = {
  id: Scalars['ID'];
  spokeDomain?: Maybe<Scalars['BigInt']>;
  hubDomain?: Maybe<Scalars['BigInt']>;
  root?: Maybe<Scalars['staginggoerli_Bytes']>;
  count?: Maybe<Scalars['BigInt']>;
  caller?: Maybe<Scalars['staginggoerli_Bytes']>;
  transactionHash?: Maybe<Scalars['staginggoerli_Bytes']>;
  timestamp?: Maybe<Scalars['BigInt']>;
  gasPrice?: Maybe<Scalars['BigInt']>;
  gasLimit?: Maybe<Scalars['BigInt']>;
  blockNumber?: Maybe<Scalars['BigInt']>;
};

export type staginggoerli_RootMessageSent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  spokeDomain?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_not?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lt?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_gte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_lte?: InputMaybe<Scalars['BigInt']>;
  spokeDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  spokeDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain?: InputMaybe<Scalars['BigInt']>;
  hubDomain_not?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lt?: InputMaybe<Scalars['BigInt']>;
  hubDomain_gte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_lte?: InputMaybe<Scalars['BigInt']>;
  hubDomain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  hubDomain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  root?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  root_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  root_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  root_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  count?: InputMaybe<Scalars['BigInt']>;
  count_not?: InputMaybe<Scalars['BigInt']>;
  count_gt?: InputMaybe<Scalars['BigInt']>;
  count_lt?: InputMaybe<Scalars['BigInt']>;
  count_gte?: InputMaybe<Scalars['BigInt']>;
  count_lte?: InputMaybe<Scalars['BigInt']>;
  count_in?: InputMaybe<Array<Scalars['BigInt']>>;
  count_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transactionHash_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transactionHash_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transactionHash_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice?: InputMaybe<Scalars['BigInt']>;
  gasPrice_not?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lt?: InputMaybe<Scalars['BigInt']>;
  gasPrice_gte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_lte?: InputMaybe<Scalars['BigInt']>;
  gasPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit?: InputMaybe<Scalars['BigInt']>;
  gasLimit_not?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lt?: InputMaybe<Scalars['BigInt']>;
  gasLimit_gte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_lte?: InputMaybe<Scalars['BigInt']>;
  gasLimit_in?: InputMaybe<Array<Scalars['BigInt']>>;
  gasLimit_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber?: InputMaybe<Scalars['BigInt']>;
  blockNumber_not?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lt?: InputMaybe<Scalars['BigInt']>;
  blockNumber_gte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_lte?: InputMaybe<Scalars['BigInt']>;
  blockNumber_in?: InputMaybe<Array<Scalars['BigInt']>>;
  blockNumber_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_RootMessageSent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_RootMessageSent_filter>>>;
};

export type staginggoerli_RootMessageSent_orderBy =
  | 'id'
  | 'spokeDomain'
  | 'hubDomain'
  | 'root'
  | 'count'
  | 'caller'
  | 'transactionHash'
  | 'timestamp'
  | 'gasPrice'
  | 'gasLimit'
  | 'blockNumber';

export type staginggoerli_Router = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  owner?: Maybe<Scalars['staginggoerli_Bytes']>;
  recipient?: Maybe<Scalars['staginggoerli_Bytes']>;
  proposedOwner?: Maybe<Scalars['staginggoerli_Bytes']>;
  proposedTimestamp?: Maybe<Scalars['BigInt']>;
  assetBalances: Array<staginggoerli_AssetBalance>;
};


export type staginggoerli_RouterassetBalancesArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_AssetBalance_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_AssetBalance_filter>;
};

export type staginggoerli_Router_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  owner?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  owner_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  owner_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  owner_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  owner_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  owner_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  owner_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  owner_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  recipient?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  recipient_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  recipient_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  recipient_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  recipient_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  recipient_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  recipient_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  recipient_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  recipient_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  recipient_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  proposedOwner?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  proposedOwner_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  proposedOwner_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  proposedOwner_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  proposedOwner_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  proposedOwner_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  proposedOwner_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  proposedOwner_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  proposedOwner_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  proposedOwner_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  proposedTimestamp?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_not?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lt?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_gte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_lte?: InputMaybe<Scalars['BigInt']>;
  proposedTimestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  proposedTimestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  assetBalances_?: InputMaybe<staginggoerli_AssetBalance_filter>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_Router_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_Router_filter>>>;
};

export type staginggoerli_Router_orderBy =
  | 'id'
  | 'isActive'
  | 'owner'
  | 'recipient'
  | 'proposedOwner'
  | 'proposedTimestamp'
  | 'assetBalances';

export type staginggoerli_Sequencer = {
  id: Scalars['ID'];
  isActive: Scalars['Boolean'];
  sequencer?: Maybe<Scalars['staginggoerli_Bytes']>;
};

export type staginggoerli_Sequencer_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  sequencer?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  sequencer_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  sequencer_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  sequencer_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  sequencer_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  sequencer_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  sequencer_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  sequencer_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  sequencer_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  sequencer_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_Sequencer_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_Sequencer_filter>>>;
};

export type staginggoerli_Sequencer_orderBy =
  | 'id'
  | 'isActive'
  | 'sequencer';

export type staginggoerli_Setting = {
  id: Scalars['ID'];
  maxRoutersPerTransfer: Scalars['BigInt'];
  caller: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_Setting_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxRoutersPerTransfer?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_not?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lt?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_gte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_lte?: InputMaybe<Scalars['BigInt']>;
  maxRoutersPerTransfer_in?: InputMaybe<Array<Scalars['BigInt']>>;
  maxRoutersPerTransfer_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  caller?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  caller_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  caller_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  caller_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_Setting_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_Setting_filter>>>;
};

export type staginggoerli_Setting_orderBy =
  | 'id'
  | 'maxRoutersPerTransfer'
  | 'caller';

export type staginggoerli_StableSwap = {
  id: Scalars['ID'];
  isActive?: Maybe<Scalars['Boolean']>;
  key?: Maybe<Scalars['staginggoerli_Bytes']>;
  canonicalId?: Maybe<Scalars['staginggoerli_Bytes']>;
  domain?: Maybe<Scalars['BigInt']>;
  swapPool?: Maybe<Scalars['staginggoerli_Bytes']>;
  lpToken?: Maybe<Scalars['staginggoerli_Bytes']>;
  initialA?: Maybe<Scalars['BigInt']>;
  futureA?: Maybe<Scalars['BigInt']>;
  initialATime?: Maybe<Scalars['BigInt']>;
  futureATime?: Maybe<Scalars['BigInt']>;
  swapFee?: Maybe<Scalars['BigInt']>;
  adminFee?: Maybe<Scalars['BigInt']>;
  pooledTokens: Array<staginggoerli_PooledToken>;
  tokenPrecisionMultipliers?: Maybe<Array<Scalars['BigInt']>>;
  balances: Array<Scalars['BigInt']>;
  adminFees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply?: Maybe<Scalars['BigInt']>;
};


export type staginggoerli_StableSwappooledTokensArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<staginggoerli_PooledToken_orderBy>;
  orderDirection?: InputMaybe<staginggoerli_OrderDirection>;
  where?: InputMaybe<staginggoerli_PooledToken_filter>;
};

export type staginggoerli_StableSwapAddLiquidityEvent = staginggoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  provider: Scalars['staginggoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees: Array<Scalars['BigInt']>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_StableSwapAddLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwapAddLiquidityEvent_filter>>>;
};

export type staginggoerli_StableSwapAddLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_StableSwapEvent = {
  stableSwap: staginggoerli_StableSwap;
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_StableSwapEvent_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwapEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwapEvent_filter>>>;
};

export type staginggoerli_StableSwapEvent_orderBy =
  | 'stableSwap'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_StableSwapExchange = {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  buyer: Scalars['staginggoerli_Bytes'];
  boughtId: Scalars['BigInt'];
  tokensBought: Scalars['BigInt'];
  soldId: Scalars['BigInt'];
  tokensSold: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_StableSwapExchange_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  buyer?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  buyer_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  buyer_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  buyer_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  boughtId?: InputMaybe<Scalars['BigInt']>;
  boughtId_not?: InputMaybe<Scalars['BigInt']>;
  boughtId_gt?: InputMaybe<Scalars['BigInt']>;
  boughtId_lt?: InputMaybe<Scalars['BigInt']>;
  boughtId_gte?: InputMaybe<Scalars['BigInt']>;
  boughtId_lte?: InputMaybe<Scalars['BigInt']>;
  boughtId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  boughtId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought?: InputMaybe<Scalars['BigInt']>;
  tokensBought_not?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lt?: InputMaybe<Scalars['BigInt']>;
  tokensBought_gte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_lte?: InputMaybe<Scalars['BigInt']>;
  tokensBought_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensBought_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId?: InputMaybe<Scalars['BigInt']>;
  soldId_not?: InputMaybe<Scalars['BigInt']>;
  soldId_gt?: InputMaybe<Scalars['BigInt']>;
  soldId_lt?: InputMaybe<Scalars['BigInt']>;
  soldId_gte?: InputMaybe<Scalars['BigInt']>;
  soldId_lte?: InputMaybe<Scalars['BigInt']>;
  soldId_in?: InputMaybe<Array<Scalars['BigInt']>>;
  soldId_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold?: InputMaybe<Scalars['BigInt']>;
  tokensSold_not?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lt?: InputMaybe<Scalars['BigInt']>;
  tokensSold_gte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_lte?: InputMaybe<Scalars['BigInt']>;
  tokensSold_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensSold_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwapExchange_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwapExchange_filter>>>;
};

export type staginggoerli_StableSwapExchange_orderBy =
  | 'id'
  | 'stableSwap'
  | 'buyer'
  | 'boughtId'
  | 'tokensBought'
  | 'soldId'
  | 'tokensSold'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_StableSwapRemoveLiquidityEvent = staginggoerli_StableSwapEvent & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  provider: Scalars['staginggoerli_Bytes'];
  tokenAmounts: Array<Scalars['BigInt']>;
  fees?: Maybe<Array<Scalars['BigInt']>>;
  invariant?: Maybe<Scalars['BigInt']>;
  lpTokenSupply: Scalars['BigInt'];
  block: Scalars['BigInt'];
  timestamp: Scalars['BigInt'];
  transaction: Scalars['staginggoerli_Bytes'];
};

export type staginggoerli_StableSwapRemoveLiquidityEvent_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  provider?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  provider_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  provider_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  provider_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  tokenAmounts?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  fees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block?: InputMaybe<Scalars['BigInt']>;
  block_not?: InputMaybe<Scalars['BigInt']>;
  block_gt?: InputMaybe<Scalars['BigInt']>;
  block_lt?: InputMaybe<Scalars['BigInt']>;
  block_gte?: InputMaybe<Scalars['BigInt']>;
  block_lte?: InputMaybe<Scalars['BigInt']>;
  block_in?: InputMaybe<Array<Scalars['BigInt']>>;
  block_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  transaction?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transaction_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transaction_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwapRemoveLiquidityEvent_filter>>>;
};

export type staginggoerli_StableSwapRemoveLiquidityEvent_orderBy =
  | 'id'
  | 'stableSwap'
  | 'provider'
  | 'tokenAmounts'
  | 'fees'
  | 'invariant'
  | 'lpTokenSupply'
  | 'block'
  | 'timestamp'
  | 'transaction';

export type staginggoerli_StableSwap_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isActive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isActive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  key?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  key_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  key_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  key_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  canonicalId_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  canonicalId_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  domain?: InputMaybe<Scalars['BigInt']>;
  domain_not?: InputMaybe<Scalars['BigInt']>;
  domain_gt?: InputMaybe<Scalars['BigInt']>;
  domain_lt?: InputMaybe<Scalars['BigInt']>;
  domain_gte?: InputMaybe<Scalars['BigInt']>;
  domain_lte?: InputMaybe<Scalars['BigInt']>;
  domain_in?: InputMaybe<Array<Scalars['BigInt']>>;
  domain_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapPool?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  swapPool_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  swapPool_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  swapPool_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  lpToken_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  lpToken_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  lpToken_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  initialA?: InputMaybe<Scalars['BigInt']>;
  initialA_not?: InputMaybe<Scalars['BigInt']>;
  initialA_gt?: InputMaybe<Scalars['BigInt']>;
  initialA_lt?: InputMaybe<Scalars['BigInt']>;
  initialA_gte?: InputMaybe<Scalars['BigInt']>;
  initialA_lte?: InputMaybe<Scalars['BigInt']>;
  initialA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA?: InputMaybe<Scalars['BigInt']>;
  futureA_not?: InputMaybe<Scalars['BigInt']>;
  futureA_gt?: InputMaybe<Scalars['BigInt']>;
  futureA_lt?: InputMaybe<Scalars['BigInt']>;
  futureA_gte?: InputMaybe<Scalars['BigInt']>;
  futureA_lte?: InputMaybe<Scalars['BigInt']>;
  futureA_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureA_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime?: InputMaybe<Scalars['BigInt']>;
  initialATime_not?: InputMaybe<Scalars['BigInt']>;
  initialATime_gt?: InputMaybe<Scalars['BigInt']>;
  initialATime_lt?: InputMaybe<Scalars['BigInt']>;
  initialATime_gte?: InputMaybe<Scalars['BigInt']>;
  initialATime_lte?: InputMaybe<Scalars['BigInt']>;
  initialATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  initialATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime?: InputMaybe<Scalars['BigInt']>;
  futureATime_not?: InputMaybe<Scalars['BigInt']>;
  futureATime_gt?: InputMaybe<Scalars['BigInt']>;
  futureATime_lt?: InputMaybe<Scalars['BigInt']>;
  futureATime_gte?: InputMaybe<Scalars['BigInt']>;
  futureATime_lte?: InputMaybe<Scalars['BigInt']>;
  futureATime_in?: InputMaybe<Array<Scalars['BigInt']>>;
  futureATime_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee?: InputMaybe<Scalars['BigInt']>;
  swapFee_not?: InputMaybe<Scalars['BigInt']>;
  swapFee_gt?: InputMaybe<Scalars['BigInt']>;
  swapFee_lt?: InputMaybe<Scalars['BigInt']>;
  swapFee_gte?: InputMaybe<Scalars['BigInt']>;
  swapFee_lte?: InputMaybe<Scalars['BigInt']>;
  swapFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  swapFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee?: InputMaybe<Scalars['BigInt']>;
  adminFee_not?: InputMaybe<Scalars['BigInt']>;
  adminFee_gt?: InputMaybe<Scalars['BigInt']>;
  adminFee_lt?: InputMaybe<Scalars['BigInt']>;
  adminFee_gte?: InputMaybe<Scalars['BigInt']>;
  adminFee_lte?: InputMaybe<Scalars['BigInt']>;
  adminFee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  pooledTokens?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pooledTokens_?: InputMaybe<staginggoerli_PooledToken_filter>;
  tokenPrecisionMultipliers?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  tokenPrecisionMultipliers_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  balances_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  adminFees_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant?: InputMaybe<Scalars['BigInt']>;
  invariant_not?: InputMaybe<Scalars['BigInt']>;
  invariant_gt?: InputMaybe<Scalars['BigInt']>;
  invariant_lt?: InputMaybe<Scalars['BigInt']>;
  invariant_gte?: InputMaybe<Scalars['BigInt']>;
  invariant_lte?: InputMaybe<Scalars['BigInt']>;
  invariant_in?: InputMaybe<Array<Scalars['BigInt']>>;
  invariant_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_not?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lt?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_gte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_lte?: InputMaybe<Scalars['BigInt']>;
  lpTokenSupply_in?: InputMaybe<Array<Scalars['BigInt']>>;
  lpTokenSupply_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwap_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_StableSwap_filter>>>;
};

export type staginggoerli_StableSwap_orderBy =
  | 'id'
  | 'isActive'
  | 'key'
  | 'canonicalId'
  | 'domain'
  | 'swapPool'
  | 'lpToken'
  | 'initialA'
  | 'futureA'
  | 'initialATime'
  | 'futureATime'
  | 'swapFee'
  | 'adminFee'
  | 'pooledTokens'
  | 'tokenPrecisionMultipliers'
  | 'balances'
  | 'adminFees'
  | 'invariant'
  | 'lpTokenSupply';

export type staginggoerli_SwapDailyVolume = staginggoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_BigDecimal'];
};

export type staginggoerli_SwapDailyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_SwapDailyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_SwapDailyVolume_filter>>>;
};

export type staginggoerli_SwapDailyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_SwapHourlyVolume = staginggoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_BigDecimal'];
};

export type staginggoerli_SwapHourlyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_SwapHourlyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_SwapHourlyVolume_filter>>>;
};

export type staginggoerli_SwapHourlyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_SwapTradeVolume = {
  stableSwap: staginggoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_BigDecimal'];
};

export type staginggoerli_SwapTradeVolume_filter = {
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_SwapTradeVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_SwapTradeVolume_filter>>>;
};

export type staginggoerli_SwapTradeVolume_orderBy =
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_SwapWeeklyVolume = staginggoerli_SwapTradeVolume & {
  id: Scalars['ID'];
  stableSwap: staginggoerli_StableSwap;
  timestamp: Scalars['BigInt'];
  volume: Scalars['staginggoerli_BigDecimal'];
};

export type staginggoerli_SwapWeeklyVolume_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  stableSwap?: InputMaybe<Scalars['String']>;
  stableSwap_not?: InputMaybe<Scalars['String']>;
  stableSwap_gt?: InputMaybe<Scalars['String']>;
  stableSwap_lt?: InputMaybe<Scalars['String']>;
  stableSwap_gte?: InputMaybe<Scalars['String']>;
  stableSwap_lte?: InputMaybe<Scalars['String']>;
  stableSwap_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_not_in?: InputMaybe<Array<Scalars['String']>>;
  stableSwap_contains?: InputMaybe<Scalars['String']>;
  stableSwap_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains?: InputMaybe<Scalars['String']>;
  stableSwap_not_contains_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with?: InputMaybe<Scalars['String']>;
  stableSwap_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  stableSwap_?: InputMaybe<staginggoerli_StableSwap_filter>;
  timestamp?: InputMaybe<Scalars['BigInt']>;
  timestamp_not?: InputMaybe<Scalars['BigInt']>;
  timestamp_gt?: InputMaybe<Scalars['BigInt']>;
  timestamp_lt?: InputMaybe<Scalars['BigInt']>;
  timestamp_gte?: InputMaybe<Scalars['BigInt']>;
  timestamp_lte?: InputMaybe<Scalars['BigInt']>;
  timestamp_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  volume?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_not?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lt?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_gte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_lte?: InputMaybe<Scalars['staginggoerli_BigDecimal']>;
  volume_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  volume_not_in?: InputMaybe<Array<Scalars['staginggoerli_BigDecimal']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_SwapWeeklyVolume_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_SwapWeeklyVolume_filter>>>;
};

export type staginggoerli_SwapWeeklyVolume_orderBy =
  | 'id'
  | 'stableSwap'
  | 'timestamp'
  | 'volume';

export type staginggoerli_TransferRelayerFee = {
  id: Scalars['ID'];
  transferId: Scalars['staginggoerli_Bytes'];
  fee?: Maybe<Scalars['BigInt']>;
};

export type staginggoerli_TransferRelayerFee_filter = {
  id?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  transferId?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_not?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_gt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_lt?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_gte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_lte?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transferId_not_in?: InputMaybe<Array<Scalars['staginggoerli_Bytes']>>;
  transferId_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  transferId_not_contains?: InputMaybe<Scalars['staginggoerli_Bytes']>;
  fee?: InputMaybe<Scalars['BigInt']>;
  fee_not?: InputMaybe<Scalars['BigInt']>;
  fee_gt?: InputMaybe<Scalars['BigInt']>;
  fee_lt?: InputMaybe<Scalars['BigInt']>;
  fee_gte?: InputMaybe<Scalars['BigInt']>;
  fee_lte?: InputMaybe<Scalars['BigInt']>;
  fee_in?: InputMaybe<Array<Scalars['BigInt']>>;
  fee_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<staginggoerli_BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<staginggoerli_TransferRelayerFee_filter>>>;
  or?: InputMaybe<Array<InputMaybe<staginggoerli_TransferRelayerFee_filter>>>;
};

export type staginggoerli_TransferRelayerFee_orderBy =
  | 'id'
  | 'transferId'
  | 'fee';

export type staginggoerli_TransferStatus =
  | 'XCalled'
  | 'Executed'
  | 'Reconciled'
  | 'CompletedSlow'
  | 'CompletedFast';

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Query: ResolverTypeWrapper<{}>;
  Subscription: ResolverTypeWrapper<{}>;
  polygon_swap_BigDecimal: ResolverTypeWrapper<Scalars['polygon_swap_BigDecimal']>;
  BigInt: ResolverTypeWrapper<Scalars['BigInt']>;
  polygon_swap_BlockChangedFilter: polygon_swap_BlockChangedFilter;
  polygon_swap_Block_height: polygon_swap_Block_height;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  polygon_swap_Bytes: ResolverTypeWrapper<Scalars['polygon_swap_Bytes']>;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  polygon_swap_OrderDirection: polygon_swap_OrderDirection;
  polygon_swap_PooledToken: ResolverTypeWrapper<polygon_swap_PooledToken>;
  polygon_swap_PooledToken_filter: polygon_swap_PooledToken_filter;
  polygon_swap_PooledToken_orderBy: polygon_swap_PooledToken_orderBy;
  polygon_swap_StableSwap: ResolverTypeWrapper<polygon_swap_StableSwap>;
  polygon_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<polygon_swap_StableSwapAddLiquidityEvent>;
  polygon_swap_StableSwapAddLiquidityEvent_filter: polygon_swap_StableSwapAddLiquidityEvent_filter;
  polygon_swap_StableSwapAddLiquidityEvent_orderBy: polygon_swap_StableSwapAddLiquidityEvent_orderBy;
  polygon_swap_StableSwapEvent: ResolversTypes['polygon_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['polygon_swap_StableSwapRemoveLiquidityEvent'];
  polygon_swap_StableSwapEvent_filter: polygon_swap_StableSwapEvent_filter;
  polygon_swap_StableSwapEvent_orderBy: polygon_swap_StableSwapEvent_orderBy;
  polygon_swap_StableSwapExchange: ResolverTypeWrapper<polygon_swap_StableSwapExchange>;
  polygon_swap_StableSwapExchange_filter: polygon_swap_StableSwapExchange_filter;
  polygon_swap_StableSwapExchange_orderBy: polygon_swap_StableSwapExchange_orderBy;
  polygon_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<polygon_swap_StableSwapRemoveLiquidityEvent>;
  polygon_swap_StableSwapRemoveLiquidityEvent_filter: polygon_swap_StableSwapRemoveLiquidityEvent_filter;
  polygon_swap_StableSwapRemoveLiquidityEvent_orderBy: polygon_swap_StableSwapRemoveLiquidityEvent_orderBy;
  polygon_swap_StableSwap_filter: polygon_swap_StableSwap_filter;
  polygon_swap_StableSwap_orderBy: polygon_swap_StableSwap_orderBy;
  String: ResolverTypeWrapper<Scalars['String']>;
  polygon_swap_SwapDailyVolume: ResolverTypeWrapper<polygon_swap_SwapDailyVolume>;
  polygon_swap_SwapDailyVolume_filter: polygon_swap_SwapDailyVolume_filter;
  polygon_swap_SwapDailyVolume_orderBy: polygon_swap_SwapDailyVolume_orderBy;
  polygon_swap_SwapHourlyVolume: ResolverTypeWrapper<polygon_swap_SwapHourlyVolume>;
  polygon_swap_SwapHourlyVolume_filter: polygon_swap_SwapHourlyVolume_filter;
  polygon_swap_SwapHourlyVolume_orderBy: polygon_swap_SwapHourlyVolume_orderBy;
  polygon_swap_SwapTradeVolume: ResolversTypes['polygon_swap_SwapDailyVolume'] | ResolversTypes['polygon_swap_SwapHourlyVolume'] | ResolversTypes['polygon_swap_SwapWeeklyVolume'];
  polygon_swap_SwapTradeVolume_filter: polygon_swap_SwapTradeVolume_filter;
  polygon_swap_SwapTradeVolume_orderBy: polygon_swap_SwapTradeVolume_orderBy;
  polygon_swap_SwapWeeklyVolume: ResolverTypeWrapper<polygon_swap_SwapWeeklyVolume>;
  polygon_swap_SwapWeeklyVolume_filter: polygon_swap_SwapWeeklyVolume_filter;
  polygon_swap_SwapWeeklyVolume_orderBy: polygon_swap_SwapWeeklyVolume_orderBy;
  polygon_swap_SystemInfo: ResolverTypeWrapper<polygon_swap_SystemInfo>;
  polygon_swap_SystemInfo_filter: polygon_swap_SystemInfo_filter;
  polygon_swap_SystemInfo_orderBy: polygon_swap_SystemInfo_orderBy;
  polygon_swap__Block_: ResolverTypeWrapper<polygon_swap__Block_>;
  polygon_swap__Meta_: ResolverTypeWrapper<polygon_swap__Meta_>;
  _SubgraphErrorPolicy_: _SubgraphErrorPolicy_;
  optimismgoerli_AggregateRoot: ResolverTypeWrapper<optimismgoerli_AggregateRoot>;
  optimismgoerli_AggregateRoot_filter: optimismgoerli_AggregateRoot_filter;
  optimismgoerli_AggregateRoot_orderBy: optimismgoerli_AggregateRoot_orderBy;
  optimismgoerli_Asset: ResolverTypeWrapper<optimismgoerli_Asset>;
  optimismgoerli_AssetBalance: ResolverTypeWrapper<optimismgoerli_AssetBalance>;
  optimismgoerli_AssetBalance_filter: optimismgoerli_AssetBalance_filter;
  optimismgoerli_AssetBalance_orderBy: optimismgoerli_AssetBalance_orderBy;
  optimismgoerli_AssetStatus: ResolverTypeWrapper<optimismgoerli_AssetStatus>;
  optimismgoerli_AssetStatus_filter: optimismgoerli_AssetStatus_filter;
  optimismgoerli_AssetStatus_orderBy: optimismgoerli_AssetStatus_orderBy;
  optimismgoerli_Asset_filter: optimismgoerli_Asset_filter;
  optimismgoerli_Asset_orderBy: optimismgoerli_Asset_orderBy;
  optimismgoerli_BigDecimal: ResolverTypeWrapper<Scalars['optimismgoerli_BigDecimal']>;
  optimismgoerli_BlockChangedFilter: optimismgoerli_BlockChangedFilter;
  optimismgoerli_Block_height: optimismgoerli_Block_height;
  optimismgoerli_Bytes: ResolverTypeWrapper<Scalars['optimismgoerli_Bytes']>;
  optimismgoerli_ConnectorMeta: ResolverTypeWrapper<optimismgoerli_ConnectorMeta>;
  optimismgoerli_ConnectorMeta_filter: optimismgoerli_ConnectorMeta_filter;
  optimismgoerli_ConnectorMeta_orderBy: optimismgoerli_ConnectorMeta_orderBy;
  optimismgoerli_DestinationTransfer: ResolverTypeWrapper<optimismgoerli_DestinationTransfer>;
  optimismgoerli_DestinationTransfer_filter: optimismgoerli_DestinationTransfer_filter;
  optimismgoerli_DestinationTransfer_orderBy: optimismgoerli_DestinationTransfer_orderBy;
  optimismgoerli_OrderDirection: optimismgoerli_OrderDirection;
  optimismgoerli_OriginMessage: ResolverTypeWrapper<optimismgoerli_OriginMessage>;
  optimismgoerli_OriginMessage_filter: optimismgoerli_OriginMessage_filter;
  optimismgoerli_OriginMessage_orderBy: optimismgoerli_OriginMessage_orderBy;
  optimismgoerli_OriginTransfer: ResolverTypeWrapper<optimismgoerli_OriginTransfer>;
  optimismgoerli_OriginTransfer_filter: optimismgoerli_OriginTransfer_filter;
  optimismgoerli_OriginTransfer_orderBy: optimismgoerli_OriginTransfer_orderBy;
  optimismgoerli_Relayer: ResolverTypeWrapper<optimismgoerli_Relayer>;
  optimismgoerli_Relayer_filter: optimismgoerli_Relayer_filter;
  optimismgoerli_Relayer_orderBy: optimismgoerli_Relayer_orderBy;
  optimismgoerli_RootCount: ResolverTypeWrapper<optimismgoerli_RootCount>;
  optimismgoerli_RootCount_filter: optimismgoerli_RootCount_filter;
  optimismgoerli_RootCount_orderBy: optimismgoerli_RootCount_orderBy;
  optimismgoerli_RootMessageSent: ResolverTypeWrapper<optimismgoerli_RootMessageSent>;
  optimismgoerli_RootMessageSent_filter: optimismgoerli_RootMessageSent_filter;
  optimismgoerli_RootMessageSent_orderBy: optimismgoerli_RootMessageSent_orderBy;
  optimismgoerli_Router: ResolverTypeWrapper<optimismgoerli_Router>;
  optimismgoerli_Router_filter: optimismgoerli_Router_filter;
  optimismgoerli_Router_orderBy: optimismgoerli_Router_orderBy;
  optimismgoerli_Sequencer: ResolverTypeWrapper<optimismgoerli_Sequencer>;
  optimismgoerli_Sequencer_filter: optimismgoerli_Sequencer_filter;
  optimismgoerli_Sequencer_orderBy: optimismgoerli_Sequencer_orderBy;
  optimismgoerli_Setting: ResolverTypeWrapper<optimismgoerli_Setting>;
  optimismgoerli_Setting_filter: optimismgoerli_Setting_filter;
  optimismgoerli_Setting_orderBy: optimismgoerli_Setting_orderBy;
  optimismgoerli_TransferStatus: optimismgoerli_TransferStatus;
  optimismgoerli__Block_: ResolverTypeWrapper<optimismgoerli__Block_>;
  optimismgoerli__Meta_: ResolverTypeWrapper<optimismgoerli__Meta_>;
  stagingarbitrumgoerli_swap_BigDecimal: ResolverTypeWrapper<Scalars['stagingarbitrumgoerli_swap_BigDecimal']>;
  stagingarbitrumgoerli_swap_BlockChangedFilter: stagingarbitrumgoerli_swap_BlockChangedFilter;
  stagingarbitrumgoerli_swap_Block_height: stagingarbitrumgoerli_swap_Block_height;
  stagingarbitrumgoerli_swap_Bytes: ResolverTypeWrapper<Scalars['stagingarbitrumgoerli_swap_Bytes']>;
  stagingarbitrumgoerli_swap_OrderDirection: stagingarbitrumgoerli_swap_OrderDirection;
  stagingarbitrumgoerli_swap_PooledToken: ResolverTypeWrapper<stagingarbitrumgoerli_swap_PooledToken>;
  stagingarbitrumgoerli_swap_PooledToken_filter: stagingarbitrumgoerli_swap_PooledToken_filter;
  stagingarbitrumgoerli_swap_PooledToken_orderBy: stagingarbitrumgoerli_swap_PooledToken_orderBy;
  stagingarbitrumgoerli_swap_StableSwap: ResolverTypeWrapper<stagingarbitrumgoerli_swap_StableSwap>;
  stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter: stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter;
  stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy: stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy;
  stagingarbitrumgoerli_swap_StableSwapEvent: ResolversTypes['stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent'];
  stagingarbitrumgoerli_swap_StableSwapEvent_filter: stagingarbitrumgoerli_swap_StableSwapEvent_filter;
  stagingarbitrumgoerli_swap_StableSwapEvent_orderBy: stagingarbitrumgoerli_swap_StableSwapEvent_orderBy;
  stagingarbitrumgoerli_swap_StableSwapExchange: ResolverTypeWrapper<stagingarbitrumgoerli_swap_StableSwapExchange>;
  stagingarbitrumgoerli_swap_StableSwapExchange_filter: stagingarbitrumgoerli_swap_StableSwapExchange_filter;
  stagingarbitrumgoerli_swap_StableSwapExchange_orderBy: stagingarbitrumgoerli_swap_StableSwapExchange_orderBy;
  stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter: stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy: stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy;
  stagingarbitrumgoerli_swap_StableSwap_filter: stagingarbitrumgoerli_swap_StableSwap_filter;
  stagingarbitrumgoerli_swap_StableSwap_orderBy: stagingarbitrumgoerli_swap_StableSwap_orderBy;
  stagingarbitrumgoerli_swap_SwapDailyVolume: ResolverTypeWrapper<stagingarbitrumgoerli_swap_SwapDailyVolume>;
  stagingarbitrumgoerli_swap_SwapDailyVolume_filter: stagingarbitrumgoerli_swap_SwapDailyVolume_filter;
  stagingarbitrumgoerli_swap_SwapDailyVolume_orderBy: stagingarbitrumgoerli_swap_SwapDailyVolume_orderBy;
  stagingarbitrumgoerli_swap_SwapHourlyVolume: ResolverTypeWrapper<stagingarbitrumgoerli_swap_SwapHourlyVolume>;
  stagingarbitrumgoerli_swap_SwapHourlyVolume_filter: stagingarbitrumgoerli_swap_SwapHourlyVolume_filter;
  stagingarbitrumgoerli_swap_SwapHourlyVolume_orderBy: stagingarbitrumgoerli_swap_SwapHourlyVolume_orderBy;
  stagingarbitrumgoerli_swap_SwapTradeVolume: ResolversTypes['stagingarbitrumgoerli_swap_SwapDailyVolume'] | ResolversTypes['stagingarbitrumgoerli_swap_SwapHourlyVolume'] | ResolversTypes['stagingarbitrumgoerli_swap_SwapWeeklyVolume'];
  stagingarbitrumgoerli_swap_SwapTradeVolume_filter: stagingarbitrumgoerli_swap_SwapTradeVolume_filter;
  stagingarbitrumgoerli_swap_SwapTradeVolume_orderBy: stagingarbitrumgoerli_swap_SwapTradeVolume_orderBy;
  stagingarbitrumgoerli_swap_SwapWeeklyVolume: ResolverTypeWrapper<stagingarbitrumgoerli_swap_SwapWeeklyVolume>;
  stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter: stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter;
  stagingarbitrumgoerli_swap_SwapWeeklyVolume_orderBy: stagingarbitrumgoerli_swap_SwapWeeklyVolume_orderBy;
  stagingarbitrumgoerli_swap_SystemInfo: ResolverTypeWrapper<stagingarbitrumgoerli_swap_SystemInfo>;
  stagingarbitrumgoerli_swap_SystemInfo_filter: stagingarbitrumgoerli_swap_SystemInfo_filter;
  stagingarbitrumgoerli_swap_SystemInfo_orderBy: stagingarbitrumgoerli_swap_SystemInfo_orderBy;
  stagingarbitrumgoerli_swap__Block_: ResolverTypeWrapper<stagingarbitrumgoerli_swap__Block_>;
  stagingarbitrumgoerli_swap__Meta_: ResolverTypeWrapper<stagingarbitrumgoerli_swap__Meta_>;
  arbitrumgoerli_AggregateRoot: ResolverTypeWrapper<arbitrumgoerli_AggregateRoot>;
  arbitrumgoerli_AggregateRoot_filter: arbitrumgoerli_AggregateRoot_filter;
  arbitrumgoerli_AggregateRoot_orderBy: arbitrumgoerli_AggregateRoot_orderBy;
  arbitrumgoerli_Asset: ResolverTypeWrapper<arbitrumgoerli_Asset>;
  arbitrumgoerli_AssetBalance: ResolverTypeWrapper<arbitrumgoerli_AssetBalance>;
  arbitrumgoerli_AssetBalance_filter: arbitrumgoerli_AssetBalance_filter;
  arbitrumgoerli_AssetBalance_orderBy: arbitrumgoerli_AssetBalance_orderBy;
  arbitrumgoerli_AssetStatus: ResolverTypeWrapper<arbitrumgoerli_AssetStatus>;
  arbitrumgoerli_AssetStatus_filter: arbitrumgoerli_AssetStatus_filter;
  arbitrumgoerli_AssetStatus_orderBy: arbitrumgoerli_AssetStatus_orderBy;
  arbitrumgoerli_Asset_filter: arbitrumgoerli_Asset_filter;
  arbitrumgoerli_Asset_orderBy: arbitrumgoerli_Asset_orderBy;
  arbitrumgoerli_BigDecimal: ResolverTypeWrapper<Scalars['arbitrumgoerli_BigDecimal']>;
  arbitrumgoerli_BlockChangedFilter: arbitrumgoerli_BlockChangedFilter;
  arbitrumgoerli_Block_height: arbitrumgoerli_Block_height;
  arbitrumgoerli_Bytes: ResolverTypeWrapper<Scalars['arbitrumgoerli_Bytes']>;
  arbitrumgoerli_ConnectorMeta: ResolverTypeWrapper<arbitrumgoerli_ConnectorMeta>;
  arbitrumgoerli_ConnectorMeta_filter: arbitrumgoerli_ConnectorMeta_filter;
  arbitrumgoerli_ConnectorMeta_orderBy: arbitrumgoerli_ConnectorMeta_orderBy;
  arbitrumgoerli_DestinationTransfer: ResolverTypeWrapper<arbitrumgoerli_DestinationTransfer>;
  arbitrumgoerli_DestinationTransfer_filter: arbitrumgoerli_DestinationTransfer_filter;
  arbitrumgoerli_DestinationTransfer_orderBy: arbitrumgoerli_DestinationTransfer_orderBy;
  arbitrumgoerli_OrderDirection: arbitrumgoerli_OrderDirection;
  arbitrumgoerli_OriginMessage: ResolverTypeWrapper<arbitrumgoerli_OriginMessage>;
  arbitrumgoerli_OriginMessage_filter: arbitrumgoerli_OriginMessage_filter;
  arbitrumgoerli_OriginMessage_orderBy: arbitrumgoerli_OriginMessage_orderBy;
  arbitrumgoerli_OriginTransfer: ResolverTypeWrapper<arbitrumgoerli_OriginTransfer>;
  arbitrumgoerli_OriginTransfer_filter: arbitrumgoerli_OriginTransfer_filter;
  arbitrumgoerli_OriginTransfer_orderBy: arbitrumgoerli_OriginTransfer_orderBy;
  arbitrumgoerli_Relayer: ResolverTypeWrapper<arbitrumgoerli_Relayer>;
  arbitrumgoerli_Relayer_filter: arbitrumgoerli_Relayer_filter;
  arbitrumgoerli_Relayer_orderBy: arbitrumgoerli_Relayer_orderBy;
  arbitrumgoerli_RootCount: ResolverTypeWrapper<arbitrumgoerli_RootCount>;
  arbitrumgoerli_RootCount_filter: arbitrumgoerli_RootCount_filter;
  arbitrumgoerli_RootCount_orderBy: arbitrumgoerli_RootCount_orderBy;
  arbitrumgoerli_RootMessageSent: ResolverTypeWrapper<arbitrumgoerli_RootMessageSent>;
  arbitrumgoerli_RootMessageSent_filter: arbitrumgoerli_RootMessageSent_filter;
  arbitrumgoerli_RootMessageSent_orderBy: arbitrumgoerli_RootMessageSent_orderBy;
  arbitrumgoerli_Router: ResolverTypeWrapper<arbitrumgoerli_Router>;
  arbitrumgoerli_Router_filter: arbitrumgoerli_Router_filter;
  arbitrumgoerli_Router_orderBy: arbitrumgoerli_Router_orderBy;
  arbitrumgoerli_Sequencer: ResolverTypeWrapper<arbitrumgoerli_Sequencer>;
  arbitrumgoerli_Sequencer_filter: arbitrumgoerli_Sequencer_filter;
  arbitrumgoerli_Sequencer_orderBy: arbitrumgoerli_Sequencer_orderBy;
  arbitrumgoerli_Setting: ResolverTypeWrapper<arbitrumgoerli_Setting>;
  arbitrumgoerli_Setting_filter: arbitrumgoerli_Setting_filter;
  arbitrumgoerli_Setting_orderBy: arbitrumgoerli_Setting_orderBy;
  arbitrumgoerli_TransferStatus: arbitrumgoerli_TransferStatus;
  arbitrumgoerli__Block_: ResolverTypeWrapper<arbitrumgoerli__Block_>;
  arbitrumgoerli__Meta_: ResolverTypeWrapper<arbitrumgoerli__Meta_>;
  stagingoptimismgoerli_swap_BigDecimal: ResolverTypeWrapper<Scalars['stagingoptimismgoerli_swap_BigDecimal']>;
  stagingoptimismgoerli_swap_BlockChangedFilter: stagingoptimismgoerli_swap_BlockChangedFilter;
  stagingoptimismgoerli_swap_Block_height: stagingoptimismgoerli_swap_Block_height;
  stagingoptimismgoerli_swap_Bytes: ResolverTypeWrapper<Scalars['stagingoptimismgoerli_swap_Bytes']>;
  stagingoptimismgoerli_swap_OrderDirection: stagingoptimismgoerli_swap_OrderDirection;
  stagingoptimismgoerli_swap_PooledToken: ResolverTypeWrapper<stagingoptimismgoerli_swap_PooledToken>;
  stagingoptimismgoerli_swap_PooledToken_filter: stagingoptimismgoerli_swap_PooledToken_filter;
  stagingoptimismgoerli_swap_PooledToken_orderBy: stagingoptimismgoerli_swap_PooledToken_orderBy;
  stagingoptimismgoerli_swap_StableSwap: ResolverTypeWrapper<stagingoptimismgoerli_swap_StableSwap>;
  stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent>;
  stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter: stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter;
  stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy: stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy;
  stagingoptimismgoerli_swap_StableSwapEvent: ResolversTypes['stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent'];
  stagingoptimismgoerli_swap_StableSwapEvent_filter: stagingoptimismgoerli_swap_StableSwapEvent_filter;
  stagingoptimismgoerli_swap_StableSwapEvent_orderBy: stagingoptimismgoerli_swap_StableSwapEvent_orderBy;
  stagingoptimismgoerli_swap_StableSwapExchange: ResolverTypeWrapper<stagingoptimismgoerli_swap_StableSwapExchange>;
  stagingoptimismgoerli_swap_StableSwapExchange_filter: stagingoptimismgoerli_swap_StableSwapExchange_filter;
  stagingoptimismgoerli_swap_StableSwapExchange_orderBy: stagingoptimismgoerli_swap_StableSwapExchange_orderBy;
  stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter: stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy: stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy;
  stagingoptimismgoerli_swap_StableSwap_filter: stagingoptimismgoerli_swap_StableSwap_filter;
  stagingoptimismgoerli_swap_StableSwap_orderBy: stagingoptimismgoerli_swap_StableSwap_orderBy;
  stagingoptimismgoerli_swap_SwapDailyVolume: ResolverTypeWrapper<stagingoptimismgoerli_swap_SwapDailyVolume>;
  stagingoptimismgoerli_swap_SwapDailyVolume_filter: stagingoptimismgoerli_swap_SwapDailyVolume_filter;
  stagingoptimismgoerli_swap_SwapDailyVolume_orderBy: stagingoptimismgoerli_swap_SwapDailyVolume_orderBy;
  stagingoptimismgoerli_swap_SwapHourlyVolume: ResolverTypeWrapper<stagingoptimismgoerli_swap_SwapHourlyVolume>;
  stagingoptimismgoerli_swap_SwapHourlyVolume_filter: stagingoptimismgoerli_swap_SwapHourlyVolume_filter;
  stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy: stagingoptimismgoerli_swap_SwapHourlyVolume_orderBy;
  stagingoptimismgoerli_swap_SwapTradeVolume: ResolversTypes['stagingoptimismgoerli_swap_SwapDailyVolume'] | ResolversTypes['stagingoptimismgoerli_swap_SwapHourlyVolume'] | ResolversTypes['stagingoptimismgoerli_swap_SwapWeeklyVolume'];
  stagingoptimismgoerli_swap_SwapTradeVolume_filter: stagingoptimismgoerli_swap_SwapTradeVolume_filter;
  stagingoptimismgoerli_swap_SwapTradeVolume_orderBy: stagingoptimismgoerli_swap_SwapTradeVolume_orderBy;
  stagingoptimismgoerli_swap_SwapWeeklyVolume: ResolverTypeWrapper<stagingoptimismgoerli_swap_SwapWeeklyVolume>;
  stagingoptimismgoerli_swap_SwapWeeklyVolume_filter: stagingoptimismgoerli_swap_SwapWeeklyVolume_filter;
  stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy: stagingoptimismgoerli_swap_SwapWeeklyVolume_orderBy;
  stagingoptimismgoerli_swap_SystemInfo: ResolverTypeWrapper<stagingoptimismgoerli_swap_SystemInfo>;
  stagingoptimismgoerli_swap_SystemInfo_filter: stagingoptimismgoerli_swap_SystemInfo_filter;
  stagingoptimismgoerli_swap_SystemInfo_orderBy: stagingoptimismgoerli_swap_SystemInfo_orderBy;
  stagingoptimismgoerli_swap__Block_: ResolverTypeWrapper<stagingoptimismgoerli_swap__Block_>;
  stagingoptimismgoerli_swap__Meta_: ResolverTypeWrapper<stagingoptimismgoerli_swap__Meta_>;
  testgoerli_Asset: ResolverTypeWrapper<testgoerli_Asset>;
  testgoerli_AssetBalance: ResolverTypeWrapper<testgoerli_AssetBalance>;
  testgoerli_AssetBalance_filter: testgoerli_AssetBalance_filter;
  testgoerli_AssetBalance_orderBy: testgoerli_AssetBalance_orderBy;
  testgoerli_Asset_filter: testgoerli_Asset_filter;
  testgoerli_Asset_orderBy: testgoerli_Asset_orderBy;
  testgoerli_BigDecimal: ResolverTypeWrapper<Scalars['testgoerli_BigDecimal']>;
  testgoerli_BlockChangedFilter: testgoerli_BlockChangedFilter;
  testgoerli_Block_height: testgoerli_Block_height;
  testgoerli_Bytes: ResolverTypeWrapper<Scalars['testgoerli_Bytes']>;
  testgoerli_DestinationTransfer: ResolverTypeWrapper<testgoerli_DestinationTransfer>;
  testgoerli_DestinationTransfer_filter: testgoerli_DestinationTransfer_filter;
  testgoerli_DestinationTransfer_orderBy: testgoerli_DestinationTransfer_orderBy;
  testgoerli_OrderDirection: testgoerli_OrderDirection;
  testgoerli_OriginTransfer: ResolverTypeWrapper<testgoerli_OriginTransfer>;
  testgoerli_OriginTransfer_filter: testgoerli_OriginTransfer_filter;
  testgoerli_OriginTransfer_orderBy: testgoerli_OriginTransfer_orderBy;
  testgoerli_Relayer: ResolverTypeWrapper<testgoerli_Relayer>;
  testgoerli_Relayer_filter: testgoerli_Relayer_filter;
  testgoerli_Relayer_orderBy: testgoerli_Relayer_orderBy;
  testgoerli_Router: ResolverTypeWrapper<testgoerli_Router>;
  testgoerli_Router_filter: testgoerli_Router_filter;
  testgoerli_Router_orderBy: testgoerli_Router_orderBy;
  testgoerli_Setting: ResolverTypeWrapper<testgoerli_Setting>;
  testgoerli_Setting_filter: testgoerli_Setting_filter;
  testgoerli_Setting_orderBy: testgoerli_Setting_orderBy;
  testgoerli_SponsorVault: ResolverTypeWrapper<testgoerli_SponsorVault>;
  testgoerli_SponsorVault_filter: testgoerli_SponsorVault_filter;
  testgoerli_SponsorVault_orderBy: testgoerli_SponsorVault_orderBy;
  testgoerli_StableSwap: ResolverTypeWrapper<testgoerli_StableSwap>;
  testgoerli_StableSwap_filter: testgoerli_StableSwap_filter;
  testgoerli_StableSwap_orderBy: testgoerli_StableSwap_orderBy;
  testgoerli_TransferStatus: testgoerli_TransferStatus;
  testgoerli__Block_: ResolverTypeWrapper<testgoerli__Block_>;
  testgoerli__Meta_: ResolverTypeWrapper<testgoerli__Meta_>;
  xdai_swap_BigDecimal: ResolverTypeWrapper<Scalars['xdai_swap_BigDecimal']>;
  xdai_swap_BlockChangedFilter: xdai_swap_BlockChangedFilter;
  xdai_swap_Block_height: xdai_swap_Block_height;
  xdai_swap_Bytes: ResolverTypeWrapper<Scalars['xdai_swap_Bytes']>;
  xdai_swap_OrderDirection: xdai_swap_OrderDirection;
  xdai_swap_PooledToken: ResolverTypeWrapper<xdai_swap_PooledToken>;
  xdai_swap_PooledToken_filter: xdai_swap_PooledToken_filter;
  xdai_swap_PooledToken_orderBy: xdai_swap_PooledToken_orderBy;
  xdai_swap_StableSwap: ResolverTypeWrapper<xdai_swap_StableSwap>;
  xdai_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<xdai_swap_StableSwapAddLiquidityEvent>;
  xdai_swap_StableSwapAddLiquidityEvent_filter: xdai_swap_StableSwapAddLiquidityEvent_filter;
  xdai_swap_StableSwapAddLiquidityEvent_orderBy: xdai_swap_StableSwapAddLiquidityEvent_orderBy;
  xdai_swap_StableSwapEvent: ResolversTypes['xdai_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['xdai_swap_StableSwapRemoveLiquidityEvent'];
  xdai_swap_StableSwapEvent_filter: xdai_swap_StableSwapEvent_filter;
  xdai_swap_StableSwapEvent_orderBy: xdai_swap_StableSwapEvent_orderBy;
  xdai_swap_StableSwapExchange: ResolverTypeWrapper<xdai_swap_StableSwapExchange>;
  xdai_swap_StableSwapExchange_filter: xdai_swap_StableSwapExchange_filter;
  xdai_swap_StableSwapExchange_orderBy: xdai_swap_StableSwapExchange_orderBy;
  xdai_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<xdai_swap_StableSwapRemoveLiquidityEvent>;
  xdai_swap_StableSwapRemoveLiquidityEvent_filter: xdai_swap_StableSwapRemoveLiquidityEvent_filter;
  xdai_swap_StableSwapRemoveLiquidityEvent_orderBy: xdai_swap_StableSwapRemoveLiquidityEvent_orderBy;
  xdai_swap_StableSwap_filter: xdai_swap_StableSwap_filter;
  xdai_swap_StableSwap_orderBy: xdai_swap_StableSwap_orderBy;
  xdai_swap_SwapDailyVolume: ResolverTypeWrapper<xdai_swap_SwapDailyVolume>;
  xdai_swap_SwapDailyVolume_filter: xdai_swap_SwapDailyVolume_filter;
  xdai_swap_SwapDailyVolume_orderBy: xdai_swap_SwapDailyVolume_orderBy;
  xdai_swap_SwapHourlyVolume: ResolverTypeWrapper<xdai_swap_SwapHourlyVolume>;
  xdai_swap_SwapHourlyVolume_filter: xdai_swap_SwapHourlyVolume_filter;
  xdai_swap_SwapHourlyVolume_orderBy: xdai_swap_SwapHourlyVolume_orderBy;
  xdai_swap_SwapTradeVolume: ResolversTypes['xdai_swap_SwapDailyVolume'] | ResolversTypes['xdai_swap_SwapHourlyVolume'] | ResolversTypes['xdai_swap_SwapWeeklyVolume'];
  xdai_swap_SwapTradeVolume_filter: xdai_swap_SwapTradeVolume_filter;
  xdai_swap_SwapTradeVolume_orderBy: xdai_swap_SwapTradeVolume_orderBy;
  xdai_swap_SwapWeeklyVolume: ResolverTypeWrapper<xdai_swap_SwapWeeklyVolume>;
  xdai_swap_SwapWeeklyVolume_filter: xdai_swap_SwapWeeklyVolume_filter;
  xdai_swap_SwapWeeklyVolume_orderBy: xdai_swap_SwapWeeklyVolume_orderBy;
  xdai_swap_SystemInfo: ResolverTypeWrapper<xdai_swap_SystemInfo>;
  xdai_swap_SystemInfo_filter: xdai_swap_SystemInfo_filter;
  xdai_swap_SystemInfo_orderBy: xdai_swap_SystemInfo_orderBy;
  xdai_swap__Block_: ResolverTypeWrapper<xdai_swap__Block_>;
  xdai_swap__Meta_: ResolverTypeWrapper<xdai_swap__Meta_>;
  staginggoerli_AggregatedMessageRoot: ResolverTypeWrapper<staginggoerli_AggregatedMessageRoot>;
  staginggoerli_AggregatedMessageRoot_filter: staginggoerli_AggregatedMessageRoot_filter;
  staginggoerli_AggregatedMessageRoot_orderBy: staginggoerli_AggregatedMessageRoot_orderBy;
  staginggoerli_ArbitrumConnectorMeta: ResolverTypeWrapper<staginggoerli_ArbitrumConnectorMeta>;
  staginggoerli_ArbitrumConnectorMeta_filter: staginggoerli_ArbitrumConnectorMeta_filter;
  staginggoerli_ArbitrumConnectorMeta_orderBy: staginggoerli_ArbitrumConnectorMeta_orderBy;
  staginggoerli_BigDecimal: ResolverTypeWrapper<Scalars['staginggoerli_BigDecimal']>;
  staginggoerli_BlockChangedFilter: staginggoerli_BlockChangedFilter;
  staginggoerli_Block_height: staginggoerli_Block_height;
  staginggoerli_BnbConnectorMeta: ResolverTypeWrapper<staginggoerli_BnbConnectorMeta>;
  staginggoerli_BnbConnectorMeta_filter: staginggoerli_BnbConnectorMeta_filter;
  staginggoerli_BnbConnectorMeta_orderBy: staginggoerli_BnbConnectorMeta_orderBy;
  staginggoerli_Bytes: ResolverTypeWrapper<Scalars['staginggoerli_Bytes']>;
  staginggoerli_GnosisConnectorMeta: ResolverTypeWrapper<staginggoerli_GnosisConnectorMeta>;
  staginggoerli_GnosisConnectorMeta_filter: staginggoerli_GnosisConnectorMeta_filter;
  staginggoerli_GnosisConnectorMeta_orderBy: staginggoerli_GnosisConnectorMeta_orderBy;
  staginggoerli_OptimismConnectorMeta: ResolverTypeWrapper<staginggoerli_OptimismConnectorMeta>;
  staginggoerli_OptimismConnectorMeta_filter: staginggoerli_OptimismConnectorMeta_filter;
  staginggoerli_OptimismConnectorMeta_orderBy: staginggoerli_OptimismConnectorMeta_orderBy;
  staginggoerli_OrderDirection: staginggoerli_OrderDirection;
  staginggoerli_PolygonConnectorMeta: ResolverTypeWrapper<staginggoerli_PolygonConnectorMeta>;
  staginggoerli_PolygonConnectorMeta_filter: staginggoerli_PolygonConnectorMeta_filter;
  staginggoerli_PolygonConnectorMeta_orderBy: staginggoerli_PolygonConnectorMeta_orderBy;
  staginggoerli_RootAggregated: ResolverTypeWrapper<staginggoerli_RootAggregated>;
  staginggoerli_RootAggregated_filter: staginggoerli_RootAggregated_filter;
  staginggoerli_RootAggregated_orderBy: staginggoerli_RootAggregated_orderBy;
  staginggoerli_RootManagerMeta: ResolverTypeWrapper<staginggoerli_RootManagerMeta>;
  staginggoerli_RootManagerMeta_filter: staginggoerli_RootManagerMeta_filter;
  staginggoerli_RootManagerMeta_orderBy: staginggoerli_RootManagerMeta_orderBy;
  staginggoerli_RootMessageProcessed: ResolverTypeWrapper<staginggoerli_RootMessageProcessed>;
  staginggoerli_RootMessageProcessed_filter: staginggoerli_RootMessageProcessed_filter;
  staginggoerli_RootMessageProcessed_orderBy: staginggoerli_RootMessageProcessed_orderBy;
  staginggoerli_RootPropagated: ResolverTypeWrapper<staginggoerli_RootPropagated>;
  staginggoerli_RootPropagated_filter: staginggoerli_RootPropagated_filter;
  staginggoerli_RootPropagated_orderBy: staginggoerli_RootPropagated_orderBy;
  staginggoerli__Block_: ResolverTypeWrapper<staginggoerli__Block_>;
  staginggoerli__Meta_: ResolverTypeWrapper<staginggoerli__Meta_>;
  mainnet_AggregatedMessageRoot: ResolverTypeWrapper<mainnet_AggregatedMessageRoot>;
  mainnet_AggregatedMessageRoot_filter: mainnet_AggregatedMessageRoot_filter;
  mainnet_AggregatedMessageRoot_orderBy: mainnet_AggregatedMessageRoot_orderBy;
  mainnet_ArbitrumConnectorMeta: ResolverTypeWrapper<mainnet_ArbitrumConnectorMeta>;
  mainnet_ArbitrumConnectorMeta_filter: mainnet_ArbitrumConnectorMeta_filter;
  mainnet_ArbitrumConnectorMeta_orderBy: mainnet_ArbitrumConnectorMeta_orderBy;
  mainnet_BigDecimal: ResolverTypeWrapper<Scalars['mainnet_BigDecimal']>;
  mainnet_BlockChangedFilter: mainnet_BlockChangedFilter;
  mainnet_Block_height: mainnet_Block_height;
  mainnet_BnbConnectorMeta: ResolverTypeWrapper<mainnet_BnbConnectorMeta>;
  mainnet_BnbConnectorMeta_filter: mainnet_BnbConnectorMeta_filter;
  mainnet_BnbConnectorMeta_orderBy: mainnet_BnbConnectorMeta_orderBy;
  mainnet_Bytes: ResolverTypeWrapper<Scalars['mainnet_Bytes']>;
  mainnet_GnosisConnectorMeta: ResolverTypeWrapper<mainnet_GnosisConnectorMeta>;
  mainnet_GnosisConnectorMeta_filter: mainnet_GnosisConnectorMeta_filter;
  mainnet_GnosisConnectorMeta_orderBy: mainnet_GnosisConnectorMeta_orderBy;
  mainnet_OptimismConnectorMeta: ResolverTypeWrapper<mainnet_OptimismConnectorMeta>;
  mainnet_OptimismConnectorMeta_filter: mainnet_OptimismConnectorMeta_filter;
  mainnet_OptimismConnectorMeta_orderBy: mainnet_OptimismConnectorMeta_orderBy;
  mainnet_OrderDirection: mainnet_OrderDirection;
  mainnet_PolygonConnectorMeta: ResolverTypeWrapper<mainnet_PolygonConnectorMeta>;
  mainnet_PolygonConnectorMeta_filter: mainnet_PolygonConnectorMeta_filter;
  mainnet_PolygonConnectorMeta_orderBy: mainnet_PolygonConnectorMeta_orderBy;
  mainnet_RootAggregated: ResolverTypeWrapper<mainnet_RootAggregated>;
  mainnet_RootAggregated_filter: mainnet_RootAggregated_filter;
  mainnet_RootAggregated_orderBy: mainnet_RootAggregated_orderBy;
  mainnet_RootManagerMeta: ResolverTypeWrapper<mainnet_RootManagerMeta>;
  mainnet_RootManagerMeta_filter: mainnet_RootManagerMeta_filter;
  mainnet_RootManagerMeta_orderBy: mainnet_RootManagerMeta_orderBy;
  mainnet_RootMessageProcessed: ResolverTypeWrapper<mainnet_RootMessageProcessed>;
  mainnet_RootMessageProcessed_filter: mainnet_RootMessageProcessed_filter;
  mainnet_RootMessageProcessed_orderBy: mainnet_RootMessageProcessed_orderBy;
  mainnet_RootPropagated: ResolverTypeWrapper<mainnet_RootPropagated>;
  mainnet_RootPropagated_filter: mainnet_RootPropagated_filter;
  mainnet_RootPropagated_orderBy: mainnet_RootPropagated_orderBy;
  mainnet__Block_: ResolverTypeWrapper<mainnet__Block_>;
  mainnet__Meta_: ResolverTypeWrapper<mainnet__Meta_>;
  testoptimismgoerli_Asset: ResolverTypeWrapper<testoptimismgoerli_Asset>;
  testoptimismgoerli_AssetBalance: ResolverTypeWrapper<testoptimismgoerli_AssetBalance>;
  testoptimismgoerli_AssetBalance_filter: testoptimismgoerli_AssetBalance_filter;
  testoptimismgoerli_AssetBalance_orderBy: testoptimismgoerli_AssetBalance_orderBy;
  testoptimismgoerli_Asset_filter: testoptimismgoerli_Asset_filter;
  testoptimismgoerli_Asset_orderBy: testoptimismgoerli_Asset_orderBy;
  testoptimismgoerli_BigDecimal: ResolverTypeWrapper<Scalars['testoptimismgoerli_BigDecimal']>;
  testoptimismgoerli_BlockChangedFilter: testoptimismgoerli_BlockChangedFilter;
  testoptimismgoerli_Block_height: testoptimismgoerli_Block_height;
  testoptimismgoerli_Bytes: ResolverTypeWrapper<Scalars['testoptimismgoerli_Bytes']>;
  testoptimismgoerli_DestinationTransfer: ResolverTypeWrapper<testoptimismgoerli_DestinationTransfer>;
  testoptimismgoerli_DestinationTransfer_filter: testoptimismgoerli_DestinationTransfer_filter;
  testoptimismgoerli_DestinationTransfer_orderBy: testoptimismgoerli_DestinationTransfer_orderBy;
  testoptimismgoerli_OrderDirection: testoptimismgoerli_OrderDirection;
  testoptimismgoerli_OriginTransfer: ResolverTypeWrapper<testoptimismgoerli_OriginTransfer>;
  testoptimismgoerli_OriginTransfer_filter: testoptimismgoerli_OriginTransfer_filter;
  testoptimismgoerli_OriginTransfer_orderBy: testoptimismgoerli_OriginTransfer_orderBy;
  testoptimismgoerli_Relayer: ResolverTypeWrapper<testoptimismgoerli_Relayer>;
  testoptimismgoerli_Relayer_filter: testoptimismgoerli_Relayer_filter;
  testoptimismgoerli_Relayer_orderBy: testoptimismgoerli_Relayer_orderBy;
  testoptimismgoerli_Router: ResolverTypeWrapper<testoptimismgoerli_Router>;
  testoptimismgoerli_Router_filter: testoptimismgoerli_Router_filter;
  testoptimismgoerli_Router_orderBy: testoptimismgoerli_Router_orderBy;
  testoptimismgoerli_Setting: ResolverTypeWrapper<testoptimismgoerli_Setting>;
  testoptimismgoerli_Setting_filter: testoptimismgoerli_Setting_filter;
  testoptimismgoerli_Setting_orderBy: testoptimismgoerli_Setting_orderBy;
  testoptimismgoerli_SponsorVault: ResolverTypeWrapper<testoptimismgoerli_SponsorVault>;
  testoptimismgoerli_SponsorVault_filter: testoptimismgoerli_SponsorVault_filter;
  testoptimismgoerli_SponsorVault_orderBy: testoptimismgoerli_SponsorVault_orderBy;
  testoptimismgoerli_StableSwap: ResolverTypeWrapper<testoptimismgoerli_StableSwap>;
  testoptimismgoerli_StableSwap_filter: testoptimismgoerli_StableSwap_filter;
  testoptimismgoerli_StableSwap_orderBy: testoptimismgoerli_StableSwap_orderBy;
  testoptimismgoerli_TransferStatus: testoptimismgoerli_TransferStatus;
  testoptimismgoerli__Block_: ResolverTypeWrapper<testoptimismgoerli__Block_>;
  testoptimismgoerli__Meta_: ResolverTypeWrapper<testoptimismgoerli__Meta_>;
  optimism_swap_BigDecimal: ResolverTypeWrapper<Scalars['optimism_swap_BigDecimal']>;
  optimism_swap_BlockChangedFilter: optimism_swap_BlockChangedFilter;
  optimism_swap_Block_height: optimism_swap_Block_height;
  optimism_swap_Bytes: ResolverTypeWrapper<Scalars['optimism_swap_Bytes']>;
  optimism_swap_OrderDirection: optimism_swap_OrderDirection;
  optimism_swap_PooledToken: ResolverTypeWrapper<optimism_swap_PooledToken>;
  optimism_swap_PooledToken_filter: optimism_swap_PooledToken_filter;
  optimism_swap_PooledToken_orderBy: optimism_swap_PooledToken_orderBy;
  optimism_swap_StableSwap: ResolverTypeWrapper<optimism_swap_StableSwap>;
  optimism_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<optimism_swap_StableSwapAddLiquidityEvent>;
  optimism_swap_StableSwapAddLiquidityEvent_filter: optimism_swap_StableSwapAddLiquidityEvent_filter;
  optimism_swap_StableSwapAddLiquidityEvent_orderBy: optimism_swap_StableSwapAddLiquidityEvent_orderBy;
  optimism_swap_StableSwapEvent: ResolversTypes['optimism_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['optimism_swap_StableSwapRemoveLiquidityEvent'];
  optimism_swap_StableSwapEvent_filter: optimism_swap_StableSwapEvent_filter;
  optimism_swap_StableSwapEvent_orderBy: optimism_swap_StableSwapEvent_orderBy;
  optimism_swap_StableSwapExchange: ResolverTypeWrapper<optimism_swap_StableSwapExchange>;
  optimism_swap_StableSwapExchange_filter: optimism_swap_StableSwapExchange_filter;
  optimism_swap_StableSwapExchange_orderBy: optimism_swap_StableSwapExchange_orderBy;
  optimism_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<optimism_swap_StableSwapRemoveLiquidityEvent>;
  optimism_swap_StableSwapRemoveLiquidityEvent_filter: optimism_swap_StableSwapRemoveLiquidityEvent_filter;
  optimism_swap_StableSwapRemoveLiquidityEvent_orderBy: optimism_swap_StableSwapRemoveLiquidityEvent_orderBy;
  optimism_swap_StableSwap_filter: optimism_swap_StableSwap_filter;
  optimism_swap_StableSwap_orderBy: optimism_swap_StableSwap_orderBy;
  optimism_swap_SwapDailyVolume: ResolverTypeWrapper<optimism_swap_SwapDailyVolume>;
  optimism_swap_SwapDailyVolume_filter: optimism_swap_SwapDailyVolume_filter;
  optimism_swap_SwapDailyVolume_orderBy: optimism_swap_SwapDailyVolume_orderBy;
  optimism_swap_SwapHourlyVolume: ResolverTypeWrapper<optimism_swap_SwapHourlyVolume>;
  optimism_swap_SwapHourlyVolume_filter: optimism_swap_SwapHourlyVolume_filter;
  optimism_swap_SwapHourlyVolume_orderBy: optimism_swap_SwapHourlyVolume_orderBy;
  optimism_swap_SwapTradeVolume: ResolversTypes['optimism_swap_SwapDailyVolume'] | ResolversTypes['optimism_swap_SwapHourlyVolume'] | ResolversTypes['optimism_swap_SwapWeeklyVolume'];
  optimism_swap_SwapTradeVolume_filter: optimism_swap_SwapTradeVolume_filter;
  optimism_swap_SwapTradeVolume_orderBy: optimism_swap_SwapTradeVolume_orderBy;
  optimism_swap_SwapWeeklyVolume: ResolverTypeWrapper<optimism_swap_SwapWeeklyVolume>;
  optimism_swap_SwapWeeklyVolume_filter: optimism_swap_SwapWeeklyVolume_filter;
  optimism_swap_SwapWeeklyVolume_orderBy: optimism_swap_SwapWeeklyVolume_orderBy;
  optimism_swap_SystemInfo: ResolverTypeWrapper<optimism_swap_SystemInfo>;
  optimism_swap_SystemInfo_filter: optimism_swap_SystemInfo_filter;
  optimism_swap_SystemInfo_orderBy: optimism_swap_SystemInfo_orderBy;
  optimism_swap__Block_: ResolverTypeWrapper<optimism_swap__Block_>;
  optimism_swap__Meta_: ResolverTypeWrapper<optimism_swap__Meta_>;
  goerli_swap_BigDecimal: ResolverTypeWrapper<Scalars['goerli_swap_BigDecimal']>;
  goerli_swap_BlockChangedFilter: goerli_swap_BlockChangedFilter;
  goerli_swap_Block_height: goerli_swap_Block_height;
  goerli_swap_Bytes: ResolverTypeWrapper<Scalars['goerli_swap_Bytes']>;
  goerli_swap_OrderDirection: goerli_swap_OrderDirection;
  goerli_swap_PooledToken: ResolverTypeWrapper<goerli_swap_PooledToken>;
  goerli_swap_PooledToken_filter: goerli_swap_PooledToken_filter;
  goerli_swap_PooledToken_orderBy: goerli_swap_PooledToken_orderBy;
  goerli_swap_StableSwap: ResolverTypeWrapper<goerli_swap_StableSwap>;
  goerli_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<goerli_swap_StableSwapAddLiquidityEvent>;
  goerli_swap_StableSwapAddLiquidityEvent_filter: goerli_swap_StableSwapAddLiquidityEvent_filter;
  goerli_swap_StableSwapAddLiquidityEvent_orderBy: goerli_swap_StableSwapAddLiquidityEvent_orderBy;
  goerli_swap_StableSwapEvent: ResolversTypes['goerli_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['goerli_swap_StableSwapRemoveLiquidityEvent'];
  goerli_swap_StableSwapEvent_filter: goerli_swap_StableSwapEvent_filter;
  goerli_swap_StableSwapEvent_orderBy: goerli_swap_StableSwapEvent_orderBy;
  goerli_swap_StableSwapExchange: ResolverTypeWrapper<goerli_swap_StableSwapExchange>;
  goerli_swap_StableSwapExchange_filter: goerli_swap_StableSwapExchange_filter;
  goerli_swap_StableSwapExchange_orderBy: goerli_swap_StableSwapExchange_orderBy;
  goerli_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<goerli_swap_StableSwapRemoveLiquidityEvent>;
  goerli_swap_StableSwapRemoveLiquidityEvent_filter: goerli_swap_StableSwapRemoveLiquidityEvent_filter;
  goerli_swap_StableSwapRemoveLiquidityEvent_orderBy: goerli_swap_StableSwapRemoveLiquidityEvent_orderBy;
  goerli_swap_StableSwap_filter: goerli_swap_StableSwap_filter;
  goerli_swap_StableSwap_orderBy: goerli_swap_StableSwap_orderBy;
  goerli_swap_SwapDailyVolume: ResolverTypeWrapper<goerli_swap_SwapDailyVolume>;
  goerli_swap_SwapDailyVolume_filter: goerli_swap_SwapDailyVolume_filter;
  goerli_swap_SwapDailyVolume_orderBy: goerli_swap_SwapDailyVolume_orderBy;
  goerli_swap_SwapHourlyVolume: ResolverTypeWrapper<goerli_swap_SwapHourlyVolume>;
  goerli_swap_SwapHourlyVolume_filter: goerli_swap_SwapHourlyVolume_filter;
  goerli_swap_SwapHourlyVolume_orderBy: goerli_swap_SwapHourlyVolume_orderBy;
  goerli_swap_SwapTradeVolume: ResolversTypes['goerli_swap_SwapDailyVolume'] | ResolversTypes['goerli_swap_SwapHourlyVolume'] | ResolversTypes['goerli_swap_SwapWeeklyVolume'];
  goerli_swap_SwapTradeVolume_filter: goerli_swap_SwapTradeVolume_filter;
  goerli_swap_SwapTradeVolume_orderBy: goerli_swap_SwapTradeVolume_orderBy;
  goerli_swap_SwapWeeklyVolume: ResolverTypeWrapper<goerli_swap_SwapWeeklyVolume>;
  goerli_swap_SwapWeeklyVolume_filter: goerli_swap_SwapWeeklyVolume_filter;
  goerli_swap_SwapWeeklyVolume_orderBy: goerli_swap_SwapWeeklyVolume_orderBy;
  goerli_swap_SystemInfo: ResolverTypeWrapper<goerli_swap_SystemInfo>;
  goerli_swap_SystemInfo_filter: goerli_swap_SystemInfo_filter;
  goerli_swap_SystemInfo_orderBy: goerli_swap_SystemInfo_orderBy;
  goerli_swap__Block_: ResolverTypeWrapper<goerli_swap__Block_>;
  goerli_swap__Meta_: ResolverTypeWrapper<goerli_swap__Meta_>;
  optimismgoerli_swap_BigDecimal: ResolverTypeWrapper<Scalars['optimismgoerli_swap_BigDecimal']>;
  optimismgoerli_swap_BlockChangedFilter: optimismgoerli_swap_BlockChangedFilter;
  optimismgoerli_swap_Block_height: optimismgoerli_swap_Block_height;
  optimismgoerli_swap_Bytes: ResolverTypeWrapper<Scalars['optimismgoerli_swap_Bytes']>;
  optimismgoerli_swap_OrderDirection: optimismgoerli_swap_OrderDirection;
  optimismgoerli_swap_PooledToken: ResolverTypeWrapper<optimismgoerli_swap_PooledToken>;
  optimismgoerli_swap_PooledToken_filter: optimismgoerli_swap_PooledToken_filter;
  optimismgoerli_swap_PooledToken_orderBy: optimismgoerli_swap_PooledToken_orderBy;
  optimismgoerli_swap_StableSwap: ResolverTypeWrapper<optimismgoerli_swap_StableSwap>;
  optimismgoerli_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<optimismgoerli_swap_StableSwapAddLiquidityEvent>;
  optimismgoerli_swap_StableSwapAddLiquidityEvent_filter: optimismgoerli_swap_StableSwapAddLiquidityEvent_filter;
  optimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy: optimismgoerli_swap_StableSwapAddLiquidityEvent_orderBy;
  optimismgoerli_swap_StableSwapEvent: ResolversTypes['optimismgoerli_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['optimismgoerli_swap_StableSwapRemoveLiquidityEvent'];
  optimismgoerli_swap_StableSwapEvent_filter: optimismgoerli_swap_StableSwapEvent_filter;
  optimismgoerli_swap_StableSwapEvent_orderBy: optimismgoerli_swap_StableSwapEvent_orderBy;
  optimismgoerli_swap_StableSwapExchange: ResolverTypeWrapper<optimismgoerli_swap_StableSwapExchange>;
  optimismgoerli_swap_StableSwapExchange_filter: optimismgoerli_swap_StableSwapExchange_filter;
  optimismgoerli_swap_StableSwapExchange_orderBy: optimismgoerli_swap_StableSwapExchange_orderBy;
  optimismgoerli_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<optimismgoerli_swap_StableSwapRemoveLiquidityEvent>;
  optimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter: optimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  optimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy: optimismgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy;
  optimismgoerli_swap_StableSwap_filter: optimismgoerli_swap_StableSwap_filter;
  optimismgoerli_swap_StableSwap_orderBy: optimismgoerli_swap_StableSwap_orderBy;
  optimismgoerli_swap_SwapDailyVolume: ResolverTypeWrapper<optimismgoerli_swap_SwapDailyVolume>;
  optimismgoerli_swap_SwapDailyVolume_filter: optimismgoerli_swap_SwapDailyVolume_filter;
  optimismgoerli_swap_SwapDailyVolume_orderBy: optimismgoerli_swap_SwapDailyVolume_orderBy;
  optimismgoerli_swap_SwapHourlyVolume: ResolverTypeWrapper<optimismgoerli_swap_SwapHourlyVolume>;
  optimismgoerli_swap_SwapHourlyVolume_filter: optimismgoerli_swap_SwapHourlyVolume_filter;
  optimismgoerli_swap_SwapHourlyVolume_orderBy: optimismgoerli_swap_SwapHourlyVolume_orderBy;
  optimismgoerli_swap_SwapTradeVolume: ResolversTypes['optimismgoerli_swap_SwapDailyVolume'] | ResolversTypes['optimismgoerli_swap_SwapHourlyVolume'] | ResolversTypes['optimismgoerli_swap_SwapWeeklyVolume'];
  optimismgoerli_swap_SwapTradeVolume_filter: optimismgoerli_swap_SwapTradeVolume_filter;
  optimismgoerli_swap_SwapTradeVolume_orderBy: optimismgoerli_swap_SwapTradeVolume_orderBy;
  optimismgoerli_swap_SwapWeeklyVolume: ResolverTypeWrapper<optimismgoerli_swap_SwapWeeklyVolume>;
  optimismgoerli_swap_SwapWeeklyVolume_filter: optimismgoerli_swap_SwapWeeklyVolume_filter;
  optimismgoerli_swap_SwapWeeklyVolume_orderBy: optimismgoerli_swap_SwapWeeklyVolume_orderBy;
  optimismgoerli_swap_SystemInfo: ResolverTypeWrapper<optimismgoerli_swap_SystemInfo>;
  optimismgoerli_swap_SystemInfo_filter: optimismgoerli_swap_SystemInfo_filter;
  optimismgoerli_swap_SystemInfo_orderBy: optimismgoerli_swap_SystemInfo_orderBy;
  optimismgoerli_swap__Block_: ResolverTypeWrapper<optimismgoerli_swap__Block_>;
  optimismgoerli_swap__Meta_: ResolverTypeWrapper<optimismgoerli_swap__Meta_>;
  stagingmumbai_swap_BigDecimal: ResolverTypeWrapper<Scalars['stagingmumbai_swap_BigDecimal']>;
  stagingmumbai_swap_BlockChangedFilter: stagingmumbai_swap_BlockChangedFilter;
  stagingmumbai_swap_Block_height: stagingmumbai_swap_Block_height;
  stagingmumbai_swap_Bytes: ResolverTypeWrapper<Scalars['stagingmumbai_swap_Bytes']>;
  stagingmumbai_swap_OrderDirection: stagingmumbai_swap_OrderDirection;
  stagingmumbai_swap_PooledToken: ResolverTypeWrapper<stagingmumbai_swap_PooledToken>;
  stagingmumbai_swap_PooledToken_filter: stagingmumbai_swap_PooledToken_filter;
  stagingmumbai_swap_PooledToken_orderBy: stagingmumbai_swap_PooledToken_orderBy;
  stagingmumbai_swap_StableSwap: ResolverTypeWrapper<stagingmumbai_swap_StableSwap>;
  stagingmumbai_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<stagingmumbai_swap_StableSwapAddLiquidityEvent>;
  stagingmumbai_swap_StableSwapAddLiquidityEvent_filter: stagingmumbai_swap_StableSwapAddLiquidityEvent_filter;
  stagingmumbai_swap_StableSwapAddLiquidityEvent_orderBy: stagingmumbai_swap_StableSwapAddLiquidityEvent_orderBy;
  stagingmumbai_swap_StableSwapEvent: ResolversTypes['stagingmumbai_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['stagingmumbai_swap_StableSwapRemoveLiquidityEvent'];
  stagingmumbai_swap_StableSwapEvent_filter: stagingmumbai_swap_StableSwapEvent_filter;
  stagingmumbai_swap_StableSwapEvent_orderBy: stagingmumbai_swap_StableSwapEvent_orderBy;
  stagingmumbai_swap_StableSwapExchange: ResolverTypeWrapper<stagingmumbai_swap_StableSwapExchange>;
  stagingmumbai_swap_StableSwapExchange_filter: stagingmumbai_swap_StableSwapExchange_filter;
  stagingmumbai_swap_StableSwapExchange_orderBy: stagingmumbai_swap_StableSwapExchange_orderBy;
  stagingmumbai_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<stagingmumbai_swap_StableSwapRemoveLiquidityEvent>;
  stagingmumbai_swap_StableSwapRemoveLiquidityEvent_filter: stagingmumbai_swap_StableSwapRemoveLiquidityEvent_filter;
  stagingmumbai_swap_StableSwapRemoveLiquidityEvent_orderBy: stagingmumbai_swap_StableSwapRemoveLiquidityEvent_orderBy;
  stagingmumbai_swap_StableSwap_filter: stagingmumbai_swap_StableSwap_filter;
  stagingmumbai_swap_StableSwap_orderBy: stagingmumbai_swap_StableSwap_orderBy;
  stagingmumbai_swap_SwapDailyVolume: ResolverTypeWrapper<stagingmumbai_swap_SwapDailyVolume>;
  stagingmumbai_swap_SwapDailyVolume_filter: stagingmumbai_swap_SwapDailyVolume_filter;
  stagingmumbai_swap_SwapDailyVolume_orderBy: stagingmumbai_swap_SwapDailyVolume_orderBy;
  stagingmumbai_swap_SwapHourlyVolume: ResolverTypeWrapper<stagingmumbai_swap_SwapHourlyVolume>;
  stagingmumbai_swap_SwapHourlyVolume_filter: stagingmumbai_swap_SwapHourlyVolume_filter;
  stagingmumbai_swap_SwapHourlyVolume_orderBy: stagingmumbai_swap_SwapHourlyVolume_orderBy;
  stagingmumbai_swap_SwapTradeVolume: ResolversTypes['stagingmumbai_swap_SwapDailyVolume'] | ResolversTypes['stagingmumbai_swap_SwapHourlyVolume'] | ResolversTypes['stagingmumbai_swap_SwapWeeklyVolume'];
  stagingmumbai_swap_SwapTradeVolume_filter: stagingmumbai_swap_SwapTradeVolume_filter;
  stagingmumbai_swap_SwapTradeVolume_orderBy: stagingmumbai_swap_SwapTradeVolume_orderBy;
  stagingmumbai_swap_SwapWeeklyVolume: ResolverTypeWrapper<stagingmumbai_swap_SwapWeeklyVolume>;
  stagingmumbai_swap_SwapWeeklyVolume_filter: stagingmumbai_swap_SwapWeeklyVolume_filter;
  stagingmumbai_swap_SwapWeeklyVolume_orderBy: stagingmumbai_swap_SwapWeeklyVolume_orderBy;
  stagingmumbai_swap_SystemInfo: ResolverTypeWrapper<stagingmumbai_swap_SystemInfo>;
  stagingmumbai_swap_SystemInfo_filter: stagingmumbai_swap_SystemInfo_filter;
  stagingmumbai_swap_SystemInfo_orderBy: stagingmumbai_swap_SystemInfo_orderBy;
  stagingmumbai_swap__Block_: ResolverTypeWrapper<stagingmumbai_swap__Block_>;
  stagingmumbai_swap__Meta_: ResolverTypeWrapper<stagingmumbai_swap__Meta_>;
  goerli_AggregatedMessageRoot: ResolverTypeWrapper<goerli_AggregatedMessageRoot>;
  goerli_AggregatedMessageRoot_filter: goerli_AggregatedMessageRoot_filter;
  goerli_AggregatedMessageRoot_orderBy: goerli_AggregatedMessageRoot_orderBy;
  goerli_ArbitrumConnectorMeta: ResolverTypeWrapper<goerli_ArbitrumConnectorMeta>;
  goerli_ArbitrumConnectorMeta_filter: goerli_ArbitrumConnectorMeta_filter;
  goerli_ArbitrumConnectorMeta_orderBy: goerli_ArbitrumConnectorMeta_orderBy;
  goerli_BigDecimal: ResolverTypeWrapper<Scalars['goerli_BigDecimal']>;
  goerli_BlockChangedFilter: goerli_BlockChangedFilter;
  goerli_Block_height: goerli_Block_height;
  goerli_BnbConnectorMeta: ResolverTypeWrapper<goerli_BnbConnectorMeta>;
  goerli_BnbConnectorMeta_filter: goerli_BnbConnectorMeta_filter;
  goerli_BnbConnectorMeta_orderBy: goerli_BnbConnectorMeta_orderBy;
  goerli_Bytes: ResolverTypeWrapper<Scalars['goerli_Bytes']>;
  goerli_GnosisConnectorMeta: ResolverTypeWrapper<goerli_GnosisConnectorMeta>;
  goerli_GnosisConnectorMeta_filter: goerli_GnosisConnectorMeta_filter;
  goerli_GnosisConnectorMeta_orderBy: goerli_GnosisConnectorMeta_orderBy;
  goerli_OptimismConnectorMeta: ResolverTypeWrapper<goerli_OptimismConnectorMeta>;
  goerli_OptimismConnectorMeta_filter: goerli_OptimismConnectorMeta_filter;
  goerli_OptimismConnectorMeta_orderBy: goerli_OptimismConnectorMeta_orderBy;
  goerli_OrderDirection: goerli_OrderDirection;
  goerli_PolygonConnectorMeta: ResolverTypeWrapper<goerli_PolygonConnectorMeta>;
  goerli_PolygonConnectorMeta_filter: goerli_PolygonConnectorMeta_filter;
  goerli_PolygonConnectorMeta_orderBy: goerli_PolygonConnectorMeta_orderBy;
  goerli_RootAggregated: ResolverTypeWrapper<goerli_RootAggregated>;
  goerli_RootAggregated_filter: goerli_RootAggregated_filter;
  goerli_RootAggregated_orderBy: goerli_RootAggregated_orderBy;
  goerli_RootManagerMeta: ResolverTypeWrapper<goerli_RootManagerMeta>;
  goerli_RootManagerMeta_filter: goerli_RootManagerMeta_filter;
  goerli_RootManagerMeta_orderBy: goerli_RootManagerMeta_orderBy;
  goerli_RootMessageProcessed: ResolverTypeWrapper<goerli_RootMessageProcessed>;
  goerli_RootMessageProcessed_filter: goerli_RootMessageProcessed_filter;
  goerli_RootMessageProcessed_orderBy: goerli_RootMessageProcessed_orderBy;
  goerli_RootPropagated: ResolverTypeWrapper<goerli_RootPropagated>;
  goerli_RootPropagated_filter: goerli_RootPropagated_filter;
  goerli_RootPropagated_orderBy: goerli_RootPropagated_orderBy;
  goerli__Block_: ResolverTypeWrapper<goerli__Block_>;
  goerli__Meta_: ResolverTypeWrapper<goerli__Meta_>;
  local1337_Asset: ResolverTypeWrapper<local1337_Asset>;
  local1337_AssetBalance: ResolverTypeWrapper<local1337_AssetBalance>;
  local1337_AssetBalance_filter: local1337_AssetBalance_filter;
  local1337_AssetBalance_orderBy: local1337_AssetBalance_orderBy;
  local1337_Asset_filter: local1337_Asset_filter;
  local1337_Asset_orderBy: local1337_Asset_orderBy;
  local1337_BigDecimal: ResolverTypeWrapper<Scalars['local1337_BigDecimal']>;
  local1337_BlockChangedFilter: local1337_BlockChangedFilter;
  local1337_Block_height: local1337_Block_height;
  local1337_Bytes: ResolverTypeWrapper<Scalars['local1337_Bytes']>;
  local1337_DestinationTransfer: ResolverTypeWrapper<local1337_DestinationTransfer>;
  local1337_DestinationTransfer_filter: local1337_DestinationTransfer_filter;
  local1337_DestinationTransfer_orderBy: local1337_DestinationTransfer_orderBy;
  local1337_OrderDirection: local1337_OrderDirection;
  local1337_OriginTransfer: ResolverTypeWrapper<local1337_OriginTransfer>;
  local1337_OriginTransfer_filter: local1337_OriginTransfer_filter;
  local1337_OriginTransfer_orderBy: local1337_OriginTransfer_orderBy;
  local1337_Relayer: ResolverTypeWrapper<local1337_Relayer>;
  local1337_Relayer_filter: local1337_Relayer_filter;
  local1337_Relayer_orderBy: local1337_Relayer_orderBy;
  local1337_Router: ResolverTypeWrapper<local1337_Router>;
  local1337_Router_filter: local1337_Router_filter;
  local1337_Router_orderBy: local1337_Router_orderBy;
  local1337_Setting: ResolverTypeWrapper<local1337_Setting>;
  local1337_Setting_filter: local1337_Setting_filter;
  local1337_Setting_orderBy: local1337_Setting_orderBy;
  local1337_SponsorVault: ResolverTypeWrapper<local1337_SponsorVault>;
  local1337_SponsorVault_filter: local1337_SponsorVault_filter;
  local1337_SponsorVault_orderBy: local1337_SponsorVault_orderBy;
  local1337_StableSwap: ResolverTypeWrapper<local1337_StableSwap>;
  local1337_StableSwap_filter: local1337_StableSwap_filter;
  local1337_StableSwap_orderBy: local1337_StableSwap_orderBy;
  local1337_TransferStatus: local1337_TransferStatus;
  local1337__Block_: ResolverTypeWrapper<local1337__Block_>;
  local1337__Meta_: ResolverTypeWrapper<local1337__Meta_>;
  bnb_swap_BigDecimal: ResolverTypeWrapper<Scalars['bnb_swap_BigDecimal']>;
  bnb_swap_BlockChangedFilter: bnb_swap_BlockChangedFilter;
  bnb_swap_Block_height: bnb_swap_Block_height;
  bnb_swap_Bytes: ResolverTypeWrapper<Scalars['bnb_swap_Bytes']>;
  bnb_swap_OrderDirection: bnb_swap_OrderDirection;
  bnb_swap_PooledToken: ResolverTypeWrapper<bnb_swap_PooledToken>;
  bnb_swap_PooledToken_filter: bnb_swap_PooledToken_filter;
  bnb_swap_PooledToken_orderBy: bnb_swap_PooledToken_orderBy;
  bnb_swap_StableSwap: ResolverTypeWrapper<bnb_swap_StableSwap>;
  bnb_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<bnb_swap_StableSwapAddLiquidityEvent>;
  bnb_swap_StableSwapAddLiquidityEvent_filter: bnb_swap_StableSwapAddLiquidityEvent_filter;
  bnb_swap_StableSwapAddLiquidityEvent_orderBy: bnb_swap_StableSwapAddLiquidityEvent_orderBy;
  bnb_swap_StableSwapEvent: ResolversTypes['bnb_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['bnb_swap_StableSwapRemoveLiquidityEvent'];
  bnb_swap_StableSwapEvent_filter: bnb_swap_StableSwapEvent_filter;
  bnb_swap_StableSwapEvent_orderBy: bnb_swap_StableSwapEvent_orderBy;
  bnb_swap_StableSwapExchange: ResolverTypeWrapper<bnb_swap_StableSwapExchange>;
  bnb_swap_StableSwapExchange_filter: bnb_swap_StableSwapExchange_filter;
  bnb_swap_StableSwapExchange_orderBy: bnb_swap_StableSwapExchange_orderBy;
  bnb_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<bnb_swap_StableSwapRemoveLiquidityEvent>;
  bnb_swap_StableSwapRemoveLiquidityEvent_filter: bnb_swap_StableSwapRemoveLiquidityEvent_filter;
  bnb_swap_StableSwapRemoveLiquidityEvent_orderBy: bnb_swap_StableSwapRemoveLiquidityEvent_orderBy;
  bnb_swap_StableSwap_filter: bnb_swap_StableSwap_filter;
  bnb_swap_StableSwap_orderBy: bnb_swap_StableSwap_orderBy;
  bnb_swap_SwapDailyVolume: ResolverTypeWrapper<bnb_swap_SwapDailyVolume>;
  bnb_swap_SwapDailyVolume_filter: bnb_swap_SwapDailyVolume_filter;
  bnb_swap_SwapDailyVolume_orderBy: bnb_swap_SwapDailyVolume_orderBy;
  bnb_swap_SwapHourlyVolume: ResolverTypeWrapper<bnb_swap_SwapHourlyVolume>;
  bnb_swap_SwapHourlyVolume_filter: bnb_swap_SwapHourlyVolume_filter;
  bnb_swap_SwapHourlyVolume_orderBy: bnb_swap_SwapHourlyVolume_orderBy;
  bnb_swap_SwapTradeVolume: ResolversTypes['bnb_swap_SwapDailyVolume'] | ResolversTypes['bnb_swap_SwapHourlyVolume'] | ResolversTypes['bnb_swap_SwapWeeklyVolume'];
  bnb_swap_SwapTradeVolume_filter: bnb_swap_SwapTradeVolume_filter;
  bnb_swap_SwapTradeVolume_orderBy: bnb_swap_SwapTradeVolume_orderBy;
  bnb_swap_SwapWeeklyVolume: ResolverTypeWrapper<bnb_swap_SwapWeeklyVolume>;
  bnb_swap_SwapWeeklyVolume_filter: bnb_swap_SwapWeeklyVolume_filter;
  bnb_swap_SwapWeeklyVolume_orderBy: bnb_swap_SwapWeeklyVolume_orderBy;
  bnb_swap_SystemInfo: ResolverTypeWrapper<bnb_swap_SystemInfo>;
  bnb_swap_SystemInfo_filter: bnb_swap_SystemInfo_filter;
  bnb_swap_SystemInfo_orderBy: bnb_swap_SystemInfo_orderBy;
  bnb_swap__Block_: ResolverTypeWrapper<bnb_swap__Block_>;
  bnb_swap__Meta_: ResolverTypeWrapper<bnb_swap__Meta_>;
  arbitrumgoerli_swap_BigDecimal: ResolverTypeWrapper<Scalars['arbitrumgoerli_swap_BigDecimal']>;
  arbitrumgoerli_swap_BlockChangedFilter: arbitrumgoerli_swap_BlockChangedFilter;
  arbitrumgoerli_swap_Block_height: arbitrumgoerli_swap_Block_height;
  arbitrumgoerli_swap_Bytes: ResolverTypeWrapper<Scalars['arbitrumgoerli_swap_Bytes']>;
  arbitrumgoerli_swap_OrderDirection: arbitrumgoerli_swap_OrderDirection;
  arbitrumgoerli_swap_PooledToken: ResolverTypeWrapper<arbitrumgoerli_swap_PooledToken>;
  arbitrumgoerli_swap_PooledToken_filter: arbitrumgoerli_swap_PooledToken_filter;
  arbitrumgoerli_swap_PooledToken_orderBy: arbitrumgoerli_swap_PooledToken_orderBy;
  arbitrumgoerli_swap_StableSwap: ResolverTypeWrapper<arbitrumgoerli_swap_StableSwap>;
  arbitrumgoerli_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<arbitrumgoerli_swap_StableSwapAddLiquidityEvent>;
  arbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter: arbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter;
  arbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy: arbitrumgoerli_swap_StableSwapAddLiquidityEvent_orderBy;
  arbitrumgoerli_swap_StableSwapEvent: ResolversTypes['arbitrumgoerli_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent'];
  arbitrumgoerli_swap_StableSwapEvent_filter: arbitrumgoerli_swap_StableSwapEvent_filter;
  arbitrumgoerli_swap_StableSwapEvent_orderBy: arbitrumgoerli_swap_StableSwapEvent_orderBy;
  arbitrumgoerli_swap_StableSwapExchange: ResolverTypeWrapper<arbitrumgoerli_swap_StableSwapExchange>;
  arbitrumgoerli_swap_StableSwapExchange_filter: arbitrumgoerli_swap_StableSwapExchange_filter;
  arbitrumgoerli_swap_StableSwapExchange_orderBy: arbitrumgoerli_swap_StableSwapExchange_orderBy;
  arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter: arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy: arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_orderBy;
  arbitrumgoerli_swap_StableSwap_filter: arbitrumgoerli_swap_StableSwap_filter;
  arbitrumgoerli_swap_StableSwap_orderBy: arbitrumgoerli_swap_StableSwap_orderBy;
  arbitrumgoerli_swap_SwapDailyVolume: ResolverTypeWrapper<arbitrumgoerli_swap_SwapDailyVolume>;
  arbitrumgoerli_swap_SwapDailyVolume_filter: arbitrumgoerli_swap_SwapDailyVolume_filter;
  arbitrumgoerli_swap_SwapDailyVolume_orderBy: arbitrumgoerli_swap_SwapDailyVolume_orderBy;
  arbitrumgoerli_swap_SwapHourlyVolume: ResolverTypeWrapper<arbitrumgoerli_swap_SwapHourlyVolume>;
  arbitrumgoerli_swap_SwapHourlyVolume_filter: arbitrumgoerli_swap_SwapHourlyVolume_filter;
  arbitrumgoerli_swap_SwapHourlyVolume_orderBy: arbitrumgoerli_swap_SwapHourlyVolume_orderBy;
  arbitrumgoerli_swap_SwapTradeVolume: ResolversTypes['arbitrumgoerli_swap_SwapDailyVolume'] | ResolversTypes['arbitrumgoerli_swap_SwapHourlyVolume'] | ResolversTypes['arbitrumgoerli_swap_SwapWeeklyVolume'];
  arbitrumgoerli_swap_SwapTradeVolume_filter: arbitrumgoerli_swap_SwapTradeVolume_filter;
  arbitrumgoerli_swap_SwapTradeVolume_orderBy: arbitrumgoerli_swap_SwapTradeVolume_orderBy;
  arbitrumgoerli_swap_SwapWeeklyVolume: ResolverTypeWrapper<arbitrumgoerli_swap_SwapWeeklyVolume>;
  arbitrumgoerli_swap_SwapWeeklyVolume_filter: arbitrumgoerli_swap_SwapWeeklyVolume_filter;
  arbitrumgoerli_swap_SwapWeeklyVolume_orderBy: arbitrumgoerli_swap_SwapWeeklyVolume_orderBy;
  arbitrumgoerli_swap_SystemInfo: ResolverTypeWrapper<arbitrumgoerli_swap_SystemInfo>;
  arbitrumgoerli_swap_SystemInfo_filter: arbitrumgoerli_swap_SystemInfo_filter;
  arbitrumgoerli_swap_SystemInfo_orderBy: arbitrumgoerli_swap_SystemInfo_orderBy;
  arbitrumgoerli_swap__Block_: ResolverTypeWrapper<arbitrumgoerli_swap__Block_>;
  arbitrumgoerli_swap__Meta_: ResolverTypeWrapper<arbitrumgoerli_swap__Meta_>;
  mumbai_swap_BigDecimal: ResolverTypeWrapper<Scalars['mumbai_swap_BigDecimal']>;
  mumbai_swap_BlockChangedFilter: mumbai_swap_BlockChangedFilter;
  mumbai_swap_Block_height: mumbai_swap_Block_height;
  mumbai_swap_Bytes: ResolverTypeWrapper<Scalars['mumbai_swap_Bytes']>;
  mumbai_swap_OrderDirection: mumbai_swap_OrderDirection;
  mumbai_swap_PooledToken: ResolverTypeWrapper<mumbai_swap_PooledToken>;
  mumbai_swap_PooledToken_filter: mumbai_swap_PooledToken_filter;
  mumbai_swap_PooledToken_orderBy: mumbai_swap_PooledToken_orderBy;
  mumbai_swap_StableSwap: ResolverTypeWrapper<mumbai_swap_StableSwap>;
  mumbai_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<mumbai_swap_StableSwapAddLiquidityEvent>;
  mumbai_swap_StableSwapAddLiquidityEvent_filter: mumbai_swap_StableSwapAddLiquidityEvent_filter;
  mumbai_swap_StableSwapAddLiquidityEvent_orderBy: mumbai_swap_StableSwapAddLiquidityEvent_orderBy;
  mumbai_swap_StableSwapEvent: ResolversTypes['mumbai_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['mumbai_swap_StableSwapRemoveLiquidityEvent'];
  mumbai_swap_StableSwapEvent_filter: mumbai_swap_StableSwapEvent_filter;
  mumbai_swap_StableSwapEvent_orderBy: mumbai_swap_StableSwapEvent_orderBy;
  mumbai_swap_StableSwapExchange: ResolverTypeWrapper<mumbai_swap_StableSwapExchange>;
  mumbai_swap_StableSwapExchange_filter: mumbai_swap_StableSwapExchange_filter;
  mumbai_swap_StableSwapExchange_orderBy: mumbai_swap_StableSwapExchange_orderBy;
  mumbai_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<mumbai_swap_StableSwapRemoveLiquidityEvent>;
  mumbai_swap_StableSwapRemoveLiquidityEvent_filter: mumbai_swap_StableSwapRemoveLiquidityEvent_filter;
  mumbai_swap_StableSwapRemoveLiquidityEvent_orderBy: mumbai_swap_StableSwapRemoveLiquidityEvent_orderBy;
  mumbai_swap_StableSwap_filter: mumbai_swap_StableSwap_filter;
  mumbai_swap_StableSwap_orderBy: mumbai_swap_StableSwap_orderBy;
  mumbai_swap_SwapDailyVolume: ResolverTypeWrapper<mumbai_swap_SwapDailyVolume>;
  mumbai_swap_SwapDailyVolume_filter: mumbai_swap_SwapDailyVolume_filter;
  mumbai_swap_SwapDailyVolume_orderBy: mumbai_swap_SwapDailyVolume_orderBy;
  mumbai_swap_SwapHourlyVolume: ResolverTypeWrapper<mumbai_swap_SwapHourlyVolume>;
  mumbai_swap_SwapHourlyVolume_filter: mumbai_swap_SwapHourlyVolume_filter;
  mumbai_swap_SwapHourlyVolume_orderBy: mumbai_swap_SwapHourlyVolume_orderBy;
  mumbai_swap_SwapTradeVolume: ResolversTypes['mumbai_swap_SwapDailyVolume'] | ResolversTypes['mumbai_swap_SwapHourlyVolume'] | ResolversTypes['mumbai_swap_SwapWeeklyVolume'];
  mumbai_swap_SwapTradeVolume_filter: mumbai_swap_SwapTradeVolume_filter;
  mumbai_swap_SwapTradeVolume_orderBy: mumbai_swap_SwapTradeVolume_orderBy;
  mumbai_swap_SwapWeeklyVolume: ResolverTypeWrapper<mumbai_swap_SwapWeeklyVolume>;
  mumbai_swap_SwapWeeklyVolume_filter: mumbai_swap_SwapWeeklyVolume_filter;
  mumbai_swap_SwapWeeklyVolume_orderBy: mumbai_swap_SwapWeeklyVolume_orderBy;
  mumbai_swap_SystemInfo: ResolverTypeWrapper<mumbai_swap_SystemInfo>;
  mumbai_swap_SystemInfo_filter: mumbai_swap_SystemInfo_filter;
  mumbai_swap_SystemInfo_orderBy: mumbai_swap_SystemInfo_orderBy;
  mumbai_swap__Block_: ResolverTypeWrapper<mumbai_swap__Block_>;
  mumbai_swap__Meta_: ResolverTypeWrapper<mumbai_swap__Meta_>;
  optimism_AggregateRoot: ResolverTypeWrapper<optimism_AggregateRoot>;
  optimism_AggregateRoot_filter: optimism_AggregateRoot_filter;
  optimism_AggregateRoot_orderBy: optimism_AggregateRoot_orderBy;
  optimism_Asset: ResolverTypeWrapper<optimism_Asset>;
  optimism_AssetBalance: ResolverTypeWrapper<optimism_AssetBalance>;
  optimism_AssetBalance_filter: optimism_AssetBalance_filter;
  optimism_AssetBalance_orderBy: optimism_AssetBalance_orderBy;
  optimism_AssetStatus: ResolverTypeWrapper<optimism_AssetStatus>;
  optimism_AssetStatus_filter: optimism_AssetStatus_filter;
  optimism_AssetStatus_orderBy: optimism_AssetStatus_orderBy;
  optimism_Asset_filter: optimism_Asset_filter;
  optimism_Asset_orderBy: optimism_Asset_orderBy;
  optimism_BigDecimal: ResolverTypeWrapper<Scalars['optimism_BigDecimal']>;
  optimism_BlockChangedFilter: optimism_BlockChangedFilter;
  optimism_Block_height: optimism_Block_height;
  optimism_Bytes: ResolverTypeWrapper<Scalars['optimism_Bytes']>;
  optimism_ConnectorMeta: ResolverTypeWrapper<optimism_ConnectorMeta>;
  optimism_ConnectorMeta_filter: optimism_ConnectorMeta_filter;
  optimism_ConnectorMeta_orderBy: optimism_ConnectorMeta_orderBy;
  optimism_DestinationTransfer: ResolverTypeWrapper<optimism_DestinationTransfer>;
  optimism_DestinationTransfer_filter: optimism_DestinationTransfer_filter;
  optimism_DestinationTransfer_orderBy: optimism_DestinationTransfer_orderBy;
  optimism_OrderDirection: optimism_OrderDirection;
  optimism_OriginMessage: ResolverTypeWrapper<optimism_OriginMessage>;
  optimism_OriginMessage_filter: optimism_OriginMessage_filter;
  optimism_OriginMessage_orderBy: optimism_OriginMessage_orderBy;
  optimism_OriginTransfer: ResolverTypeWrapper<optimism_OriginTransfer>;
  optimism_OriginTransfer_filter: optimism_OriginTransfer_filter;
  optimism_OriginTransfer_orderBy: optimism_OriginTransfer_orderBy;
  optimism_Relayer: ResolverTypeWrapper<optimism_Relayer>;
  optimism_Relayer_filter: optimism_Relayer_filter;
  optimism_Relayer_orderBy: optimism_Relayer_orderBy;
  optimism_RootCount: ResolverTypeWrapper<optimism_RootCount>;
  optimism_RootCount_filter: optimism_RootCount_filter;
  optimism_RootCount_orderBy: optimism_RootCount_orderBy;
  optimism_RootMessageSent: ResolverTypeWrapper<optimism_RootMessageSent>;
  optimism_RootMessageSent_filter: optimism_RootMessageSent_filter;
  optimism_RootMessageSent_orderBy: optimism_RootMessageSent_orderBy;
  optimism_Router: ResolverTypeWrapper<optimism_Router>;
  optimism_Router_filter: optimism_Router_filter;
  optimism_Router_orderBy: optimism_Router_orderBy;
  optimism_Sequencer: ResolverTypeWrapper<optimism_Sequencer>;
  optimism_Sequencer_filter: optimism_Sequencer_filter;
  optimism_Sequencer_orderBy: optimism_Sequencer_orderBy;
  optimism_Setting: ResolverTypeWrapper<optimism_Setting>;
  optimism_Setting_filter: optimism_Setting_filter;
  optimism_Setting_orderBy: optimism_Setting_orderBy;
  optimism_TransferStatus: optimism_TransferStatus;
  optimism__Block_: ResolverTypeWrapper<optimism__Block_>;
  optimism__Meta_: ResolverTypeWrapper<optimism__Meta_>;
  staginggoerli_swap_BigDecimal: ResolverTypeWrapper<Scalars['staginggoerli_swap_BigDecimal']>;
  staginggoerli_swap_BlockChangedFilter: staginggoerli_swap_BlockChangedFilter;
  staginggoerli_swap_Block_height: staginggoerli_swap_Block_height;
  staginggoerli_swap_Bytes: ResolverTypeWrapper<Scalars['staginggoerli_swap_Bytes']>;
  staginggoerli_swap_OrderDirection: staginggoerli_swap_OrderDirection;
  staginggoerli_swap_PooledToken: ResolverTypeWrapper<staginggoerli_swap_PooledToken>;
  staginggoerli_swap_PooledToken_filter: staginggoerli_swap_PooledToken_filter;
  staginggoerli_swap_PooledToken_orderBy: staginggoerli_swap_PooledToken_orderBy;
  staginggoerli_swap_StableSwap: ResolverTypeWrapper<staginggoerli_swap_StableSwap>;
  staginggoerli_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<staginggoerli_swap_StableSwapAddLiquidityEvent>;
  staginggoerli_swap_StableSwapAddLiquidityEvent_filter: staginggoerli_swap_StableSwapAddLiquidityEvent_filter;
  staginggoerli_swap_StableSwapAddLiquidityEvent_orderBy: staginggoerli_swap_StableSwapAddLiquidityEvent_orderBy;
  staginggoerli_swap_StableSwapEvent: ResolversTypes['staginggoerli_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['staginggoerli_swap_StableSwapRemoveLiquidityEvent'];
  staginggoerli_swap_StableSwapEvent_filter: staginggoerli_swap_StableSwapEvent_filter;
  staginggoerli_swap_StableSwapEvent_orderBy: staginggoerli_swap_StableSwapEvent_orderBy;
  staginggoerli_swap_StableSwapExchange: ResolverTypeWrapper<staginggoerli_swap_StableSwapExchange>;
  staginggoerli_swap_StableSwapExchange_filter: staginggoerli_swap_StableSwapExchange_filter;
  staginggoerli_swap_StableSwapExchange_orderBy: staginggoerli_swap_StableSwapExchange_orderBy;
  staginggoerli_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<staginggoerli_swap_StableSwapRemoveLiquidityEvent>;
  staginggoerli_swap_StableSwapRemoveLiquidityEvent_filter: staginggoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  staginggoerli_swap_StableSwapRemoveLiquidityEvent_orderBy: staginggoerli_swap_StableSwapRemoveLiquidityEvent_orderBy;
  staginggoerli_swap_StableSwap_filter: staginggoerli_swap_StableSwap_filter;
  staginggoerli_swap_StableSwap_orderBy: staginggoerli_swap_StableSwap_orderBy;
  staginggoerli_swap_SwapDailyVolume: ResolverTypeWrapper<staginggoerli_swap_SwapDailyVolume>;
  staginggoerli_swap_SwapDailyVolume_filter: staginggoerli_swap_SwapDailyVolume_filter;
  staginggoerli_swap_SwapDailyVolume_orderBy: staginggoerli_swap_SwapDailyVolume_orderBy;
  staginggoerli_swap_SwapHourlyVolume: ResolverTypeWrapper<staginggoerli_swap_SwapHourlyVolume>;
  staginggoerli_swap_SwapHourlyVolume_filter: staginggoerli_swap_SwapHourlyVolume_filter;
  staginggoerli_swap_SwapHourlyVolume_orderBy: staginggoerli_swap_SwapHourlyVolume_orderBy;
  staginggoerli_swap_SwapTradeVolume: ResolversTypes['staginggoerli_swap_SwapDailyVolume'] | ResolversTypes['staginggoerli_swap_SwapHourlyVolume'] | ResolversTypes['staginggoerli_swap_SwapWeeklyVolume'];
  staginggoerli_swap_SwapTradeVolume_filter: staginggoerli_swap_SwapTradeVolume_filter;
  staginggoerli_swap_SwapTradeVolume_orderBy: staginggoerli_swap_SwapTradeVolume_orderBy;
  staginggoerli_swap_SwapWeeklyVolume: ResolverTypeWrapper<staginggoerli_swap_SwapWeeklyVolume>;
  staginggoerli_swap_SwapWeeklyVolume_filter: staginggoerli_swap_SwapWeeklyVolume_filter;
  staginggoerli_swap_SwapWeeklyVolume_orderBy: staginggoerli_swap_SwapWeeklyVolume_orderBy;
  staginggoerli_swap_SystemInfo: ResolverTypeWrapper<staginggoerli_swap_SystemInfo>;
  staginggoerli_swap_SystemInfo_filter: staginggoerli_swap_SystemInfo_filter;
  staginggoerli_swap_SystemInfo_orderBy: staginggoerli_swap_SystemInfo_orderBy;
  staginggoerli_swap__Block_: ResolverTypeWrapper<staginggoerli_swap__Block_>;
  staginggoerli_swap__Meta_: ResolverTypeWrapper<staginggoerli_swap__Meta_>;
  stagingoptimismgoerli_AggregateRoot: ResolverTypeWrapper<stagingoptimismgoerli_AggregateRoot>;
  stagingoptimismgoerli_AggregateRoot_filter: stagingoptimismgoerli_AggregateRoot_filter;
  stagingoptimismgoerli_AggregateRoot_orderBy: stagingoptimismgoerli_AggregateRoot_orderBy;
  stagingoptimismgoerli_Asset: ResolverTypeWrapper<stagingoptimismgoerli_Asset>;
  stagingoptimismgoerli_AssetBalance: ResolverTypeWrapper<stagingoptimismgoerli_AssetBalance>;
  stagingoptimismgoerli_AssetBalance_filter: stagingoptimismgoerli_AssetBalance_filter;
  stagingoptimismgoerli_AssetBalance_orderBy: stagingoptimismgoerli_AssetBalance_orderBy;
  stagingoptimismgoerli_AssetStatus: ResolverTypeWrapper<stagingoptimismgoerli_AssetStatus>;
  stagingoptimismgoerli_AssetStatus_filter: stagingoptimismgoerli_AssetStatus_filter;
  stagingoptimismgoerli_AssetStatus_orderBy: stagingoptimismgoerli_AssetStatus_orderBy;
  stagingoptimismgoerli_Asset_filter: stagingoptimismgoerli_Asset_filter;
  stagingoptimismgoerli_Asset_orderBy: stagingoptimismgoerli_Asset_orderBy;
  stagingoptimismgoerli_BigDecimal: ResolverTypeWrapper<Scalars['stagingoptimismgoerli_BigDecimal']>;
  stagingoptimismgoerli_BlockChangedFilter: stagingoptimismgoerli_BlockChangedFilter;
  stagingoptimismgoerli_Block_height: stagingoptimismgoerli_Block_height;
  stagingoptimismgoerli_Bytes: ResolverTypeWrapper<Scalars['stagingoptimismgoerli_Bytes']>;
  stagingoptimismgoerli_ConnectorMeta: ResolverTypeWrapper<stagingoptimismgoerli_ConnectorMeta>;
  stagingoptimismgoerli_ConnectorMeta_filter: stagingoptimismgoerli_ConnectorMeta_filter;
  stagingoptimismgoerli_ConnectorMeta_orderBy: stagingoptimismgoerli_ConnectorMeta_orderBy;
  stagingoptimismgoerli_DestinationTransfer: ResolverTypeWrapper<stagingoptimismgoerli_DestinationTransfer>;
  stagingoptimismgoerli_DestinationTransfer_filter: stagingoptimismgoerli_DestinationTransfer_filter;
  stagingoptimismgoerli_DestinationTransfer_orderBy: stagingoptimismgoerli_DestinationTransfer_orderBy;
  stagingoptimismgoerli_OrderDirection: stagingoptimismgoerli_OrderDirection;
  stagingoptimismgoerli_OriginMessage: ResolverTypeWrapper<stagingoptimismgoerli_OriginMessage>;
  stagingoptimismgoerli_OriginMessage_filter: stagingoptimismgoerli_OriginMessage_filter;
  stagingoptimismgoerli_OriginMessage_orderBy: stagingoptimismgoerli_OriginMessage_orderBy;
  stagingoptimismgoerli_OriginTransfer: ResolverTypeWrapper<stagingoptimismgoerli_OriginTransfer>;
  stagingoptimismgoerli_OriginTransfer_filter: stagingoptimismgoerli_OriginTransfer_filter;
  stagingoptimismgoerli_OriginTransfer_orderBy: stagingoptimismgoerli_OriginTransfer_orderBy;
  stagingoptimismgoerli_Relayer: ResolverTypeWrapper<stagingoptimismgoerli_Relayer>;
  stagingoptimismgoerli_Relayer_filter: stagingoptimismgoerli_Relayer_filter;
  stagingoptimismgoerli_Relayer_orderBy: stagingoptimismgoerli_Relayer_orderBy;
  stagingoptimismgoerli_RootCount: ResolverTypeWrapper<stagingoptimismgoerli_RootCount>;
  stagingoptimismgoerli_RootCount_filter: stagingoptimismgoerli_RootCount_filter;
  stagingoptimismgoerli_RootCount_orderBy: stagingoptimismgoerli_RootCount_orderBy;
  stagingoptimismgoerli_RootMessageSent: ResolverTypeWrapper<stagingoptimismgoerli_RootMessageSent>;
  stagingoptimismgoerli_RootMessageSent_filter: stagingoptimismgoerli_RootMessageSent_filter;
  stagingoptimismgoerli_RootMessageSent_orderBy: stagingoptimismgoerli_RootMessageSent_orderBy;
  stagingoptimismgoerli_Router: ResolverTypeWrapper<stagingoptimismgoerli_Router>;
  stagingoptimismgoerli_Router_filter: stagingoptimismgoerli_Router_filter;
  stagingoptimismgoerli_Router_orderBy: stagingoptimismgoerli_Router_orderBy;
  stagingoptimismgoerli_Sequencer: ResolverTypeWrapper<stagingoptimismgoerli_Sequencer>;
  stagingoptimismgoerli_Sequencer_filter: stagingoptimismgoerli_Sequencer_filter;
  stagingoptimismgoerli_Sequencer_orderBy: stagingoptimismgoerli_Sequencer_orderBy;
  stagingoptimismgoerli_Setting: ResolverTypeWrapper<stagingoptimismgoerli_Setting>;
  stagingoptimismgoerli_Setting_filter: stagingoptimismgoerli_Setting_filter;
  stagingoptimismgoerli_Setting_orderBy: stagingoptimismgoerli_Setting_orderBy;
  stagingoptimismgoerli_TransferStatus: stagingoptimismgoerli_TransferStatus;
  stagingoptimismgoerli__Block_: ResolverTypeWrapper<stagingoptimismgoerli__Block_>;
  stagingoptimismgoerli__Meta_: ResolverTypeWrapper<stagingoptimismgoerli__Meta_>;
  stagingmumbai_AggregateRoot: ResolverTypeWrapper<stagingmumbai_AggregateRoot>;
  stagingmumbai_AggregateRoot_filter: stagingmumbai_AggregateRoot_filter;
  stagingmumbai_AggregateRoot_orderBy: stagingmumbai_AggregateRoot_orderBy;
  stagingmumbai_Asset: ResolverTypeWrapper<stagingmumbai_Asset>;
  stagingmumbai_AssetBalance: ResolverTypeWrapper<stagingmumbai_AssetBalance>;
  stagingmumbai_AssetBalance_filter: stagingmumbai_AssetBalance_filter;
  stagingmumbai_AssetBalance_orderBy: stagingmumbai_AssetBalance_orderBy;
  stagingmumbai_AssetStatus: ResolverTypeWrapper<stagingmumbai_AssetStatus>;
  stagingmumbai_AssetStatus_filter: stagingmumbai_AssetStatus_filter;
  stagingmumbai_AssetStatus_orderBy: stagingmumbai_AssetStatus_orderBy;
  stagingmumbai_Asset_filter: stagingmumbai_Asset_filter;
  stagingmumbai_Asset_orderBy: stagingmumbai_Asset_orderBy;
  stagingmumbai_BigDecimal: ResolverTypeWrapper<Scalars['stagingmumbai_BigDecimal']>;
  stagingmumbai_BlockChangedFilter: stagingmumbai_BlockChangedFilter;
  stagingmumbai_Block_height: stagingmumbai_Block_height;
  stagingmumbai_Bytes: ResolverTypeWrapper<Scalars['stagingmumbai_Bytes']>;
  stagingmumbai_ConnectorMeta: ResolverTypeWrapper<stagingmumbai_ConnectorMeta>;
  stagingmumbai_ConnectorMeta_filter: stagingmumbai_ConnectorMeta_filter;
  stagingmumbai_ConnectorMeta_orderBy: stagingmumbai_ConnectorMeta_orderBy;
  stagingmumbai_DestinationTransfer: ResolverTypeWrapper<stagingmumbai_DestinationTransfer>;
  stagingmumbai_DestinationTransfer_filter: stagingmumbai_DestinationTransfer_filter;
  stagingmumbai_DestinationTransfer_orderBy: stagingmumbai_DestinationTransfer_orderBy;
  stagingmumbai_OrderDirection: stagingmumbai_OrderDirection;
  stagingmumbai_OriginMessage: ResolverTypeWrapper<stagingmumbai_OriginMessage>;
  stagingmumbai_OriginMessage_filter: stagingmumbai_OriginMessage_filter;
  stagingmumbai_OriginMessage_orderBy: stagingmumbai_OriginMessage_orderBy;
  stagingmumbai_OriginTransfer: ResolverTypeWrapper<stagingmumbai_OriginTransfer>;
  stagingmumbai_OriginTransfer_filter: stagingmumbai_OriginTransfer_filter;
  stagingmumbai_OriginTransfer_orderBy: stagingmumbai_OriginTransfer_orderBy;
  stagingmumbai_Relayer: ResolverTypeWrapper<stagingmumbai_Relayer>;
  stagingmumbai_Relayer_filter: stagingmumbai_Relayer_filter;
  stagingmumbai_Relayer_orderBy: stagingmumbai_Relayer_orderBy;
  stagingmumbai_RootCount: ResolverTypeWrapper<stagingmumbai_RootCount>;
  stagingmumbai_RootCount_filter: stagingmumbai_RootCount_filter;
  stagingmumbai_RootCount_orderBy: stagingmumbai_RootCount_orderBy;
  stagingmumbai_RootMessageSent: ResolverTypeWrapper<stagingmumbai_RootMessageSent>;
  stagingmumbai_RootMessageSent_filter: stagingmumbai_RootMessageSent_filter;
  stagingmumbai_RootMessageSent_orderBy: stagingmumbai_RootMessageSent_orderBy;
  stagingmumbai_Router: ResolverTypeWrapper<stagingmumbai_Router>;
  stagingmumbai_Router_filter: stagingmumbai_Router_filter;
  stagingmumbai_Router_orderBy: stagingmumbai_Router_orderBy;
  stagingmumbai_Sequencer: ResolverTypeWrapper<stagingmumbai_Sequencer>;
  stagingmumbai_Sequencer_filter: stagingmumbai_Sequencer_filter;
  stagingmumbai_Sequencer_orderBy: stagingmumbai_Sequencer_orderBy;
  stagingmumbai_Setting: ResolverTypeWrapper<stagingmumbai_Setting>;
  stagingmumbai_Setting_filter: stagingmumbai_Setting_filter;
  stagingmumbai_Setting_orderBy: stagingmumbai_Setting_orderBy;
  stagingmumbai_TransferStatus: stagingmumbai_TransferStatus;
  stagingmumbai__Block_: ResolverTypeWrapper<stagingmumbai__Block_>;
  stagingmumbai__Meta_: ResolverTypeWrapper<stagingmumbai__Meta_>;
  arbitrumone_swap_BigDecimal: ResolverTypeWrapper<Scalars['arbitrumone_swap_BigDecimal']>;
  arbitrumone_swap_BlockChangedFilter: arbitrumone_swap_BlockChangedFilter;
  arbitrumone_swap_Block_height: arbitrumone_swap_Block_height;
  arbitrumone_swap_Bytes: ResolverTypeWrapper<Scalars['arbitrumone_swap_Bytes']>;
  arbitrumone_swap_OrderDirection: arbitrumone_swap_OrderDirection;
  arbitrumone_swap_PooledToken: ResolverTypeWrapper<arbitrumone_swap_PooledToken>;
  arbitrumone_swap_PooledToken_filter: arbitrumone_swap_PooledToken_filter;
  arbitrumone_swap_PooledToken_orderBy: arbitrumone_swap_PooledToken_orderBy;
  arbitrumone_swap_StableSwap: ResolverTypeWrapper<arbitrumone_swap_StableSwap>;
  arbitrumone_swap_StableSwapAddLiquidityEvent: ResolverTypeWrapper<arbitrumone_swap_StableSwapAddLiquidityEvent>;
  arbitrumone_swap_StableSwapAddLiquidityEvent_filter: arbitrumone_swap_StableSwapAddLiquidityEvent_filter;
  arbitrumone_swap_StableSwapAddLiquidityEvent_orderBy: arbitrumone_swap_StableSwapAddLiquidityEvent_orderBy;
  arbitrumone_swap_StableSwapEvent: ResolversTypes['arbitrumone_swap_StableSwapAddLiquidityEvent'] | ResolversTypes['arbitrumone_swap_StableSwapRemoveLiquidityEvent'];
  arbitrumone_swap_StableSwapEvent_filter: arbitrumone_swap_StableSwapEvent_filter;
  arbitrumone_swap_StableSwapEvent_orderBy: arbitrumone_swap_StableSwapEvent_orderBy;
  arbitrumone_swap_StableSwapExchange: ResolverTypeWrapper<arbitrumone_swap_StableSwapExchange>;
  arbitrumone_swap_StableSwapExchange_filter: arbitrumone_swap_StableSwapExchange_filter;
  arbitrumone_swap_StableSwapExchange_orderBy: arbitrumone_swap_StableSwapExchange_orderBy;
  arbitrumone_swap_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<arbitrumone_swap_StableSwapRemoveLiquidityEvent>;
  arbitrumone_swap_StableSwapRemoveLiquidityEvent_filter: arbitrumone_swap_StableSwapRemoveLiquidityEvent_filter;
  arbitrumone_swap_StableSwapRemoveLiquidityEvent_orderBy: arbitrumone_swap_StableSwapRemoveLiquidityEvent_orderBy;
  arbitrumone_swap_StableSwap_filter: arbitrumone_swap_StableSwap_filter;
  arbitrumone_swap_StableSwap_orderBy: arbitrumone_swap_StableSwap_orderBy;
  arbitrumone_swap_SwapDailyVolume: ResolverTypeWrapper<arbitrumone_swap_SwapDailyVolume>;
  arbitrumone_swap_SwapDailyVolume_filter: arbitrumone_swap_SwapDailyVolume_filter;
  arbitrumone_swap_SwapDailyVolume_orderBy: arbitrumone_swap_SwapDailyVolume_orderBy;
  arbitrumone_swap_SwapHourlyVolume: ResolverTypeWrapper<arbitrumone_swap_SwapHourlyVolume>;
  arbitrumone_swap_SwapHourlyVolume_filter: arbitrumone_swap_SwapHourlyVolume_filter;
  arbitrumone_swap_SwapHourlyVolume_orderBy: arbitrumone_swap_SwapHourlyVolume_orderBy;
  arbitrumone_swap_SwapTradeVolume: ResolversTypes['arbitrumone_swap_SwapDailyVolume'] | ResolversTypes['arbitrumone_swap_SwapHourlyVolume'] | ResolversTypes['arbitrumone_swap_SwapWeeklyVolume'];
  arbitrumone_swap_SwapTradeVolume_filter: arbitrumone_swap_SwapTradeVolume_filter;
  arbitrumone_swap_SwapTradeVolume_orderBy: arbitrumone_swap_SwapTradeVolume_orderBy;
  arbitrumone_swap_SwapWeeklyVolume: ResolverTypeWrapper<arbitrumone_swap_SwapWeeklyVolume>;
  arbitrumone_swap_SwapWeeklyVolume_filter: arbitrumone_swap_SwapWeeklyVolume_filter;
  arbitrumone_swap_SwapWeeklyVolume_orderBy: arbitrumone_swap_SwapWeeklyVolume_orderBy;
  arbitrumone_swap_SystemInfo: ResolverTypeWrapper<arbitrumone_swap_SystemInfo>;
  arbitrumone_swap_SystemInfo_filter: arbitrumone_swap_SystemInfo_filter;
  arbitrumone_swap_SystemInfo_orderBy: arbitrumone_swap_SystemInfo_orderBy;
  arbitrumone_swap__Block_: ResolverTypeWrapper<arbitrumone_swap__Block_>;
  arbitrumone_swap__Meta_: ResolverTypeWrapper<arbitrumone_swap__Meta_>;
  local1338_Asset: ResolverTypeWrapper<local1338_Asset>;
  local1338_AssetBalance: ResolverTypeWrapper<local1338_AssetBalance>;
  local1338_AssetBalance_filter: local1338_AssetBalance_filter;
  local1338_AssetBalance_orderBy: local1338_AssetBalance_orderBy;
  local1338_Asset_filter: local1338_Asset_filter;
  local1338_Asset_orderBy: local1338_Asset_orderBy;
  local1338_BigDecimal: ResolverTypeWrapper<Scalars['local1338_BigDecimal']>;
  local1338_BlockChangedFilter: local1338_BlockChangedFilter;
  local1338_Block_height: local1338_Block_height;
  local1338_Bytes: ResolverTypeWrapper<Scalars['local1338_Bytes']>;
  local1338_DestinationTransfer: ResolverTypeWrapper<local1338_DestinationTransfer>;
  local1338_DestinationTransfer_filter: local1338_DestinationTransfer_filter;
  local1338_DestinationTransfer_orderBy: local1338_DestinationTransfer_orderBy;
  local1338_OrderDirection: local1338_OrderDirection;
  local1338_OriginTransfer: ResolverTypeWrapper<local1338_OriginTransfer>;
  local1338_OriginTransfer_filter: local1338_OriginTransfer_filter;
  local1338_OriginTransfer_orderBy: local1338_OriginTransfer_orderBy;
  local1338_Relayer: ResolverTypeWrapper<local1338_Relayer>;
  local1338_Relayer_filter: local1338_Relayer_filter;
  local1338_Relayer_orderBy: local1338_Relayer_orderBy;
  local1338_Router: ResolverTypeWrapper<local1338_Router>;
  local1338_Router_filter: local1338_Router_filter;
  local1338_Router_orderBy: local1338_Router_orderBy;
  local1338_Setting: ResolverTypeWrapper<local1338_Setting>;
  local1338_Setting_filter: local1338_Setting_filter;
  local1338_Setting_orderBy: local1338_Setting_orderBy;
  local1338_SponsorVault: ResolverTypeWrapper<local1338_SponsorVault>;
  local1338_SponsorVault_filter: local1338_SponsorVault_filter;
  local1338_SponsorVault_orderBy: local1338_SponsorVault_orderBy;
  local1338_StableSwap: ResolverTypeWrapper<local1338_StableSwap>;
  local1338_StableSwap_filter: local1338_StableSwap_filter;
  local1338_StableSwap_orderBy: local1338_StableSwap_orderBy;
  local1338_TransferStatus: local1338_TransferStatus;
  local1338__Block_: ResolverTypeWrapper<local1338__Block_>;
  local1338__Meta_: ResolverTypeWrapper<local1338__Meta_>;
  goerli_AggregateRoot: ResolverTypeWrapper<goerli_AggregateRoot>;
  goerli_AggregateRoot_filter: goerli_AggregateRoot_filter;
  goerli_AggregateRoot_orderBy: goerli_AggregateRoot_orderBy;
  goerli_Asset: ResolverTypeWrapper<goerli_Asset>;
  goerli_AssetBalance: ResolverTypeWrapper<goerli_AssetBalance>;
  goerli_AssetBalance_filter: goerli_AssetBalance_filter;
  goerli_AssetBalance_orderBy: goerli_AssetBalance_orderBy;
  goerli_AssetStatus: ResolverTypeWrapper<goerli_AssetStatus>;
  goerli_AssetStatus_filter: goerli_AssetStatus_filter;
  goerli_AssetStatus_orderBy: goerli_AssetStatus_orderBy;
  goerli_Asset_filter: goerli_Asset_filter;
  goerli_Asset_orderBy: goerli_Asset_orderBy;
  goerli_ConnectorMeta: ResolverTypeWrapper<goerli_ConnectorMeta>;
  goerli_ConnectorMeta_filter: goerli_ConnectorMeta_filter;
  goerli_ConnectorMeta_orderBy: goerli_ConnectorMeta_orderBy;
  goerli_DestinationTransfer: ResolverTypeWrapper<goerli_DestinationTransfer>;
  goerli_DestinationTransfer_filter: goerli_DestinationTransfer_filter;
  goerli_DestinationTransfer_orderBy: goerli_DestinationTransfer_orderBy;
  goerli_OriginMessage: ResolverTypeWrapper<goerli_OriginMessage>;
  goerli_OriginMessage_filter: goerli_OriginMessage_filter;
  goerli_OriginMessage_orderBy: goerli_OriginMessage_orderBy;
  goerli_OriginTransfer: ResolverTypeWrapper<goerli_OriginTransfer>;
  goerli_OriginTransfer_filter: goerli_OriginTransfer_filter;
  goerli_OriginTransfer_orderBy: goerli_OriginTransfer_orderBy;
  goerli_Relayer: ResolverTypeWrapper<goerli_Relayer>;
  goerli_Relayer_filter: goerli_Relayer_filter;
  goerli_Relayer_orderBy: goerli_Relayer_orderBy;
  goerli_RootCount: ResolverTypeWrapper<goerli_RootCount>;
  goerli_RootCount_filter: goerli_RootCount_filter;
  goerli_RootCount_orderBy: goerli_RootCount_orderBy;
  goerli_RootMessageSent: ResolverTypeWrapper<goerli_RootMessageSent>;
  goerli_RootMessageSent_filter: goerli_RootMessageSent_filter;
  goerli_RootMessageSent_orderBy: goerli_RootMessageSent_orderBy;
  goerli_Router: ResolverTypeWrapper<goerli_Router>;
  goerli_Router_filter: goerli_Router_filter;
  goerli_Router_orderBy: goerli_Router_orderBy;
  goerli_Sequencer: ResolverTypeWrapper<goerli_Sequencer>;
  goerli_Sequencer_filter: goerli_Sequencer_filter;
  goerli_Sequencer_orderBy: goerli_Sequencer_orderBy;
  goerli_Setting: ResolverTypeWrapper<goerli_Setting>;
  goerli_Setting_filter: goerli_Setting_filter;
  goerli_Setting_orderBy: goerli_Setting_orderBy;
  goerli_TransferStatus: goerli_TransferStatus;
  stagingarbitrumgoerli_AggregateRoot: ResolverTypeWrapper<stagingarbitrumgoerli_AggregateRoot>;
  stagingarbitrumgoerli_AggregateRoot_filter: stagingarbitrumgoerli_AggregateRoot_filter;
  stagingarbitrumgoerli_AggregateRoot_orderBy: stagingarbitrumgoerli_AggregateRoot_orderBy;
  stagingarbitrumgoerli_Asset: ResolverTypeWrapper<stagingarbitrumgoerli_Asset>;
  stagingarbitrumgoerli_AssetBalance: ResolverTypeWrapper<stagingarbitrumgoerli_AssetBalance>;
  stagingarbitrumgoerli_AssetBalance_filter: stagingarbitrumgoerli_AssetBalance_filter;
  stagingarbitrumgoerli_AssetBalance_orderBy: stagingarbitrumgoerli_AssetBalance_orderBy;
  stagingarbitrumgoerli_AssetStatus: ResolverTypeWrapper<stagingarbitrumgoerli_AssetStatus>;
  stagingarbitrumgoerli_AssetStatus_filter: stagingarbitrumgoerli_AssetStatus_filter;
  stagingarbitrumgoerli_AssetStatus_orderBy: stagingarbitrumgoerli_AssetStatus_orderBy;
  stagingarbitrumgoerli_Asset_filter: stagingarbitrumgoerli_Asset_filter;
  stagingarbitrumgoerli_Asset_orderBy: stagingarbitrumgoerli_Asset_orderBy;
  stagingarbitrumgoerli_BigDecimal: ResolverTypeWrapper<Scalars['stagingarbitrumgoerli_BigDecimal']>;
  stagingarbitrumgoerli_BlockChangedFilter: stagingarbitrumgoerli_BlockChangedFilter;
  stagingarbitrumgoerli_Block_height: stagingarbitrumgoerli_Block_height;
  stagingarbitrumgoerli_Bytes: ResolverTypeWrapper<Scalars['stagingarbitrumgoerli_Bytes']>;
  stagingarbitrumgoerli_ConnectorMeta: ResolverTypeWrapper<stagingarbitrumgoerli_ConnectorMeta>;
  stagingarbitrumgoerli_ConnectorMeta_filter: stagingarbitrumgoerli_ConnectorMeta_filter;
  stagingarbitrumgoerli_ConnectorMeta_orderBy: stagingarbitrumgoerli_ConnectorMeta_orderBy;
  stagingarbitrumgoerli_DestinationTransfer: ResolverTypeWrapper<stagingarbitrumgoerli_DestinationTransfer>;
  stagingarbitrumgoerli_DestinationTransfer_filter: stagingarbitrumgoerli_DestinationTransfer_filter;
  stagingarbitrumgoerli_DestinationTransfer_orderBy: stagingarbitrumgoerli_DestinationTransfer_orderBy;
  stagingarbitrumgoerli_OrderDirection: stagingarbitrumgoerli_OrderDirection;
  stagingarbitrumgoerli_OriginMessage: ResolverTypeWrapper<stagingarbitrumgoerli_OriginMessage>;
  stagingarbitrumgoerli_OriginMessage_filter: stagingarbitrumgoerli_OriginMessage_filter;
  stagingarbitrumgoerli_OriginMessage_orderBy: stagingarbitrumgoerli_OriginMessage_orderBy;
  stagingarbitrumgoerli_OriginTransfer: ResolverTypeWrapper<stagingarbitrumgoerli_OriginTransfer>;
  stagingarbitrumgoerli_OriginTransfer_filter: stagingarbitrumgoerli_OriginTransfer_filter;
  stagingarbitrumgoerli_OriginTransfer_orderBy: stagingarbitrumgoerli_OriginTransfer_orderBy;
  stagingarbitrumgoerli_Relayer: ResolverTypeWrapper<stagingarbitrumgoerli_Relayer>;
  stagingarbitrumgoerli_Relayer_filter: stagingarbitrumgoerli_Relayer_filter;
  stagingarbitrumgoerli_Relayer_orderBy: stagingarbitrumgoerli_Relayer_orderBy;
  stagingarbitrumgoerli_RootCount: ResolverTypeWrapper<stagingarbitrumgoerli_RootCount>;
  stagingarbitrumgoerli_RootCount_filter: stagingarbitrumgoerli_RootCount_filter;
  stagingarbitrumgoerli_RootCount_orderBy: stagingarbitrumgoerli_RootCount_orderBy;
  stagingarbitrumgoerli_RootMessageSent: ResolverTypeWrapper<stagingarbitrumgoerli_RootMessageSent>;
  stagingarbitrumgoerli_RootMessageSent_filter: stagingarbitrumgoerli_RootMessageSent_filter;
  stagingarbitrumgoerli_RootMessageSent_orderBy: stagingarbitrumgoerli_RootMessageSent_orderBy;
  stagingarbitrumgoerli_Router: ResolverTypeWrapper<stagingarbitrumgoerli_Router>;
  stagingarbitrumgoerli_Router_filter: stagingarbitrumgoerli_Router_filter;
  stagingarbitrumgoerli_Router_orderBy: stagingarbitrumgoerli_Router_orderBy;
  stagingarbitrumgoerli_Sequencer: ResolverTypeWrapper<stagingarbitrumgoerli_Sequencer>;
  stagingarbitrumgoerli_Sequencer_filter: stagingarbitrumgoerli_Sequencer_filter;
  stagingarbitrumgoerli_Sequencer_orderBy: stagingarbitrumgoerli_Sequencer_orderBy;
  stagingarbitrumgoerli_Setting: ResolverTypeWrapper<stagingarbitrumgoerli_Setting>;
  stagingarbitrumgoerli_Setting_filter: stagingarbitrumgoerli_Setting_filter;
  stagingarbitrumgoerli_Setting_orderBy: stagingarbitrumgoerli_Setting_orderBy;
  stagingarbitrumgoerli_TransferStatus: stagingarbitrumgoerli_TransferStatus;
  stagingarbitrumgoerli__Block_: ResolverTypeWrapper<stagingarbitrumgoerli__Block_>;
  stagingarbitrumgoerli__Meta_: ResolverTypeWrapper<stagingarbitrumgoerli__Meta_>;
  mumbai_AggregateRoot: ResolverTypeWrapper<mumbai_AggregateRoot>;
  mumbai_AggregateRoot_filter: mumbai_AggregateRoot_filter;
  mumbai_AggregateRoot_orderBy: mumbai_AggregateRoot_orderBy;
  mumbai_Asset: ResolverTypeWrapper<mumbai_Asset>;
  mumbai_AssetBalance: ResolverTypeWrapper<mumbai_AssetBalance>;
  mumbai_AssetBalance_filter: mumbai_AssetBalance_filter;
  mumbai_AssetBalance_orderBy: mumbai_AssetBalance_orderBy;
  mumbai_AssetStatus: ResolverTypeWrapper<mumbai_AssetStatus>;
  mumbai_AssetStatus_filter: mumbai_AssetStatus_filter;
  mumbai_AssetStatus_orderBy: mumbai_AssetStatus_orderBy;
  mumbai_Asset_filter: mumbai_Asset_filter;
  mumbai_Asset_orderBy: mumbai_Asset_orderBy;
  mumbai_BigDecimal: ResolverTypeWrapper<Scalars['mumbai_BigDecimal']>;
  mumbai_BlockChangedFilter: mumbai_BlockChangedFilter;
  mumbai_Block_height: mumbai_Block_height;
  mumbai_Bytes: ResolverTypeWrapper<Scalars['mumbai_Bytes']>;
  mumbai_ConnectorMeta: ResolverTypeWrapper<mumbai_ConnectorMeta>;
  mumbai_ConnectorMeta_filter: mumbai_ConnectorMeta_filter;
  mumbai_ConnectorMeta_orderBy: mumbai_ConnectorMeta_orderBy;
  mumbai_DestinationTransfer: ResolverTypeWrapper<mumbai_DestinationTransfer>;
  mumbai_DestinationTransfer_filter: mumbai_DestinationTransfer_filter;
  mumbai_DestinationTransfer_orderBy: mumbai_DestinationTransfer_orderBy;
  mumbai_OrderDirection: mumbai_OrderDirection;
  mumbai_OriginMessage: ResolverTypeWrapper<mumbai_OriginMessage>;
  mumbai_OriginMessage_filter: mumbai_OriginMessage_filter;
  mumbai_OriginMessage_orderBy: mumbai_OriginMessage_orderBy;
  mumbai_OriginTransfer: ResolverTypeWrapper<mumbai_OriginTransfer>;
  mumbai_OriginTransfer_filter: mumbai_OriginTransfer_filter;
  mumbai_OriginTransfer_orderBy: mumbai_OriginTransfer_orderBy;
  mumbai_Relayer: ResolverTypeWrapper<mumbai_Relayer>;
  mumbai_Relayer_filter: mumbai_Relayer_filter;
  mumbai_Relayer_orderBy: mumbai_Relayer_orderBy;
  mumbai_RootCount: ResolverTypeWrapper<mumbai_RootCount>;
  mumbai_RootCount_filter: mumbai_RootCount_filter;
  mumbai_RootCount_orderBy: mumbai_RootCount_orderBy;
  mumbai_RootMessageSent: ResolverTypeWrapper<mumbai_RootMessageSent>;
  mumbai_RootMessageSent_filter: mumbai_RootMessageSent_filter;
  mumbai_RootMessageSent_orderBy: mumbai_RootMessageSent_orderBy;
  mumbai_Router: ResolverTypeWrapper<mumbai_Router>;
  mumbai_Router_filter: mumbai_Router_filter;
  mumbai_Router_orderBy: mumbai_Router_orderBy;
  mumbai_Sequencer: ResolverTypeWrapper<mumbai_Sequencer>;
  mumbai_Sequencer_filter: mumbai_Sequencer_filter;
  mumbai_Sequencer_orderBy: mumbai_Sequencer_orderBy;
  mumbai_Setting: ResolverTypeWrapper<mumbai_Setting>;
  mumbai_Setting_filter: mumbai_Setting_filter;
  mumbai_Setting_orderBy: mumbai_Setting_orderBy;
  mumbai_TransferStatus: mumbai_TransferStatus;
  mumbai__Block_: ResolverTypeWrapper<mumbai__Block_>;
  mumbai__Meta_: ResolverTypeWrapper<mumbai__Meta_>;
  bnb_AggregateRoot: ResolverTypeWrapper<bnb_AggregateRoot>;
  bnb_AggregateRoot_filter: bnb_AggregateRoot_filter;
  bnb_AggregateRoot_orderBy: bnb_AggregateRoot_orderBy;
  bnb_Asset: ResolverTypeWrapper<bnb_Asset>;
  bnb_AssetBalance: ResolverTypeWrapper<bnb_AssetBalance>;
  bnb_AssetBalance_filter: bnb_AssetBalance_filter;
  bnb_AssetBalance_orderBy: bnb_AssetBalance_orderBy;
  bnb_AssetStatus: ResolverTypeWrapper<bnb_AssetStatus>;
  bnb_AssetStatus_filter: bnb_AssetStatus_filter;
  bnb_AssetStatus_orderBy: bnb_AssetStatus_orderBy;
  bnb_Asset_filter: bnb_Asset_filter;
  bnb_Asset_orderBy: bnb_Asset_orderBy;
  bnb_BigDecimal: ResolverTypeWrapper<Scalars['bnb_BigDecimal']>;
  bnb_BlockChangedFilter: bnb_BlockChangedFilter;
  bnb_Block_height: bnb_Block_height;
  bnb_Bytes: ResolverTypeWrapper<Scalars['bnb_Bytes']>;
  bnb_ConnectorMeta: ResolverTypeWrapper<bnb_ConnectorMeta>;
  bnb_ConnectorMeta_filter: bnb_ConnectorMeta_filter;
  bnb_ConnectorMeta_orderBy: bnb_ConnectorMeta_orderBy;
  bnb_DestinationTransfer: ResolverTypeWrapper<bnb_DestinationTransfer>;
  bnb_DestinationTransfer_filter: bnb_DestinationTransfer_filter;
  bnb_DestinationTransfer_orderBy: bnb_DestinationTransfer_orderBy;
  bnb_OrderDirection: bnb_OrderDirection;
  bnb_OriginMessage: ResolverTypeWrapper<bnb_OriginMessage>;
  bnb_OriginMessage_filter: bnb_OriginMessage_filter;
  bnb_OriginMessage_orderBy: bnb_OriginMessage_orderBy;
  bnb_OriginTransfer: ResolverTypeWrapper<bnb_OriginTransfer>;
  bnb_OriginTransfer_filter: bnb_OriginTransfer_filter;
  bnb_OriginTransfer_orderBy: bnb_OriginTransfer_orderBy;
  bnb_Relayer: ResolverTypeWrapper<bnb_Relayer>;
  bnb_Relayer_filter: bnb_Relayer_filter;
  bnb_Relayer_orderBy: bnb_Relayer_orderBy;
  bnb_RootCount: ResolverTypeWrapper<bnb_RootCount>;
  bnb_RootCount_filter: bnb_RootCount_filter;
  bnb_RootCount_orderBy: bnb_RootCount_orderBy;
  bnb_RootMessageSent: ResolverTypeWrapper<bnb_RootMessageSent>;
  bnb_RootMessageSent_filter: bnb_RootMessageSent_filter;
  bnb_RootMessageSent_orderBy: bnb_RootMessageSent_orderBy;
  bnb_Router: ResolverTypeWrapper<bnb_Router>;
  bnb_Router_filter: bnb_Router_filter;
  bnb_Router_orderBy: bnb_Router_orderBy;
  bnb_Sequencer: ResolverTypeWrapper<bnb_Sequencer>;
  bnb_Sequencer_filter: bnb_Sequencer_filter;
  bnb_Sequencer_orderBy: bnb_Sequencer_orderBy;
  bnb_Setting: ResolverTypeWrapper<bnb_Setting>;
  bnb_Setting_filter: bnb_Setting_filter;
  bnb_Setting_orderBy: bnb_Setting_orderBy;
  bnb_TransferStatus: bnb_TransferStatus;
  bnb__Block_: ResolverTypeWrapper<bnb__Block_>;
  bnb__Meta_: ResolverTypeWrapper<bnb__Meta_>;
  mainnet_AggregateRoot: ResolverTypeWrapper<mainnet_AggregateRoot>;
  mainnet_AggregateRoot_filter: mainnet_AggregateRoot_filter;
  mainnet_AggregateRoot_orderBy: mainnet_AggregateRoot_orderBy;
  mainnet_Asset: ResolverTypeWrapper<mainnet_Asset>;
  mainnet_AssetBalance: ResolverTypeWrapper<mainnet_AssetBalance>;
  mainnet_AssetBalance_filter: mainnet_AssetBalance_filter;
  mainnet_AssetBalance_orderBy: mainnet_AssetBalance_orderBy;
  mainnet_AssetStatus: ResolverTypeWrapper<mainnet_AssetStatus>;
  mainnet_AssetStatus_filter: mainnet_AssetStatus_filter;
  mainnet_AssetStatus_orderBy: mainnet_AssetStatus_orderBy;
  mainnet_Asset_filter: mainnet_Asset_filter;
  mainnet_Asset_orderBy: mainnet_Asset_orderBy;
  mainnet_ConnectorMeta: ResolverTypeWrapper<mainnet_ConnectorMeta>;
  mainnet_ConnectorMeta_filter: mainnet_ConnectorMeta_filter;
  mainnet_ConnectorMeta_orderBy: mainnet_ConnectorMeta_orderBy;
  mainnet_DestinationTransfer: ResolverTypeWrapper<mainnet_DestinationTransfer>;
  mainnet_DestinationTransfer_filter: mainnet_DestinationTransfer_filter;
  mainnet_DestinationTransfer_orderBy: mainnet_DestinationTransfer_orderBy;
  mainnet_OriginMessage: ResolverTypeWrapper<mainnet_OriginMessage>;
  mainnet_OriginMessage_filter: mainnet_OriginMessage_filter;
  mainnet_OriginMessage_orderBy: mainnet_OriginMessage_orderBy;
  mainnet_OriginTransfer: ResolverTypeWrapper<mainnet_OriginTransfer>;
  mainnet_OriginTransfer_filter: mainnet_OriginTransfer_filter;
  mainnet_OriginTransfer_orderBy: mainnet_OriginTransfer_orderBy;
  mainnet_Relayer: ResolverTypeWrapper<mainnet_Relayer>;
  mainnet_Relayer_filter: mainnet_Relayer_filter;
  mainnet_Relayer_orderBy: mainnet_Relayer_orderBy;
  mainnet_RootCount: ResolverTypeWrapper<mainnet_RootCount>;
  mainnet_RootCount_filter: mainnet_RootCount_filter;
  mainnet_RootCount_orderBy: mainnet_RootCount_orderBy;
  mainnet_RootMessageSent: ResolverTypeWrapper<mainnet_RootMessageSent>;
  mainnet_RootMessageSent_filter: mainnet_RootMessageSent_filter;
  mainnet_RootMessageSent_orderBy: mainnet_RootMessageSent_orderBy;
  mainnet_Router: ResolverTypeWrapper<mainnet_Router>;
  mainnet_Router_filter: mainnet_Router_filter;
  mainnet_Router_orderBy: mainnet_Router_orderBy;
  mainnet_Sequencer: ResolverTypeWrapper<mainnet_Sequencer>;
  mainnet_Sequencer_filter: mainnet_Sequencer_filter;
  mainnet_Sequencer_orderBy: mainnet_Sequencer_orderBy;
  mainnet_Setting: ResolverTypeWrapper<mainnet_Setting>;
  mainnet_Setting_filter: mainnet_Setting_filter;
  mainnet_Setting_orderBy: mainnet_Setting_orderBy;
  mainnet_TransferStatus: mainnet_TransferStatus;
  polygon_AggregateRoot: ResolverTypeWrapper<polygon_AggregateRoot>;
  polygon_AggregateRoot_filter: polygon_AggregateRoot_filter;
  polygon_AggregateRoot_orderBy: polygon_AggregateRoot_orderBy;
  polygon_Asset: ResolverTypeWrapper<polygon_Asset>;
  polygon_AssetBalance: ResolverTypeWrapper<polygon_AssetBalance>;
  polygon_AssetBalance_filter: polygon_AssetBalance_filter;
  polygon_AssetBalance_orderBy: polygon_AssetBalance_orderBy;
  polygon_AssetStatus: ResolverTypeWrapper<polygon_AssetStatus>;
  polygon_AssetStatus_filter: polygon_AssetStatus_filter;
  polygon_AssetStatus_orderBy: polygon_AssetStatus_orderBy;
  polygon_Asset_filter: polygon_Asset_filter;
  polygon_Asset_orderBy: polygon_Asset_orderBy;
  polygon_BigDecimal: ResolverTypeWrapper<Scalars['polygon_BigDecimal']>;
  polygon_BlockChangedFilter: polygon_BlockChangedFilter;
  polygon_Block_height: polygon_Block_height;
  polygon_Bytes: ResolverTypeWrapper<Scalars['polygon_Bytes']>;
  polygon_ConnectorMeta: ResolverTypeWrapper<polygon_ConnectorMeta>;
  polygon_ConnectorMeta_filter: polygon_ConnectorMeta_filter;
  polygon_ConnectorMeta_orderBy: polygon_ConnectorMeta_orderBy;
  polygon_DestinationTransfer: ResolverTypeWrapper<polygon_DestinationTransfer>;
  polygon_DestinationTransfer_filter: polygon_DestinationTransfer_filter;
  polygon_DestinationTransfer_orderBy: polygon_DestinationTransfer_orderBy;
  polygon_OrderDirection: polygon_OrderDirection;
  polygon_OriginMessage: ResolverTypeWrapper<polygon_OriginMessage>;
  polygon_OriginMessage_filter: polygon_OriginMessage_filter;
  polygon_OriginMessage_orderBy: polygon_OriginMessage_orderBy;
  polygon_OriginTransfer: ResolverTypeWrapper<polygon_OriginTransfer>;
  polygon_OriginTransfer_filter: polygon_OriginTransfer_filter;
  polygon_OriginTransfer_orderBy: polygon_OriginTransfer_orderBy;
  polygon_Relayer: ResolverTypeWrapper<polygon_Relayer>;
  polygon_Relayer_filter: polygon_Relayer_filter;
  polygon_Relayer_orderBy: polygon_Relayer_orderBy;
  polygon_RootCount: ResolverTypeWrapper<polygon_RootCount>;
  polygon_RootCount_filter: polygon_RootCount_filter;
  polygon_RootCount_orderBy: polygon_RootCount_orderBy;
  polygon_RootMessageSent: ResolverTypeWrapper<polygon_RootMessageSent>;
  polygon_RootMessageSent_filter: polygon_RootMessageSent_filter;
  polygon_RootMessageSent_orderBy: polygon_RootMessageSent_orderBy;
  polygon_Router: ResolverTypeWrapper<polygon_Router>;
  polygon_Router_filter: polygon_Router_filter;
  polygon_Router_orderBy: polygon_Router_orderBy;
  polygon_Sequencer: ResolverTypeWrapper<polygon_Sequencer>;
  polygon_Sequencer_filter: polygon_Sequencer_filter;
  polygon_Sequencer_orderBy: polygon_Sequencer_orderBy;
  polygon_Setting: ResolverTypeWrapper<polygon_Setting>;
  polygon_Setting_filter: polygon_Setting_filter;
  polygon_Setting_orderBy: polygon_Setting_orderBy;
  polygon_TransferStatus: polygon_TransferStatus;
  polygon__Block_: ResolverTypeWrapper<polygon__Block_>;
  polygon__Meta_: ResolverTypeWrapper<polygon__Meta_>;
  xdai_AggregateRoot: ResolverTypeWrapper<xdai_AggregateRoot>;
  xdai_AggregateRoot_filter: xdai_AggregateRoot_filter;
  xdai_AggregateRoot_orderBy: xdai_AggregateRoot_orderBy;
  xdai_Asset: ResolverTypeWrapper<xdai_Asset>;
  xdai_AssetBalance: ResolverTypeWrapper<xdai_AssetBalance>;
  xdai_AssetBalance_filter: xdai_AssetBalance_filter;
  xdai_AssetBalance_orderBy: xdai_AssetBalance_orderBy;
  xdai_AssetStatus: ResolverTypeWrapper<xdai_AssetStatus>;
  xdai_AssetStatus_filter: xdai_AssetStatus_filter;
  xdai_AssetStatus_orderBy: xdai_AssetStatus_orderBy;
  xdai_Asset_filter: xdai_Asset_filter;
  xdai_Asset_orderBy: xdai_Asset_orderBy;
  xdai_BigDecimal: ResolverTypeWrapper<Scalars['xdai_BigDecimal']>;
  xdai_BlockChangedFilter: xdai_BlockChangedFilter;
  xdai_Block_height: xdai_Block_height;
  xdai_Bytes: ResolverTypeWrapper<Scalars['xdai_Bytes']>;
  xdai_ConnectorMeta: ResolverTypeWrapper<xdai_ConnectorMeta>;
  xdai_ConnectorMeta_filter: xdai_ConnectorMeta_filter;
  xdai_ConnectorMeta_orderBy: xdai_ConnectorMeta_orderBy;
  xdai_DestinationTransfer: ResolverTypeWrapper<xdai_DestinationTransfer>;
  xdai_DestinationTransfer_filter: xdai_DestinationTransfer_filter;
  xdai_DestinationTransfer_orderBy: xdai_DestinationTransfer_orderBy;
  xdai_OrderDirection: xdai_OrderDirection;
  xdai_OriginMessage: ResolverTypeWrapper<xdai_OriginMessage>;
  xdai_OriginMessage_filter: xdai_OriginMessage_filter;
  xdai_OriginMessage_orderBy: xdai_OriginMessage_orderBy;
  xdai_OriginTransfer: ResolverTypeWrapper<xdai_OriginTransfer>;
  xdai_OriginTransfer_filter: xdai_OriginTransfer_filter;
  xdai_OriginTransfer_orderBy: xdai_OriginTransfer_orderBy;
  xdai_Relayer: ResolverTypeWrapper<xdai_Relayer>;
  xdai_Relayer_filter: xdai_Relayer_filter;
  xdai_Relayer_orderBy: xdai_Relayer_orderBy;
  xdai_RootCount: ResolverTypeWrapper<xdai_RootCount>;
  xdai_RootCount_filter: xdai_RootCount_filter;
  xdai_RootCount_orderBy: xdai_RootCount_orderBy;
  xdai_RootMessageSent: ResolverTypeWrapper<xdai_RootMessageSent>;
  xdai_RootMessageSent_filter: xdai_RootMessageSent_filter;
  xdai_RootMessageSent_orderBy: xdai_RootMessageSent_orderBy;
  xdai_Router: ResolverTypeWrapper<xdai_Router>;
  xdai_Router_filter: xdai_Router_filter;
  xdai_Router_orderBy: xdai_Router_orderBy;
  xdai_Sequencer: ResolverTypeWrapper<xdai_Sequencer>;
  xdai_Sequencer_filter: xdai_Sequencer_filter;
  xdai_Sequencer_orderBy: xdai_Sequencer_orderBy;
  xdai_Setting: ResolverTypeWrapper<xdai_Setting>;
  xdai_Setting_filter: xdai_Setting_filter;
  xdai_Setting_orderBy: xdai_Setting_orderBy;
  xdai_TransferStatus: xdai_TransferStatus;
  xdai__Block_: ResolverTypeWrapper<xdai__Block_>;
  xdai__Meta_: ResolverTypeWrapper<xdai__Meta_>;
  arbitrumone_AggregateRoot: ResolverTypeWrapper<arbitrumone_AggregateRoot>;
  arbitrumone_AggregateRoot_filter: arbitrumone_AggregateRoot_filter;
  arbitrumone_AggregateRoot_orderBy: arbitrumone_AggregateRoot_orderBy;
  arbitrumone_Asset: ResolverTypeWrapper<arbitrumone_Asset>;
  arbitrumone_AssetBalance: ResolverTypeWrapper<arbitrumone_AssetBalance>;
  arbitrumone_AssetBalance_filter: arbitrumone_AssetBalance_filter;
  arbitrumone_AssetBalance_orderBy: arbitrumone_AssetBalance_orderBy;
  arbitrumone_AssetStatus: ResolverTypeWrapper<arbitrumone_AssetStatus>;
  arbitrumone_AssetStatus_filter: arbitrumone_AssetStatus_filter;
  arbitrumone_AssetStatus_orderBy: arbitrumone_AssetStatus_orderBy;
  arbitrumone_Asset_filter: arbitrumone_Asset_filter;
  arbitrumone_Asset_orderBy: arbitrumone_Asset_orderBy;
  arbitrumone_BigDecimal: ResolverTypeWrapper<Scalars['arbitrumone_BigDecimal']>;
  arbitrumone_BlockChangedFilter: arbitrumone_BlockChangedFilter;
  arbitrumone_Block_height: arbitrumone_Block_height;
  arbitrumone_Bytes: ResolverTypeWrapper<Scalars['arbitrumone_Bytes']>;
  arbitrumone_ConnectorMeta: ResolverTypeWrapper<arbitrumone_ConnectorMeta>;
  arbitrumone_ConnectorMeta_filter: arbitrumone_ConnectorMeta_filter;
  arbitrumone_ConnectorMeta_orderBy: arbitrumone_ConnectorMeta_orderBy;
  arbitrumone_DestinationTransfer: ResolverTypeWrapper<arbitrumone_DestinationTransfer>;
  arbitrumone_DestinationTransfer_filter: arbitrumone_DestinationTransfer_filter;
  arbitrumone_DestinationTransfer_orderBy: arbitrumone_DestinationTransfer_orderBy;
  arbitrumone_OrderDirection: arbitrumone_OrderDirection;
  arbitrumone_OriginMessage: ResolverTypeWrapper<arbitrumone_OriginMessage>;
  arbitrumone_OriginMessage_filter: arbitrumone_OriginMessage_filter;
  arbitrumone_OriginMessage_orderBy: arbitrumone_OriginMessage_orderBy;
  arbitrumone_OriginTransfer: ResolverTypeWrapper<arbitrumone_OriginTransfer>;
  arbitrumone_OriginTransfer_filter: arbitrumone_OriginTransfer_filter;
  arbitrumone_OriginTransfer_orderBy: arbitrumone_OriginTransfer_orderBy;
  arbitrumone_Relayer: ResolverTypeWrapper<arbitrumone_Relayer>;
  arbitrumone_Relayer_filter: arbitrumone_Relayer_filter;
  arbitrumone_Relayer_orderBy: arbitrumone_Relayer_orderBy;
  arbitrumone_RootCount: ResolverTypeWrapper<arbitrumone_RootCount>;
  arbitrumone_RootCount_filter: arbitrumone_RootCount_filter;
  arbitrumone_RootCount_orderBy: arbitrumone_RootCount_orderBy;
  arbitrumone_RootMessageSent: ResolverTypeWrapper<arbitrumone_RootMessageSent>;
  arbitrumone_RootMessageSent_filter: arbitrumone_RootMessageSent_filter;
  arbitrumone_RootMessageSent_orderBy: arbitrumone_RootMessageSent_orderBy;
  arbitrumone_Router: ResolverTypeWrapper<arbitrumone_Router>;
  arbitrumone_Router_filter: arbitrumone_Router_filter;
  arbitrumone_Router_orderBy: arbitrumone_Router_orderBy;
  arbitrumone_Sequencer: ResolverTypeWrapper<arbitrumone_Sequencer>;
  arbitrumone_Sequencer_filter: arbitrumone_Sequencer_filter;
  arbitrumone_Sequencer_orderBy: arbitrumone_Sequencer_orderBy;
  arbitrumone_Setting: ResolverTypeWrapper<arbitrumone_Setting>;
  arbitrumone_Setting_filter: arbitrumone_Setting_filter;
  arbitrumone_Setting_orderBy: arbitrumone_Setting_orderBy;
  arbitrumone_TransferStatus: arbitrumone_TransferStatus;
  arbitrumone__Block_: ResolverTypeWrapper<arbitrumone__Block_>;
  arbitrumone__Meta_: ResolverTypeWrapper<arbitrumone__Meta_>;
  staginggoerli_AggregateRoot: ResolverTypeWrapper<staginggoerli_AggregateRoot>;
  staginggoerli_AggregateRoot_filter: staginggoerli_AggregateRoot_filter;
  staginggoerli_AggregateRoot_orderBy: staginggoerli_AggregateRoot_orderBy;
  staginggoerli_Asset: ResolverTypeWrapper<staginggoerli_Asset>;
  staginggoerli_AssetBalance: ResolverTypeWrapper<staginggoerli_AssetBalance>;
  staginggoerli_AssetBalance_filter: staginggoerli_AssetBalance_filter;
  staginggoerli_AssetBalance_orderBy: staginggoerli_AssetBalance_orderBy;
  staginggoerli_Asset_filter: staginggoerli_Asset_filter;
  staginggoerli_Asset_orderBy: staginggoerli_Asset_orderBy;
  staginggoerli_ConnectorMeta: ResolverTypeWrapper<staginggoerli_ConnectorMeta>;
  staginggoerli_ConnectorMeta_filter: staginggoerli_ConnectorMeta_filter;
  staginggoerli_ConnectorMeta_orderBy: staginggoerli_ConnectorMeta_orderBy;
  staginggoerli_DestinationTransfer: ResolverTypeWrapper<staginggoerli_DestinationTransfer>;
  staginggoerli_DestinationTransfer_filter: staginggoerli_DestinationTransfer_filter;
  staginggoerli_DestinationTransfer_orderBy: staginggoerli_DestinationTransfer_orderBy;
  staginggoerli_OriginMessage: ResolverTypeWrapper<staginggoerli_OriginMessage>;
  staginggoerli_OriginMessage_filter: staginggoerli_OriginMessage_filter;
  staginggoerli_OriginMessage_orderBy: staginggoerli_OriginMessage_orderBy;
  staginggoerli_OriginTransfer: ResolverTypeWrapper<staginggoerli_OriginTransfer>;
  staginggoerli_OriginTransfer_filter: staginggoerli_OriginTransfer_filter;
  staginggoerli_OriginTransfer_orderBy: staginggoerli_OriginTransfer_orderBy;
  staginggoerli_PooledToken: ResolverTypeWrapper<staginggoerli_PooledToken>;
  staginggoerli_PooledToken_filter: staginggoerli_PooledToken_filter;
  staginggoerli_PooledToken_orderBy: staginggoerli_PooledToken_orderBy;
  staginggoerli_Relayer: ResolverTypeWrapper<staginggoerli_Relayer>;
  staginggoerli_Relayer_filter: staginggoerli_Relayer_filter;
  staginggoerli_Relayer_orderBy: staginggoerli_Relayer_orderBy;
  staginggoerli_RootCount: ResolverTypeWrapper<staginggoerli_RootCount>;
  staginggoerli_RootCount_filter: staginggoerli_RootCount_filter;
  staginggoerli_RootCount_orderBy: staginggoerli_RootCount_orderBy;
  staginggoerli_RootMessageSent: ResolverTypeWrapper<staginggoerli_RootMessageSent>;
  staginggoerli_RootMessageSent_filter: staginggoerli_RootMessageSent_filter;
  staginggoerli_RootMessageSent_orderBy: staginggoerli_RootMessageSent_orderBy;
  staginggoerli_Router: ResolverTypeWrapper<staginggoerli_Router>;
  staginggoerli_Router_filter: staginggoerli_Router_filter;
  staginggoerli_Router_orderBy: staginggoerli_Router_orderBy;
  staginggoerli_Sequencer: ResolverTypeWrapper<staginggoerli_Sequencer>;
  staginggoerli_Sequencer_filter: staginggoerli_Sequencer_filter;
  staginggoerli_Sequencer_orderBy: staginggoerli_Sequencer_orderBy;
  staginggoerli_Setting: ResolverTypeWrapper<staginggoerli_Setting>;
  staginggoerli_Setting_filter: staginggoerli_Setting_filter;
  staginggoerli_Setting_orderBy: staginggoerli_Setting_orderBy;
  staginggoerli_StableSwap: ResolverTypeWrapper<staginggoerli_StableSwap>;
  staginggoerli_StableSwapAddLiquidityEvent: ResolverTypeWrapper<staginggoerli_StableSwapAddLiquidityEvent>;
  staginggoerli_StableSwapAddLiquidityEvent_filter: staginggoerli_StableSwapAddLiquidityEvent_filter;
  staginggoerli_StableSwapAddLiquidityEvent_orderBy: staginggoerli_StableSwapAddLiquidityEvent_orderBy;
  staginggoerli_StableSwapEvent: ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent'] | ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent'];
  staginggoerli_StableSwapEvent_filter: staginggoerli_StableSwapEvent_filter;
  staginggoerli_StableSwapEvent_orderBy: staginggoerli_StableSwapEvent_orderBy;
  staginggoerli_StableSwapExchange: ResolverTypeWrapper<staginggoerli_StableSwapExchange>;
  staginggoerli_StableSwapExchange_filter: staginggoerli_StableSwapExchange_filter;
  staginggoerli_StableSwapExchange_orderBy: staginggoerli_StableSwapExchange_orderBy;
  staginggoerli_StableSwapRemoveLiquidityEvent: ResolverTypeWrapper<staginggoerli_StableSwapRemoveLiquidityEvent>;
  staginggoerli_StableSwapRemoveLiquidityEvent_filter: staginggoerli_StableSwapRemoveLiquidityEvent_filter;
  staginggoerli_StableSwapRemoveLiquidityEvent_orderBy: staginggoerli_StableSwapRemoveLiquidityEvent_orderBy;
  staginggoerli_StableSwap_filter: staginggoerli_StableSwap_filter;
  staginggoerli_StableSwap_orderBy: staginggoerli_StableSwap_orderBy;
  staginggoerli_SwapDailyVolume: ResolverTypeWrapper<staginggoerli_SwapDailyVolume>;
  staginggoerli_SwapDailyVolume_filter: staginggoerli_SwapDailyVolume_filter;
  staginggoerli_SwapDailyVolume_orderBy: staginggoerli_SwapDailyVolume_orderBy;
  staginggoerli_SwapHourlyVolume: ResolverTypeWrapper<staginggoerli_SwapHourlyVolume>;
  staginggoerli_SwapHourlyVolume_filter: staginggoerli_SwapHourlyVolume_filter;
  staginggoerli_SwapHourlyVolume_orderBy: staginggoerli_SwapHourlyVolume_orderBy;
  staginggoerli_SwapTradeVolume: ResolversTypes['staginggoerli_SwapDailyVolume'] | ResolversTypes['staginggoerli_SwapHourlyVolume'] | ResolversTypes['staginggoerli_SwapWeeklyVolume'];
  staginggoerli_SwapTradeVolume_filter: staginggoerli_SwapTradeVolume_filter;
  staginggoerli_SwapTradeVolume_orderBy: staginggoerli_SwapTradeVolume_orderBy;
  staginggoerli_SwapWeeklyVolume: ResolverTypeWrapper<staginggoerli_SwapWeeklyVolume>;
  staginggoerli_SwapWeeklyVolume_filter: staginggoerli_SwapWeeklyVolume_filter;
  staginggoerli_SwapWeeklyVolume_orderBy: staginggoerli_SwapWeeklyVolume_orderBy;
  staginggoerli_TransferRelayerFee: ResolverTypeWrapper<staginggoerli_TransferRelayerFee>;
  staginggoerli_TransferRelayerFee_filter: staginggoerli_TransferRelayerFee_filter;
  staginggoerli_TransferRelayerFee_orderBy: staginggoerli_TransferRelayerFee_orderBy;
  staginggoerli_TransferStatus: staginggoerli_TransferStatus;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Query: {};
  Subscription: {};
  polygon_swap_BigDecimal: Scalars['polygon_swap_BigDecimal'];
  BigInt: Scalars['BigInt'];
  polygon_swap_BlockChangedFilter: polygon_swap_BlockChangedFilter;
  polygon_swap_Block_height: polygon_swap_Block_height;
  Boolean: Scalars['Boolean'];
  polygon_swap_Bytes: Scalars['polygon_swap_Bytes'];
  Float: Scalars['Float'];
  ID: Scalars['ID'];
  Int: Scalars['Int'];
  polygon_swap_PooledToken: polygon_swap_PooledToken;
  polygon_swap_PooledToken_filter: polygon_swap_PooledToken_filter;
  polygon_swap_StableSwap: polygon_swap_StableSwap;
  polygon_swap_StableSwapAddLiquidityEvent: polygon_swap_StableSwapAddLiquidityEvent;
  polygon_swap_StableSwapAddLiquidityEvent_filter: polygon_swap_StableSwapAddLiquidityEvent_filter;
  polygon_swap_StableSwapEvent: ResolversParentTypes['polygon_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['polygon_swap_StableSwapRemoveLiquidityEvent'];
  polygon_swap_StableSwapEvent_filter: polygon_swap_StableSwapEvent_filter;
  polygon_swap_StableSwapExchange: polygon_swap_StableSwapExchange;
  polygon_swap_StableSwapExchange_filter: polygon_swap_StableSwapExchange_filter;
  polygon_swap_StableSwapRemoveLiquidityEvent: polygon_swap_StableSwapRemoveLiquidityEvent;
  polygon_swap_StableSwapRemoveLiquidityEvent_filter: polygon_swap_StableSwapRemoveLiquidityEvent_filter;
  polygon_swap_StableSwap_filter: polygon_swap_StableSwap_filter;
  String: Scalars['String'];
  polygon_swap_SwapDailyVolume: polygon_swap_SwapDailyVolume;
  polygon_swap_SwapDailyVolume_filter: polygon_swap_SwapDailyVolume_filter;
  polygon_swap_SwapHourlyVolume: polygon_swap_SwapHourlyVolume;
  polygon_swap_SwapHourlyVolume_filter: polygon_swap_SwapHourlyVolume_filter;
  polygon_swap_SwapTradeVolume: ResolversParentTypes['polygon_swap_SwapDailyVolume'] | ResolversParentTypes['polygon_swap_SwapHourlyVolume'] | ResolversParentTypes['polygon_swap_SwapWeeklyVolume'];
  polygon_swap_SwapTradeVolume_filter: polygon_swap_SwapTradeVolume_filter;
  polygon_swap_SwapWeeklyVolume: polygon_swap_SwapWeeklyVolume;
  polygon_swap_SwapWeeklyVolume_filter: polygon_swap_SwapWeeklyVolume_filter;
  polygon_swap_SystemInfo: polygon_swap_SystemInfo;
  polygon_swap_SystemInfo_filter: polygon_swap_SystemInfo_filter;
  polygon_swap__Block_: polygon_swap__Block_;
  polygon_swap__Meta_: polygon_swap__Meta_;
  optimismgoerli_AggregateRoot: optimismgoerli_AggregateRoot;
  optimismgoerli_AggregateRoot_filter: optimismgoerli_AggregateRoot_filter;
  optimismgoerli_Asset: optimismgoerli_Asset;
  optimismgoerli_AssetBalance: optimismgoerli_AssetBalance;
  optimismgoerli_AssetBalance_filter: optimismgoerli_AssetBalance_filter;
  optimismgoerli_AssetStatus: optimismgoerli_AssetStatus;
  optimismgoerli_AssetStatus_filter: optimismgoerli_AssetStatus_filter;
  optimismgoerli_Asset_filter: optimismgoerli_Asset_filter;
  optimismgoerli_BigDecimal: Scalars['optimismgoerli_BigDecimal'];
  optimismgoerli_BlockChangedFilter: optimismgoerli_BlockChangedFilter;
  optimismgoerli_Block_height: optimismgoerli_Block_height;
  optimismgoerli_Bytes: Scalars['optimismgoerli_Bytes'];
  optimismgoerli_ConnectorMeta: optimismgoerli_ConnectorMeta;
  optimismgoerli_ConnectorMeta_filter: optimismgoerli_ConnectorMeta_filter;
  optimismgoerli_DestinationTransfer: optimismgoerli_DestinationTransfer;
  optimismgoerli_DestinationTransfer_filter: optimismgoerli_DestinationTransfer_filter;
  optimismgoerli_OriginMessage: optimismgoerli_OriginMessage;
  optimismgoerli_OriginMessage_filter: optimismgoerli_OriginMessage_filter;
  optimismgoerli_OriginTransfer: optimismgoerli_OriginTransfer;
  optimismgoerli_OriginTransfer_filter: optimismgoerli_OriginTransfer_filter;
  optimismgoerli_Relayer: optimismgoerli_Relayer;
  optimismgoerli_Relayer_filter: optimismgoerli_Relayer_filter;
  optimismgoerli_RootCount: optimismgoerli_RootCount;
  optimismgoerli_RootCount_filter: optimismgoerli_RootCount_filter;
  optimismgoerli_RootMessageSent: optimismgoerli_RootMessageSent;
  optimismgoerli_RootMessageSent_filter: optimismgoerli_RootMessageSent_filter;
  optimismgoerli_Router: optimismgoerli_Router;
  optimismgoerli_Router_filter: optimismgoerli_Router_filter;
  optimismgoerli_Sequencer: optimismgoerli_Sequencer;
  optimismgoerli_Sequencer_filter: optimismgoerli_Sequencer_filter;
  optimismgoerli_Setting: optimismgoerli_Setting;
  optimismgoerli_Setting_filter: optimismgoerli_Setting_filter;
  optimismgoerli__Block_: optimismgoerli__Block_;
  optimismgoerli__Meta_: optimismgoerli__Meta_;
  stagingarbitrumgoerli_swap_BigDecimal: Scalars['stagingarbitrumgoerli_swap_BigDecimal'];
  stagingarbitrumgoerli_swap_BlockChangedFilter: stagingarbitrumgoerli_swap_BlockChangedFilter;
  stagingarbitrumgoerli_swap_Block_height: stagingarbitrumgoerli_swap_Block_height;
  stagingarbitrumgoerli_swap_Bytes: Scalars['stagingarbitrumgoerli_swap_Bytes'];
  stagingarbitrumgoerli_swap_PooledToken: stagingarbitrumgoerli_swap_PooledToken;
  stagingarbitrumgoerli_swap_PooledToken_filter: stagingarbitrumgoerli_swap_PooledToken_filter;
  stagingarbitrumgoerli_swap_StableSwap: stagingarbitrumgoerli_swap_StableSwap;
  stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent: stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent;
  stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter: stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter;
  stagingarbitrumgoerli_swap_StableSwapEvent: ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent'];
  stagingarbitrumgoerli_swap_StableSwapEvent_filter: stagingarbitrumgoerli_swap_StableSwapEvent_filter;
  stagingarbitrumgoerli_swap_StableSwapExchange: stagingarbitrumgoerli_swap_StableSwapExchange;
  stagingarbitrumgoerli_swap_StableSwapExchange_filter: stagingarbitrumgoerli_swap_StableSwapExchange_filter;
  stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent: stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent;
  stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter: stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  stagingarbitrumgoerli_swap_StableSwap_filter: stagingarbitrumgoerli_swap_StableSwap_filter;
  stagingarbitrumgoerli_swap_SwapDailyVolume: stagingarbitrumgoerli_swap_SwapDailyVolume;
  stagingarbitrumgoerli_swap_SwapDailyVolume_filter: stagingarbitrumgoerli_swap_SwapDailyVolume_filter;
  stagingarbitrumgoerli_swap_SwapHourlyVolume: stagingarbitrumgoerli_swap_SwapHourlyVolume;
  stagingarbitrumgoerli_swap_SwapHourlyVolume_filter: stagingarbitrumgoerli_swap_SwapHourlyVolume_filter;
  stagingarbitrumgoerli_swap_SwapTradeVolume: ResolversParentTypes['stagingarbitrumgoerli_swap_SwapDailyVolume'] | ResolversParentTypes['stagingarbitrumgoerli_swap_SwapHourlyVolume'] | ResolversParentTypes['stagingarbitrumgoerli_swap_SwapWeeklyVolume'];
  stagingarbitrumgoerli_swap_SwapTradeVolume_filter: stagingarbitrumgoerli_swap_SwapTradeVolume_filter;
  stagingarbitrumgoerli_swap_SwapWeeklyVolume: stagingarbitrumgoerli_swap_SwapWeeklyVolume;
  stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter: stagingarbitrumgoerli_swap_SwapWeeklyVolume_filter;
  stagingarbitrumgoerli_swap_SystemInfo: stagingarbitrumgoerli_swap_SystemInfo;
  stagingarbitrumgoerli_swap_SystemInfo_filter: stagingarbitrumgoerli_swap_SystemInfo_filter;
  stagingarbitrumgoerli_swap__Block_: stagingarbitrumgoerli_swap__Block_;
  stagingarbitrumgoerli_swap__Meta_: stagingarbitrumgoerli_swap__Meta_;
  arbitrumgoerli_AggregateRoot: arbitrumgoerli_AggregateRoot;
  arbitrumgoerli_AggregateRoot_filter: arbitrumgoerli_AggregateRoot_filter;
  arbitrumgoerli_Asset: arbitrumgoerli_Asset;
  arbitrumgoerli_AssetBalance: arbitrumgoerli_AssetBalance;
  arbitrumgoerli_AssetBalance_filter: arbitrumgoerli_AssetBalance_filter;
  arbitrumgoerli_AssetStatus: arbitrumgoerli_AssetStatus;
  arbitrumgoerli_AssetStatus_filter: arbitrumgoerli_AssetStatus_filter;
  arbitrumgoerli_Asset_filter: arbitrumgoerli_Asset_filter;
  arbitrumgoerli_BigDecimal: Scalars['arbitrumgoerli_BigDecimal'];
  arbitrumgoerli_BlockChangedFilter: arbitrumgoerli_BlockChangedFilter;
  arbitrumgoerli_Block_height: arbitrumgoerli_Block_height;
  arbitrumgoerli_Bytes: Scalars['arbitrumgoerli_Bytes'];
  arbitrumgoerli_ConnectorMeta: arbitrumgoerli_ConnectorMeta;
  arbitrumgoerli_ConnectorMeta_filter: arbitrumgoerli_ConnectorMeta_filter;
  arbitrumgoerli_DestinationTransfer: arbitrumgoerli_DestinationTransfer;
  arbitrumgoerli_DestinationTransfer_filter: arbitrumgoerli_DestinationTransfer_filter;
  arbitrumgoerli_OriginMessage: arbitrumgoerli_OriginMessage;
  arbitrumgoerli_OriginMessage_filter: arbitrumgoerli_OriginMessage_filter;
  arbitrumgoerli_OriginTransfer: arbitrumgoerli_OriginTransfer;
  arbitrumgoerli_OriginTransfer_filter: arbitrumgoerli_OriginTransfer_filter;
  arbitrumgoerli_Relayer: arbitrumgoerli_Relayer;
  arbitrumgoerli_Relayer_filter: arbitrumgoerli_Relayer_filter;
  arbitrumgoerli_RootCount: arbitrumgoerli_RootCount;
  arbitrumgoerli_RootCount_filter: arbitrumgoerli_RootCount_filter;
  arbitrumgoerli_RootMessageSent: arbitrumgoerli_RootMessageSent;
  arbitrumgoerli_RootMessageSent_filter: arbitrumgoerli_RootMessageSent_filter;
  arbitrumgoerli_Router: arbitrumgoerli_Router;
  arbitrumgoerli_Router_filter: arbitrumgoerli_Router_filter;
  arbitrumgoerli_Sequencer: arbitrumgoerli_Sequencer;
  arbitrumgoerli_Sequencer_filter: arbitrumgoerli_Sequencer_filter;
  arbitrumgoerli_Setting: arbitrumgoerli_Setting;
  arbitrumgoerli_Setting_filter: arbitrumgoerli_Setting_filter;
  arbitrumgoerli__Block_: arbitrumgoerli__Block_;
  arbitrumgoerli__Meta_: arbitrumgoerli__Meta_;
  stagingoptimismgoerli_swap_BigDecimal: Scalars['stagingoptimismgoerli_swap_BigDecimal'];
  stagingoptimismgoerli_swap_BlockChangedFilter: stagingoptimismgoerli_swap_BlockChangedFilter;
  stagingoptimismgoerli_swap_Block_height: stagingoptimismgoerli_swap_Block_height;
  stagingoptimismgoerli_swap_Bytes: Scalars['stagingoptimismgoerli_swap_Bytes'];
  stagingoptimismgoerli_swap_PooledToken: stagingoptimismgoerli_swap_PooledToken;
  stagingoptimismgoerli_swap_PooledToken_filter: stagingoptimismgoerli_swap_PooledToken_filter;
  stagingoptimismgoerli_swap_StableSwap: stagingoptimismgoerli_swap_StableSwap;
  stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent: stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent;
  stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter: stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent_filter;
  stagingoptimismgoerli_swap_StableSwapEvent: ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent'];
  stagingoptimismgoerli_swap_StableSwapEvent_filter: stagingoptimismgoerli_swap_StableSwapEvent_filter;
  stagingoptimismgoerli_swap_StableSwapExchange: stagingoptimismgoerli_swap_StableSwapExchange;
  stagingoptimismgoerli_swap_StableSwapExchange_filter: stagingoptimismgoerli_swap_StableSwapExchange_filter;
  stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent: stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent;
  stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter: stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  stagingoptimismgoerli_swap_StableSwap_filter: stagingoptimismgoerli_swap_StableSwap_filter;
  stagingoptimismgoerli_swap_SwapDailyVolume: stagingoptimismgoerli_swap_SwapDailyVolume;
  stagingoptimismgoerli_swap_SwapDailyVolume_filter: stagingoptimismgoerli_swap_SwapDailyVolume_filter;
  stagingoptimismgoerli_swap_SwapHourlyVolume: stagingoptimismgoerli_swap_SwapHourlyVolume;
  stagingoptimismgoerli_swap_SwapHourlyVolume_filter: stagingoptimismgoerli_swap_SwapHourlyVolume_filter;
  stagingoptimismgoerli_swap_SwapTradeVolume: ResolversParentTypes['stagingoptimismgoerli_swap_SwapDailyVolume'] | ResolversParentTypes['stagingoptimismgoerli_swap_SwapHourlyVolume'] | ResolversParentTypes['stagingoptimismgoerli_swap_SwapWeeklyVolume'];
  stagingoptimismgoerli_swap_SwapTradeVolume_filter: stagingoptimismgoerli_swap_SwapTradeVolume_filter;
  stagingoptimismgoerli_swap_SwapWeeklyVolume: stagingoptimismgoerli_swap_SwapWeeklyVolume;
  stagingoptimismgoerli_swap_SwapWeeklyVolume_filter: stagingoptimismgoerli_swap_SwapWeeklyVolume_filter;
  stagingoptimismgoerli_swap_SystemInfo: stagingoptimismgoerli_swap_SystemInfo;
  stagingoptimismgoerli_swap_SystemInfo_filter: stagingoptimismgoerli_swap_SystemInfo_filter;
  stagingoptimismgoerli_swap__Block_: stagingoptimismgoerli_swap__Block_;
  stagingoptimismgoerli_swap__Meta_: stagingoptimismgoerli_swap__Meta_;
  testgoerli_Asset: testgoerli_Asset;
  testgoerli_AssetBalance: testgoerli_AssetBalance;
  testgoerli_AssetBalance_filter: testgoerli_AssetBalance_filter;
  testgoerli_Asset_filter: testgoerli_Asset_filter;
  testgoerli_BigDecimal: Scalars['testgoerli_BigDecimal'];
  testgoerli_BlockChangedFilter: testgoerli_BlockChangedFilter;
  testgoerli_Block_height: testgoerli_Block_height;
  testgoerli_Bytes: Scalars['testgoerli_Bytes'];
  testgoerli_DestinationTransfer: testgoerli_DestinationTransfer;
  testgoerli_DestinationTransfer_filter: testgoerli_DestinationTransfer_filter;
  testgoerli_OriginTransfer: testgoerli_OriginTransfer;
  testgoerli_OriginTransfer_filter: testgoerli_OriginTransfer_filter;
  testgoerli_Relayer: testgoerli_Relayer;
  testgoerli_Relayer_filter: testgoerli_Relayer_filter;
  testgoerli_Router: testgoerli_Router;
  testgoerli_Router_filter: testgoerli_Router_filter;
  testgoerli_Setting: testgoerli_Setting;
  testgoerli_Setting_filter: testgoerli_Setting_filter;
  testgoerli_SponsorVault: testgoerli_SponsorVault;
  testgoerli_SponsorVault_filter: testgoerli_SponsorVault_filter;
  testgoerli_StableSwap: testgoerli_StableSwap;
  testgoerli_StableSwap_filter: testgoerli_StableSwap_filter;
  testgoerli__Block_: testgoerli__Block_;
  testgoerli__Meta_: testgoerli__Meta_;
  xdai_swap_BigDecimal: Scalars['xdai_swap_BigDecimal'];
  xdai_swap_BlockChangedFilter: xdai_swap_BlockChangedFilter;
  xdai_swap_Block_height: xdai_swap_Block_height;
  xdai_swap_Bytes: Scalars['xdai_swap_Bytes'];
  xdai_swap_PooledToken: xdai_swap_PooledToken;
  xdai_swap_PooledToken_filter: xdai_swap_PooledToken_filter;
  xdai_swap_StableSwap: xdai_swap_StableSwap;
  xdai_swap_StableSwapAddLiquidityEvent: xdai_swap_StableSwapAddLiquidityEvent;
  xdai_swap_StableSwapAddLiquidityEvent_filter: xdai_swap_StableSwapAddLiquidityEvent_filter;
  xdai_swap_StableSwapEvent: ResolversParentTypes['xdai_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['xdai_swap_StableSwapRemoveLiquidityEvent'];
  xdai_swap_StableSwapEvent_filter: xdai_swap_StableSwapEvent_filter;
  xdai_swap_StableSwapExchange: xdai_swap_StableSwapExchange;
  xdai_swap_StableSwapExchange_filter: xdai_swap_StableSwapExchange_filter;
  xdai_swap_StableSwapRemoveLiquidityEvent: xdai_swap_StableSwapRemoveLiquidityEvent;
  xdai_swap_StableSwapRemoveLiquidityEvent_filter: xdai_swap_StableSwapRemoveLiquidityEvent_filter;
  xdai_swap_StableSwap_filter: xdai_swap_StableSwap_filter;
  xdai_swap_SwapDailyVolume: xdai_swap_SwapDailyVolume;
  xdai_swap_SwapDailyVolume_filter: xdai_swap_SwapDailyVolume_filter;
  xdai_swap_SwapHourlyVolume: xdai_swap_SwapHourlyVolume;
  xdai_swap_SwapHourlyVolume_filter: xdai_swap_SwapHourlyVolume_filter;
  xdai_swap_SwapTradeVolume: ResolversParentTypes['xdai_swap_SwapDailyVolume'] | ResolversParentTypes['xdai_swap_SwapHourlyVolume'] | ResolversParentTypes['xdai_swap_SwapWeeklyVolume'];
  xdai_swap_SwapTradeVolume_filter: xdai_swap_SwapTradeVolume_filter;
  xdai_swap_SwapWeeklyVolume: xdai_swap_SwapWeeklyVolume;
  xdai_swap_SwapWeeklyVolume_filter: xdai_swap_SwapWeeklyVolume_filter;
  xdai_swap_SystemInfo: xdai_swap_SystemInfo;
  xdai_swap_SystemInfo_filter: xdai_swap_SystemInfo_filter;
  xdai_swap__Block_: xdai_swap__Block_;
  xdai_swap__Meta_: xdai_swap__Meta_;
  staginggoerli_AggregatedMessageRoot: staginggoerli_AggregatedMessageRoot;
  staginggoerli_AggregatedMessageRoot_filter: staginggoerli_AggregatedMessageRoot_filter;
  staginggoerli_ArbitrumConnectorMeta: staginggoerli_ArbitrumConnectorMeta;
  staginggoerli_ArbitrumConnectorMeta_filter: staginggoerli_ArbitrumConnectorMeta_filter;
  staginggoerli_BigDecimal: Scalars['staginggoerli_BigDecimal'];
  staginggoerli_BlockChangedFilter: staginggoerli_BlockChangedFilter;
  staginggoerli_Block_height: staginggoerli_Block_height;
  staginggoerli_BnbConnectorMeta: staginggoerli_BnbConnectorMeta;
  staginggoerli_BnbConnectorMeta_filter: staginggoerli_BnbConnectorMeta_filter;
  staginggoerli_Bytes: Scalars['staginggoerli_Bytes'];
  staginggoerli_GnosisConnectorMeta: staginggoerli_GnosisConnectorMeta;
  staginggoerli_GnosisConnectorMeta_filter: staginggoerli_GnosisConnectorMeta_filter;
  staginggoerli_OptimismConnectorMeta: staginggoerli_OptimismConnectorMeta;
  staginggoerli_OptimismConnectorMeta_filter: staginggoerli_OptimismConnectorMeta_filter;
  staginggoerli_PolygonConnectorMeta: staginggoerli_PolygonConnectorMeta;
  staginggoerli_PolygonConnectorMeta_filter: staginggoerli_PolygonConnectorMeta_filter;
  staginggoerli_RootAggregated: staginggoerli_RootAggregated;
  staginggoerli_RootAggregated_filter: staginggoerli_RootAggregated_filter;
  staginggoerli_RootManagerMeta: staginggoerli_RootManagerMeta;
  staginggoerli_RootManagerMeta_filter: staginggoerli_RootManagerMeta_filter;
  staginggoerli_RootMessageProcessed: staginggoerli_RootMessageProcessed;
  staginggoerli_RootMessageProcessed_filter: staginggoerli_RootMessageProcessed_filter;
  staginggoerli_RootPropagated: staginggoerli_RootPropagated;
  staginggoerli_RootPropagated_filter: staginggoerli_RootPropagated_filter;
  staginggoerli__Block_: staginggoerli__Block_;
  staginggoerli__Meta_: staginggoerli__Meta_;
  mainnet_AggregatedMessageRoot: mainnet_AggregatedMessageRoot;
  mainnet_AggregatedMessageRoot_filter: mainnet_AggregatedMessageRoot_filter;
  mainnet_ArbitrumConnectorMeta: mainnet_ArbitrumConnectorMeta;
  mainnet_ArbitrumConnectorMeta_filter: mainnet_ArbitrumConnectorMeta_filter;
  mainnet_BigDecimal: Scalars['mainnet_BigDecimal'];
  mainnet_BlockChangedFilter: mainnet_BlockChangedFilter;
  mainnet_Block_height: mainnet_Block_height;
  mainnet_BnbConnectorMeta: mainnet_BnbConnectorMeta;
  mainnet_BnbConnectorMeta_filter: mainnet_BnbConnectorMeta_filter;
  mainnet_Bytes: Scalars['mainnet_Bytes'];
  mainnet_GnosisConnectorMeta: mainnet_GnosisConnectorMeta;
  mainnet_GnosisConnectorMeta_filter: mainnet_GnosisConnectorMeta_filter;
  mainnet_OptimismConnectorMeta: mainnet_OptimismConnectorMeta;
  mainnet_OptimismConnectorMeta_filter: mainnet_OptimismConnectorMeta_filter;
  mainnet_PolygonConnectorMeta: mainnet_PolygonConnectorMeta;
  mainnet_PolygonConnectorMeta_filter: mainnet_PolygonConnectorMeta_filter;
  mainnet_RootAggregated: mainnet_RootAggregated;
  mainnet_RootAggregated_filter: mainnet_RootAggregated_filter;
  mainnet_RootManagerMeta: mainnet_RootManagerMeta;
  mainnet_RootManagerMeta_filter: mainnet_RootManagerMeta_filter;
  mainnet_RootMessageProcessed: mainnet_RootMessageProcessed;
  mainnet_RootMessageProcessed_filter: mainnet_RootMessageProcessed_filter;
  mainnet_RootPropagated: mainnet_RootPropagated;
  mainnet_RootPropagated_filter: mainnet_RootPropagated_filter;
  mainnet__Block_: mainnet__Block_;
  mainnet__Meta_: mainnet__Meta_;
  testoptimismgoerli_Asset: testoptimismgoerli_Asset;
  testoptimismgoerli_AssetBalance: testoptimismgoerli_AssetBalance;
  testoptimismgoerli_AssetBalance_filter: testoptimismgoerli_AssetBalance_filter;
  testoptimismgoerli_Asset_filter: testoptimismgoerli_Asset_filter;
  testoptimismgoerli_BigDecimal: Scalars['testoptimismgoerli_BigDecimal'];
  testoptimismgoerli_BlockChangedFilter: testoptimismgoerli_BlockChangedFilter;
  testoptimismgoerli_Block_height: testoptimismgoerli_Block_height;
  testoptimismgoerli_Bytes: Scalars['testoptimismgoerli_Bytes'];
  testoptimismgoerli_DestinationTransfer: testoptimismgoerli_DestinationTransfer;
  testoptimismgoerli_DestinationTransfer_filter: testoptimismgoerli_DestinationTransfer_filter;
  testoptimismgoerli_OriginTransfer: testoptimismgoerli_OriginTransfer;
  testoptimismgoerli_OriginTransfer_filter: testoptimismgoerli_OriginTransfer_filter;
  testoptimismgoerli_Relayer: testoptimismgoerli_Relayer;
  testoptimismgoerli_Relayer_filter: testoptimismgoerli_Relayer_filter;
  testoptimismgoerli_Router: testoptimismgoerli_Router;
  testoptimismgoerli_Router_filter: testoptimismgoerli_Router_filter;
  testoptimismgoerli_Setting: testoptimismgoerli_Setting;
  testoptimismgoerli_Setting_filter: testoptimismgoerli_Setting_filter;
  testoptimismgoerli_SponsorVault: testoptimismgoerli_SponsorVault;
  testoptimismgoerli_SponsorVault_filter: testoptimismgoerli_SponsorVault_filter;
  testoptimismgoerli_StableSwap: testoptimismgoerli_StableSwap;
  testoptimismgoerli_StableSwap_filter: testoptimismgoerli_StableSwap_filter;
  testoptimismgoerli__Block_: testoptimismgoerli__Block_;
  testoptimismgoerli__Meta_: testoptimismgoerli__Meta_;
  optimism_swap_BigDecimal: Scalars['optimism_swap_BigDecimal'];
  optimism_swap_BlockChangedFilter: optimism_swap_BlockChangedFilter;
  optimism_swap_Block_height: optimism_swap_Block_height;
  optimism_swap_Bytes: Scalars['optimism_swap_Bytes'];
  optimism_swap_PooledToken: optimism_swap_PooledToken;
  optimism_swap_PooledToken_filter: optimism_swap_PooledToken_filter;
  optimism_swap_StableSwap: optimism_swap_StableSwap;
  optimism_swap_StableSwapAddLiquidityEvent: optimism_swap_StableSwapAddLiquidityEvent;
  optimism_swap_StableSwapAddLiquidityEvent_filter: optimism_swap_StableSwapAddLiquidityEvent_filter;
  optimism_swap_StableSwapEvent: ResolversParentTypes['optimism_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['optimism_swap_StableSwapRemoveLiquidityEvent'];
  optimism_swap_StableSwapEvent_filter: optimism_swap_StableSwapEvent_filter;
  optimism_swap_StableSwapExchange: optimism_swap_StableSwapExchange;
  optimism_swap_StableSwapExchange_filter: optimism_swap_StableSwapExchange_filter;
  optimism_swap_StableSwapRemoveLiquidityEvent: optimism_swap_StableSwapRemoveLiquidityEvent;
  optimism_swap_StableSwapRemoveLiquidityEvent_filter: optimism_swap_StableSwapRemoveLiquidityEvent_filter;
  optimism_swap_StableSwap_filter: optimism_swap_StableSwap_filter;
  optimism_swap_SwapDailyVolume: optimism_swap_SwapDailyVolume;
  optimism_swap_SwapDailyVolume_filter: optimism_swap_SwapDailyVolume_filter;
  optimism_swap_SwapHourlyVolume: optimism_swap_SwapHourlyVolume;
  optimism_swap_SwapHourlyVolume_filter: optimism_swap_SwapHourlyVolume_filter;
  optimism_swap_SwapTradeVolume: ResolversParentTypes['optimism_swap_SwapDailyVolume'] | ResolversParentTypes['optimism_swap_SwapHourlyVolume'] | ResolversParentTypes['optimism_swap_SwapWeeklyVolume'];
  optimism_swap_SwapTradeVolume_filter: optimism_swap_SwapTradeVolume_filter;
  optimism_swap_SwapWeeklyVolume: optimism_swap_SwapWeeklyVolume;
  optimism_swap_SwapWeeklyVolume_filter: optimism_swap_SwapWeeklyVolume_filter;
  optimism_swap_SystemInfo: optimism_swap_SystemInfo;
  optimism_swap_SystemInfo_filter: optimism_swap_SystemInfo_filter;
  optimism_swap__Block_: optimism_swap__Block_;
  optimism_swap__Meta_: optimism_swap__Meta_;
  goerli_swap_BigDecimal: Scalars['goerli_swap_BigDecimal'];
  goerli_swap_BlockChangedFilter: goerli_swap_BlockChangedFilter;
  goerli_swap_Block_height: goerli_swap_Block_height;
  goerli_swap_Bytes: Scalars['goerli_swap_Bytes'];
  goerli_swap_PooledToken: goerli_swap_PooledToken;
  goerli_swap_PooledToken_filter: goerli_swap_PooledToken_filter;
  goerli_swap_StableSwap: goerli_swap_StableSwap;
  goerli_swap_StableSwapAddLiquidityEvent: goerli_swap_StableSwapAddLiquidityEvent;
  goerli_swap_StableSwapAddLiquidityEvent_filter: goerli_swap_StableSwapAddLiquidityEvent_filter;
  goerli_swap_StableSwapEvent: ResolversParentTypes['goerli_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['goerli_swap_StableSwapRemoveLiquidityEvent'];
  goerli_swap_StableSwapEvent_filter: goerli_swap_StableSwapEvent_filter;
  goerli_swap_StableSwapExchange: goerli_swap_StableSwapExchange;
  goerli_swap_StableSwapExchange_filter: goerli_swap_StableSwapExchange_filter;
  goerli_swap_StableSwapRemoveLiquidityEvent: goerli_swap_StableSwapRemoveLiquidityEvent;
  goerli_swap_StableSwapRemoveLiquidityEvent_filter: goerli_swap_StableSwapRemoveLiquidityEvent_filter;
  goerli_swap_StableSwap_filter: goerli_swap_StableSwap_filter;
  goerli_swap_SwapDailyVolume: goerli_swap_SwapDailyVolume;
  goerli_swap_SwapDailyVolume_filter: goerli_swap_SwapDailyVolume_filter;
  goerli_swap_SwapHourlyVolume: goerli_swap_SwapHourlyVolume;
  goerli_swap_SwapHourlyVolume_filter: goerli_swap_SwapHourlyVolume_filter;
  goerli_swap_SwapTradeVolume: ResolversParentTypes['goerli_swap_SwapDailyVolume'] | ResolversParentTypes['goerli_swap_SwapHourlyVolume'] | ResolversParentTypes['goerli_swap_SwapWeeklyVolume'];
  goerli_swap_SwapTradeVolume_filter: goerli_swap_SwapTradeVolume_filter;
  goerli_swap_SwapWeeklyVolume: goerli_swap_SwapWeeklyVolume;
  goerli_swap_SwapWeeklyVolume_filter: goerli_swap_SwapWeeklyVolume_filter;
  goerli_swap_SystemInfo: goerli_swap_SystemInfo;
  goerli_swap_SystemInfo_filter: goerli_swap_SystemInfo_filter;
  goerli_swap__Block_: goerli_swap__Block_;
  goerli_swap__Meta_: goerli_swap__Meta_;
  optimismgoerli_swap_BigDecimal: Scalars['optimismgoerli_swap_BigDecimal'];
  optimismgoerli_swap_BlockChangedFilter: optimismgoerli_swap_BlockChangedFilter;
  optimismgoerli_swap_Block_height: optimismgoerli_swap_Block_height;
  optimismgoerli_swap_Bytes: Scalars['optimismgoerli_swap_Bytes'];
  optimismgoerli_swap_PooledToken: optimismgoerli_swap_PooledToken;
  optimismgoerli_swap_PooledToken_filter: optimismgoerli_swap_PooledToken_filter;
  optimismgoerli_swap_StableSwap: optimismgoerli_swap_StableSwap;
  optimismgoerli_swap_StableSwapAddLiquidityEvent: optimismgoerli_swap_StableSwapAddLiquidityEvent;
  optimismgoerli_swap_StableSwapAddLiquidityEvent_filter: optimismgoerli_swap_StableSwapAddLiquidityEvent_filter;
  optimismgoerli_swap_StableSwapEvent: ResolversParentTypes['optimismgoerli_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['optimismgoerli_swap_StableSwapRemoveLiquidityEvent'];
  optimismgoerli_swap_StableSwapEvent_filter: optimismgoerli_swap_StableSwapEvent_filter;
  optimismgoerli_swap_StableSwapExchange: optimismgoerli_swap_StableSwapExchange;
  optimismgoerli_swap_StableSwapExchange_filter: optimismgoerli_swap_StableSwapExchange_filter;
  optimismgoerli_swap_StableSwapRemoveLiquidityEvent: optimismgoerli_swap_StableSwapRemoveLiquidityEvent;
  optimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter: optimismgoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  optimismgoerli_swap_StableSwap_filter: optimismgoerli_swap_StableSwap_filter;
  optimismgoerli_swap_SwapDailyVolume: optimismgoerli_swap_SwapDailyVolume;
  optimismgoerli_swap_SwapDailyVolume_filter: optimismgoerli_swap_SwapDailyVolume_filter;
  optimismgoerli_swap_SwapHourlyVolume: optimismgoerli_swap_SwapHourlyVolume;
  optimismgoerli_swap_SwapHourlyVolume_filter: optimismgoerli_swap_SwapHourlyVolume_filter;
  optimismgoerli_swap_SwapTradeVolume: ResolversParentTypes['optimismgoerli_swap_SwapDailyVolume'] | ResolversParentTypes['optimismgoerli_swap_SwapHourlyVolume'] | ResolversParentTypes['optimismgoerli_swap_SwapWeeklyVolume'];
  optimismgoerli_swap_SwapTradeVolume_filter: optimismgoerli_swap_SwapTradeVolume_filter;
  optimismgoerli_swap_SwapWeeklyVolume: optimismgoerli_swap_SwapWeeklyVolume;
  optimismgoerli_swap_SwapWeeklyVolume_filter: optimismgoerli_swap_SwapWeeklyVolume_filter;
  optimismgoerli_swap_SystemInfo: optimismgoerli_swap_SystemInfo;
  optimismgoerli_swap_SystemInfo_filter: optimismgoerli_swap_SystemInfo_filter;
  optimismgoerli_swap__Block_: optimismgoerli_swap__Block_;
  optimismgoerli_swap__Meta_: optimismgoerli_swap__Meta_;
  stagingmumbai_swap_BigDecimal: Scalars['stagingmumbai_swap_BigDecimal'];
  stagingmumbai_swap_BlockChangedFilter: stagingmumbai_swap_BlockChangedFilter;
  stagingmumbai_swap_Block_height: stagingmumbai_swap_Block_height;
  stagingmumbai_swap_Bytes: Scalars['stagingmumbai_swap_Bytes'];
  stagingmumbai_swap_PooledToken: stagingmumbai_swap_PooledToken;
  stagingmumbai_swap_PooledToken_filter: stagingmumbai_swap_PooledToken_filter;
  stagingmumbai_swap_StableSwap: stagingmumbai_swap_StableSwap;
  stagingmumbai_swap_StableSwapAddLiquidityEvent: stagingmumbai_swap_StableSwapAddLiquidityEvent;
  stagingmumbai_swap_StableSwapAddLiquidityEvent_filter: stagingmumbai_swap_StableSwapAddLiquidityEvent_filter;
  stagingmumbai_swap_StableSwapEvent: ResolversParentTypes['stagingmumbai_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['stagingmumbai_swap_StableSwapRemoveLiquidityEvent'];
  stagingmumbai_swap_StableSwapEvent_filter: stagingmumbai_swap_StableSwapEvent_filter;
  stagingmumbai_swap_StableSwapExchange: stagingmumbai_swap_StableSwapExchange;
  stagingmumbai_swap_StableSwapExchange_filter: stagingmumbai_swap_StableSwapExchange_filter;
  stagingmumbai_swap_StableSwapRemoveLiquidityEvent: stagingmumbai_swap_StableSwapRemoveLiquidityEvent;
  stagingmumbai_swap_StableSwapRemoveLiquidityEvent_filter: stagingmumbai_swap_StableSwapRemoveLiquidityEvent_filter;
  stagingmumbai_swap_StableSwap_filter: stagingmumbai_swap_StableSwap_filter;
  stagingmumbai_swap_SwapDailyVolume: stagingmumbai_swap_SwapDailyVolume;
  stagingmumbai_swap_SwapDailyVolume_filter: stagingmumbai_swap_SwapDailyVolume_filter;
  stagingmumbai_swap_SwapHourlyVolume: stagingmumbai_swap_SwapHourlyVolume;
  stagingmumbai_swap_SwapHourlyVolume_filter: stagingmumbai_swap_SwapHourlyVolume_filter;
  stagingmumbai_swap_SwapTradeVolume: ResolversParentTypes['stagingmumbai_swap_SwapDailyVolume'] | ResolversParentTypes['stagingmumbai_swap_SwapHourlyVolume'] | ResolversParentTypes['stagingmumbai_swap_SwapWeeklyVolume'];
  stagingmumbai_swap_SwapTradeVolume_filter: stagingmumbai_swap_SwapTradeVolume_filter;
  stagingmumbai_swap_SwapWeeklyVolume: stagingmumbai_swap_SwapWeeklyVolume;
  stagingmumbai_swap_SwapWeeklyVolume_filter: stagingmumbai_swap_SwapWeeklyVolume_filter;
  stagingmumbai_swap_SystemInfo: stagingmumbai_swap_SystemInfo;
  stagingmumbai_swap_SystemInfo_filter: stagingmumbai_swap_SystemInfo_filter;
  stagingmumbai_swap__Block_: stagingmumbai_swap__Block_;
  stagingmumbai_swap__Meta_: stagingmumbai_swap__Meta_;
  goerli_AggregatedMessageRoot: goerli_AggregatedMessageRoot;
  goerli_AggregatedMessageRoot_filter: goerli_AggregatedMessageRoot_filter;
  goerli_ArbitrumConnectorMeta: goerli_ArbitrumConnectorMeta;
  goerli_ArbitrumConnectorMeta_filter: goerli_ArbitrumConnectorMeta_filter;
  goerli_BigDecimal: Scalars['goerli_BigDecimal'];
  goerli_BlockChangedFilter: goerli_BlockChangedFilter;
  goerli_Block_height: goerli_Block_height;
  goerli_BnbConnectorMeta: goerli_BnbConnectorMeta;
  goerli_BnbConnectorMeta_filter: goerli_BnbConnectorMeta_filter;
  goerli_Bytes: Scalars['goerli_Bytes'];
  goerli_GnosisConnectorMeta: goerli_GnosisConnectorMeta;
  goerli_GnosisConnectorMeta_filter: goerli_GnosisConnectorMeta_filter;
  goerli_OptimismConnectorMeta: goerli_OptimismConnectorMeta;
  goerli_OptimismConnectorMeta_filter: goerli_OptimismConnectorMeta_filter;
  goerli_PolygonConnectorMeta: goerli_PolygonConnectorMeta;
  goerli_PolygonConnectorMeta_filter: goerli_PolygonConnectorMeta_filter;
  goerli_RootAggregated: goerli_RootAggregated;
  goerli_RootAggregated_filter: goerli_RootAggregated_filter;
  goerli_RootManagerMeta: goerli_RootManagerMeta;
  goerli_RootManagerMeta_filter: goerli_RootManagerMeta_filter;
  goerli_RootMessageProcessed: goerli_RootMessageProcessed;
  goerli_RootMessageProcessed_filter: goerli_RootMessageProcessed_filter;
  goerli_RootPropagated: goerli_RootPropagated;
  goerli_RootPropagated_filter: goerli_RootPropagated_filter;
  goerli__Block_: goerli__Block_;
  goerli__Meta_: goerli__Meta_;
  local1337_Asset: local1337_Asset;
  local1337_AssetBalance: local1337_AssetBalance;
  local1337_AssetBalance_filter: local1337_AssetBalance_filter;
  local1337_Asset_filter: local1337_Asset_filter;
  local1337_BigDecimal: Scalars['local1337_BigDecimal'];
  local1337_BlockChangedFilter: local1337_BlockChangedFilter;
  local1337_Block_height: local1337_Block_height;
  local1337_Bytes: Scalars['local1337_Bytes'];
  local1337_DestinationTransfer: local1337_DestinationTransfer;
  local1337_DestinationTransfer_filter: local1337_DestinationTransfer_filter;
  local1337_OriginTransfer: local1337_OriginTransfer;
  local1337_OriginTransfer_filter: local1337_OriginTransfer_filter;
  local1337_Relayer: local1337_Relayer;
  local1337_Relayer_filter: local1337_Relayer_filter;
  local1337_Router: local1337_Router;
  local1337_Router_filter: local1337_Router_filter;
  local1337_Setting: local1337_Setting;
  local1337_Setting_filter: local1337_Setting_filter;
  local1337_SponsorVault: local1337_SponsorVault;
  local1337_SponsorVault_filter: local1337_SponsorVault_filter;
  local1337_StableSwap: local1337_StableSwap;
  local1337_StableSwap_filter: local1337_StableSwap_filter;
  local1337__Block_: local1337__Block_;
  local1337__Meta_: local1337__Meta_;
  bnb_swap_BigDecimal: Scalars['bnb_swap_BigDecimal'];
  bnb_swap_BlockChangedFilter: bnb_swap_BlockChangedFilter;
  bnb_swap_Block_height: bnb_swap_Block_height;
  bnb_swap_Bytes: Scalars['bnb_swap_Bytes'];
  bnb_swap_PooledToken: bnb_swap_PooledToken;
  bnb_swap_PooledToken_filter: bnb_swap_PooledToken_filter;
  bnb_swap_StableSwap: bnb_swap_StableSwap;
  bnb_swap_StableSwapAddLiquidityEvent: bnb_swap_StableSwapAddLiquidityEvent;
  bnb_swap_StableSwapAddLiquidityEvent_filter: bnb_swap_StableSwapAddLiquidityEvent_filter;
  bnb_swap_StableSwapEvent: ResolversParentTypes['bnb_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['bnb_swap_StableSwapRemoveLiquidityEvent'];
  bnb_swap_StableSwapEvent_filter: bnb_swap_StableSwapEvent_filter;
  bnb_swap_StableSwapExchange: bnb_swap_StableSwapExchange;
  bnb_swap_StableSwapExchange_filter: bnb_swap_StableSwapExchange_filter;
  bnb_swap_StableSwapRemoveLiquidityEvent: bnb_swap_StableSwapRemoveLiquidityEvent;
  bnb_swap_StableSwapRemoveLiquidityEvent_filter: bnb_swap_StableSwapRemoveLiquidityEvent_filter;
  bnb_swap_StableSwap_filter: bnb_swap_StableSwap_filter;
  bnb_swap_SwapDailyVolume: bnb_swap_SwapDailyVolume;
  bnb_swap_SwapDailyVolume_filter: bnb_swap_SwapDailyVolume_filter;
  bnb_swap_SwapHourlyVolume: bnb_swap_SwapHourlyVolume;
  bnb_swap_SwapHourlyVolume_filter: bnb_swap_SwapHourlyVolume_filter;
  bnb_swap_SwapTradeVolume: ResolversParentTypes['bnb_swap_SwapDailyVolume'] | ResolversParentTypes['bnb_swap_SwapHourlyVolume'] | ResolversParentTypes['bnb_swap_SwapWeeklyVolume'];
  bnb_swap_SwapTradeVolume_filter: bnb_swap_SwapTradeVolume_filter;
  bnb_swap_SwapWeeklyVolume: bnb_swap_SwapWeeklyVolume;
  bnb_swap_SwapWeeklyVolume_filter: bnb_swap_SwapWeeklyVolume_filter;
  bnb_swap_SystemInfo: bnb_swap_SystemInfo;
  bnb_swap_SystemInfo_filter: bnb_swap_SystemInfo_filter;
  bnb_swap__Block_: bnb_swap__Block_;
  bnb_swap__Meta_: bnb_swap__Meta_;
  arbitrumgoerli_swap_BigDecimal: Scalars['arbitrumgoerli_swap_BigDecimal'];
  arbitrumgoerli_swap_BlockChangedFilter: arbitrumgoerli_swap_BlockChangedFilter;
  arbitrumgoerli_swap_Block_height: arbitrumgoerli_swap_Block_height;
  arbitrumgoerli_swap_Bytes: Scalars['arbitrumgoerli_swap_Bytes'];
  arbitrumgoerli_swap_PooledToken: arbitrumgoerli_swap_PooledToken;
  arbitrumgoerli_swap_PooledToken_filter: arbitrumgoerli_swap_PooledToken_filter;
  arbitrumgoerli_swap_StableSwap: arbitrumgoerli_swap_StableSwap;
  arbitrumgoerli_swap_StableSwapAddLiquidityEvent: arbitrumgoerli_swap_StableSwapAddLiquidityEvent;
  arbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter: arbitrumgoerli_swap_StableSwapAddLiquidityEvent_filter;
  arbitrumgoerli_swap_StableSwapEvent: ResolversParentTypes['arbitrumgoerli_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent'];
  arbitrumgoerli_swap_StableSwapEvent_filter: arbitrumgoerli_swap_StableSwapEvent_filter;
  arbitrumgoerli_swap_StableSwapExchange: arbitrumgoerli_swap_StableSwapExchange;
  arbitrumgoerli_swap_StableSwapExchange_filter: arbitrumgoerli_swap_StableSwapExchange_filter;
  arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent: arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent;
  arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter: arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  arbitrumgoerli_swap_StableSwap_filter: arbitrumgoerli_swap_StableSwap_filter;
  arbitrumgoerli_swap_SwapDailyVolume: arbitrumgoerli_swap_SwapDailyVolume;
  arbitrumgoerli_swap_SwapDailyVolume_filter: arbitrumgoerli_swap_SwapDailyVolume_filter;
  arbitrumgoerli_swap_SwapHourlyVolume: arbitrumgoerli_swap_SwapHourlyVolume;
  arbitrumgoerli_swap_SwapHourlyVolume_filter: arbitrumgoerli_swap_SwapHourlyVolume_filter;
  arbitrumgoerli_swap_SwapTradeVolume: ResolversParentTypes['arbitrumgoerli_swap_SwapDailyVolume'] | ResolversParentTypes['arbitrumgoerli_swap_SwapHourlyVolume'] | ResolversParentTypes['arbitrumgoerli_swap_SwapWeeklyVolume'];
  arbitrumgoerli_swap_SwapTradeVolume_filter: arbitrumgoerli_swap_SwapTradeVolume_filter;
  arbitrumgoerli_swap_SwapWeeklyVolume: arbitrumgoerli_swap_SwapWeeklyVolume;
  arbitrumgoerli_swap_SwapWeeklyVolume_filter: arbitrumgoerli_swap_SwapWeeklyVolume_filter;
  arbitrumgoerli_swap_SystemInfo: arbitrumgoerli_swap_SystemInfo;
  arbitrumgoerli_swap_SystemInfo_filter: arbitrumgoerli_swap_SystemInfo_filter;
  arbitrumgoerli_swap__Block_: arbitrumgoerli_swap__Block_;
  arbitrumgoerli_swap__Meta_: arbitrumgoerli_swap__Meta_;
  mumbai_swap_BigDecimal: Scalars['mumbai_swap_BigDecimal'];
  mumbai_swap_BlockChangedFilter: mumbai_swap_BlockChangedFilter;
  mumbai_swap_Block_height: mumbai_swap_Block_height;
  mumbai_swap_Bytes: Scalars['mumbai_swap_Bytes'];
  mumbai_swap_PooledToken: mumbai_swap_PooledToken;
  mumbai_swap_PooledToken_filter: mumbai_swap_PooledToken_filter;
  mumbai_swap_StableSwap: mumbai_swap_StableSwap;
  mumbai_swap_StableSwapAddLiquidityEvent: mumbai_swap_StableSwapAddLiquidityEvent;
  mumbai_swap_StableSwapAddLiquidityEvent_filter: mumbai_swap_StableSwapAddLiquidityEvent_filter;
  mumbai_swap_StableSwapEvent: ResolversParentTypes['mumbai_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['mumbai_swap_StableSwapRemoveLiquidityEvent'];
  mumbai_swap_StableSwapEvent_filter: mumbai_swap_StableSwapEvent_filter;
  mumbai_swap_StableSwapExchange: mumbai_swap_StableSwapExchange;
  mumbai_swap_StableSwapExchange_filter: mumbai_swap_StableSwapExchange_filter;
  mumbai_swap_StableSwapRemoveLiquidityEvent: mumbai_swap_StableSwapRemoveLiquidityEvent;
  mumbai_swap_StableSwapRemoveLiquidityEvent_filter: mumbai_swap_StableSwapRemoveLiquidityEvent_filter;
  mumbai_swap_StableSwap_filter: mumbai_swap_StableSwap_filter;
  mumbai_swap_SwapDailyVolume: mumbai_swap_SwapDailyVolume;
  mumbai_swap_SwapDailyVolume_filter: mumbai_swap_SwapDailyVolume_filter;
  mumbai_swap_SwapHourlyVolume: mumbai_swap_SwapHourlyVolume;
  mumbai_swap_SwapHourlyVolume_filter: mumbai_swap_SwapHourlyVolume_filter;
  mumbai_swap_SwapTradeVolume: ResolversParentTypes['mumbai_swap_SwapDailyVolume'] | ResolversParentTypes['mumbai_swap_SwapHourlyVolume'] | ResolversParentTypes['mumbai_swap_SwapWeeklyVolume'];
  mumbai_swap_SwapTradeVolume_filter: mumbai_swap_SwapTradeVolume_filter;
  mumbai_swap_SwapWeeklyVolume: mumbai_swap_SwapWeeklyVolume;
  mumbai_swap_SwapWeeklyVolume_filter: mumbai_swap_SwapWeeklyVolume_filter;
  mumbai_swap_SystemInfo: mumbai_swap_SystemInfo;
  mumbai_swap_SystemInfo_filter: mumbai_swap_SystemInfo_filter;
  mumbai_swap__Block_: mumbai_swap__Block_;
  mumbai_swap__Meta_: mumbai_swap__Meta_;
  optimism_AggregateRoot: optimism_AggregateRoot;
  optimism_AggregateRoot_filter: optimism_AggregateRoot_filter;
  optimism_Asset: optimism_Asset;
  optimism_AssetBalance: optimism_AssetBalance;
  optimism_AssetBalance_filter: optimism_AssetBalance_filter;
  optimism_AssetStatus: optimism_AssetStatus;
  optimism_AssetStatus_filter: optimism_AssetStatus_filter;
  optimism_Asset_filter: optimism_Asset_filter;
  optimism_BigDecimal: Scalars['optimism_BigDecimal'];
  optimism_BlockChangedFilter: optimism_BlockChangedFilter;
  optimism_Block_height: optimism_Block_height;
  optimism_Bytes: Scalars['optimism_Bytes'];
  optimism_ConnectorMeta: optimism_ConnectorMeta;
  optimism_ConnectorMeta_filter: optimism_ConnectorMeta_filter;
  optimism_DestinationTransfer: optimism_DestinationTransfer;
  optimism_DestinationTransfer_filter: optimism_DestinationTransfer_filter;
  optimism_OriginMessage: optimism_OriginMessage;
  optimism_OriginMessage_filter: optimism_OriginMessage_filter;
  optimism_OriginTransfer: optimism_OriginTransfer;
  optimism_OriginTransfer_filter: optimism_OriginTransfer_filter;
  optimism_Relayer: optimism_Relayer;
  optimism_Relayer_filter: optimism_Relayer_filter;
  optimism_RootCount: optimism_RootCount;
  optimism_RootCount_filter: optimism_RootCount_filter;
  optimism_RootMessageSent: optimism_RootMessageSent;
  optimism_RootMessageSent_filter: optimism_RootMessageSent_filter;
  optimism_Router: optimism_Router;
  optimism_Router_filter: optimism_Router_filter;
  optimism_Sequencer: optimism_Sequencer;
  optimism_Sequencer_filter: optimism_Sequencer_filter;
  optimism_Setting: optimism_Setting;
  optimism_Setting_filter: optimism_Setting_filter;
  optimism__Block_: optimism__Block_;
  optimism__Meta_: optimism__Meta_;
  staginggoerli_swap_BigDecimal: Scalars['staginggoerli_swap_BigDecimal'];
  staginggoerli_swap_BlockChangedFilter: staginggoerli_swap_BlockChangedFilter;
  staginggoerli_swap_Block_height: staginggoerli_swap_Block_height;
  staginggoerli_swap_Bytes: Scalars['staginggoerli_swap_Bytes'];
  staginggoerli_swap_PooledToken: staginggoerli_swap_PooledToken;
  staginggoerli_swap_PooledToken_filter: staginggoerli_swap_PooledToken_filter;
  staginggoerli_swap_StableSwap: staginggoerli_swap_StableSwap;
  staginggoerli_swap_StableSwapAddLiquidityEvent: staginggoerli_swap_StableSwapAddLiquidityEvent;
  staginggoerli_swap_StableSwapAddLiquidityEvent_filter: staginggoerli_swap_StableSwapAddLiquidityEvent_filter;
  staginggoerli_swap_StableSwapEvent: ResolversParentTypes['staginggoerli_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['staginggoerli_swap_StableSwapRemoveLiquidityEvent'];
  staginggoerli_swap_StableSwapEvent_filter: staginggoerli_swap_StableSwapEvent_filter;
  staginggoerli_swap_StableSwapExchange: staginggoerli_swap_StableSwapExchange;
  staginggoerli_swap_StableSwapExchange_filter: staginggoerli_swap_StableSwapExchange_filter;
  staginggoerli_swap_StableSwapRemoveLiquidityEvent: staginggoerli_swap_StableSwapRemoveLiquidityEvent;
  staginggoerli_swap_StableSwapRemoveLiquidityEvent_filter: staginggoerli_swap_StableSwapRemoveLiquidityEvent_filter;
  staginggoerli_swap_StableSwap_filter: staginggoerli_swap_StableSwap_filter;
  staginggoerli_swap_SwapDailyVolume: staginggoerli_swap_SwapDailyVolume;
  staginggoerli_swap_SwapDailyVolume_filter: staginggoerli_swap_SwapDailyVolume_filter;
  staginggoerli_swap_SwapHourlyVolume: staginggoerli_swap_SwapHourlyVolume;
  staginggoerli_swap_SwapHourlyVolume_filter: staginggoerli_swap_SwapHourlyVolume_filter;
  staginggoerli_swap_SwapTradeVolume: ResolversParentTypes['staginggoerli_swap_SwapDailyVolume'] | ResolversParentTypes['staginggoerli_swap_SwapHourlyVolume'] | ResolversParentTypes['staginggoerli_swap_SwapWeeklyVolume'];
  staginggoerli_swap_SwapTradeVolume_filter: staginggoerli_swap_SwapTradeVolume_filter;
  staginggoerli_swap_SwapWeeklyVolume: staginggoerli_swap_SwapWeeklyVolume;
  staginggoerli_swap_SwapWeeklyVolume_filter: staginggoerli_swap_SwapWeeklyVolume_filter;
  staginggoerli_swap_SystemInfo: staginggoerli_swap_SystemInfo;
  staginggoerli_swap_SystemInfo_filter: staginggoerli_swap_SystemInfo_filter;
  staginggoerli_swap__Block_: staginggoerli_swap__Block_;
  staginggoerli_swap__Meta_: staginggoerli_swap__Meta_;
  stagingoptimismgoerli_AggregateRoot: stagingoptimismgoerli_AggregateRoot;
  stagingoptimismgoerli_AggregateRoot_filter: stagingoptimismgoerli_AggregateRoot_filter;
  stagingoptimismgoerli_Asset: stagingoptimismgoerli_Asset;
  stagingoptimismgoerli_AssetBalance: stagingoptimismgoerli_AssetBalance;
  stagingoptimismgoerli_AssetBalance_filter: stagingoptimismgoerli_AssetBalance_filter;
  stagingoptimismgoerli_AssetStatus: stagingoptimismgoerli_AssetStatus;
  stagingoptimismgoerli_AssetStatus_filter: stagingoptimismgoerli_AssetStatus_filter;
  stagingoptimismgoerli_Asset_filter: stagingoptimismgoerli_Asset_filter;
  stagingoptimismgoerli_BigDecimal: Scalars['stagingoptimismgoerli_BigDecimal'];
  stagingoptimismgoerli_BlockChangedFilter: stagingoptimismgoerli_BlockChangedFilter;
  stagingoptimismgoerli_Block_height: stagingoptimismgoerli_Block_height;
  stagingoptimismgoerli_Bytes: Scalars['stagingoptimismgoerli_Bytes'];
  stagingoptimismgoerli_ConnectorMeta: stagingoptimismgoerli_ConnectorMeta;
  stagingoptimismgoerli_ConnectorMeta_filter: stagingoptimismgoerli_ConnectorMeta_filter;
  stagingoptimismgoerli_DestinationTransfer: stagingoptimismgoerli_DestinationTransfer;
  stagingoptimismgoerli_DestinationTransfer_filter: stagingoptimismgoerli_DestinationTransfer_filter;
  stagingoptimismgoerli_OriginMessage: stagingoptimismgoerli_OriginMessage;
  stagingoptimismgoerli_OriginMessage_filter: stagingoptimismgoerli_OriginMessage_filter;
  stagingoptimismgoerli_OriginTransfer: stagingoptimismgoerli_OriginTransfer;
  stagingoptimismgoerli_OriginTransfer_filter: stagingoptimismgoerli_OriginTransfer_filter;
  stagingoptimismgoerli_Relayer: stagingoptimismgoerli_Relayer;
  stagingoptimismgoerli_Relayer_filter: stagingoptimismgoerli_Relayer_filter;
  stagingoptimismgoerli_RootCount: stagingoptimismgoerli_RootCount;
  stagingoptimismgoerli_RootCount_filter: stagingoptimismgoerli_RootCount_filter;
  stagingoptimismgoerli_RootMessageSent: stagingoptimismgoerli_RootMessageSent;
  stagingoptimismgoerli_RootMessageSent_filter: stagingoptimismgoerli_RootMessageSent_filter;
  stagingoptimismgoerli_Router: stagingoptimismgoerli_Router;
  stagingoptimismgoerli_Router_filter: stagingoptimismgoerli_Router_filter;
  stagingoptimismgoerli_Sequencer: stagingoptimismgoerli_Sequencer;
  stagingoptimismgoerli_Sequencer_filter: stagingoptimismgoerli_Sequencer_filter;
  stagingoptimismgoerli_Setting: stagingoptimismgoerli_Setting;
  stagingoptimismgoerli_Setting_filter: stagingoptimismgoerli_Setting_filter;
  stagingoptimismgoerli__Block_: stagingoptimismgoerli__Block_;
  stagingoptimismgoerli__Meta_: stagingoptimismgoerli__Meta_;
  stagingmumbai_AggregateRoot: stagingmumbai_AggregateRoot;
  stagingmumbai_AggregateRoot_filter: stagingmumbai_AggregateRoot_filter;
  stagingmumbai_Asset: stagingmumbai_Asset;
  stagingmumbai_AssetBalance: stagingmumbai_AssetBalance;
  stagingmumbai_AssetBalance_filter: stagingmumbai_AssetBalance_filter;
  stagingmumbai_AssetStatus: stagingmumbai_AssetStatus;
  stagingmumbai_AssetStatus_filter: stagingmumbai_AssetStatus_filter;
  stagingmumbai_Asset_filter: stagingmumbai_Asset_filter;
  stagingmumbai_BigDecimal: Scalars['stagingmumbai_BigDecimal'];
  stagingmumbai_BlockChangedFilter: stagingmumbai_BlockChangedFilter;
  stagingmumbai_Block_height: stagingmumbai_Block_height;
  stagingmumbai_Bytes: Scalars['stagingmumbai_Bytes'];
  stagingmumbai_ConnectorMeta: stagingmumbai_ConnectorMeta;
  stagingmumbai_ConnectorMeta_filter: stagingmumbai_ConnectorMeta_filter;
  stagingmumbai_DestinationTransfer: stagingmumbai_DestinationTransfer;
  stagingmumbai_DestinationTransfer_filter: stagingmumbai_DestinationTransfer_filter;
  stagingmumbai_OriginMessage: stagingmumbai_OriginMessage;
  stagingmumbai_OriginMessage_filter: stagingmumbai_OriginMessage_filter;
  stagingmumbai_OriginTransfer: stagingmumbai_OriginTransfer;
  stagingmumbai_OriginTransfer_filter: stagingmumbai_OriginTransfer_filter;
  stagingmumbai_Relayer: stagingmumbai_Relayer;
  stagingmumbai_Relayer_filter: stagingmumbai_Relayer_filter;
  stagingmumbai_RootCount: stagingmumbai_RootCount;
  stagingmumbai_RootCount_filter: stagingmumbai_RootCount_filter;
  stagingmumbai_RootMessageSent: stagingmumbai_RootMessageSent;
  stagingmumbai_RootMessageSent_filter: stagingmumbai_RootMessageSent_filter;
  stagingmumbai_Router: stagingmumbai_Router;
  stagingmumbai_Router_filter: stagingmumbai_Router_filter;
  stagingmumbai_Sequencer: stagingmumbai_Sequencer;
  stagingmumbai_Sequencer_filter: stagingmumbai_Sequencer_filter;
  stagingmumbai_Setting: stagingmumbai_Setting;
  stagingmumbai_Setting_filter: stagingmumbai_Setting_filter;
  stagingmumbai__Block_: stagingmumbai__Block_;
  stagingmumbai__Meta_: stagingmumbai__Meta_;
  arbitrumone_swap_BigDecimal: Scalars['arbitrumone_swap_BigDecimal'];
  arbitrumone_swap_BlockChangedFilter: arbitrumone_swap_BlockChangedFilter;
  arbitrumone_swap_Block_height: arbitrumone_swap_Block_height;
  arbitrumone_swap_Bytes: Scalars['arbitrumone_swap_Bytes'];
  arbitrumone_swap_PooledToken: arbitrumone_swap_PooledToken;
  arbitrumone_swap_PooledToken_filter: arbitrumone_swap_PooledToken_filter;
  arbitrumone_swap_StableSwap: arbitrumone_swap_StableSwap;
  arbitrumone_swap_StableSwapAddLiquidityEvent: arbitrumone_swap_StableSwapAddLiquidityEvent;
  arbitrumone_swap_StableSwapAddLiquidityEvent_filter: arbitrumone_swap_StableSwapAddLiquidityEvent_filter;
  arbitrumone_swap_StableSwapEvent: ResolversParentTypes['arbitrumone_swap_StableSwapAddLiquidityEvent'] | ResolversParentTypes['arbitrumone_swap_StableSwapRemoveLiquidityEvent'];
  arbitrumone_swap_StableSwapEvent_filter: arbitrumone_swap_StableSwapEvent_filter;
  arbitrumone_swap_StableSwapExchange: arbitrumone_swap_StableSwapExchange;
  arbitrumone_swap_StableSwapExchange_filter: arbitrumone_swap_StableSwapExchange_filter;
  arbitrumone_swap_StableSwapRemoveLiquidityEvent: arbitrumone_swap_StableSwapRemoveLiquidityEvent;
  arbitrumone_swap_StableSwapRemoveLiquidityEvent_filter: arbitrumone_swap_StableSwapRemoveLiquidityEvent_filter;
  arbitrumone_swap_StableSwap_filter: arbitrumone_swap_StableSwap_filter;
  arbitrumone_swap_SwapDailyVolume: arbitrumone_swap_SwapDailyVolume;
  arbitrumone_swap_SwapDailyVolume_filter: arbitrumone_swap_SwapDailyVolume_filter;
  arbitrumone_swap_SwapHourlyVolume: arbitrumone_swap_SwapHourlyVolume;
  arbitrumone_swap_SwapHourlyVolume_filter: arbitrumone_swap_SwapHourlyVolume_filter;
  arbitrumone_swap_SwapTradeVolume: ResolversParentTypes['arbitrumone_swap_SwapDailyVolume'] | ResolversParentTypes['arbitrumone_swap_SwapHourlyVolume'] | ResolversParentTypes['arbitrumone_swap_SwapWeeklyVolume'];
  arbitrumone_swap_SwapTradeVolume_filter: arbitrumone_swap_SwapTradeVolume_filter;
  arbitrumone_swap_SwapWeeklyVolume: arbitrumone_swap_SwapWeeklyVolume;
  arbitrumone_swap_SwapWeeklyVolume_filter: arbitrumone_swap_SwapWeeklyVolume_filter;
  arbitrumone_swap_SystemInfo: arbitrumone_swap_SystemInfo;
  arbitrumone_swap_SystemInfo_filter: arbitrumone_swap_SystemInfo_filter;
  arbitrumone_swap__Block_: arbitrumone_swap__Block_;
  arbitrumone_swap__Meta_: arbitrumone_swap__Meta_;
  local1338_Asset: local1338_Asset;
  local1338_AssetBalance: local1338_AssetBalance;
  local1338_AssetBalance_filter: local1338_AssetBalance_filter;
  local1338_Asset_filter: local1338_Asset_filter;
  local1338_BigDecimal: Scalars['local1338_BigDecimal'];
  local1338_BlockChangedFilter: local1338_BlockChangedFilter;
  local1338_Block_height: local1338_Block_height;
  local1338_Bytes: Scalars['local1338_Bytes'];
  local1338_DestinationTransfer: local1338_DestinationTransfer;
  local1338_DestinationTransfer_filter: local1338_DestinationTransfer_filter;
  local1338_OriginTransfer: local1338_OriginTransfer;
  local1338_OriginTransfer_filter: local1338_OriginTransfer_filter;
  local1338_Relayer: local1338_Relayer;
  local1338_Relayer_filter: local1338_Relayer_filter;
  local1338_Router: local1338_Router;
  local1338_Router_filter: local1338_Router_filter;
  local1338_Setting: local1338_Setting;
  local1338_Setting_filter: local1338_Setting_filter;
  local1338_SponsorVault: local1338_SponsorVault;
  local1338_SponsorVault_filter: local1338_SponsorVault_filter;
  local1338_StableSwap: local1338_StableSwap;
  local1338_StableSwap_filter: local1338_StableSwap_filter;
  local1338__Block_: local1338__Block_;
  local1338__Meta_: local1338__Meta_;
  goerli_AggregateRoot: goerli_AggregateRoot;
  goerli_AggregateRoot_filter: goerli_AggregateRoot_filter;
  goerli_Asset: goerli_Asset;
  goerli_AssetBalance: goerli_AssetBalance;
  goerli_AssetBalance_filter: goerli_AssetBalance_filter;
  goerli_AssetStatus: goerli_AssetStatus;
  goerli_AssetStatus_filter: goerli_AssetStatus_filter;
  goerli_Asset_filter: goerli_Asset_filter;
  goerli_ConnectorMeta: goerli_ConnectorMeta;
  goerli_ConnectorMeta_filter: goerli_ConnectorMeta_filter;
  goerli_DestinationTransfer: goerli_DestinationTransfer;
  goerli_DestinationTransfer_filter: goerli_DestinationTransfer_filter;
  goerli_OriginMessage: goerli_OriginMessage;
  goerli_OriginMessage_filter: goerli_OriginMessage_filter;
  goerli_OriginTransfer: goerli_OriginTransfer;
  goerli_OriginTransfer_filter: goerli_OriginTransfer_filter;
  goerli_Relayer: goerli_Relayer;
  goerli_Relayer_filter: goerli_Relayer_filter;
  goerli_RootCount: goerli_RootCount;
  goerli_RootCount_filter: goerli_RootCount_filter;
  goerli_RootMessageSent: goerli_RootMessageSent;
  goerli_RootMessageSent_filter: goerli_RootMessageSent_filter;
  goerli_Router: goerli_Router;
  goerli_Router_filter: goerli_Router_filter;
  goerli_Sequencer: goerli_Sequencer;
  goerli_Sequencer_filter: goerli_Sequencer_filter;
  goerli_Setting: goerli_Setting;
  goerli_Setting_filter: goerli_Setting_filter;
  stagingarbitrumgoerli_AggregateRoot: stagingarbitrumgoerli_AggregateRoot;
  stagingarbitrumgoerli_AggregateRoot_filter: stagingarbitrumgoerli_AggregateRoot_filter;
  stagingarbitrumgoerli_Asset: stagingarbitrumgoerli_Asset;
  stagingarbitrumgoerli_AssetBalance: stagingarbitrumgoerli_AssetBalance;
  stagingarbitrumgoerli_AssetBalance_filter: stagingarbitrumgoerli_AssetBalance_filter;
  stagingarbitrumgoerli_AssetStatus: stagingarbitrumgoerli_AssetStatus;
  stagingarbitrumgoerli_AssetStatus_filter: stagingarbitrumgoerli_AssetStatus_filter;
  stagingarbitrumgoerli_Asset_filter: stagingarbitrumgoerli_Asset_filter;
  stagingarbitrumgoerli_BigDecimal: Scalars['stagingarbitrumgoerli_BigDecimal'];
  stagingarbitrumgoerli_BlockChangedFilter: stagingarbitrumgoerli_BlockChangedFilter;
  stagingarbitrumgoerli_Block_height: stagingarbitrumgoerli_Block_height;
  stagingarbitrumgoerli_Bytes: Scalars['stagingarbitrumgoerli_Bytes'];
  stagingarbitrumgoerli_ConnectorMeta: stagingarbitrumgoerli_ConnectorMeta;
  stagingarbitrumgoerli_ConnectorMeta_filter: stagingarbitrumgoerli_ConnectorMeta_filter;
  stagingarbitrumgoerli_DestinationTransfer: stagingarbitrumgoerli_DestinationTransfer;
  stagingarbitrumgoerli_DestinationTransfer_filter: stagingarbitrumgoerli_DestinationTransfer_filter;
  stagingarbitrumgoerli_OriginMessage: stagingarbitrumgoerli_OriginMessage;
  stagingarbitrumgoerli_OriginMessage_filter: stagingarbitrumgoerli_OriginMessage_filter;
  stagingarbitrumgoerli_OriginTransfer: stagingarbitrumgoerli_OriginTransfer;
  stagingarbitrumgoerli_OriginTransfer_filter: stagingarbitrumgoerli_OriginTransfer_filter;
  stagingarbitrumgoerli_Relayer: stagingarbitrumgoerli_Relayer;
  stagingarbitrumgoerli_Relayer_filter: stagingarbitrumgoerli_Relayer_filter;
  stagingarbitrumgoerli_RootCount: stagingarbitrumgoerli_RootCount;
  stagingarbitrumgoerli_RootCount_filter: stagingarbitrumgoerli_RootCount_filter;
  stagingarbitrumgoerli_RootMessageSent: stagingarbitrumgoerli_RootMessageSent;
  stagingarbitrumgoerli_RootMessageSent_filter: stagingarbitrumgoerli_RootMessageSent_filter;
  stagingarbitrumgoerli_Router: stagingarbitrumgoerli_Router;
  stagingarbitrumgoerli_Router_filter: stagingarbitrumgoerli_Router_filter;
  stagingarbitrumgoerli_Sequencer: stagingarbitrumgoerli_Sequencer;
  stagingarbitrumgoerli_Sequencer_filter: stagingarbitrumgoerli_Sequencer_filter;
  stagingarbitrumgoerli_Setting: stagingarbitrumgoerli_Setting;
  stagingarbitrumgoerli_Setting_filter: stagingarbitrumgoerli_Setting_filter;
  stagingarbitrumgoerli__Block_: stagingarbitrumgoerli__Block_;
  stagingarbitrumgoerli__Meta_: stagingarbitrumgoerli__Meta_;
  mumbai_AggregateRoot: mumbai_AggregateRoot;
  mumbai_AggregateRoot_filter: mumbai_AggregateRoot_filter;
  mumbai_Asset: mumbai_Asset;
  mumbai_AssetBalance: mumbai_AssetBalance;
  mumbai_AssetBalance_filter: mumbai_AssetBalance_filter;
  mumbai_AssetStatus: mumbai_AssetStatus;
  mumbai_AssetStatus_filter: mumbai_AssetStatus_filter;
  mumbai_Asset_filter: mumbai_Asset_filter;
  mumbai_BigDecimal: Scalars['mumbai_BigDecimal'];
  mumbai_BlockChangedFilter: mumbai_BlockChangedFilter;
  mumbai_Block_height: mumbai_Block_height;
  mumbai_Bytes: Scalars['mumbai_Bytes'];
  mumbai_ConnectorMeta: mumbai_ConnectorMeta;
  mumbai_ConnectorMeta_filter: mumbai_ConnectorMeta_filter;
  mumbai_DestinationTransfer: mumbai_DestinationTransfer;
  mumbai_DestinationTransfer_filter: mumbai_DestinationTransfer_filter;
  mumbai_OriginMessage: mumbai_OriginMessage;
  mumbai_OriginMessage_filter: mumbai_OriginMessage_filter;
  mumbai_OriginTransfer: mumbai_OriginTransfer;
  mumbai_OriginTransfer_filter: mumbai_OriginTransfer_filter;
  mumbai_Relayer: mumbai_Relayer;
  mumbai_Relayer_filter: mumbai_Relayer_filter;
  mumbai_RootCount: mumbai_RootCount;
  mumbai_RootCount_filter: mumbai_RootCount_filter;
  mumbai_RootMessageSent: mumbai_RootMessageSent;
  mumbai_RootMessageSent_filter: mumbai_RootMessageSent_filter;
  mumbai_Router: mumbai_Router;
  mumbai_Router_filter: mumbai_Router_filter;
  mumbai_Sequencer: mumbai_Sequencer;
  mumbai_Sequencer_filter: mumbai_Sequencer_filter;
  mumbai_Setting: mumbai_Setting;
  mumbai_Setting_filter: mumbai_Setting_filter;
  mumbai__Block_: mumbai__Block_;
  mumbai__Meta_: mumbai__Meta_;
  bnb_AggregateRoot: bnb_AggregateRoot;
  bnb_AggregateRoot_filter: bnb_AggregateRoot_filter;
  bnb_Asset: bnb_Asset;
  bnb_AssetBalance: bnb_AssetBalance;
  bnb_AssetBalance_filter: bnb_AssetBalance_filter;
  bnb_AssetStatus: bnb_AssetStatus;
  bnb_AssetStatus_filter: bnb_AssetStatus_filter;
  bnb_Asset_filter: bnb_Asset_filter;
  bnb_BigDecimal: Scalars['bnb_BigDecimal'];
  bnb_BlockChangedFilter: bnb_BlockChangedFilter;
  bnb_Block_height: bnb_Block_height;
  bnb_Bytes: Scalars['bnb_Bytes'];
  bnb_ConnectorMeta: bnb_ConnectorMeta;
  bnb_ConnectorMeta_filter: bnb_ConnectorMeta_filter;
  bnb_DestinationTransfer: bnb_DestinationTransfer;
  bnb_DestinationTransfer_filter: bnb_DestinationTransfer_filter;
  bnb_OriginMessage: bnb_OriginMessage;
  bnb_OriginMessage_filter: bnb_OriginMessage_filter;
  bnb_OriginTransfer: bnb_OriginTransfer;
  bnb_OriginTransfer_filter: bnb_OriginTransfer_filter;
  bnb_Relayer: bnb_Relayer;
  bnb_Relayer_filter: bnb_Relayer_filter;
  bnb_RootCount: bnb_RootCount;
  bnb_RootCount_filter: bnb_RootCount_filter;
  bnb_RootMessageSent: bnb_RootMessageSent;
  bnb_RootMessageSent_filter: bnb_RootMessageSent_filter;
  bnb_Router: bnb_Router;
  bnb_Router_filter: bnb_Router_filter;
  bnb_Sequencer: bnb_Sequencer;
  bnb_Sequencer_filter: bnb_Sequencer_filter;
  bnb_Setting: bnb_Setting;
  bnb_Setting_filter: bnb_Setting_filter;
  bnb__Block_: bnb__Block_;
  bnb__Meta_: bnb__Meta_;
  mainnet_AggregateRoot: mainnet_AggregateRoot;
  mainnet_AggregateRoot_filter: mainnet_AggregateRoot_filter;
  mainnet_Asset: mainnet_Asset;
  mainnet_AssetBalance: mainnet_AssetBalance;
  mainnet_AssetBalance_filter: mainnet_AssetBalance_filter;
  mainnet_AssetStatus: mainnet_AssetStatus;
  mainnet_AssetStatus_filter: mainnet_AssetStatus_filter;
  mainnet_Asset_filter: mainnet_Asset_filter;
  mainnet_ConnectorMeta: mainnet_ConnectorMeta;
  mainnet_ConnectorMeta_filter: mainnet_ConnectorMeta_filter;
  mainnet_DestinationTransfer: mainnet_DestinationTransfer;
  mainnet_DestinationTransfer_filter: mainnet_DestinationTransfer_filter;
  mainnet_OriginMessage: mainnet_OriginMessage;
  mainnet_OriginMessage_filter: mainnet_OriginMessage_filter;
  mainnet_OriginTransfer: mainnet_OriginTransfer;
  mainnet_OriginTransfer_filter: mainnet_OriginTransfer_filter;
  mainnet_Relayer: mainnet_Relayer;
  mainnet_Relayer_filter: mainnet_Relayer_filter;
  mainnet_RootCount: mainnet_RootCount;
  mainnet_RootCount_filter: mainnet_RootCount_filter;
  mainnet_RootMessageSent: mainnet_RootMessageSent;
  mainnet_RootMessageSent_filter: mainnet_RootMessageSent_filter;
  mainnet_Router: mainnet_Router;
  mainnet_Router_filter: mainnet_Router_filter;
  mainnet_Sequencer: mainnet_Sequencer;
  mainnet_Sequencer_filter: mainnet_Sequencer_filter;
  mainnet_Setting: mainnet_Setting;
  mainnet_Setting_filter: mainnet_Setting_filter;
  polygon_AggregateRoot: polygon_AggregateRoot;
  polygon_AggregateRoot_filter: polygon_AggregateRoot_filter;
  polygon_Asset: polygon_Asset;
  polygon_AssetBalance: polygon_AssetBalance;
  polygon_AssetBalance_filter: polygon_AssetBalance_filter;
  polygon_AssetStatus: polygon_AssetStatus;
  polygon_AssetStatus_filter: polygon_AssetStatus_filter;
  polygon_Asset_filter: polygon_Asset_filter;
  polygon_BigDecimal: Scalars['polygon_BigDecimal'];
  polygon_BlockChangedFilter: polygon_BlockChangedFilter;
  polygon_Block_height: polygon_Block_height;
  polygon_Bytes: Scalars['polygon_Bytes'];
  polygon_ConnectorMeta: polygon_ConnectorMeta;
  polygon_ConnectorMeta_filter: polygon_ConnectorMeta_filter;
  polygon_DestinationTransfer: polygon_DestinationTransfer;
  polygon_DestinationTransfer_filter: polygon_DestinationTransfer_filter;
  polygon_OriginMessage: polygon_OriginMessage;
  polygon_OriginMessage_filter: polygon_OriginMessage_filter;
  polygon_OriginTransfer: polygon_OriginTransfer;
  polygon_OriginTransfer_filter: polygon_OriginTransfer_filter;
  polygon_Relayer: polygon_Relayer;
  polygon_Relayer_filter: polygon_Relayer_filter;
  polygon_RootCount: polygon_RootCount;
  polygon_RootCount_filter: polygon_RootCount_filter;
  polygon_RootMessageSent: polygon_RootMessageSent;
  polygon_RootMessageSent_filter: polygon_RootMessageSent_filter;
  polygon_Router: polygon_Router;
  polygon_Router_filter: polygon_Router_filter;
  polygon_Sequencer: polygon_Sequencer;
  polygon_Sequencer_filter: polygon_Sequencer_filter;
  polygon_Setting: polygon_Setting;
  polygon_Setting_filter: polygon_Setting_filter;
  polygon__Block_: polygon__Block_;
  polygon__Meta_: polygon__Meta_;
  xdai_AggregateRoot: xdai_AggregateRoot;
  xdai_AggregateRoot_filter: xdai_AggregateRoot_filter;
  xdai_Asset: xdai_Asset;
  xdai_AssetBalance: xdai_AssetBalance;
  xdai_AssetBalance_filter: xdai_AssetBalance_filter;
  xdai_AssetStatus: xdai_AssetStatus;
  xdai_AssetStatus_filter: xdai_AssetStatus_filter;
  xdai_Asset_filter: xdai_Asset_filter;
  xdai_BigDecimal: Scalars['xdai_BigDecimal'];
  xdai_BlockChangedFilter: xdai_BlockChangedFilter;
  xdai_Block_height: xdai_Block_height;
  xdai_Bytes: Scalars['xdai_Bytes'];
  xdai_ConnectorMeta: xdai_ConnectorMeta;
  xdai_ConnectorMeta_filter: xdai_ConnectorMeta_filter;
  xdai_DestinationTransfer: xdai_DestinationTransfer;
  xdai_DestinationTransfer_filter: xdai_DestinationTransfer_filter;
  xdai_OriginMessage: xdai_OriginMessage;
  xdai_OriginMessage_filter: xdai_OriginMessage_filter;
  xdai_OriginTransfer: xdai_OriginTransfer;
  xdai_OriginTransfer_filter: xdai_OriginTransfer_filter;
  xdai_Relayer: xdai_Relayer;
  xdai_Relayer_filter: xdai_Relayer_filter;
  xdai_RootCount: xdai_RootCount;
  xdai_RootCount_filter: xdai_RootCount_filter;
  xdai_RootMessageSent: xdai_RootMessageSent;
  xdai_RootMessageSent_filter: xdai_RootMessageSent_filter;
  xdai_Router: xdai_Router;
  xdai_Router_filter: xdai_Router_filter;
  xdai_Sequencer: xdai_Sequencer;
  xdai_Sequencer_filter: xdai_Sequencer_filter;
  xdai_Setting: xdai_Setting;
  xdai_Setting_filter: xdai_Setting_filter;
  xdai__Block_: xdai__Block_;
  xdai__Meta_: xdai__Meta_;
  arbitrumone_AggregateRoot: arbitrumone_AggregateRoot;
  arbitrumone_AggregateRoot_filter: arbitrumone_AggregateRoot_filter;
  arbitrumone_Asset: arbitrumone_Asset;
  arbitrumone_AssetBalance: arbitrumone_AssetBalance;
  arbitrumone_AssetBalance_filter: arbitrumone_AssetBalance_filter;
  arbitrumone_AssetStatus: arbitrumone_AssetStatus;
  arbitrumone_AssetStatus_filter: arbitrumone_AssetStatus_filter;
  arbitrumone_Asset_filter: arbitrumone_Asset_filter;
  arbitrumone_BigDecimal: Scalars['arbitrumone_BigDecimal'];
  arbitrumone_BlockChangedFilter: arbitrumone_BlockChangedFilter;
  arbitrumone_Block_height: arbitrumone_Block_height;
  arbitrumone_Bytes: Scalars['arbitrumone_Bytes'];
  arbitrumone_ConnectorMeta: arbitrumone_ConnectorMeta;
  arbitrumone_ConnectorMeta_filter: arbitrumone_ConnectorMeta_filter;
  arbitrumone_DestinationTransfer: arbitrumone_DestinationTransfer;
  arbitrumone_DestinationTransfer_filter: arbitrumone_DestinationTransfer_filter;
  arbitrumone_OriginMessage: arbitrumone_OriginMessage;
  arbitrumone_OriginMessage_filter: arbitrumone_OriginMessage_filter;
  arbitrumone_OriginTransfer: arbitrumone_OriginTransfer;
  arbitrumone_OriginTransfer_filter: arbitrumone_OriginTransfer_filter;
  arbitrumone_Relayer: arbitrumone_Relayer;
  arbitrumone_Relayer_filter: arbitrumone_Relayer_filter;
  arbitrumone_RootCount: arbitrumone_RootCount;
  arbitrumone_RootCount_filter: arbitrumone_RootCount_filter;
  arbitrumone_RootMessageSent: arbitrumone_RootMessageSent;
  arbitrumone_RootMessageSent_filter: arbitrumone_RootMessageSent_filter;
  arbitrumone_Router: arbitrumone_Router;
  arbitrumone_Router_filter: arbitrumone_Router_filter;
  arbitrumone_Sequencer: arbitrumone_Sequencer;
  arbitrumone_Sequencer_filter: arbitrumone_Sequencer_filter;
  arbitrumone_Setting: arbitrumone_Setting;
  arbitrumone_Setting_filter: arbitrumone_Setting_filter;
  arbitrumone__Block_: arbitrumone__Block_;
  arbitrumone__Meta_: arbitrumone__Meta_;
  staginggoerli_AggregateRoot: staginggoerli_AggregateRoot;
  staginggoerli_AggregateRoot_filter: staginggoerli_AggregateRoot_filter;
  staginggoerli_Asset: staginggoerli_Asset;
  staginggoerli_AssetBalance: staginggoerli_AssetBalance;
  staginggoerli_AssetBalance_filter: staginggoerli_AssetBalance_filter;
  staginggoerli_Asset_filter: staginggoerli_Asset_filter;
  staginggoerli_ConnectorMeta: staginggoerli_ConnectorMeta;
  staginggoerli_ConnectorMeta_filter: staginggoerli_ConnectorMeta_filter;
  staginggoerli_DestinationTransfer: staginggoerli_DestinationTransfer;
  staginggoerli_DestinationTransfer_filter: staginggoerli_DestinationTransfer_filter;
  staginggoerli_OriginMessage: staginggoerli_OriginMessage;
  staginggoerli_OriginMessage_filter: staginggoerli_OriginMessage_filter;
  staginggoerli_OriginTransfer: staginggoerli_OriginTransfer;
  staginggoerli_OriginTransfer_filter: staginggoerli_OriginTransfer_filter;
  staginggoerli_PooledToken: staginggoerli_PooledToken;
  staginggoerli_PooledToken_filter: staginggoerli_PooledToken_filter;
  staginggoerli_Relayer: staginggoerli_Relayer;
  staginggoerli_Relayer_filter: staginggoerli_Relayer_filter;
  staginggoerli_RootCount: staginggoerli_RootCount;
  staginggoerli_RootCount_filter: staginggoerli_RootCount_filter;
  staginggoerli_RootMessageSent: staginggoerli_RootMessageSent;
  staginggoerli_RootMessageSent_filter: staginggoerli_RootMessageSent_filter;
  staginggoerli_Router: staginggoerli_Router;
  staginggoerli_Router_filter: staginggoerli_Router_filter;
  staginggoerli_Sequencer: staginggoerli_Sequencer;
  staginggoerli_Sequencer_filter: staginggoerli_Sequencer_filter;
  staginggoerli_Setting: staginggoerli_Setting;
  staginggoerli_Setting_filter: staginggoerli_Setting_filter;
  staginggoerli_StableSwap: staginggoerli_StableSwap;
  staginggoerli_StableSwapAddLiquidityEvent: staginggoerli_StableSwapAddLiquidityEvent;
  staginggoerli_StableSwapAddLiquidityEvent_filter: staginggoerli_StableSwapAddLiquidityEvent_filter;
  staginggoerli_StableSwapEvent: ResolversParentTypes['staginggoerli_StableSwapAddLiquidityEvent'] | ResolversParentTypes['staginggoerli_StableSwapRemoveLiquidityEvent'];
  staginggoerli_StableSwapEvent_filter: staginggoerli_StableSwapEvent_filter;
  staginggoerli_StableSwapExchange: staginggoerli_StableSwapExchange;
  staginggoerli_StableSwapExchange_filter: staginggoerli_StableSwapExchange_filter;
  staginggoerli_StableSwapRemoveLiquidityEvent: staginggoerli_StableSwapRemoveLiquidityEvent;
  staginggoerli_StableSwapRemoveLiquidityEvent_filter: staginggoerli_StableSwapRemoveLiquidityEvent_filter;
  staginggoerli_StableSwap_filter: staginggoerli_StableSwap_filter;
  staginggoerli_SwapDailyVolume: staginggoerli_SwapDailyVolume;
  staginggoerli_SwapDailyVolume_filter: staginggoerli_SwapDailyVolume_filter;
  staginggoerli_SwapHourlyVolume: staginggoerli_SwapHourlyVolume;
  staginggoerli_SwapHourlyVolume_filter: staginggoerli_SwapHourlyVolume_filter;
  staginggoerli_SwapTradeVolume: ResolversParentTypes['staginggoerli_SwapDailyVolume'] | ResolversParentTypes['staginggoerli_SwapHourlyVolume'] | ResolversParentTypes['staginggoerli_SwapWeeklyVolume'];
  staginggoerli_SwapTradeVolume_filter: staginggoerli_SwapTradeVolume_filter;
  staginggoerli_SwapWeeklyVolume: staginggoerli_SwapWeeklyVolume;
  staginggoerli_SwapWeeklyVolume_filter: staginggoerli_SwapWeeklyVolume_filter;
  staginggoerli_TransferRelayerFee: staginggoerli_TransferRelayerFee;
  staginggoerli_TransferRelayerFee_filter: staginggoerli_TransferRelayerFee_filter;
}>;

export type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  polygon_swap_systemInfo?: Resolver<Maybe<ResolversTypes['polygon_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querypolygon_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  polygon_swap_systemInfos?: Resolver<Array<ResolversTypes['polygon_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querypolygon_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_pooledToken?: Resolver<Maybe<ResolversTypes['polygon_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querypolygon_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  polygon_swap_pooledTokens?: Resolver<Array<ResolversTypes['polygon_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querypolygon_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwap?: Resolver<Maybe<ResolversTypes['polygon_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwaps?: Resolver<Array<ResolversTypes['polygon_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['polygon_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['polygon_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['polygon_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['polygon_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['polygon_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['polygon_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['polygon_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['polygon_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['polygon_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['polygon_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['polygon_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['polygon_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['polygon_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['polygon_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querypolygon_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['polygon_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['polygon_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querypolygon_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap__meta?: Resolver<Maybe<ResolversTypes['polygon_swap__Meta_']>, ParentType, ContextType, Partial<Querypolygon_swap__metaArgs>>;
  optimismgoerli_asset?: Resolver<Maybe<ResolversTypes['optimismgoerli_Asset']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_assetArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_assets?: Resolver<Array<ResolversTypes['optimismgoerli_Asset']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_assetStatus?: Resolver<Maybe<ResolversTypes['optimismgoerli_AssetStatus']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_assetStatuses?: Resolver<Array<ResolversTypes['optimismgoerli_AssetStatus']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_assetBalance?: Resolver<Maybe<ResolversTypes['optimismgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_assetBalances?: Resolver<Array<ResolversTypes['optimismgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_router?: Resolver<Maybe<ResolversTypes['optimismgoerli_Router']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_routerArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_routers?: Resolver<Array<ResolversTypes['optimismgoerli_Router']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_setting?: Resolver<Maybe<ResolversTypes['optimismgoerli_Setting']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_settingArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_settings?: Resolver<Array<ResolversTypes['optimismgoerli_Setting']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_relayer?: Resolver<Maybe<ResolversTypes['optimismgoerli_Relayer']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_relayers?: Resolver<Array<ResolversTypes['optimismgoerli_Relayer']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_sequencer?: Resolver<Maybe<ResolversTypes['optimismgoerli_Sequencer']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_sequencers?: Resolver<Array<ResolversTypes['optimismgoerli_Sequencer']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_originTransfer?: Resolver<Maybe<ResolversTypes['optimismgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_originTransfers?: Resolver<Array<ResolversTypes['optimismgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_destinationTransfer?: Resolver<Maybe<ResolversTypes['optimismgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_destinationTransfers?: Resolver<Array<ResolversTypes['optimismgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_originMessage?: Resolver<Maybe<ResolversTypes['optimismgoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_originMessages?: Resolver<Array<ResolversTypes['optimismgoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_aggregateRoot?: Resolver<Maybe<ResolversTypes['optimismgoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_aggregateRoots?: Resolver<Array<ResolversTypes['optimismgoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_connectorMeta?: Resolver<Maybe<ResolversTypes['optimismgoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_connectorMetas?: Resolver<Array<ResolversTypes['optimismgoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_rootCount?: Resolver<Maybe<ResolversTypes['optimismgoerli_RootCount']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_rootCounts?: Resolver<Array<ResolversTypes['optimismgoerli_RootCount']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_rootMessageSent?: Resolver<Maybe<ResolversTypes['optimismgoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_rootMessageSents?: Resolver<Array<ResolversTypes['optimismgoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli__meta?: Resolver<Maybe<ResolversTypes['optimismgoerli__Meta_']>, ParentType, ContextType, Partial<Queryoptimismgoerli__metaArgs>>;
  stagingarbitrumgoerli_swap_systemInfo?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_systemInfos?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_pooledToken?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_pooledTokens?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwap?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwaps?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap__meta?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap__Meta_']>, ParentType, ContextType, Partial<Querystagingarbitrumgoerli_swap__metaArgs>>;
  arbitrumgoerli_asset?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Asset']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_assetArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_assets?: Resolver<Array<ResolversTypes['arbitrumgoerli_Asset']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_assetStatus?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_AssetStatus']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_assetStatuses?: Resolver<Array<ResolversTypes['arbitrumgoerli_AssetStatus']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_assetBalance?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_assetBalances?: Resolver<Array<ResolversTypes['arbitrumgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_router?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Router']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_routerArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_routers?: Resolver<Array<ResolversTypes['arbitrumgoerli_Router']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_setting?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Setting']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_settingArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_settings?: Resolver<Array<ResolversTypes['arbitrumgoerli_Setting']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_relayer?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Relayer']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_relayers?: Resolver<Array<ResolversTypes['arbitrumgoerli_Relayer']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_sequencer?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Sequencer']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_sequencers?: Resolver<Array<ResolversTypes['arbitrumgoerli_Sequencer']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_originTransfer?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_originTransfers?: Resolver<Array<ResolversTypes['arbitrumgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_destinationTransfer?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_destinationTransfers?: Resolver<Array<ResolversTypes['arbitrumgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_originMessage?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_originMessages?: Resolver<Array<ResolversTypes['arbitrumgoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_aggregateRoot?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_aggregateRoots?: Resolver<Array<ResolversTypes['arbitrumgoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_connectorMeta?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_connectorMetas?: Resolver<Array<ResolversTypes['arbitrumgoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_rootCount?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_RootCount']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_rootCounts?: Resolver<Array<ResolversTypes['arbitrumgoerli_RootCount']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_rootMessageSent?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_rootMessageSents?: Resolver<Array<ResolversTypes['arbitrumgoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli__meta?: Resolver<Maybe<ResolversTypes['arbitrumgoerli__Meta_']>, ParentType, ContextType, Partial<Queryarbitrumgoerli__metaArgs>>;
  stagingoptimismgoerli_swap_systemInfo?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_systemInfos?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_pooledToken?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_pooledTokens?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwap?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwaps?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap__meta?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap__Meta_']>, ParentType, ContextType, Partial<Querystagingoptimismgoerli_swap__metaArgs>>;
  testgoerli_asset?: Resolver<Maybe<ResolversTypes['testgoerli_Asset']>, ParentType, ContextType, RequireFields<Querytestgoerli_assetArgs, 'id' | 'subgraphError'>>;
  testgoerli_assets?: Resolver<Array<ResolversTypes['testgoerli_Asset']>, ParentType, ContextType, RequireFields<Querytestgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_assetBalance?: Resolver<Maybe<ResolversTypes['testgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querytestgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  testgoerli_assetBalances?: Resolver<Array<ResolversTypes['testgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querytestgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_router?: Resolver<Maybe<ResolversTypes['testgoerli_Router']>, ParentType, ContextType, RequireFields<Querytestgoerli_routerArgs, 'id' | 'subgraphError'>>;
  testgoerli_routers?: Resolver<Array<ResolversTypes['testgoerli_Router']>, ParentType, ContextType, RequireFields<Querytestgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_setting?: Resolver<Maybe<ResolversTypes['testgoerli_Setting']>, ParentType, ContextType, RequireFields<Querytestgoerli_settingArgs, 'id' | 'subgraphError'>>;
  testgoerli_settings?: Resolver<Array<ResolversTypes['testgoerli_Setting']>, ParentType, ContextType, RequireFields<Querytestgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_relayer?: Resolver<Maybe<ResolversTypes['testgoerli_Relayer']>, ParentType, ContextType, RequireFields<Querytestgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  testgoerli_relayers?: Resolver<Array<ResolversTypes['testgoerli_Relayer']>, ParentType, ContextType, RequireFields<Querytestgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_stableSwap?: Resolver<Maybe<ResolversTypes['testgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querytestgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  testgoerli_stableSwaps?: Resolver<Array<ResolversTypes['testgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querytestgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_sponsorVault?: Resolver<Maybe<ResolversTypes['testgoerli_SponsorVault']>, ParentType, ContextType, RequireFields<Querytestgoerli_sponsorVaultArgs, 'id' | 'subgraphError'>>;
  testgoerli_sponsorVaults?: Resolver<Array<ResolversTypes['testgoerli_SponsorVault']>, ParentType, ContextType, RequireFields<Querytestgoerli_sponsorVaultsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_originTransfer?: Resolver<Maybe<ResolversTypes['testgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querytestgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  testgoerli_originTransfers?: Resolver<Array<ResolversTypes['testgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querytestgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_destinationTransfer?: Resolver<Maybe<ResolversTypes['testgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querytestgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  testgoerli_destinationTransfers?: Resolver<Array<ResolversTypes['testgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querytestgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli__meta?: Resolver<Maybe<ResolversTypes['testgoerli__Meta_']>, ParentType, ContextType, Partial<Querytestgoerli__metaArgs>>;
  xdai_swap_systemInfo?: Resolver<Maybe<ResolversTypes['xdai_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryxdai_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  xdai_swap_systemInfos?: Resolver<Array<ResolversTypes['xdai_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryxdai_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_pooledToken?: Resolver<Maybe<ResolversTypes['xdai_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryxdai_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  xdai_swap_pooledTokens?: Resolver<Array<ResolversTypes['xdai_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryxdai_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwap?: Resolver<Maybe<ResolversTypes['xdai_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwaps?: Resolver<Array<ResolversTypes['xdai_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['xdai_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['xdai_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['xdai_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['xdai_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['xdai_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['xdai_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['xdai_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['xdai_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['xdai_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['xdai_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['xdai_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['xdai_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['xdai_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['xdai_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryxdai_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['xdai_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['xdai_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryxdai_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap__meta?: Resolver<Maybe<ResolversTypes['xdai_swap__Meta_']>, ParentType, ContextType, Partial<Queryxdai_swap__metaArgs>>;
  staginggoerli_rootAggregated?: Resolver<Maybe<ResolversTypes['staginggoerli_RootAggregated']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootAggregatedArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootAggregateds?: Resolver<Array<ResolversTypes['staginggoerli_RootAggregated']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootAggregatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootPropagated?: Resolver<Maybe<ResolversTypes['staginggoerli_RootPropagated']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootPropagatedArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootPropagateds?: Resolver<Array<ResolversTypes['staginggoerli_RootPropagated']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootPropagatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_aggregatedMessageRoot?: Resolver<Maybe<ResolversTypes['staginggoerli_AggregatedMessageRoot']>, ParentType, ContextType, RequireFields<Querystaginggoerli_aggregatedMessageRootArgs, 'id' | 'subgraphError'>>;
  staginggoerli_aggregatedMessageRoots?: Resolver<Array<ResolversTypes['staginggoerli_AggregatedMessageRoot']>, ParentType, ContextType, RequireFields<Querystaginggoerli_aggregatedMessageRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootManagerMeta?: Resolver<Maybe<ResolversTypes['staginggoerli_RootManagerMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootManagerMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootManagerMetas?: Resolver<Array<ResolversTypes['staginggoerli_RootManagerMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootManagerMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_polygonConnectorMeta?: Resolver<Maybe<ResolversTypes['staginggoerli_PolygonConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_polygonConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_polygonConnectorMetas?: Resolver<Array<ResolversTypes['staginggoerli_PolygonConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_polygonConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_optimismConnectorMeta?: Resolver<Maybe<ResolversTypes['staginggoerli_OptimismConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_optimismConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_optimismConnectorMetas?: Resolver<Array<ResolversTypes['staginggoerli_OptimismConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_optimismConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_bnbConnectorMeta?: Resolver<Maybe<ResolversTypes['staginggoerli_BnbConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_bnbConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_bnbConnectorMetas?: Resolver<Array<ResolversTypes['staginggoerli_BnbConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_bnbConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_arbitrumConnectorMeta?: Resolver<Maybe<ResolversTypes['staginggoerli_ArbitrumConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_arbitrumConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_arbitrumConnectorMetas?: Resolver<Array<ResolversTypes['staginggoerli_ArbitrumConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_arbitrumConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_gnosisConnectorMeta?: Resolver<Maybe<ResolversTypes['staginggoerli_GnosisConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_gnosisConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_gnosisConnectorMetas?: Resolver<Array<ResolversTypes['staginggoerli_GnosisConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_gnosisConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootMessageProcessed?: Resolver<Maybe<ResolversTypes['staginggoerli_RootMessageProcessed']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootMessageProcessedArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootMessageProcesseds?: Resolver<Array<ResolversTypes['staginggoerli_RootMessageProcessed']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootMessageProcessedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli__meta?: Resolver<Maybe<ResolversTypes['staginggoerli__Meta_']>, ParentType, ContextType, Partial<Querystaginggoerli__metaArgs>>;
  mainnet_rootAggregated?: Resolver<Maybe<ResolversTypes['mainnet_RootAggregated']>, ParentType, ContextType, RequireFields<Querymainnet_rootAggregatedArgs, 'id' | 'subgraphError'>>;
  mainnet_rootAggregateds?: Resolver<Array<ResolversTypes['mainnet_RootAggregated']>, ParentType, ContextType, RequireFields<Querymainnet_rootAggregatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootPropagated?: Resolver<Maybe<ResolversTypes['mainnet_RootPropagated']>, ParentType, ContextType, RequireFields<Querymainnet_rootPropagatedArgs, 'id' | 'subgraphError'>>;
  mainnet_rootPropagateds?: Resolver<Array<ResolversTypes['mainnet_RootPropagated']>, ParentType, ContextType, RequireFields<Querymainnet_rootPropagatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_aggregatedMessageRoot?: Resolver<Maybe<ResolversTypes['mainnet_AggregatedMessageRoot']>, ParentType, ContextType, RequireFields<Querymainnet_aggregatedMessageRootArgs, 'id' | 'subgraphError'>>;
  mainnet_aggregatedMessageRoots?: Resolver<Array<ResolversTypes['mainnet_AggregatedMessageRoot']>, ParentType, ContextType, RequireFields<Querymainnet_aggregatedMessageRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootManagerMeta?: Resolver<Maybe<ResolversTypes['mainnet_RootManagerMeta']>, ParentType, ContextType, RequireFields<Querymainnet_rootManagerMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_rootManagerMetas?: Resolver<Array<ResolversTypes['mainnet_RootManagerMeta']>, ParentType, ContextType, RequireFields<Querymainnet_rootManagerMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_polygonConnectorMeta?: Resolver<Maybe<ResolversTypes['mainnet_PolygonConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_polygonConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_polygonConnectorMetas?: Resolver<Array<ResolversTypes['mainnet_PolygonConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_polygonConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_optimismConnectorMeta?: Resolver<Maybe<ResolversTypes['mainnet_OptimismConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_optimismConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_optimismConnectorMetas?: Resolver<Array<ResolversTypes['mainnet_OptimismConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_optimismConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_bnbConnectorMeta?: Resolver<Maybe<ResolversTypes['mainnet_BnbConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_bnbConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_bnbConnectorMetas?: Resolver<Array<ResolversTypes['mainnet_BnbConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_bnbConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_arbitrumConnectorMeta?: Resolver<Maybe<ResolversTypes['mainnet_ArbitrumConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_arbitrumConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_arbitrumConnectorMetas?: Resolver<Array<ResolversTypes['mainnet_ArbitrumConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_arbitrumConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_gnosisConnectorMeta?: Resolver<Maybe<ResolversTypes['mainnet_GnosisConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_gnosisConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_gnosisConnectorMetas?: Resolver<Array<ResolversTypes['mainnet_GnosisConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_gnosisConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootMessageProcessed?: Resolver<Maybe<ResolversTypes['mainnet_RootMessageProcessed']>, ParentType, ContextType, RequireFields<Querymainnet_rootMessageProcessedArgs, 'id' | 'subgraphError'>>;
  mainnet_rootMessageProcesseds?: Resolver<Array<ResolversTypes['mainnet_RootMessageProcessed']>, ParentType, ContextType, RequireFields<Querymainnet_rootMessageProcessedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet__meta?: Resolver<Maybe<ResolversTypes['mainnet__Meta_']>, ParentType, ContextType, Partial<Querymainnet__metaArgs>>;
  testoptimismgoerli_asset?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Asset']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_assetArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_assets?: Resolver<Array<ResolversTypes['testoptimismgoerli_Asset']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_assetBalance?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_assetBalances?: Resolver<Array<ResolversTypes['testoptimismgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_router?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Router']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_routerArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_routers?: Resolver<Array<ResolversTypes['testoptimismgoerli_Router']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_setting?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Setting']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_settingArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_settings?: Resolver<Array<ResolversTypes['testoptimismgoerli_Setting']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_relayer?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Relayer']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_relayers?: Resolver<Array<ResolversTypes['testoptimismgoerli_Relayer']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_stableSwap?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_stableSwaps?: Resolver<Array<ResolversTypes['testoptimismgoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_sponsorVault?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_SponsorVault']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_sponsorVaultArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_sponsorVaults?: Resolver<Array<ResolversTypes['testoptimismgoerli_SponsorVault']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_sponsorVaultsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_originTransfer?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_originTransfers?: Resolver<Array<ResolversTypes['testoptimismgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_destinationTransfer?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_destinationTransfers?: Resolver<Array<ResolversTypes['testoptimismgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querytestoptimismgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli__meta?: Resolver<Maybe<ResolversTypes['testoptimismgoerli__Meta_']>, ParentType, ContextType, Partial<Querytestoptimismgoerli__metaArgs>>;
  optimism_swap_systemInfo?: Resolver<Maybe<ResolversTypes['optimism_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  optimism_swap_systemInfos?: Resolver<Array<ResolversTypes['optimism_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_pooledToken?: Resolver<Maybe<ResolversTypes['optimism_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  optimism_swap_pooledTokens?: Resolver<Array<ResolversTypes['optimism_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwap?: Resolver<Maybe<ResolversTypes['optimism_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwaps?: Resolver<Array<ResolversTypes['optimism_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['optimism_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['optimism_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['optimism_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['optimism_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['optimism_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['optimism_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['optimism_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['optimism_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['optimism_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['optimism_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['optimism_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['optimism_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['optimism_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['optimism_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['optimism_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['optimism_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryoptimism_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap__meta?: Resolver<Maybe<ResolversTypes['optimism_swap__Meta_']>, ParentType, ContextType, Partial<Queryoptimism_swap__metaArgs>>;
  goerli_swap_systemInfo?: Resolver<Maybe<ResolversTypes['goerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querygoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  goerli_swap_systemInfos?: Resolver<Array<ResolversTypes['goerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querygoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_pooledToken?: Resolver<Maybe<ResolversTypes['goerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querygoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  goerli_swap_pooledTokens?: Resolver<Array<ResolversTypes['goerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querygoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwap?: Resolver<Maybe<ResolversTypes['goerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwaps?: Resolver<Array<ResolversTypes['goerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['goerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['goerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['goerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['goerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['goerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['goerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['goerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['goerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['goerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['goerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['goerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['goerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['goerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['goerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querygoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['goerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['goerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querygoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap__meta?: Resolver<Maybe<ResolversTypes['goerli_swap__Meta_']>, ParentType, ContextType, Partial<Querygoerli_swap__metaArgs>>;
  optimismgoerli_swap_systemInfo?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_systemInfos?: Resolver<Array<ResolversTypes['optimismgoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_pooledToken?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_pooledTokens?: Resolver<Array<ResolversTypes['optimismgoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwap?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwaps?: Resolver<Array<ResolversTypes['optimismgoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['optimismgoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['optimismgoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['optimismgoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['optimismgoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['optimismgoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['optimismgoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['optimismgoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['optimismgoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryoptimismgoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap__meta?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap__Meta_']>, ParentType, ContextType, Partial<Queryoptimismgoerli_swap__metaArgs>>;
  stagingmumbai_swap_systemInfo?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_systemInfos?: Resolver<Array<ResolversTypes['stagingmumbai_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_pooledToken?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_pooledTokens?: Resolver<Array<ResolversTypes['stagingmumbai_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwap?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwaps?: Resolver<Array<ResolversTypes['stagingmumbai_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['stagingmumbai_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['stagingmumbai_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['stagingmumbai_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['stagingmumbai_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['stagingmumbai_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['stagingmumbai_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['stagingmumbai_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['stagingmumbai_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystagingmumbai_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap__meta?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap__Meta_']>, ParentType, ContextType, Partial<Querystagingmumbai_swap__metaArgs>>;
  goerli_rootAggregated?: Resolver<Maybe<ResolversTypes['goerli_RootAggregated']>, ParentType, ContextType, RequireFields<Querygoerli_rootAggregatedArgs, 'id' | 'subgraphError'>>;
  goerli_rootAggregateds?: Resolver<Array<ResolversTypes['goerli_RootAggregated']>, ParentType, ContextType, RequireFields<Querygoerli_rootAggregatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootPropagated?: Resolver<Maybe<ResolversTypes['goerli_RootPropagated']>, ParentType, ContextType, RequireFields<Querygoerli_rootPropagatedArgs, 'id' | 'subgraphError'>>;
  goerli_rootPropagateds?: Resolver<Array<ResolversTypes['goerli_RootPropagated']>, ParentType, ContextType, RequireFields<Querygoerli_rootPropagatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_aggregatedMessageRoot?: Resolver<Maybe<ResolversTypes['goerli_AggregatedMessageRoot']>, ParentType, ContextType, RequireFields<Querygoerli_aggregatedMessageRootArgs, 'id' | 'subgraphError'>>;
  goerli_aggregatedMessageRoots?: Resolver<Array<ResolversTypes['goerli_AggregatedMessageRoot']>, ParentType, ContextType, RequireFields<Querygoerli_aggregatedMessageRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootManagerMeta?: Resolver<Maybe<ResolversTypes['goerli_RootManagerMeta']>, ParentType, ContextType, RequireFields<Querygoerli_rootManagerMetaArgs, 'id' | 'subgraphError'>>;
  goerli_rootManagerMetas?: Resolver<Array<ResolversTypes['goerli_RootManagerMeta']>, ParentType, ContextType, RequireFields<Querygoerli_rootManagerMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_polygonConnectorMeta?: Resolver<Maybe<ResolversTypes['goerli_PolygonConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_polygonConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_polygonConnectorMetas?: Resolver<Array<ResolversTypes['goerli_PolygonConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_polygonConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_optimismConnectorMeta?: Resolver<Maybe<ResolversTypes['goerli_OptimismConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_optimismConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_optimismConnectorMetas?: Resolver<Array<ResolversTypes['goerli_OptimismConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_optimismConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_bnbConnectorMeta?: Resolver<Maybe<ResolversTypes['goerli_BnbConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_bnbConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_bnbConnectorMetas?: Resolver<Array<ResolversTypes['goerli_BnbConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_bnbConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_arbitrumConnectorMeta?: Resolver<Maybe<ResolversTypes['goerli_ArbitrumConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_arbitrumConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_arbitrumConnectorMetas?: Resolver<Array<ResolversTypes['goerli_ArbitrumConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_arbitrumConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_gnosisConnectorMeta?: Resolver<Maybe<ResolversTypes['goerli_GnosisConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_gnosisConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_gnosisConnectorMetas?: Resolver<Array<ResolversTypes['goerli_GnosisConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_gnosisConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootMessageProcessed?: Resolver<Maybe<ResolversTypes['goerli_RootMessageProcessed']>, ParentType, ContextType, RequireFields<Querygoerli_rootMessageProcessedArgs, 'id' | 'subgraphError'>>;
  goerli_rootMessageProcesseds?: Resolver<Array<ResolversTypes['goerli_RootMessageProcessed']>, ParentType, ContextType, RequireFields<Querygoerli_rootMessageProcessedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli__meta?: Resolver<Maybe<ResolversTypes['goerli__Meta_']>, ParentType, ContextType, Partial<Querygoerli__metaArgs>>;
  local1337_asset?: Resolver<Maybe<ResolversTypes['local1337_Asset']>, ParentType, ContextType, RequireFields<Querylocal1337_assetArgs, 'id' | 'subgraphError'>>;
  local1337_assets?: Resolver<Array<ResolversTypes['local1337_Asset']>, ParentType, ContextType, RequireFields<Querylocal1337_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_assetBalance?: Resolver<Maybe<ResolversTypes['local1337_AssetBalance']>, ParentType, ContextType, RequireFields<Querylocal1337_assetBalanceArgs, 'id' | 'subgraphError'>>;
  local1337_assetBalances?: Resolver<Array<ResolversTypes['local1337_AssetBalance']>, ParentType, ContextType, RequireFields<Querylocal1337_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_router?: Resolver<Maybe<ResolversTypes['local1337_Router']>, ParentType, ContextType, RequireFields<Querylocal1337_routerArgs, 'id' | 'subgraphError'>>;
  local1337_routers?: Resolver<Array<ResolversTypes['local1337_Router']>, ParentType, ContextType, RequireFields<Querylocal1337_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_setting?: Resolver<Maybe<ResolversTypes['local1337_Setting']>, ParentType, ContextType, RequireFields<Querylocal1337_settingArgs, 'id' | 'subgraphError'>>;
  local1337_settings?: Resolver<Array<ResolversTypes['local1337_Setting']>, ParentType, ContextType, RequireFields<Querylocal1337_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_relayer?: Resolver<Maybe<ResolversTypes['local1337_Relayer']>, ParentType, ContextType, RequireFields<Querylocal1337_relayerArgs, 'id' | 'subgraphError'>>;
  local1337_relayers?: Resolver<Array<ResolversTypes['local1337_Relayer']>, ParentType, ContextType, RequireFields<Querylocal1337_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_stableSwap?: Resolver<Maybe<ResolversTypes['local1337_StableSwap']>, ParentType, ContextType, RequireFields<Querylocal1337_stableSwapArgs, 'id' | 'subgraphError'>>;
  local1337_stableSwaps?: Resolver<Array<ResolversTypes['local1337_StableSwap']>, ParentType, ContextType, RequireFields<Querylocal1337_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_sponsorVault?: Resolver<Maybe<ResolversTypes['local1337_SponsorVault']>, ParentType, ContextType, RequireFields<Querylocal1337_sponsorVaultArgs, 'id' | 'subgraphError'>>;
  local1337_sponsorVaults?: Resolver<Array<ResolversTypes['local1337_SponsorVault']>, ParentType, ContextType, RequireFields<Querylocal1337_sponsorVaultsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_originTransfer?: Resolver<Maybe<ResolversTypes['local1337_OriginTransfer']>, ParentType, ContextType, RequireFields<Querylocal1337_originTransferArgs, 'id' | 'subgraphError'>>;
  local1337_originTransfers?: Resolver<Array<ResolversTypes['local1337_OriginTransfer']>, ParentType, ContextType, RequireFields<Querylocal1337_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_destinationTransfer?: Resolver<Maybe<ResolversTypes['local1337_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querylocal1337_destinationTransferArgs, 'id' | 'subgraphError'>>;
  local1337_destinationTransfers?: Resolver<Array<ResolversTypes['local1337_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querylocal1337_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337__meta?: Resolver<Maybe<ResolversTypes['local1337__Meta_']>, ParentType, ContextType, Partial<Querylocal1337__metaArgs>>;
  bnb_swap_systemInfo?: Resolver<Maybe<ResolversTypes['bnb_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querybnb_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  bnb_swap_systemInfos?: Resolver<Array<ResolversTypes['bnb_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querybnb_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_pooledToken?: Resolver<Maybe<ResolversTypes['bnb_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querybnb_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  bnb_swap_pooledTokens?: Resolver<Array<ResolversTypes['bnb_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querybnb_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwap?: Resolver<Maybe<ResolversTypes['bnb_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwaps?: Resolver<Array<ResolversTypes['bnb_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['bnb_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['bnb_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['bnb_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['bnb_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['bnb_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['bnb_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['bnb_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['bnb_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['bnb_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['bnb_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['bnb_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['bnb_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querybnb_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['bnb_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['bnb_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querybnb_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['bnb_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querybnb_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['bnb_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querybnb_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap__meta?: Resolver<Maybe<ResolversTypes['bnb_swap__Meta_']>, ParentType, ContextType, Partial<Querybnb_swap__metaArgs>>;
  arbitrumgoerli_swap_systemInfo?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_systemInfos?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_pooledToken?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_pooledTokens?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwap?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwaps?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumgoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap__meta?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap__Meta_']>, ParentType, ContextType, Partial<Queryarbitrumgoerli_swap__metaArgs>>;
  mumbai_swap_systemInfo?: Resolver<Maybe<ResolversTypes['mumbai_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querymumbai_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_systemInfos?: Resolver<Array<ResolversTypes['mumbai_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querymumbai_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_pooledToken?: Resolver<Maybe<ResolversTypes['mumbai_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querymumbai_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_pooledTokens?: Resolver<Array<ResolversTypes['mumbai_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querymumbai_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwap?: Resolver<Maybe<ResolversTypes['mumbai_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwaps?: Resolver<Array<ResolversTypes['mumbai_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['mumbai_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['mumbai_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['mumbai_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['mumbai_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['mumbai_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['mumbai_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['mumbai_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['mumbai_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['mumbai_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['mumbai_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['mumbai_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['mumbai_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['mumbai_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['mumbai_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querymumbai_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['mumbai_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['mumbai_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querymumbai_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap__meta?: Resolver<Maybe<ResolversTypes['mumbai_swap__Meta_']>, ParentType, ContextType, Partial<Querymumbai_swap__metaArgs>>;
  optimism_asset?: Resolver<Maybe<ResolversTypes['optimism_Asset']>, ParentType, ContextType, RequireFields<Queryoptimism_assetArgs, 'id' | 'subgraphError'>>;
  optimism_assets?: Resolver<Array<ResolversTypes['optimism_Asset']>, ParentType, ContextType, RequireFields<Queryoptimism_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_assetStatus?: Resolver<Maybe<ResolversTypes['optimism_AssetStatus']>, ParentType, ContextType, RequireFields<Queryoptimism_assetStatusArgs, 'id' | 'subgraphError'>>;
  optimism_assetStatuses?: Resolver<Array<ResolversTypes['optimism_AssetStatus']>, ParentType, ContextType, RequireFields<Queryoptimism_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_assetBalance?: Resolver<Maybe<ResolversTypes['optimism_AssetBalance']>, ParentType, ContextType, RequireFields<Queryoptimism_assetBalanceArgs, 'id' | 'subgraphError'>>;
  optimism_assetBalances?: Resolver<Array<ResolversTypes['optimism_AssetBalance']>, ParentType, ContextType, RequireFields<Queryoptimism_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_router?: Resolver<Maybe<ResolversTypes['optimism_Router']>, ParentType, ContextType, RequireFields<Queryoptimism_routerArgs, 'id' | 'subgraphError'>>;
  optimism_routers?: Resolver<Array<ResolversTypes['optimism_Router']>, ParentType, ContextType, RequireFields<Queryoptimism_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_setting?: Resolver<Maybe<ResolversTypes['optimism_Setting']>, ParentType, ContextType, RequireFields<Queryoptimism_settingArgs, 'id' | 'subgraphError'>>;
  optimism_settings?: Resolver<Array<ResolversTypes['optimism_Setting']>, ParentType, ContextType, RequireFields<Queryoptimism_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_relayer?: Resolver<Maybe<ResolversTypes['optimism_Relayer']>, ParentType, ContextType, RequireFields<Queryoptimism_relayerArgs, 'id' | 'subgraphError'>>;
  optimism_relayers?: Resolver<Array<ResolversTypes['optimism_Relayer']>, ParentType, ContextType, RequireFields<Queryoptimism_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_sequencer?: Resolver<Maybe<ResolversTypes['optimism_Sequencer']>, ParentType, ContextType, RequireFields<Queryoptimism_sequencerArgs, 'id' | 'subgraphError'>>;
  optimism_sequencers?: Resolver<Array<ResolversTypes['optimism_Sequencer']>, ParentType, ContextType, RequireFields<Queryoptimism_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_originTransfer?: Resolver<Maybe<ResolversTypes['optimism_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryoptimism_originTransferArgs, 'id' | 'subgraphError'>>;
  optimism_originTransfers?: Resolver<Array<ResolversTypes['optimism_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryoptimism_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_destinationTransfer?: Resolver<Maybe<ResolversTypes['optimism_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryoptimism_destinationTransferArgs, 'id' | 'subgraphError'>>;
  optimism_destinationTransfers?: Resolver<Array<ResolversTypes['optimism_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryoptimism_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_originMessage?: Resolver<Maybe<ResolversTypes['optimism_OriginMessage']>, ParentType, ContextType, RequireFields<Queryoptimism_originMessageArgs, 'id' | 'subgraphError'>>;
  optimism_originMessages?: Resolver<Array<ResolversTypes['optimism_OriginMessage']>, ParentType, ContextType, RequireFields<Queryoptimism_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_aggregateRoot?: Resolver<Maybe<ResolversTypes['optimism_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryoptimism_aggregateRootArgs, 'id' | 'subgraphError'>>;
  optimism_aggregateRoots?: Resolver<Array<ResolversTypes['optimism_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryoptimism_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_connectorMeta?: Resolver<Maybe<ResolversTypes['optimism_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryoptimism_connectorMetaArgs, 'id' | 'subgraphError'>>;
  optimism_connectorMetas?: Resolver<Array<ResolversTypes['optimism_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryoptimism_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_rootCount?: Resolver<Maybe<ResolversTypes['optimism_RootCount']>, ParentType, ContextType, RequireFields<Queryoptimism_rootCountArgs, 'id' | 'subgraphError'>>;
  optimism_rootCounts?: Resolver<Array<ResolversTypes['optimism_RootCount']>, ParentType, ContextType, RequireFields<Queryoptimism_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_rootMessageSent?: Resolver<Maybe<ResolversTypes['optimism_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryoptimism_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  optimism_rootMessageSents?: Resolver<Array<ResolversTypes['optimism_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryoptimism_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism__meta?: Resolver<Maybe<ResolversTypes['optimism__Meta_']>, ParentType, ContextType, Partial<Queryoptimism__metaArgs>>;
  staginggoerli_swap_systemInfo?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_systemInfos?: Resolver<Array<ResolversTypes['staginggoerli_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_pooledToken?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_pooledTokens?: Resolver<Array<ResolversTypes['staginggoerli_swap_PooledToken']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwap?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwaps?: Resolver<Array<ResolversTypes['staginggoerli_swap_StableSwap']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['staginggoerli_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['staginggoerli_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['staginggoerli_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['staginggoerli_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['staginggoerli_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['staginggoerli_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['staginggoerli_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['staginggoerli_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap__meta?: Resolver<Maybe<ResolversTypes['staginggoerli_swap__Meta_']>, ParentType, ContextType, Partial<Querystaginggoerli_swap__metaArgs>>;
  stagingoptimismgoerli_asset?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Asset']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_assetArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_assets?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_Asset']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_assetStatus?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_AssetStatus']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_assetStatuses?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_AssetStatus']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_assetBalance?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_assetBalances?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_router?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Router']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_routerArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_routers?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_Router']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_setting?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Setting']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_settingArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_settings?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_Setting']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_relayer?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Relayer']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_relayers?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_Relayer']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_sequencer?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Sequencer']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_sequencers?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_Sequencer']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_originTransfer?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_originTransfers?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_destinationTransfer?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_destinationTransfers?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_originMessage?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_originMessages?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_aggregateRoot?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_aggregateRoots?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_connectorMeta?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_connectorMetas?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_rootCount?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_RootCount']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_rootCounts?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_RootCount']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_rootMessageSent?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_rootMessageSents?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Querystagingoptimismgoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli__meta?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli__Meta_']>, ParentType, ContextType, Partial<Querystagingoptimismgoerli__metaArgs>>;
  stagingmumbai_asset?: Resolver<Maybe<ResolversTypes['stagingmumbai_Asset']>, ParentType, ContextType, RequireFields<Querystagingmumbai_assetArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_assets?: Resolver<Array<ResolversTypes['stagingmumbai_Asset']>, ParentType, ContextType, RequireFields<Querystagingmumbai_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_assetStatus?: Resolver<Maybe<ResolversTypes['stagingmumbai_AssetStatus']>, ParentType, ContextType, RequireFields<Querystagingmumbai_assetStatusArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_assetStatuses?: Resolver<Array<ResolversTypes['stagingmumbai_AssetStatus']>, ParentType, ContextType, RequireFields<Querystagingmumbai_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_assetBalance?: Resolver<Maybe<ResolversTypes['stagingmumbai_AssetBalance']>, ParentType, ContextType, RequireFields<Querystagingmumbai_assetBalanceArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_assetBalances?: Resolver<Array<ResolversTypes['stagingmumbai_AssetBalance']>, ParentType, ContextType, RequireFields<Querystagingmumbai_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_router?: Resolver<Maybe<ResolversTypes['stagingmumbai_Router']>, ParentType, ContextType, RequireFields<Querystagingmumbai_routerArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_routers?: Resolver<Array<ResolversTypes['stagingmumbai_Router']>, ParentType, ContextType, RequireFields<Querystagingmumbai_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_setting?: Resolver<Maybe<ResolversTypes['stagingmumbai_Setting']>, ParentType, ContextType, RequireFields<Querystagingmumbai_settingArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_settings?: Resolver<Array<ResolversTypes['stagingmumbai_Setting']>, ParentType, ContextType, RequireFields<Querystagingmumbai_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_relayer?: Resolver<Maybe<ResolversTypes['stagingmumbai_Relayer']>, ParentType, ContextType, RequireFields<Querystagingmumbai_relayerArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_relayers?: Resolver<Array<ResolversTypes['stagingmumbai_Relayer']>, ParentType, ContextType, RequireFields<Querystagingmumbai_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_sequencer?: Resolver<Maybe<ResolversTypes['stagingmumbai_Sequencer']>, ParentType, ContextType, RequireFields<Querystagingmumbai_sequencerArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_sequencers?: Resolver<Array<ResolversTypes['stagingmumbai_Sequencer']>, ParentType, ContextType, RequireFields<Querystagingmumbai_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_originTransfer?: Resolver<Maybe<ResolversTypes['stagingmumbai_OriginTransfer']>, ParentType, ContextType, RequireFields<Querystagingmumbai_originTransferArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_originTransfers?: Resolver<Array<ResolversTypes['stagingmumbai_OriginTransfer']>, ParentType, ContextType, RequireFields<Querystagingmumbai_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_destinationTransfer?: Resolver<Maybe<ResolversTypes['stagingmumbai_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querystagingmumbai_destinationTransferArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_destinationTransfers?: Resolver<Array<ResolversTypes['stagingmumbai_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querystagingmumbai_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_originMessage?: Resolver<Maybe<ResolversTypes['stagingmumbai_OriginMessage']>, ParentType, ContextType, RequireFields<Querystagingmumbai_originMessageArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_originMessages?: Resolver<Array<ResolversTypes['stagingmumbai_OriginMessage']>, ParentType, ContextType, RequireFields<Querystagingmumbai_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_aggregateRoot?: Resolver<Maybe<ResolversTypes['stagingmumbai_AggregateRoot']>, ParentType, ContextType, RequireFields<Querystagingmumbai_aggregateRootArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_aggregateRoots?: Resolver<Array<ResolversTypes['stagingmumbai_AggregateRoot']>, ParentType, ContextType, RequireFields<Querystagingmumbai_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_connectorMeta?: Resolver<Maybe<ResolversTypes['stagingmumbai_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querystagingmumbai_connectorMetaArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_connectorMetas?: Resolver<Array<ResolversTypes['stagingmumbai_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querystagingmumbai_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_rootCount?: Resolver<Maybe<ResolversTypes['stagingmumbai_RootCount']>, ParentType, ContextType, RequireFields<Querystagingmumbai_rootCountArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_rootCounts?: Resolver<Array<ResolversTypes['stagingmumbai_RootCount']>, ParentType, ContextType, RequireFields<Querystagingmumbai_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_rootMessageSent?: Resolver<Maybe<ResolversTypes['stagingmumbai_RootMessageSent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_rootMessageSents?: Resolver<Array<ResolversTypes['stagingmumbai_RootMessageSent']>, ParentType, ContextType, RequireFields<Querystagingmumbai_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai__meta?: Resolver<Maybe<ResolversTypes['stagingmumbai__Meta_']>, ParentType, ContextType, Partial<Querystagingmumbai__metaArgs>>;
  arbitrumone_swap_systemInfo?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_systemInfos?: Resolver<Array<ResolversTypes['arbitrumone_swap_SystemInfo']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_pooledToken?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_pooledTokens?: Resolver<Array<ResolversTypes['arbitrumone_swap_PooledToken']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwap?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwaps?: Resolver<Array<ResolversTypes['arbitrumone_swap_StableSwap']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['arbitrumone_swap_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['arbitrumone_swap_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapExchange?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapExchanges?: Resolver<Array<ResolversTypes['arbitrumone_swap_StableSwapExchange']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_swapDailyVolume?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_swapDailyVolumes?: Resolver<Array<ResolversTypes['arbitrumone_swap_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_swapHourlyVolumes?: Resolver<Array<ResolversTypes['arbitrumone_swap_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['arbitrumone_swap_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapEvent?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapEvents?: Resolver<Array<ResolversTypes['arbitrumone_swap_StableSwapEvent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_swapTradeVolume?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_swapTradeVolumes?: Resolver<Array<ResolversTypes['arbitrumone_swap_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Queryarbitrumone_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap__meta?: Resolver<Maybe<ResolversTypes['arbitrumone_swap__Meta_']>, ParentType, ContextType, Partial<Queryarbitrumone_swap__metaArgs>>;
  local1338_asset?: Resolver<Maybe<ResolversTypes['local1338_Asset']>, ParentType, ContextType, RequireFields<Querylocal1338_assetArgs, 'id' | 'subgraphError'>>;
  local1338_assets?: Resolver<Array<ResolversTypes['local1338_Asset']>, ParentType, ContextType, RequireFields<Querylocal1338_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_assetBalance?: Resolver<Maybe<ResolversTypes['local1338_AssetBalance']>, ParentType, ContextType, RequireFields<Querylocal1338_assetBalanceArgs, 'id' | 'subgraphError'>>;
  local1338_assetBalances?: Resolver<Array<ResolversTypes['local1338_AssetBalance']>, ParentType, ContextType, RequireFields<Querylocal1338_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_router?: Resolver<Maybe<ResolversTypes['local1338_Router']>, ParentType, ContextType, RequireFields<Querylocal1338_routerArgs, 'id' | 'subgraphError'>>;
  local1338_routers?: Resolver<Array<ResolversTypes['local1338_Router']>, ParentType, ContextType, RequireFields<Querylocal1338_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_setting?: Resolver<Maybe<ResolversTypes['local1338_Setting']>, ParentType, ContextType, RequireFields<Querylocal1338_settingArgs, 'id' | 'subgraphError'>>;
  local1338_settings?: Resolver<Array<ResolversTypes['local1338_Setting']>, ParentType, ContextType, RequireFields<Querylocal1338_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_relayer?: Resolver<Maybe<ResolversTypes['local1338_Relayer']>, ParentType, ContextType, RequireFields<Querylocal1338_relayerArgs, 'id' | 'subgraphError'>>;
  local1338_relayers?: Resolver<Array<ResolversTypes['local1338_Relayer']>, ParentType, ContextType, RequireFields<Querylocal1338_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_stableSwap?: Resolver<Maybe<ResolversTypes['local1338_StableSwap']>, ParentType, ContextType, RequireFields<Querylocal1338_stableSwapArgs, 'id' | 'subgraphError'>>;
  local1338_stableSwaps?: Resolver<Array<ResolversTypes['local1338_StableSwap']>, ParentType, ContextType, RequireFields<Querylocal1338_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_sponsorVault?: Resolver<Maybe<ResolversTypes['local1338_SponsorVault']>, ParentType, ContextType, RequireFields<Querylocal1338_sponsorVaultArgs, 'id' | 'subgraphError'>>;
  local1338_sponsorVaults?: Resolver<Array<ResolversTypes['local1338_SponsorVault']>, ParentType, ContextType, RequireFields<Querylocal1338_sponsorVaultsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_originTransfer?: Resolver<Maybe<ResolversTypes['local1338_OriginTransfer']>, ParentType, ContextType, RequireFields<Querylocal1338_originTransferArgs, 'id' | 'subgraphError'>>;
  local1338_originTransfers?: Resolver<Array<ResolversTypes['local1338_OriginTransfer']>, ParentType, ContextType, RequireFields<Querylocal1338_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_destinationTransfer?: Resolver<Maybe<ResolversTypes['local1338_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querylocal1338_destinationTransferArgs, 'id' | 'subgraphError'>>;
  local1338_destinationTransfers?: Resolver<Array<ResolversTypes['local1338_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querylocal1338_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338__meta?: Resolver<Maybe<ResolversTypes['local1338__Meta_']>, ParentType, ContextType, Partial<Querylocal1338__metaArgs>>;
  goerli_asset?: Resolver<Maybe<ResolversTypes['goerli_Asset']>, ParentType, ContextType, RequireFields<Querygoerli_assetArgs, 'id' | 'subgraphError'>>;
  goerli_assets?: Resolver<Array<ResolversTypes['goerli_Asset']>, ParentType, ContextType, RequireFields<Querygoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_assetStatus?: Resolver<Maybe<ResolversTypes['goerli_AssetStatus']>, ParentType, ContextType, RequireFields<Querygoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  goerli_assetStatuses?: Resolver<Array<ResolversTypes['goerli_AssetStatus']>, ParentType, ContextType, RequireFields<Querygoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_assetBalance?: Resolver<Maybe<ResolversTypes['goerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querygoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  goerli_assetBalances?: Resolver<Array<ResolversTypes['goerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querygoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_router?: Resolver<Maybe<ResolversTypes['goerli_Router']>, ParentType, ContextType, RequireFields<Querygoerli_routerArgs, 'id' | 'subgraphError'>>;
  goerli_routers?: Resolver<Array<ResolversTypes['goerli_Router']>, ParentType, ContextType, RequireFields<Querygoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_setting?: Resolver<Maybe<ResolversTypes['goerli_Setting']>, ParentType, ContextType, RequireFields<Querygoerli_settingArgs, 'id' | 'subgraphError'>>;
  goerli_settings?: Resolver<Array<ResolversTypes['goerli_Setting']>, ParentType, ContextType, RequireFields<Querygoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_relayer?: Resolver<Maybe<ResolversTypes['goerli_Relayer']>, ParentType, ContextType, RequireFields<Querygoerli_relayerArgs, 'id' | 'subgraphError'>>;
  goerli_relayers?: Resolver<Array<ResolversTypes['goerli_Relayer']>, ParentType, ContextType, RequireFields<Querygoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_sequencer?: Resolver<Maybe<ResolversTypes['goerli_Sequencer']>, ParentType, ContextType, RequireFields<Querygoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  goerli_sequencers?: Resolver<Array<ResolversTypes['goerli_Sequencer']>, ParentType, ContextType, RequireFields<Querygoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_originTransfer?: Resolver<Maybe<ResolversTypes['goerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querygoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  goerli_originTransfers?: Resolver<Array<ResolversTypes['goerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querygoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_destinationTransfer?: Resolver<Maybe<ResolversTypes['goerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querygoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  goerli_destinationTransfers?: Resolver<Array<ResolversTypes['goerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querygoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_originMessage?: Resolver<Maybe<ResolversTypes['goerli_OriginMessage']>, ParentType, ContextType, RequireFields<Querygoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  goerli_originMessages?: Resolver<Array<ResolversTypes['goerli_OriginMessage']>, ParentType, ContextType, RequireFields<Querygoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_aggregateRoot?: Resolver<Maybe<ResolversTypes['goerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Querygoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  goerli_aggregateRoots?: Resolver<Array<ResolversTypes['goerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Querygoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_connectorMeta?: Resolver<Maybe<ResolversTypes['goerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_connectorMetas?: Resolver<Array<ResolversTypes['goerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querygoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootCount?: Resolver<Maybe<ResolversTypes['goerli_RootCount']>, ParentType, ContextType, RequireFields<Querygoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  goerli_rootCounts?: Resolver<Array<ResolversTypes['goerli_RootCount']>, ParentType, ContextType, RequireFields<Querygoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootMessageSent?: Resolver<Maybe<ResolversTypes['goerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Querygoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  goerli_rootMessageSents?: Resolver<Array<ResolversTypes['goerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Querygoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_asset?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Asset']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_assetArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_assets?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_Asset']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_assetStatus?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_AssetStatus']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_assetStatuses?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_AssetStatus']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_assetBalance?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_assetBalances?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_router?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Router']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_routerArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_routers?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_Router']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_setting?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Setting']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_settingArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_settings?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_Setting']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_relayer?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Relayer']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_relayers?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_Relayer']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_sequencer?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Sequencer']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_sequencers?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_Sequencer']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_originTransfer?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_originTransfers?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_destinationTransfer?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_destinationTransfers?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_originMessage?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_originMessages?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_aggregateRoot?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_aggregateRoots?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_connectorMeta?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_connectorMetas?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_rootCount?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_RootCount']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_rootCounts?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_RootCount']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_rootMessageSent?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_rootMessageSents?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Querystagingarbitrumgoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli__meta?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli__Meta_']>, ParentType, ContextType, Partial<Querystagingarbitrumgoerli__metaArgs>>;
  mumbai_asset?: Resolver<Maybe<ResolversTypes['mumbai_Asset']>, ParentType, ContextType, RequireFields<Querymumbai_assetArgs, 'id' | 'subgraphError'>>;
  mumbai_assets?: Resolver<Array<ResolversTypes['mumbai_Asset']>, ParentType, ContextType, RequireFields<Querymumbai_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_assetStatus?: Resolver<Maybe<ResolversTypes['mumbai_AssetStatus']>, ParentType, ContextType, RequireFields<Querymumbai_assetStatusArgs, 'id' | 'subgraphError'>>;
  mumbai_assetStatuses?: Resolver<Array<ResolversTypes['mumbai_AssetStatus']>, ParentType, ContextType, RequireFields<Querymumbai_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_assetBalance?: Resolver<Maybe<ResolversTypes['mumbai_AssetBalance']>, ParentType, ContextType, RequireFields<Querymumbai_assetBalanceArgs, 'id' | 'subgraphError'>>;
  mumbai_assetBalances?: Resolver<Array<ResolversTypes['mumbai_AssetBalance']>, ParentType, ContextType, RequireFields<Querymumbai_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_router?: Resolver<Maybe<ResolversTypes['mumbai_Router']>, ParentType, ContextType, RequireFields<Querymumbai_routerArgs, 'id' | 'subgraphError'>>;
  mumbai_routers?: Resolver<Array<ResolversTypes['mumbai_Router']>, ParentType, ContextType, RequireFields<Querymumbai_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_setting?: Resolver<Maybe<ResolversTypes['mumbai_Setting']>, ParentType, ContextType, RequireFields<Querymumbai_settingArgs, 'id' | 'subgraphError'>>;
  mumbai_settings?: Resolver<Array<ResolversTypes['mumbai_Setting']>, ParentType, ContextType, RequireFields<Querymumbai_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_relayer?: Resolver<Maybe<ResolversTypes['mumbai_Relayer']>, ParentType, ContextType, RequireFields<Querymumbai_relayerArgs, 'id' | 'subgraphError'>>;
  mumbai_relayers?: Resolver<Array<ResolversTypes['mumbai_Relayer']>, ParentType, ContextType, RequireFields<Querymumbai_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_sequencer?: Resolver<Maybe<ResolversTypes['mumbai_Sequencer']>, ParentType, ContextType, RequireFields<Querymumbai_sequencerArgs, 'id' | 'subgraphError'>>;
  mumbai_sequencers?: Resolver<Array<ResolversTypes['mumbai_Sequencer']>, ParentType, ContextType, RequireFields<Querymumbai_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_originTransfer?: Resolver<Maybe<ResolversTypes['mumbai_OriginTransfer']>, ParentType, ContextType, RequireFields<Querymumbai_originTransferArgs, 'id' | 'subgraphError'>>;
  mumbai_originTransfers?: Resolver<Array<ResolversTypes['mumbai_OriginTransfer']>, ParentType, ContextType, RequireFields<Querymumbai_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_destinationTransfer?: Resolver<Maybe<ResolversTypes['mumbai_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querymumbai_destinationTransferArgs, 'id' | 'subgraphError'>>;
  mumbai_destinationTransfers?: Resolver<Array<ResolversTypes['mumbai_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querymumbai_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_originMessage?: Resolver<Maybe<ResolversTypes['mumbai_OriginMessage']>, ParentType, ContextType, RequireFields<Querymumbai_originMessageArgs, 'id' | 'subgraphError'>>;
  mumbai_originMessages?: Resolver<Array<ResolversTypes['mumbai_OriginMessage']>, ParentType, ContextType, RequireFields<Querymumbai_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_aggregateRoot?: Resolver<Maybe<ResolversTypes['mumbai_AggregateRoot']>, ParentType, ContextType, RequireFields<Querymumbai_aggregateRootArgs, 'id' | 'subgraphError'>>;
  mumbai_aggregateRoots?: Resolver<Array<ResolversTypes['mumbai_AggregateRoot']>, ParentType, ContextType, RequireFields<Querymumbai_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_connectorMeta?: Resolver<Maybe<ResolversTypes['mumbai_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querymumbai_connectorMetaArgs, 'id' | 'subgraphError'>>;
  mumbai_connectorMetas?: Resolver<Array<ResolversTypes['mumbai_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querymumbai_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_rootCount?: Resolver<Maybe<ResolversTypes['mumbai_RootCount']>, ParentType, ContextType, RequireFields<Querymumbai_rootCountArgs, 'id' | 'subgraphError'>>;
  mumbai_rootCounts?: Resolver<Array<ResolversTypes['mumbai_RootCount']>, ParentType, ContextType, RequireFields<Querymumbai_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_rootMessageSent?: Resolver<Maybe<ResolversTypes['mumbai_RootMessageSent']>, ParentType, ContextType, RequireFields<Querymumbai_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  mumbai_rootMessageSents?: Resolver<Array<ResolversTypes['mumbai_RootMessageSent']>, ParentType, ContextType, RequireFields<Querymumbai_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai__meta?: Resolver<Maybe<ResolversTypes['mumbai__Meta_']>, ParentType, ContextType, Partial<Querymumbai__metaArgs>>;
  bnb_asset?: Resolver<Maybe<ResolversTypes['bnb_Asset']>, ParentType, ContextType, RequireFields<Querybnb_assetArgs, 'id' | 'subgraphError'>>;
  bnb_assets?: Resolver<Array<ResolversTypes['bnb_Asset']>, ParentType, ContextType, RequireFields<Querybnb_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_assetStatus?: Resolver<Maybe<ResolversTypes['bnb_AssetStatus']>, ParentType, ContextType, RequireFields<Querybnb_assetStatusArgs, 'id' | 'subgraphError'>>;
  bnb_assetStatuses?: Resolver<Array<ResolversTypes['bnb_AssetStatus']>, ParentType, ContextType, RequireFields<Querybnb_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_assetBalance?: Resolver<Maybe<ResolversTypes['bnb_AssetBalance']>, ParentType, ContextType, RequireFields<Querybnb_assetBalanceArgs, 'id' | 'subgraphError'>>;
  bnb_assetBalances?: Resolver<Array<ResolversTypes['bnb_AssetBalance']>, ParentType, ContextType, RequireFields<Querybnb_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_router?: Resolver<Maybe<ResolversTypes['bnb_Router']>, ParentType, ContextType, RequireFields<Querybnb_routerArgs, 'id' | 'subgraphError'>>;
  bnb_routers?: Resolver<Array<ResolversTypes['bnb_Router']>, ParentType, ContextType, RequireFields<Querybnb_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_setting?: Resolver<Maybe<ResolversTypes['bnb_Setting']>, ParentType, ContextType, RequireFields<Querybnb_settingArgs, 'id' | 'subgraphError'>>;
  bnb_settings?: Resolver<Array<ResolversTypes['bnb_Setting']>, ParentType, ContextType, RequireFields<Querybnb_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_relayer?: Resolver<Maybe<ResolversTypes['bnb_Relayer']>, ParentType, ContextType, RequireFields<Querybnb_relayerArgs, 'id' | 'subgraphError'>>;
  bnb_relayers?: Resolver<Array<ResolversTypes['bnb_Relayer']>, ParentType, ContextType, RequireFields<Querybnb_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_sequencer?: Resolver<Maybe<ResolversTypes['bnb_Sequencer']>, ParentType, ContextType, RequireFields<Querybnb_sequencerArgs, 'id' | 'subgraphError'>>;
  bnb_sequencers?: Resolver<Array<ResolversTypes['bnb_Sequencer']>, ParentType, ContextType, RequireFields<Querybnb_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_originTransfer?: Resolver<Maybe<ResolversTypes['bnb_OriginTransfer']>, ParentType, ContextType, RequireFields<Querybnb_originTransferArgs, 'id' | 'subgraphError'>>;
  bnb_originTransfers?: Resolver<Array<ResolversTypes['bnb_OriginTransfer']>, ParentType, ContextType, RequireFields<Querybnb_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_destinationTransfer?: Resolver<Maybe<ResolversTypes['bnb_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querybnb_destinationTransferArgs, 'id' | 'subgraphError'>>;
  bnb_destinationTransfers?: Resolver<Array<ResolversTypes['bnb_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querybnb_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_originMessage?: Resolver<Maybe<ResolversTypes['bnb_OriginMessage']>, ParentType, ContextType, RequireFields<Querybnb_originMessageArgs, 'id' | 'subgraphError'>>;
  bnb_originMessages?: Resolver<Array<ResolversTypes['bnb_OriginMessage']>, ParentType, ContextType, RequireFields<Querybnb_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_aggregateRoot?: Resolver<Maybe<ResolversTypes['bnb_AggregateRoot']>, ParentType, ContextType, RequireFields<Querybnb_aggregateRootArgs, 'id' | 'subgraphError'>>;
  bnb_aggregateRoots?: Resolver<Array<ResolversTypes['bnb_AggregateRoot']>, ParentType, ContextType, RequireFields<Querybnb_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_connectorMeta?: Resolver<Maybe<ResolversTypes['bnb_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querybnb_connectorMetaArgs, 'id' | 'subgraphError'>>;
  bnb_connectorMetas?: Resolver<Array<ResolversTypes['bnb_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querybnb_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_rootCount?: Resolver<Maybe<ResolversTypes['bnb_RootCount']>, ParentType, ContextType, RequireFields<Querybnb_rootCountArgs, 'id' | 'subgraphError'>>;
  bnb_rootCounts?: Resolver<Array<ResolversTypes['bnb_RootCount']>, ParentType, ContextType, RequireFields<Querybnb_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_rootMessageSent?: Resolver<Maybe<ResolversTypes['bnb_RootMessageSent']>, ParentType, ContextType, RequireFields<Querybnb_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  bnb_rootMessageSents?: Resolver<Array<ResolversTypes['bnb_RootMessageSent']>, ParentType, ContextType, RequireFields<Querybnb_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb__meta?: Resolver<Maybe<ResolversTypes['bnb__Meta_']>, ParentType, ContextType, Partial<Querybnb__metaArgs>>;
  mainnet_asset?: Resolver<Maybe<ResolversTypes['mainnet_Asset']>, ParentType, ContextType, RequireFields<Querymainnet_assetArgs, 'id' | 'subgraphError'>>;
  mainnet_assets?: Resolver<Array<ResolversTypes['mainnet_Asset']>, ParentType, ContextType, RequireFields<Querymainnet_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_assetStatus?: Resolver<Maybe<ResolversTypes['mainnet_AssetStatus']>, ParentType, ContextType, RequireFields<Querymainnet_assetStatusArgs, 'id' | 'subgraphError'>>;
  mainnet_assetStatuses?: Resolver<Array<ResolversTypes['mainnet_AssetStatus']>, ParentType, ContextType, RequireFields<Querymainnet_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_assetBalance?: Resolver<Maybe<ResolversTypes['mainnet_AssetBalance']>, ParentType, ContextType, RequireFields<Querymainnet_assetBalanceArgs, 'id' | 'subgraphError'>>;
  mainnet_assetBalances?: Resolver<Array<ResolversTypes['mainnet_AssetBalance']>, ParentType, ContextType, RequireFields<Querymainnet_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_router?: Resolver<Maybe<ResolversTypes['mainnet_Router']>, ParentType, ContextType, RequireFields<Querymainnet_routerArgs, 'id' | 'subgraphError'>>;
  mainnet_routers?: Resolver<Array<ResolversTypes['mainnet_Router']>, ParentType, ContextType, RequireFields<Querymainnet_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_setting?: Resolver<Maybe<ResolversTypes['mainnet_Setting']>, ParentType, ContextType, RequireFields<Querymainnet_settingArgs, 'id' | 'subgraphError'>>;
  mainnet_settings?: Resolver<Array<ResolversTypes['mainnet_Setting']>, ParentType, ContextType, RequireFields<Querymainnet_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_relayer?: Resolver<Maybe<ResolversTypes['mainnet_Relayer']>, ParentType, ContextType, RequireFields<Querymainnet_relayerArgs, 'id' | 'subgraphError'>>;
  mainnet_relayers?: Resolver<Array<ResolversTypes['mainnet_Relayer']>, ParentType, ContextType, RequireFields<Querymainnet_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_sequencer?: Resolver<Maybe<ResolversTypes['mainnet_Sequencer']>, ParentType, ContextType, RequireFields<Querymainnet_sequencerArgs, 'id' | 'subgraphError'>>;
  mainnet_sequencers?: Resolver<Array<ResolversTypes['mainnet_Sequencer']>, ParentType, ContextType, RequireFields<Querymainnet_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_originTransfer?: Resolver<Maybe<ResolversTypes['mainnet_OriginTransfer']>, ParentType, ContextType, RequireFields<Querymainnet_originTransferArgs, 'id' | 'subgraphError'>>;
  mainnet_originTransfers?: Resolver<Array<ResolversTypes['mainnet_OriginTransfer']>, ParentType, ContextType, RequireFields<Querymainnet_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_destinationTransfer?: Resolver<Maybe<ResolversTypes['mainnet_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querymainnet_destinationTransferArgs, 'id' | 'subgraphError'>>;
  mainnet_destinationTransfers?: Resolver<Array<ResolversTypes['mainnet_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querymainnet_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_originMessage?: Resolver<Maybe<ResolversTypes['mainnet_OriginMessage']>, ParentType, ContextType, RequireFields<Querymainnet_originMessageArgs, 'id' | 'subgraphError'>>;
  mainnet_originMessages?: Resolver<Array<ResolversTypes['mainnet_OriginMessage']>, ParentType, ContextType, RequireFields<Querymainnet_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_aggregateRoot?: Resolver<Maybe<ResolversTypes['mainnet_AggregateRoot']>, ParentType, ContextType, RequireFields<Querymainnet_aggregateRootArgs, 'id' | 'subgraphError'>>;
  mainnet_aggregateRoots?: Resolver<Array<ResolversTypes['mainnet_AggregateRoot']>, ParentType, ContextType, RequireFields<Querymainnet_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_connectorMeta?: Resolver<Maybe<ResolversTypes['mainnet_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_connectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_connectorMetas?: Resolver<Array<ResolversTypes['mainnet_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querymainnet_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootCount?: Resolver<Maybe<ResolversTypes['mainnet_RootCount']>, ParentType, ContextType, RequireFields<Querymainnet_rootCountArgs, 'id' | 'subgraphError'>>;
  mainnet_rootCounts?: Resolver<Array<ResolversTypes['mainnet_RootCount']>, ParentType, ContextType, RequireFields<Querymainnet_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootMessageSent?: Resolver<Maybe<ResolversTypes['mainnet_RootMessageSent']>, ParentType, ContextType, RequireFields<Querymainnet_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  mainnet_rootMessageSents?: Resolver<Array<ResolversTypes['mainnet_RootMessageSent']>, ParentType, ContextType, RequireFields<Querymainnet_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_asset?: Resolver<Maybe<ResolversTypes['polygon_Asset']>, ParentType, ContextType, RequireFields<Querypolygon_assetArgs, 'id' | 'subgraphError'>>;
  polygon_assets?: Resolver<Array<ResolversTypes['polygon_Asset']>, ParentType, ContextType, RequireFields<Querypolygon_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_assetStatus?: Resolver<Maybe<ResolversTypes['polygon_AssetStatus']>, ParentType, ContextType, RequireFields<Querypolygon_assetStatusArgs, 'id' | 'subgraphError'>>;
  polygon_assetStatuses?: Resolver<Array<ResolversTypes['polygon_AssetStatus']>, ParentType, ContextType, RequireFields<Querypolygon_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_assetBalance?: Resolver<Maybe<ResolversTypes['polygon_AssetBalance']>, ParentType, ContextType, RequireFields<Querypolygon_assetBalanceArgs, 'id' | 'subgraphError'>>;
  polygon_assetBalances?: Resolver<Array<ResolversTypes['polygon_AssetBalance']>, ParentType, ContextType, RequireFields<Querypolygon_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_router?: Resolver<Maybe<ResolversTypes['polygon_Router']>, ParentType, ContextType, RequireFields<Querypolygon_routerArgs, 'id' | 'subgraphError'>>;
  polygon_routers?: Resolver<Array<ResolversTypes['polygon_Router']>, ParentType, ContextType, RequireFields<Querypolygon_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_setting?: Resolver<Maybe<ResolversTypes['polygon_Setting']>, ParentType, ContextType, RequireFields<Querypolygon_settingArgs, 'id' | 'subgraphError'>>;
  polygon_settings?: Resolver<Array<ResolversTypes['polygon_Setting']>, ParentType, ContextType, RequireFields<Querypolygon_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_relayer?: Resolver<Maybe<ResolversTypes['polygon_Relayer']>, ParentType, ContextType, RequireFields<Querypolygon_relayerArgs, 'id' | 'subgraphError'>>;
  polygon_relayers?: Resolver<Array<ResolversTypes['polygon_Relayer']>, ParentType, ContextType, RequireFields<Querypolygon_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_sequencer?: Resolver<Maybe<ResolversTypes['polygon_Sequencer']>, ParentType, ContextType, RequireFields<Querypolygon_sequencerArgs, 'id' | 'subgraphError'>>;
  polygon_sequencers?: Resolver<Array<ResolversTypes['polygon_Sequencer']>, ParentType, ContextType, RequireFields<Querypolygon_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_originTransfer?: Resolver<Maybe<ResolversTypes['polygon_OriginTransfer']>, ParentType, ContextType, RequireFields<Querypolygon_originTransferArgs, 'id' | 'subgraphError'>>;
  polygon_originTransfers?: Resolver<Array<ResolversTypes['polygon_OriginTransfer']>, ParentType, ContextType, RequireFields<Querypolygon_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_destinationTransfer?: Resolver<Maybe<ResolversTypes['polygon_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querypolygon_destinationTransferArgs, 'id' | 'subgraphError'>>;
  polygon_destinationTransfers?: Resolver<Array<ResolversTypes['polygon_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querypolygon_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_originMessage?: Resolver<Maybe<ResolversTypes['polygon_OriginMessage']>, ParentType, ContextType, RequireFields<Querypolygon_originMessageArgs, 'id' | 'subgraphError'>>;
  polygon_originMessages?: Resolver<Array<ResolversTypes['polygon_OriginMessage']>, ParentType, ContextType, RequireFields<Querypolygon_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_aggregateRoot?: Resolver<Maybe<ResolversTypes['polygon_AggregateRoot']>, ParentType, ContextType, RequireFields<Querypolygon_aggregateRootArgs, 'id' | 'subgraphError'>>;
  polygon_aggregateRoots?: Resolver<Array<ResolversTypes['polygon_AggregateRoot']>, ParentType, ContextType, RequireFields<Querypolygon_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_connectorMeta?: Resolver<Maybe<ResolversTypes['polygon_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querypolygon_connectorMetaArgs, 'id' | 'subgraphError'>>;
  polygon_connectorMetas?: Resolver<Array<ResolversTypes['polygon_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querypolygon_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_rootCount?: Resolver<Maybe<ResolversTypes['polygon_RootCount']>, ParentType, ContextType, RequireFields<Querypolygon_rootCountArgs, 'id' | 'subgraphError'>>;
  polygon_rootCounts?: Resolver<Array<ResolversTypes['polygon_RootCount']>, ParentType, ContextType, RequireFields<Querypolygon_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_rootMessageSent?: Resolver<Maybe<ResolversTypes['polygon_RootMessageSent']>, ParentType, ContextType, RequireFields<Querypolygon_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  polygon_rootMessageSents?: Resolver<Array<ResolversTypes['polygon_RootMessageSent']>, ParentType, ContextType, RequireFields<Querypolygon_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon__meta?: Resolver<Maybe<ResolversTypes['polygon__Meta_']>, ParentType, ContextType, Partial<Querypolygon__metaArgs>>;
  xdai_asset?: Resolver<Maybe<ResolversTypes['xdai_Asset']>, ParentType, ContextType, RequireFields<Queryxdai_assetArgs, 'id' | 'subgraphError'>>;
  xdai_assets?: Resolver<Array<ResolversTypes['xdai_Asset']>, ParentType, ContextType, RequireFields<Queryxdai_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_assetStatus?: Resolver<Maybe<ResolversTypes['xdai_AssetStatus']>, ParentType, ContextType, RequireFields<Queryxdai_assetStatusArgs, 'id' | 'subgraphError'>>;
  xdai_assetStatuses?: Resolver<Array<ResolversTypes['xdai_AssetStatus']>, ParentType, ContextType, RequireFields<Queryxdai_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_assetBalance?: Resolver<Maybe<ResolversTypes['xdai_AssetBalance']>, ParentType, ContextType, RequireFields<Queryxdai_assetBalanceArgs, 'id' | 'subgraphError'>>;
  xdai_assetBalances?: Resolver<Array<ResolversTypes['xdai_AssetBalance']>, ParentType, ContextType, RequireFields<Queryxdai_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_router?: Resolver<Maybe<ResolversTypes['xdai_Router']>, ParentType, ContextType, RequireFields<Queryxdai_routerArgs, 'id' | 'subgraphError'>>;
  xdai_routers?: Resolver<Array<ResolversTypes['xdai_Router']>, ParentType, ContextType, RequireFields<Queryxdai_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_setting?: Resolver<Maybe<ResolversTypes['xdai_Setting']>, ParentType, ContextType, RequireFields<Queryxdai_settingArgs, 'id' | 'subgraphError'>>;
  xdai_settings?: Resolver<Array<ResolversTypes['xdai_Setting']>, ParentType, ContextType, RequireFields<Queryxdai_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_relayer?: Resolver<Maybe<ResolversTypes['xdai_Relayer']>, ParentType, ContextType, RequireFields<Queryxdai_relayerArgs, 'id' | 'subgraphError'>>;
  xdai_relayers?: Resolver<Array<ResolversTypes['xdai_Relayer']>, ParentType, ContextType, RequireFields<Queryxdai_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_sequencer?: Resolver<Maybe<ResolversTypes['xdai_Sequencer']>, ParentType, ContextType, RequireFields<Queryxdai_sequencerArgs, 'id' | 'subgraphError'>>;
  xdai_sequencers?: Resolver<Array<ResolversTypes['xdai_Sequencer']>, ParentType, ContextType, RequireFields<Queryxdai_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_originTransfer?: Resolver<Maybe<ResolversTypes['xdai_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryxdai_originTransferArgs, 'id' | 'subgraphError'>>;
  xdai_originTransfers?: Resolver<Array<ResolversTypes['xdai_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryxdai_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_destinationTransfer?: Resolver<Maybe<ResolversTypes['xdai_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryxdai_destinationTransferArgs, 'id' | 'subgraphError'>>;
  xdai_destinationTransfers?: Resolver<Array<ResolversTypes['xdai_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryxdai_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_originMessage?: Resolver<Maybe<ResolversTypes['xdai_OriginMessage']>, ParentType, ContextType, RequireFields<Queryxdai_originMessageArgs, 'id' | 'subgraphError'>>;
  xdai_originMessages?: Resolver<Array<ResolversTypes['xdai_OriginMessage']>, ParentType, ContextType, RequireFields<Queryxdai_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_aggregateRoot?: Resolver<Maybe<ResolversTypes['xdai_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryxdai_aggregateRootArgs, 'id' | 'subgraphError'>>;
  xdai_aggregateRoots?: Resolver<Array<ResolversTypes['xdai_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryxdai_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_connectorMeta?: Resolver<Maybe<ResolversTypes['xdai_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryxdai_connectorMetaArgs, 'id' | 'subgraphError'>>;
  xdai_connectorMetas?: Resolver<Array<ResolversTypes['xdai_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryxdai_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_rootCount?: Resolver<Maybe<ResolversTypes['xdai_RootCount']>, ParentType, ContextType, RequireFields<Queryxdai_rootCountArgs, 'id' | 'subgraphError'>>;
  xdai_rootCounts?: Resolver<Array<ResolversTypes['xdai_RootCount']>, ParentType, ContextType, RequireFields<Queryxdai_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_rootMessageSent?: Resolver<Maybe<ResolversTypes['xdai_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryxdai_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  xdai_rootMessageSents?: Resolver<Array<ResolversTypes['xdai_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryxdai_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai__meta?: Resolver<Maybe<ResolversTypes['xdai__Meta_']>, ParentType, ContextType, Partial<Queryxdai__metaArgs>>;
  arbitrumone_asset?: Resolver<Maybe<ResolversTypes['arbitrumone_Asset']>, ParentType, ContextType, RequireFields<Queryarbitrumone_assetArgs, 'id' | 'subgraphError'>>;
  arbitrumone_assets?: Resolver<Array<ResolversTypes['arbitrumone_Asset']>, ParentType, ContextType, RequireFields<Queryarbitrumone_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_assetStatus?: Resolver<Maybe<ResolversTypes['arbitrumone_AssetStatus']>, ParentType, ContextType, RequireFields<Queryarbitrumone_assetStatusArgs, 'id' | 'subgraphError'>>;
  arbitrumone_assetStatuses?: Resolver<Array<ResolversTypes['arbitrumone_AssetStatus']>, ParentType, ContextType, RequireFields<Queryarbitrumone_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_assetBalance?: Resolver<Maybe<ResolversTypes['arbitrumone_AssetBalance']>, ParentType, ContextType, RequireFields<Queryarbitrumone_assetBalanceArgs, 'id' | 'subgraphError'>>;
  arbitrumone_assetBalances?: Resolver<Array<ResolversTypes['arbitrumone_AssetBalance']>, ParentType, ContextType, RequireFields<Queryarbitrumone_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_router?: Resolver<Maybe<ResolversTypes['arbitrumone_Router']>, ParentType, ContextType, RequireFields<Queryarbitrumone_routerArgs, 'id' | 'subgraphError'>>;
  arbitrumone_routers?: Resolver<Array<ResolversTypes['arbitrumone_Router']>, ParentType, ContextType, RequireFields<Queryarbitrumone_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_setting?: Resolver<Maybe<ResolversTypes['arbitrumone_Setting']>, ParentType, ContextType, RequireFields<Queryarbitrumone_settingArgs, 'id' | 'subgraphError'>>;
  arbitrumone_settings?: Resolver<Array<ResolversTypes['arbitrumone_Setting']>, ParentType, ContextType, RequireFields<Queryarbitrumone_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_relayer?: Resolver<Maybe<ResolversTypes['arbitrumone_Relayer']>, ParentType, ContextType, RequireFields<Queryarbitrumone_relayerArgs, 'id' | 'subgraphError'>>;
  arbitrumone_relayers?: Resolver<Array<ResolversTypes['arbitrumone_Relayer']>, ParentType, ContextType, RequireFields<Queryarbitrumone_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_sequencer?: Resolver<Maybe<ResolversTypes['arbitrumone_Sequencer']>, ParentType, ContextType, RequireFields<Queryarbitrumone_sequencerArgs, 'id' | 'subgraphError'>>;
  arbitrumone_sequencers?: Resolver<Array<ResolversTypes['arbitrumone_Sequencer']>, ParentType, ContextType, RequireFields<Queryarbitrumone_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_originTransfer?: Resolver<Maybe<ResolversTypes['arbitrumone_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryarbitrumone_originTransferArgs, 'id' | 'subgraphError'>>;
  arbitrumone_originTransfers?: Resolver<Array<ResolversTypes['arbitrumone_OriginTransfer']>, ParentType, ContextType, RequireFields<Queryarbitrumone_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_destinationTransfer?: Resolver<Maybe<ResolversTypes['arbitrumone_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryarbitrumone_destinationTransferArgs, 'id' | 'subgraphError'>>;
  arbitrumone_destinationTransfers?: Resolver<Array<ResolversTypes['arbitrumone_DestinationTransfer']>, ParentType, ContextType, RequireFields<Queryarbitrumone_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_originMessage?: Resolver<Maybe<ResolversTypes['arbitrumone_OriginMessage']>, ParentType, ContextType, RequireFields<Queryarbitrumone_originMessageArgs, 'id' | 'subgraphError'>>;
  arbitrumone_originMessages?: Resolver<Array<ResolversTypes['arbitrumone_OriginMessage']>, ParentType, ContextType, RequireFields<Queryarbitrumone_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_aggregateRoot?: Resolver<Maybe<ResolversTypes['arbitrumone_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryarbitrumone_aggregateRootArgs, 'id' | 'subgraphError'>>;
  arbitrumone_aggregateRoots?: Resolver<Array<ResolversTypes['arbitrumone_AggregateRoot']>, ParentType, ContextType, RequireFields<Queryarbitrumone_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_connectorMeta?: Resolver<Maybe<ResolversTypes['arbitrumone_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryarbitrumone_connectorMetaArgs, 'id' | 'subgraphError'>>;
  arbitrumone_connectorMetas?: Resolver<Array<ResolversTypes['arbitrumone_ConnectorMeta']>, ParentType, ContextType, RequireFields<Queryarbitrumone_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_rootCount?: Resolver<Maybe<ResolversTypes['arbitrumone_RootCount']>, ParentType, ContextType, RequireFields<Queryarbitrumone_rootCountArgs, 'id' | 'subgraphError'>>;
  arbitrumone_rootCounts?: Resolver<Array<ResolversTypes['arbitrumone_RootCount']>, ParentType, ContextType, RequireFields<Queryarbitrumone_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_rootMessageSent?: Resolver<Maybe<ResolversTypes['arbitrumone_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  arbitrumone_rootMessageSents?: Resolver<Array<ResolversTypes['arbitrumone_RootMessageSent']>, ParentType, ContextType, RequireFields<Queryarbitrumone_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone__meta?: Resolver<Maybe<ResolversTypes['arbitrumone__Meta_']>, ParentType, ContextType, Partial<Queryarbitrumone__metaArgs>>;
  staginggoerli_asset?: Resolver<Maybe<ResolversTypes['staginggoerli_Asset']>, ParentType, ContextType, RequireFields<Querystaginggoerli_assetArgs, 'id' | 'subgraphError'>>;
  staginggoerli_assets?: Resolver<Array<ResolversTypes['staginggoerli_Asset']>, ParentType, ContextType, RequireFields<Querystaginggoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_assetBalance?: Resolver<Maybe<ResolversTypes['staginggoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querystaginggoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  staginggoerli_assetBalances?: Resolver<Array<ResolversTypes['staginggoerli_AssetBalance']>, ParentType, ContextType, RequireFields<Querystaginggoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_router?: Resolver<Maybe<ResolversTypes['staginggoerli_Router']>, ParentType, ContextType, RequireFields<Querystaginggoerli_routerArgs, 'id' | 'subgraphError'>>;
  staginggoerli_routers?: Resolver<Array<ResolversTypes['staginggoerli_Router']>, ParentType, ContextType, RequireFields<Querystaginggoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_setting?: Resolver<Maybe<ResolversTypes['staginggoerli_Setting']>, ParentType, ContextType, RequireFields<Querystaginggoerli_settingArgs, 'id' | 'subgraphError'>>;
  staginggoerli_settings?: Resolver<Array<ResolversTypes['staginggoerli_Setting']>, ParentType, ContextType, RequireFields<Querystaginggoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_relayer?: Resolver<Maybe<ResolversTypes['staginggoerli_Relayer']>, ParentType, ContextType, RequireFields<Querystaginggoerli_relayerArgs, 'id' | 'subgraphError'>>;
  staginggoerli_relayers?: Resolver<Array<ResolversTypes['staginggoerli_Relayer']>, ParentType, ContextType, RequireFields<Querystaginggoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_transferRelayerFee?: Resolver<Maybe<ResolversTypes['staginggoerli_TransferRelayerFee']>, ParentType, ContextType, RequireFields<Querystaginggoerli_transferRelayerFeeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_transferRelayerFees?: Resolver<Array<ResolversTypes['staginggoerli_TransferRelayerFee']>, ParentType, ContextType, RequireFields<Querystaginggoerli_transferRelayerFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_sequencer?: Resolver<Maybe<ResolversTypes['staginggoerli_Sequencer']>, ParentType, ContextType, RequireFields<Querystaginggoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  staginggoerli_sequencers?: Resolver<Array<ResolversTypes['staginggoerli_Sequencer']>, ParentType, ContextType, RequireFields<Querystaginggoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_originTransfer?: Resolver<Maybe<ResolversTypes['staginggoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querystaginggoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  staginggoerli_originTransfers?: Resolver<Array<ResolversTypes['staginggoerli_OriginTransfer']>, ParentType, ContextType, RequireFields<Querystaginggoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_destinationTransfer?: Resolver<Maybe<ResolversTypes['staginggoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querystaginggoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  staginggoerli_destinationTransfers?: Resolver<Array<ResolversTypes['staginggoerli_DestinationTransfer']>, ParentType, ContextType, RequireFields<Querystaginggoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_originMessage?: Resolver<Maybe<ResolversTypes['staginggoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Querystaginggoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  staginggoerli_originMessages?: Resolver<Array<ResolversTypes['staginggoerli_OriginMessage']>, ParentType, ContextType, RequireFields<Querystaginggoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_aggregateRoot?: Resolver<Maybe<ResolversTypes['staginggoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Querystaginggoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  staginggoerli_aggregateRoots?: Resolver<Array<ResolversTypes['staginggoerli_AggregateRoot']>, ParentType, ContextType, RequireFields<Querystaginggoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_connectorMeta?: Resolver<Maybe<ResolversTypes['staginggoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_connectorMetas?: Resolver<Array<ResolversTypes['staginggoerli_ConnectorMeta']>, ParentType, ContextType, RequireFields<Querystaginggoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootCount?: Resolver<Maybe<ResolversTypes['staginggoerli_RootCount']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootCounts?: Resolver<Array<ResolversTypes['staginggoerli_RootCount']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootMessageSent?: Resolver<Maybe<ResolversTypes['staginggoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootMessageSents?: Resolver<Array<ResolversTypes['staginggoerli_RootMessageSent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwap?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwaps?: Resolver<Array<ResolversTypes['staginggoerli_StableSwap']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_pooledToken?: Resolver<Maybe<ResolversTypes['staginggoerli_PooledToken']>, ParentType, ContextType, RequireFields<Querystaginggoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  staginggoerli_pooledTokens?: Resolver<Array<ResolversTypes['staginggoerli_PooledToken']>, ParentType, ContextType, RequireFields<Querystaginggoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapAddLiquidityEvent?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapAddLiquidityEvents?: Resolver<Array<ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapRemoveLiquidityEvent?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapRemoveLiquidityEvents?: Resolver<Array<ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapExchange?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapExchanges?: Resolver<Array<ResolversTypes['staginggoerli_StableSwapExchange']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapDailyVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapDailyVolumes?: Resolver<Array<ResolversTypes['staginggoerli_SwapDailyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapHourlyVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapHourlyVolumes?: Resolver<Array<ResolversTypes['staginggoerli_SwapHourlyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapWeeklyVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapWeeklyVolumes?: Resolver<Array<ResolversTypes['staginggoerli_SwapWeeklyVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapEvent?: Resolver<Maybe<ResolversTypes['staginggoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapEvents?: Resolver<Array<ResolversTypes['staginggoerli_StableSwapEvent']>, ParentType, ContextType, RequireFields<Querystaginggoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapTradeVolume?: Resolver<Maybe<ResolversTypes['staginggoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapTradeVolumes?: Resolver<Array<ResolversTypes['staginggoerli_SwapTradeVolume']>, ParentType, ContextType, RequireFields<Querystaginggoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
}>;

export type SubscriptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = ResolversObject<{
  polygon_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_SystemInfo']>, "polygon_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  polygon_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_SystemInfo']>, "polygon_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_PooledToken']>, "polygon_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  polygon_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_PooledToken']>, "polygon_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_StableSwap']>, "polygon_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_StableSwap']>, "polygon_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_StableSwapAddLiquidityEvent']>, "polygon_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_StableSwapAddLiquidityEvent']>, "polygon_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_StableSwapRemoveLiquidityEvent']>, "polygon_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_StableSwapRemoveLiquidityEvent']>, "polygon_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_StableSwapExchange']>, "polygon_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_StableSwapExchange']>, "polygon_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_SwapDailyVolume']>, "polygon_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_SwapDailyVolume']>, "polygon_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_SwapHourlyVolume']>, "polygon_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_SwapHourlyVolume']>, "polygon_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_SwapWeeklyVolume']>, "polygon_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_SwapWeeklyVolume']>, "polygon_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_StableSwapEvent']>, "polygon_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  polygon_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_StableSwapEvent']>, "polygon_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap_SwapTradeVolume']>, "polygon_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  polygon_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['polygon_swap_SwapTradeVolume']>, "polygon_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionpolygon_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['polygon_swap__Meta_']>, "polygon_swap__meta", ParentType, ContextType, Partial<Subscriptionpolygon_swap__metaArgs>>;
  optimismgoerli_asset?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_Asset']>, "optimismgoerli_asset", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_assetArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_assets?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_Asset']>, "optimismgoerli_assets", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_AssetStatus']>, "optimismgoerli_assetStatus", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_AssetStatus']>, "optimismgoerli_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_AssetBalance']>, "optimismgoerli_assetBalance", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_assetBalances?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_AssetBalance']>, "optimismgoerli_assetBalances", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_router?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_Router']>, "optimismgoerli_router", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_routerArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_routers?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_Router']>, "optimismgoerli_routers", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_setting?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_Setting']>, "optimismgoerli_setting", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_settingArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_settings?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_Setting']>, "optimismgoerli_settings", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_relayer?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_Relayer']>, "optimismgoerli_relayer", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_relayers?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_Relayer']>, "optimismgoerli_relayers", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_Sequencer']>, "optimismgoerli_sequencer", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_sequencers?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_Sequencer']>, "optimismgoerli_sequencers", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_OriginTransfer']>, "optimismgoerli_originTransfer", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_originTransfers?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_OriginTransfer']>, "optimismgoerli_originTransfers", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_DestinationTransfer']>, "optimismgoerli_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_DestinationTransfer']>, "optimismgoerli_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_OriginMessage']>, "optimismgoerli_originMessage", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_originMessages?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_OriginMessage']>, "optimismgoerli_originMessages", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_AggregateRoot']>, "optimismgoerli_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_AggregateRoot']>, "optimismgoerli_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_ConnectorMeta']>, "optimismgoerli_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_ConnectorMeta']>, "optimismgoerli_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_RootCount']>, "optimismgoerli_rootCount", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_rootCounts?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_RootCount']>, "optimismgoerli_rootCounts", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_RootMessageSent']>, "optimismgoerli_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_RootMessageSent']>, "optimismgoerli_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli__Meta_']>, "optimismgoerli__meta", ParentType, ContextType, Partial<Subscriptionoptimismgoerli__metaArgs>>;
  stagingarbitrumgoerli_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SystemInfo']>, "stagingarbitrumgoerli_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SystemInfo']>, "stagingarbitrumgoerli_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_PooledToken']>, "stagingarbitrumgoerli_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_PooledToken']>, "stagingarbitrumgoerli_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap']>, "stagingarbitrumgoerli_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap']>, "stagingarbitrumgoerli_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent']>, "stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent']>, "stagingarbitrumgoerli_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']>, "stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']>, "stagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapExchange']>, "stagingarbitrumgoerli_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapExchange']>, "stagingarbitrumgoerli_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SwapDailyVolume']>, "stagingarbitrumgoerli_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapDailyVolume']>, "stagingarbitrumgoerli_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SwapHourlyVolume']>, "stagingarbitrumgoerli_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapHourlyVolume']>, "stagingarbitrumgoerli_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SwapWeeklyVolume']>, "stagingarbitrumgoerli_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapWeeklyVolume']>, "stagingarbitrumgoerli_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapEvent']>, "stagingarbitrumgoerli_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapEvent']>, "stagingarbitrumgoerli_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_SwapTradeVolume']>, "stagingarbitrumgoerli_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapTradeVolume']>, "stagingarbitrumgoerli_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap__Meta_']>, "stagingarbitrumgoerli_swap__meta", ParentType, ContextType, Partial<Subscriptionstagingarbitrumgoerli_swap__metaArgs>>;
  arbitrumgoerli_asset?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_Asset']>, "arbitrumgoerli_asset", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_assetArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_assets?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_Asset']>, "arbitrumgoerli_assets", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_AssetStatus']>, "arbitrumgoerli_assetStatus", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_AssetStatus']>, "arbitrumgoerli_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_AssetBalance']>, "arbitrumgoerli_assetBalance", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_assetBalances?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_AssetBalance']>, "arbitrumgoerli_assetBalances", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_router?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_Router']>, "arbitrumgoerli_router", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_routerArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_routers?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_Router']>, "arbitrumgoerli_routers", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_setting?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_Setting']>, "arbitrumgoerli_setting", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_settingArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_settings?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_Setting']>, "arbitrumgoerli_settings", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_relayer?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_Relayer']>, "arbitrumgoerli_relayer", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_relayers?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_Relayer']>, "arbitrumgoerli_relayers", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_Sequencer']>, "arbitrumgoerli_sequencer", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_sequencers?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_Sequencer']>, "arbitrumgoerli_sequencers", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_OriginTransfer']>, "arbitrumgoerli_originTransfer", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_originTransfers?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_OriginTransfer']>, "arbitrumgoerli_originTransfers", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_DestinationTransfer']>, "arbitrumgoerli_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_DestinationTransfer']>, "arbitrumgoerli_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_OriginMessage']>, "arbitrumgoerli_originMessage", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_originMessages?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_OriginMessage']>, "arbitrumgoerli_originMessages", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_AggregateRoot']>, "arbitrumgoerli_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_AggregateRoot']>, "arbitrumgoerli_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_ConnectorMeta']>, "arbitrumgoerli_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_ConnectorMeta']>, "arbitrumgoerli_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_RootCount']>, "arbitrumgoerli_rootCount", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_rootCounts?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_RootCount']>, "arbitrumgoerli_rootCounts", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_RootMessageSent']>, "arbitrumgoerli_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_RootMessageSent']>, "arbitrumgoerli_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli__Meta_']>, "arbitrumgoerli__meta", ParentType, ContextType, Partial<Subscriptionarbitrumgoerli__metaArgs>>;
  stagingoptimismgoerli_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SystemInfo']>, "stagingoptimismgoerli_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SystemInfo']>, "stagingoptimismgoerli_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_PooledToken']>, "stagingoptimismgoerli_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_PooledToken']>, "stagingoptimismgoerli_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwap']>, "stagingoptimismgoerli_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwap']>, "stagingoptimismgoerli_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent']>, "stagingoptimismgoerli_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent']>, "stagingoptimismgoerli_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent']>, "stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent']>, "stagingoptimismgoerli_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwapExchange']>, "stagingoptimismgoerli_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapExchange']>, "stagingoptimismgoerli_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SwapDailyVolume']>, "stagingoptimismgoerli_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapDailyVolume']>, "stagingoptimismgoerli_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SwapHourlyVolume']>, "stagingoptimismgoerli_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapHourlyVolume']>, "stagingoptimismgoerli_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SwapWeeklyVolume']>, "stagingoptimismgoerli_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapWeeklyVolume']>, "stagingoptimismgoerli_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_StableSwapEvent']>, "stagingoptimismgoerli_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapEvent']>, "stagingoptimismgoerli_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_SwapTradeVolume']>, "stagingoptimismgoerli_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapTradeVolume']>, "stagingoptimismgoerli_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap__Meta_']>, "stagingoptimismgoerli_swap__meta", ParentType, ContextType, Partial<Subscriptionstagingoptimismgoerli_swap__metaArgs>>;
  testgoerli_asset?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli_Asset']>, "testgoerli_asset", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_assetArgs, 'id' | 'subgraphError'>>;
  testgoerli_assets?: SubscriptionResolver<Array<ResolversTypes['testgoerli_Asset']>, "testgoerli_assets", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli_AssetBalance']>, "testgoerli_assetBalance", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  testgoerli_assetBalances?: SubscriptionResolver<Array<ResolversTypes['testgoerli_AssetBalance']>, "testgoerli_assetBalances", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_router?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli_Router']>, "testgoerli_router", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_routerArgs, 'id' | 'subgraphError'>>;
  testgoerli_routers?: SubscriptionResolver<Array<ResolversTypes['testgoerli_Router']>, "testgoerli_routers", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_setting?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli_Setting']>, "testgoerli_setting", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_settingArgs, 'id' | 'subgraphError'>>;
  testgoerli_settings?: SubscriptionResolver<Array<ResolversTypes['testgoerli_Setting']>, "testgoerli_settings", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_relayer?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli_Relayer']>, "testgoerli_relayer", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  testgoerli_relayers?: SubscriptionResolver<Array<ResolversTypes['testgoerli_Relayer']>, "testgoerli_relayers", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli_StableSwap']>, "testgoerli_stableSwap", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  testgoerli_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['testgoerli_StableSwap']>, "testgoerli_stableSwaps", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_sponsorVault?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli_SponsorVault']>, "testgoerli_sponsorVault", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_sponsorVaultArgs, 'id' | 'subgraphError'>>;
  testgoerli_sponsorVaults?: SubscriptionResolver<Array<ResolversTypes['testgoerli_SponsorVault']>, "testgoerli_sponsorVaults", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_sponsorVaultsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli_OriginTransfer']>, "testgoerli_originTransfer", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  testgoerli_originTransfers?: SubscriptionResolver<Array<ResolversTypes['testgoerli_OriginTransfer']>, "testgoerli_originTransfers", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli_DestinationTransfer']>, "testgoerli_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  testgoerli_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['testgoerli_DestinationTransfer']>, "testgoerli_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptiontestgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['testgoerli__Meta_']>, "testgoerli__meta", ParentType, ContextType, Partial<Subscriptiontestgoerli__metaArgs>>;
  xdai_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_SystemInfo']>, "xdai_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  xdai_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_SystemInfo']>, "xdai_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_PooledToken']>, "xdai_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  xdai_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_PooledToken']>, "xdai_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_StableSwap']>, "xdai_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_StableSwap']>, "xdai_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_StableSwapAddLiquidityEvent']>, "xdai_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_StableSwapAddLiquidityEvent']>, "xdai_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_StableSwapRemoveLiquidityEvent']>, "xdai_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_StableSwapRemoveLiquidityEvent']>, "xdai_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_StableSwapExchange']>, "xdai_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_StableSwapExchange']>, "xdai_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_SwapDailyVolume']>, "xdai_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_SwapDailyVolume']>, "xdai_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_SwapHourlyVolume']>, "xdai_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_SwapHourlyVolume']>, "xdai_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_SwapWeeklyVolume']>, "xdai_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_SwapWeeklyVolume']>, "xdai_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_StableSwapEvent']>, "xdai_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  xdai_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_StableSwapEvent']>, "xdai_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap_SwapTradeVolume']>, "xdai_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  xdai_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['xdai_swap_SwapTradeVolume']>, "xdai_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionxdai_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['xdai_swap__Meta_']>, "xdai_swap__meta", ParentType, ContextType, Partial<Subscriptionxdai_swap__metaArgs>>;
  staginggoerli_rootAggregated?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_RootAggregated']>, "staginggoerli_rootAggregated", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootAggregatedArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootAggregateds?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_RootAggregated']>, "staginggoerli_rootAggregateds", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootAggregatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootPropagated?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_RootPropagated']>, "staginggoerli_rootPropagated", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootPropagatedArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootPropagateds?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_RootPropagated']>, "staginggoerli_rootPropagateds", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootPropagatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_aggregatedMessageRoot?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_AggregatedMessageRoot']>, "staginggoerli_aggregatedMessageRoot", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_aggregatedMessageRootArgs, 'id' | 'subgraphError'>>;
  staginggoerli_aggregatedMessageRoots?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_AggregatedMessageRoot']>, "staginggoerli_aggregatedMessageRoots", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_aggregatedMessageRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootManagerMeta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_RootManagerMeta']>, "staginggoerli_rootManagerMeta", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootManagerMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootManagerMetas?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_RootManagerMeta']>, "staginggoerli_rootManagerMetas", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootManagerMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_polygonConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_PolygonConnectorMeta']>, "staginggoerli_polygonConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_polygonConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_polygonConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_PolygonConnectorMeta']>, "staginggoerli_polygonConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_polygonConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_optimismConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_OptimismConnectorMeta']>, "staginggoerli_optimismConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_optimismConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_optimismConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_OptimismConnectorMeta']>, "staginggoerli_optimismConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_optimismConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_bnbConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_BnbConnectorMeta']>, "staginggoerli_bnbConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_bnbConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_bnbConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_BnbConnectorMeta']>, "staginggoerli_bnbConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_bnbConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_arbitrumConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_ArbitrumConnectorMeta']>, "staginggoerli_arbitrumConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_arbitrumConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_arbitrumConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_ArbitrumConnectorMeta']>, "staginggoerli_arbitrumConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_arbitrumConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_gnosisConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_GnosisConnectorMeta']>, "staginggoerli_gnosisConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_gnosisConnectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_gnosisConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_GnosisConnectorMeta']>, "staginggoerli_gnosisConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_gnosisConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootMessageProcessed?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_RootMessageProcessed']>, "staginggoerli_rootMessageProcessed", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootMessageProcessedArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootMessageProcesseds?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_RootMessageProcessed']>, "staginggoerli_rootMessageProcesseds", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootMessageProcessedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli__Meta_']>, "staginggoerli__meta", ParentType, ContextType, Partial<Subscriptionstaginggoerli__metaArgs>>;
  mainnet_rootAggregated?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_RootAggregated']>, "mainnet_rootAggregated", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootAggregatedArgs, 'id' | 'subgraphError'>>;
  mainnet_rootAggregateds?: SubscriptionResolver<Array<ResolversTypes['mainnet_RootAggregated']>, "mainnet_rootAggregateds", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootAggregatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootPropagated?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_RootPropagated']>, "mainnet_rootPropagated", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootPropagatedArgs, 'id' | 'subgraphError'>>;
  mainnet_rootPropagateds?: SubscriptionResolver<Array<ResolversTypes['mainnet_RootPropagated']>, "mainnet_rootPropagateds", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootPropagatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_aggregatedMessageRoot?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_AggregatedMessageRoot']>, "mainnet_aggregatedMessageRoot", ParentType, ContextType, RequireFields<Subscriptionmainnet_aggregatedMessageRootArgs, 'id' | 'subgraphError'>>;
  mainnet_aggregatedMessageRoots?: SubscriptionResolver<Array<ResolversTypes['mainnet_AggregatedMessageRoot']>, "mainnet_aggregatedMessageRoots", ParentType, ContextType, RequireFields<Subscriptionmainnet_aggregatedMessageRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootManagerMeta?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_RootManagerMeta']>, "mainnet_rootManagerMeta", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootManagerMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_rootManagerMetas?: SubscriptionResolver<Array<ResolversTypes['mainnet_RootManagerMeta']>, "mainnet_rootManagerMetas", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootManagerMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_polygonConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_PolygonConnectorMeta']>, "mainnet_polygonConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionmainnet_polygonConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_polygonConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['mainnet_PolygonConnectorMeta']>, "mainnet_polygonConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionmainnet_polygonConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_optimismConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_OptimismConnectorMeta']>, "mainnet_optimismConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionmainnet_optimismConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_optimismConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['mainnet_OptimismConnectorMeta']>, "mainnet_optimismConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionmainnet_optimismConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_bnbConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_BnbConnectorMeta']>, "mainnet_bnbConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionmainnet_bnbConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_bnbConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['mainnet_BnbConnectorMeta']>, "mainnet_bnbConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionmainnet_bnbConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_arbitrumConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_ArbitrumConnectorMeta']>, "mainnet_arbitrumConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionmainnet_arbitrumConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_arbitrumConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['mainnet_ArbitrumConnectorMeta']>, "mainnet_arbitrumConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionmainnet_arbitrumConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_gnosisConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_GnosisConnectorMeta']>, "mainnet_gnosisConnectorMeta", ParentType, ContextType, RequireFields<Subscriptionmainnet_gnosisConnectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_gnosisConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['mainnet_GnosisConnectorMeta']>, "mainnet_gnosisConnectorMetas", ParentType, ContextType, RequireFields<Subscriptionmainnet_gnosisConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootMessageProcessed?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_RootMessageProcessed']>, "mainnet_rootMessageProcessed", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootMessageProcessedArgs, 'id' | 'subgraphError'>>;
  mainnet_rootMessageProcesseds?: SubscriptionResolver<Array<ResolversTypes['mainnet_RootMessageProcessed']>, "mainnet_rootMessageProcesseds", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootMessageProcessedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet__meta?: SubscriptionResolver<Maybe<ResolversTypes['mainnet__Meta_']>, "mainnet__meta", ParentType, ContextType, Partial<Subscriptionmainnet__metaArgs>>;
  testoptimismgoerli_asset?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli_Asset']>, "testoptimismgoerli_asset", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_assetArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_assets?: SubscriptionResolver<Array<ResolversTypes['testoptimismgoerli_Asset']>, "testoptimismgoerli_assets", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli_AssetBalance']>, "testoptimismgoerli_assetBalance", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_assetBalances?: SubscriptionResolver<Array<ResolversTypes['testoptimismgoerli_AssetBalance']>, "testoptimismgoerli_assetBalances", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_router?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli_Router']>, "testoptimismgoerli_router", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_routerArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_routers?: SubscriptionResolver<Array<ResolversTypes['testoptimismgoerli_Router']>, "testoptimismgoerli_routers", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_setting?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli_Setting']>, "testoptimismgoerli_setting", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_settingArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_settings?: SubscriptionResolver<Array<ResolversTypes['testoptimismgoerli_Setting']>, "testoptimismgoerli_settings", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_relayer?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli_Relayer']>, "testoptimismgoerli_relayer", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_relayers?: SubscriptionResolver<Array<ResolversTypes['testoptimismgoerli_Relayer']>, "testoptimismgoerli_relayers", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli_StableSwap']>, "testoptimismgoerli_stableSwap", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['testoptimismgoerli_StableSwap']>, "testoptimismgoerli_stableSwaps", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_sponsorVault?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli_SponsorVault']>, "testoptimismgoerli_sponsorVault", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_sponsorVaultArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_sponsorVaults?: SubscriptionResolver<Array<ResolversTypes['testoptimismgoerli_SponsorVault']>, "testoptimismgoerli_sponsorVaults", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_sponsorVaultsArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli_OriginTransfer']>, "testoptimismgoerli_originTransfer", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_originTransfers?: SubscriptionResolver<Array<ResolversTypes['testoptimismgoerli_OriginTransfer']>, "testoptimismgoerli_originTransfers", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli_DestinationTransfer']>, "testoptimismgoerli_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  testoptimismgoerli_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['testoptimismgoerli_DestinationTransfer']>, "testoptimismgoerli_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptiontestoptimismgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  testoptimismgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['testoptimismgoerli__Meta_']>, "testoptimismgoerli__meta", ParentType, ContextType, Partial<Subscriptiontestoptimismgoerli__metaArgs>>;
  optimism_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_SystemInfo']>, "optimism_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  optimism_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_SystemInfo']>, "optimism_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_PooledToken']>, "optimism_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  optimism_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_PooledToken']>, "optimism_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_StableSwap']>, "optimism_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_StableSwap']>, "optimism_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_StableSwapAddLiquidityEvent']>, "optimism_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_StableSwapAddLiquidityEvent']>, "optimism_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_StableSwapRemoveLiquidityEvent']>, "optimism_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_StableSwapRemoveLiquidityEvent']>, "optimism_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_StableSwapExchange']>, "optimism_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_StableSwapExchange']>, "optimism_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_SwapDailyVolume']>, "optimism_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_SwapDailyVolume']>, "optimism_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_SwapHourlyVolume']>, "optimism_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_SwapHourlyVolume']>, "optimism_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_SwapWeeklyVolume']>, "optimism_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_SwapWeeklyVolume']>, "optimism_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_StableSwapEvent']>, "optimism_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  optimism_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_StableSwapEvent']>, "optimism_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap_SwapTradeVolume']>, "optimism_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  optimism_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['optimism_swap_SwapTradeVolume']>, "optimism_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimism_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['optimism_swap__Meta_']>, "optimism_swap__meta", ParentType, ContextType, Partial<Subscriptionoptimism_swap__metaArgs>>;
  goerli_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_SystemInfo']>, "goerli_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  goerli_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_SystemInfo']>, "goerli_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_PooledToken']>, "goerli_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  goerli_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_PooledToken']>, "goerli_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_StableSwap']>, "goerli_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_StableSwap']>, "goerli_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_StableSwapAddLiquidityEvent']>, "goerli_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_StableSwapAddLiquidityEvent']>, "goerli_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_StableSwapRemoveLiquidityEvent']>, "goerli_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_StableSwapRemoveLiquidityEvent']>, "goerli_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_StableSwapExchange']>, "goerli_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_StableSwapExchange']>, "goerli_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_SwapDailyVolume']>, "goerli_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_SwapDailyVolume']>, "goerli_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_SwapHourlyVolume']>, "goerli_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_SwapHourlyVolume']>, "goerli_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_SwapWeeklyVolume']>, "goerli_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_SwapWeeklyVolume']>, "goerli_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_StableSwapEvent']>, "goerli_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  goerli_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_StableSwapEvent']>, "goerli_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap_SwapTradeVolume']>, "goerli_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  goerli_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['goerli_swap_SwapTradeVolume']>, "goerli_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptiongoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['goerli_swap__Meta_']>, "goerli_swap__meta", ParentType, ContextType, Partial<Subscriptiongoerli_swap__metaArgs>>;
  optimismgoerli_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_SystemInfo']>, "optimismgoerli_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_SystemInfo']>, "optimismgoerli_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_PooledToken']>, "optimismgoerli_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_PooledToken']>, "optimismgoerli_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwap']>, "optimismgoerli_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_StableSwap']>, "optimismgoerli_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwapAddLiquidityEvent']>, "optimismgoerli_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_StableSwapAddLiquidityEvent']>, "optimismgoerli_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwapRemoveLiquidityEvent']>, "optimismgoerli_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_StableSwapRemoveLiquidityEvent']>, "optimismgoerli_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwapExchange']>, "optimismgoerli_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_StableSwapExchange']>, "optimismgoerli_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_SwapDailyVolume']>, "optimismgoerli_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_SwapDailyVolume']>, "optimismgoerli_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_SwapHourlyVolume']>, "optimismgoerli_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_SwapHourlyVolume']>, "optimismgoerli_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_SwapWeeklyVolume']>, "optimismgoerli_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_SwapWeeklyVolume']>, "optimismgoerli_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_StableSwapEvent']>, "optimismgoerli_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_StableSwapEvent']>, "optimismgoerli_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap_SwapTradeVolume']>, "optimismgoerli_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  optimismgoerli_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['optimismgoerli_swap_SwapTradeVolume']>, "optimismgoerli_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionoptimismgoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimismgoerli_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['optimismgoerli_swap__Meta_']>, "optimismgoerli_swap__meta", ParentType, ContextType, Partial<Subscriptionoptimismgoerli_swap__metaArgs>>;
  stagingmumbai_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_SystemInfo']>, "stagingmumbai_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_SystemInfo']>, "stagingmumbai_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_PooledToken']>, "stagingmumbai_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_PooledToken']>, "stagingmumbai_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwap']>, "stagingmumbai_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_StableSwap']>, "stagingmumbai_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwapAddLiquidityEvent']>, "stagingmumbai_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_StableSwapAddLiquidityEvent']>, "stagingmumbai_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwapRemoveLiquidityEvent']>, "stagingmumbai_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_StableSwapRemoveLiquidityEvent']>, "stagingmumbai_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwapExchange']>, "stagingmumbai_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_StableSwapExchange']>, "stagingmumbai_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_SwapDailyVolume']>, "stagingmumbai_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_SwapDailyVolume']>, "stagingmumbai_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_SwapHourlyVolume']>, "stagingmumbai_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_SwapHourlyVolume']>, "stagingmumbai_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_SwapWeeklyVolume']>, "stagingmumbai_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_SwapWeeklyVolume']>, "stagingmumbai_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_StableSwapEvent']>, "stagingmumbai_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_StableSwapEvent']>, "stagingmumbai_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap_SwapTradeVolume']>, "stagingmumbai_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_swap_SwapTradeVolume']>, "stagingmumbai_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_swap__Meta_']>, "stagingmumbai_swap__meta", ParentType, ContextType, Partial<Subscriptionstagingmumbai_swap__metaArgs>>;
  goerli_rootAggregated?: SubscriptionResolver<Maybe<ResolversTypes['goerli_RootAggregated']>, "goerli_rootAggregated", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootAggregatedArgs, 'id' | 'subgraphError'>>;
  goerli_rootAggregateds?: SubscriptionResolver<Array<ResolversTypes['goerli_RootAggregated']>, "goerli_rootAggregateds", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootAggregatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootPropagated?: SubscriptionResolver<Maybe<ResolversTypes['goerli_RootPropagated']>, "goerli_rootPropagated", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootPropagatedArgs, 'id' | 'subgraphError'>>;
  goerli_rootPropagateds?: SubscriptionResolver<Array<ResolversTypes['goerli_RootPropagated']>, "goerli_rootPropagateds", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootPropagatedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_aggregatedMessageRoot?: SubscriptionResolver<Maybe<ResolversTypes['goerli_AggregatedMessageRoot']>, "goerli_aggregatedMessageRoot", ParentType, ContextType, RequireFields<Subscriptiongoerli_aggregatedMessageRootArgs, 'id' | 'subgraphError'>>;
  goerli_aggregatedMessageRoots?: SubscriptionResolver<Array<ResolversTypes['goerli_AggregatedMessageRoot']>, "goerli_aggregatedMessageRoots", ParentType, ContextType, RequireFields<Subscriptiongoerli_aggregatedMessageRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootManagerMeta?: SubscriptionResolver<Maybe<ResolversTypes['goerli_RootManagerMeta']>, "goerli_rootManagerMeta", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootManagerMetaArgs, 'id' | 'subgraphError'>>;
  goerli_rootManagerMetas?: SubscriptionResolver<Array<ResolversTypes['goerli_RootManagerMeta']>, "goerli_rootManagerMetas", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootManagerMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_polygonConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['goerli_PolygonConnectorMeta']>, "goerli_polygonConnectorMeta", ParentType, ContextType, RequireFields<Subscriptiongoerli_polygonConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_polygonConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['goerli_PolygonConnectorMeta']>, "goerli_polygonConnectorMetas", ParentType, ContextType, RequireFields<Subscriptiongoerli_polygonConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_optimismConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['goerli_OptimismConnectorMeta']>, "goerli_optimismConnectorMeta", ParentType, ContextType, RequireFields<Subscriptiongoerli_optimismConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_optimismConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['goerli_OptimismConnectorMeta']>, "goerli_optimismConnectorMetas", ParentType, ContextType, RequireFields<Subscriptiongoerli_optimismConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_bnbConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['goerli_BnbConnectorMeta']>, "goerli_bnbConnectorMeta", ParentType, ContextType, RequireFields<Subscriptiongoerli_bnbConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_bnbConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['goerli_BnbConnectorMeta']>, "goerli_bnbConnectorMetas", ParentType, ContextType, RequireFields<Subscriptiongoerli_bnbConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_arbitrumConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['goerli_ArbitrumConnectorMeta']>, "goerli_arbitrumConnectorMeta", ParentType, ContextType, RequireFields<Subscriptiongoerli_arbitrumConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_arbitrumConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['goerli_ArbitrumConnectorMeta']>, "goerli_arbitrumConnectorMetas", ParentType, ContextType, RequireFields<Subscriptiongoerli_arbitrumConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_gnosisConnectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['goerli_GnosisConnectorMeta']>, "goerli_gnosisConnectorMeta", ParentType, ContextType, RequireFields<Subscriptiongoerli_gnosisConnectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_gnosisConnectorMetas?: SubscriptionResolver<Array<ResolversTypes['goerli_GnosisConnectorMeta']>, "goerli_gnosisConnectorMetas", ParentType, ContextType, RequireFields<Subscriptiongoerli_gnosisConnectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootMessageProcessed?: SubscriptionResolver<Maybe<ResolversTypes['goerli_RootMessageProcessed']>, "goerli_rootMessageProcessed", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootMessageProcessedArgs, 'id' | 'subgraphError'>>;
  goerli_rootMessageProcesseds?: SubscriptionResolver<Array<ResolversTypes['goerli_RootMessageProcessed']>, "goerli_rootMessageProcesseds", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootMessageProcessedsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['goerli__Meta_']>, "goerli__meta", ParentType, ContextType, Partial<Subscriptiongoerli__metaArgs>>;
  local1337_asset?: SubscriptionResolver<Maybe<ResolversTypes['local1337_Asset']>, "local1337_asset", ParentType, ContextType, RequireFields<Subscriptionlocal1337_assetArgs, 'id' | 'subgraphError'>>;
  local1337_assets?: SubscriptionResolver<Array<ResolversTypes['local1337_Asset']>, "local1337_assets", ParentType, ContextType, RequireFields<Subscriptionlocal1337_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['local1337_AssetBalance']>, "local1337_assetBalance", ParentType, ContextType, RequireFields<Subscriptionlocal1337_assetBalanceArgs, 'id' | 'subgraphError'>>;
  local1337_assetBalances?: SubscriptionResolver<Array<ResolversTypes['local1337_AssetBalance']>, "local1337_assetBalances", ParentType, ContextType, RequireFields<Subscriptionlocal1337_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_router?: SubscriptionResolver<Maybe<ResolversTypes['local1337_Router']>, "local1337_router", ParentType, ContextType, RequireFields<Subscriptionlocal1337_routerArgs, 'id' | 'subgraphError'>>;
  local1337_routers?: SubscriptionResolver<Array<ResolversTypes['local1337_Router']>, "local1337_routers", ParentType, ContextType, RequireFields<Subscriptionlocal1337_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_setting?: SubscriptionResolver<Maybe<ResolversTypes['local1337_Setting']>, "local1337_setting", ParentType, ContextType, RequireFields<Subscriptionlocal1337_settingArgs, 'id' | 'subgraphError'>>;
  local1337_settings?: SubscriptionResolver<Array<ResolversTypes['local1337_Setting']>, "local1337_settings", ParentType, ContextType, RequireFields<Subscriptionlocal1337_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_relayer?: SubscriptionResolver<Maybe<ResolversTypes['local1337_Relayer']>, "local1337_relayer", ParentType, ContextType, RequireFields<Subscriptionlocal1337_relayerArgs, 'id' | 'subgraphError'>>;
  local1337_relayers?: SubscriptionResolver<Array<ResolversTypes['local1337_Relayer']>, "local1337_relayers", ParentType, ContextType, RequireFields<Subscriptionlocal1337_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['local1337_StableSwap']>, "local1337_stableSwap", ParentType, ContextType, RequireFields<Subscriptionlocal1337_stableSwapArgs, 'id' | 'subgraphError'>>;
  local1337_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['local1337_StableSwap']>, "local1337_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionlocal1337_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_sponsorVault?: SubscriptionResolver<Maybe<ResolversTypes['local1337_SponsorVault']>, "local1337_sponsorVault", ParentType, ContextType, RequireFields<Subscriptionlocal1337_sponsorVaultArgs, 'id' | 'subgraphError'>>;
  local1337_sponsorVaults?: SubscriptionResolver<Array<ResolversTypes['local1337_SponsorVault']>, "local1337_sponsorVaults", ParentType, ContextType, RequireFields<Subscriptionlocal1337_sponsorVaultsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['local1337_OriginTransfer']>, "local1337_originTransfer", ParentType, ContextType, RequireFields<Subscriptionlocal1337_originTransferArgs, 'id' | 'subgraphError'>>;
  local1337_originTransfers?: SubscriptionResolver<Array<ResolversTypes['local1337_OriginTransfer']>, "local1337_originTransfers", ParentType, ContextType, RequireFields<Subscriptionlocal1337_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['local1337_DestinationTransfer']>, "local1337_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionlocal1337_destinationTransferArgs, 'id' | 'subgraphError'>>;
  local1337_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['local1337_DestinationTransfer']>, "local1337_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionlocal1337_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1337__meta?: SubscriptionResolver<Maybe<ResolversTypes['local1337__Meta_']>, "local1337__meta", ParentType, ContextType, Partial<Subscriptionlocal1337__metaArgs>>;
  bnb_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_SystemInfo']>, "bnb_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  bnb_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_SystemInfo']>, "bnb_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_PooledToken']>, "bnb_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  bnb_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_PooledToken']>, "bnb_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_StableSwap']>, "bnb_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_StableSwap']>, "bnb_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_StableSwapAddLiquidityEvent']>, "bnb_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_StableSwapAddLiquidityEvent']>, "bnb_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_StableSwapRemoveLiquidityEvent']>, "bnb_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_StableSwapRemoveLiquidityEvent']>, "bnb_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_StableSwapExchange']>, "bnb_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_StableSwapExchange']>, "bnb_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_SwapDailyVolume']>, "bnb_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_SwapDailyVolume']>, "bnb_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_SwapHourlyVolume']>, "bnb_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_SwapHourlyVolume']>, "bnb_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_SwapWeeklyVolume']>, "bnb_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_SwapWeeklyVolume']>, "bnb_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_StableSwapEvent']>, "bnb_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  bnb_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_StableSwapEvent']>, "bnb_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap_SwapTradeVolume']>, "bnb_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  bnb_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['bnb_swap_SwapTradeVolume']>, "bnb_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionbnb_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['bnb_swap__Meta_']>, "bnb_swap__meta", ParentType, ContextType, Partial<Subscriptionbnb_swap__metaArgs>>;
  arbitrumgoerli_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SystemInfo']>, "arbitrumgoerli_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_SystemInfo']>, "arbitrumgoerli_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_PooledToken']>, "arbitrumgoerli_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_PooledToken']>, "arbitrumgoerli_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwap']>, "arbitrumgoerli_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwap']>, "arbitrumgoerli_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwapAddLiquidityEvent']>, "arbitrumgoerli_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapAddLiquidityEvent']>, "arbitrumgoerli_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']>, "arbitrumgoerli_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']>, "arbitrumgoerli_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwapExchange']>, "arbitrumgoerli_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapExchange']>, "arbitrumgoerli_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SwapDailyVolume']>, "arbitrumgoerli_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_SwapDailyVolume']>, "arbitrumgoerli_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SwapHourlyVolume']>, "arbitrumgoerli_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_SwapHourlyVolume']>, "arbitrumgoerli_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SwapWeeklyVolume']>, "arbitrumgoerli_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_SwapWeeklyVolume']>, "arbitrumgoerli_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_StableSwapEvent']>, "arbitrumgoerli_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapEvent']>, "arbitrumgoerli_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap_SwapTradeVolume']>, "arbitrumgoerli_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumgoerli_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumgoerli_swap_SwapTradeVolume']>, "arbitrumgoerli_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumgoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumgoerli_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumgoerli_swap__Meta_']>, "arbitrumgoerli_swap__meta", ParentType, ContextType, Partial<Subscriptionarbitrumgoerli_swap__metaArgs>>;
  mumbai_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_SystemInfo']>, "mumbai_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_SystemInfo']>, "mumbai_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_PooledToken']>, "mumbai_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_PooledToken']>, "mumbai_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_StableSwap']>, "mumbai_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_StableSwap']>, "mumbai_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_StableSwapAddLiquidityEvent']>, "mumbai_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_StableSwapAddLiquidityEvent']>, "mumbai_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_StableSwapRemoveLiquidityEvent']>, "mumbai_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_StableSwapRemoveLiquidityEvent']>, "mumbai_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_StableSwapExchange']>, "mumbai_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_StableSwapExchange']>, "mumbai_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_SwapDailyVolume']>, "mumbai_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_SwapDailyVolume']>, "mumbai_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_SwapHourlyVolume']>, "mumbai_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_SwapHourlyVolume']>, "mumbai_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_SwapWeeklyVolume']>, "mumbai_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_SwapWeeklyVolume']>, "mumbai_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_StableSwapEvent']>, "mumbai_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_StableSwapEvent']>, "mumbai_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap_SwapTradeVolume']>, "mumbai_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  mumbai_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['mumbai_swap_SwapTradeVolume']>, "mumbai_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionmumbai_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_swap__Meta_']>, "mumbai_swap__meta", ParentType, ContextType, Partial<Subscriptionmumbai_swap__metaArgs>>;
  optimism_asset?: SubscriptionResolver<Maybe<ResolversTypes['optimism_Asset']>, "optimism_asset", ParentType, ContextType, RequireFields<Subscriptionoptimism_assetArgs, 'id' | 'subgraphError'>>;
  optimism_assets?: SubscriptionResolver<Array<ResolversTypes['optimism_Asset']>, "optimism_assets", ParentType, ContextType, RequireFields<Subscriptionoptimism_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['optimism_AssetStatus']>, "optimism_assetStatus", ParentType, ContextType, RequireFields<Subscriptionoptimism_assetStatusArgs, 'id' | 'subgraphError'>>;
  optimism_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['optimism_AssetStatus']>, "optimism_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionoptimism_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['optimism_AssetBalance']>, "optimism_assetBalance", ParentType, ContextType, RequireFields<Subscriptionoptimism_assetBalanceArgs, 'id' | 'subgraphError'>>;
  optimism_assetBalances?: SubscriptionResolver<Array<ResolversTypes['optimism_AssetBalance']>, "optimism_assetBalances", ParentType, ContextType, RequireFields<Subscriptionoptimism_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_router?: SubscriptionResolver<Maybe<ResolversTypes['optimism_Router']>, "optimism_router", ParentType, ContextType, RequireFields<Subscriptionoptimism_routerArgs, 'id' | 'subgraphError'>>;
  optimism_routers?: SubscriptionResolver<Array<ResolversTypes['optimism_Router']>, "optimism_routers", ParentType, ContextType, RequireFields<Subscriptionoptimism_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_setting?: SubscriptionResolver<Maybe<ResolversTypes['optimism_Setting']>, "optimism_setting", ParentType, ContextType, RequireFields<Subscriptionoptimism_settingArgs, 'id' | 'subgraphError'>>;
  optimism_settings?: SubscriptionResolver<Array<ResolversTypes['optimism_Setting']>, "optimism_settings", ParentType, ContextType, RequireFields<Subscriptionoptimism_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_relayer?: SubscriptionResolver<Maybe<ResolversTypes['optimism_Relayer']>, "optimism_relayer", ParentType, ContextType, RequireFields<Subscriptionoptimism_relayerArgs, 'id' | 'subgraphError'>>;
  optimism_relayers?: SubscriptionResolver<Array<ResolversTypes['optimism_Relayer']>, "optimism_relayers", ParentType, ContextType, RequireFields<Subscriptionoptimism_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['optimism_Sequencer']>, "optimism_sequencer", ParentType, ContextType, RequireFields<Subscriptionoptimism_sequencerArgs, 'id' | 'subgraphError'>>;
  optimism_sequencers?: SubscriptionResolver<Array<ResolversTypes['optimism_Sequencer']>, "optimism_sequencers", ParentType, ContextType, RequireFields<Subscriptionoptimism_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['optimism_OriginTransfer']>, "optimism_originTransfer", ParentType, ContextType, RequireFields<Subscriptionoptimism_originTransferArgs, 'id' | 'subgraphError'>>;
  optimism_originTransfers?: SubscriptionResolver<Array<ResolversTypes['optimism_OriginTransfer']>, "optimism_originTransfers", ParentType, ContextType, RequireFields<Subscriptionoptimism_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['optimism_DestinationTransfer']>, "optimism_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionoptimism_destinationTransferArgs, 'id' | 'subgraphError'>>;
  optimism_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['optimism_DestinationTransfer']>, "optimism_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionoptimism_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['optimism_OriginMessage']>, "optimism_originMessage", ParentType, ContextType, RequireFields<Subscriptionoptimism_originMessageArgs, 'id' | 'subgraphError'>>;
  optimism_originMessages?: SubscriptionResolver<Array<ResolversTypes['optimism_OriginMessage']>, "optimism_originMessages", ParentType, ContextType, RequireFields<Subscriptionoptimism_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['optimism_AggregateRoot']>, "optimism_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionoptimism_aggregateRootArgs, 'id' | 'subgraphError'>>;
  optimism_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['optimism_AggregateRoot']>, "optimism_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionoptimism_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['optimism_ConnectorMeta']>, "optimism_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionoptimism_connectorMetaArgs, 'id' | 'subgraphError'>>;
  optimism_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['optimism_ConnectorMeta']>, "optimism_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionoptimism_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['optimism_RootCount']>, "optimism_rootCount", ParentType, ContextType, RequireFields<Subscriptionoptimism_rootCountArgs, 'id' | 'subgraphError'>>;
  optimism_rootCounts?: SubscriptionResolver<Array<ResolversTypes['optimism_RootCount']>, "optimism_rootCounts", ParentType, ContextType, RequireFields<Subscriptionoptimism_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['optimism_RootMessageSent']>, "optimism_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionoptimism_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  optimism_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['optimism_RootMessageSent']>, "optimism_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionoptimism_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  optimism__meta?: SubscriptionResolver<Maybe<ResolversTypes['optimism__Meta_']>, "optimism__meta", ParentType, ContextType, Partial<Subscriptionoptimism__metaArgs>>;
  staginggoerli_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_SystemInfo']>, "staginggoerli_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_SystemInfo']>, "staginggoerli_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_PooledToken']>, "staginggoerli_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_PooledToken']>, "staginggoerli_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwap']>, "staginggoerli_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_StableSwap']>, "staginggoerli_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwapAddLiquidityEvent']>, "staginggoerli_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_StableSwapAddLiquidityEvent']>, "staginggoerli_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwapRemoveLiquidityEvent']>, "staginggoerli_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_StableSwapRemoveLiquidityEvent']>, "staginggoerli_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwapExchange']>, "staginggoerli_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_StableSwapExchange']>, "staginggoerli_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_SwapDailyVolume']>, "staginggoerli_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_SwapDailyVolume']>, "staginggoerli_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_SwapHourlyVolume']>, "staginggoerli_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_SwapHourlyVolume']>, "staginggoerli_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_SwapWeeklyVolume']>, "staginggoerli_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_SwapWeeklyVolume']>, "staginggoerli_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_StableSwapEvent']>, "staginggoerli_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_StableSwapEvent']>, "staginggoerli_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap_SwapTradeVolume']>, "staginggoerli_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_swap_SwapTradeVolume']>, "staginggoerli_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_swap__Meta_']>, "staginggoerli_swap__meta", ParentType, ContextType, Partial<Subscriptionstaginggoerli_swap__metaArgs>>;
  stagingoptimismgoerli_asset?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_Asset']>, "stagingoptimismgoerli_asset", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_assetArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_assets?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_Asset']>, "stagingoptimismgoerli_assets", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_AssetStatus']>, "stagingoptimismgoerli_assetStatus", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_AssetStatus']>, "stagingoptimismgoerli_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_AssetBalance']>, "stagingoptimismgoerli_assetBalance", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_assetBalances?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_AssetBalance']>, "stagingoptimismgoerli_assetBalances", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_router?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_Router']>, "stagingoptimismgoerli_router", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_routerArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_routers?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_Router']>, "stagingoptimismgoerli_routers", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_setting?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_Setting']>, "stagingoptimismgoerli_setting", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_settingArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_settings?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_Setting']>, "stagingoptimismgoerli_settings", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_relayer?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_Relayer']>, "stagingoptimismgoerli_relayer", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_relayers?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_Relayer']>, "stagingoptimismgoerli_relayers", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_Sequencer']>, "stagingoptimismgoerli_sequencer", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_sequencers?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_Sequencer']>, "stagingoptimismgoerli_sequencers", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_OriginTransfer']>, "stagingoptimismgoerli_originTransfer", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_originTransfers?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_OriginTransfer']>, "stagingoptimismgoerli_originTransfers", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_DestinationTransfer']>, "stagingoptimismgoerli_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_DestinationTransfer']>, "stagingoptimismgoerli_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_OriginMessage']>, "stagingoptimismgoerli_originMessage", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_originMessages?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_OriginMessage']>, "stagingoptimismgoerli_originMessages", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_AggregateRoot']>, "stagingoptimismgoerli_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_AggregateRoot']>, "stagingoptimismgoerli_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_ConnectorMeta']>, "stagingoptimismgoerli_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_ConnectorMeta']>, "stagingoptimismgoerli_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_RootCount']>, "stagingoptimismgoerli_rootCount", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_rootCounts?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_RootCount']>, "stagingoptimismgoerli_rootCounts", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli_RootMessageSent']>, "stagingoptimismgoerli_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  stagingoptimismgoerli_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['stagingoptimismgoerli_RootMessageSent']>, "stagingoptimismgoerli_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionstagingoptimismgoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingoptimismgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['stagingoptimismgoerli__Meta_']>, "stagingoptimismgoerli__meta", ParentType, ContextType, Partial<Subscriptionstagingoptimismgoerli__metaArgs>>;
  stagingmumbai_asset?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_Asset']>, "stagingmumbai_asset", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_assetArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_assets?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_Asset']>, "stagingmumbai_assets", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_AssetStatus']>, "stagingmumbai_assetStatus", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_assetStatusArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_AssetStatus']>, "stagingmumbai_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_AssetBalance']>, "stagingmumbai_assetBalance", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_assetBalanceArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_assetBalances?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_AssetBalance']>, "stagingmumbai_assetBalances", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_router?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_Router']>, "stagingmumbai_router", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_routerArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_routers?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_Router']>, "stagingmumbai_routers", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_setting?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_Setting']>, "stagingmumbai_setting", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_settingArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_settings?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_Setting']>, "stagingmumbai_settings", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_relayer?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_Relayer']>, "stagingmumbai_relayer", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_relayerArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_relayers?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_Relayer']>, "stagingmumbai_relayers", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_Sequencer']>, "stagingmumbai_sequencer", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_sequencerArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_sequencers?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_Sequencer']>, "stagingmumbai_sequencers", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_OriginTransfer']>, "stagingmumbai_originTransfer", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_originTransferArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_originTransfers?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_OriginTransfer']>, "stagingmumbai_originTransfers", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_DestinationTransfer']>, "stagingmumbai_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_destinationTransferArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_DestinationTransfer']>, "stagingmumbai_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_OriginMessage']>, "stagingmumbai_originMessage", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_originMessageArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_originMessages?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_OriginMessage']>, "stagingmumbai_originMessages", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_AggregateRoot']>, "stagingmumbai_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_aggregateRootArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_AggregateRoot']>, "stagingmumbai_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_ConnectorMeta']>, "stagingmumbai_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_connectorMetaArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_ConnectorMeta']>, "stagingmumbai_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_RootCount']>, "stagingmumbai_rootCount", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_rootCountArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_rootCounts?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_RootCount']>, "stagingmumbai_rootCounts", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai_RootMessageSent']>, "stagingmumbai_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  stagingmumbai_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['stagingmumbai_RootMessageSent']>, "stagingmumbai_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionstagingmumbai_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingmumbai__meta?: SubscriptionResolver<Maybe<ResolversTypes['stagingmumbai__Meta_']>, "stagingmumbai__meta", ParentType, ContextType, Partial<Subscriptionstagingmumbai__metaArgs>>;
  arbitrumone_swap_systemInfo?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_SystemInfo']>, "arbitrumone_swap_systemInfo", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_systemInfoArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_systemInfos?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_SystemInfo']>, "arbitrumone_swap_systemInfos", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_systemInfosArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_PooledToken']>, "arbitrumone_swap_pooledToken", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_pooledTokenArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_PooledToken']>, "arbitrumone_swap_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwap']>, "arbitrumone_swap_stableSwap", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_StableSwap']>, "arbitrumone_swap_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwapAddLiquidityEvent']>, "arbitrumone_swap_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_StableSwapAddLiquidityEvent']>, "arbitrumone_swap_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwapRemoveLiquidityEvent']>, "arbitrumone_swap_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_StableSwapRemoveLiquidityEvent']>, "arbitrumone_swap_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwapExchange']>, "arbitrumone_swap_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_StableSwapExchange']>, "arbitrumone_swap_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_SwapDailyVolume']>, "arbitrumone_swap_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_SwapDailyVolume']>, "arbitrumone_swap_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_SwapHourlyVolume']>, "arbitrumone_swap_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_SwapHourlyVolume']>, "arbitrumone_swap_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_SwapWeeklyVolume']>, "arbitrumone_swap_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_SwapWeeklyVolume']>, "arbitrumone_swap_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_StableSwapEvent']>, "arbitrumone_swap_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_StableSwapEvent']>, "arbitrumone_swap_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap_SwapTradeVolume']>, "arbitrumone_swap_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  arbitrumone_swap_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_swap_SwapTradeVolume']>, "arbitrumone_swap_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_swap_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_swap__meta?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_swap__Meta_']>, "arbitrumone_swap__meta", ParentType, ContextType, Partial<Subscriptionarbitrumone_swap__metaArgs>>;
  local1338_asset?: SubscriptionResolver<Maybe<ResolversTypes['local1338_Asset']>, "local1338_asset", ParentType, ContextType, RequireFields<Subscriptionlocal1338_assetArgs, 'id' | 'subgraphError'>>;
  local1338_assets?: SubscriptionResolver<Array<ResolversTypes['local1338_Asset']>, "local1338_assets", ParentType, ContextType, RequireFields<Subscriptionlocal1338_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['local1338_AssetBalance']>, "local1338_assetBalance", ParentType, ContextType, RequireFields<Subscriptionlocal1338_assetBalanceArgs, 'id' | 'subgraphError'>>;
  local1338_assetBalances?: SubscriptionResolver<Array<ResolversTypes['local1338_AssetBalance']>, "local1338_assetBalances", ParentType, ContextType, RequireFields<Subscriptionlocal1338_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_router?: SubscriptionResolver<Maybe<ResolversTypes['local1338_Router']>, "local1338_router", ParentType, ContextType, RequireFields<Subscriptionlocal1338_routerArgs, 'id' | 'subgraphError'>>;
  local1338_routers?: SubscriptionResolver<Array<ResolversTypes['local1338_Router']>, "local1338_routers", ParentType, ContextType, RequireFields<Subscriptionlocal1338_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_setting?: SubscriptionResolver<Maybe<ResolversTypes['local1338_Setting']>, "local1338_setting", ParentType, ContextType, RequireFields<Subscriptionlocal1338_settingArgs, 'id' | 'subgraphError'>>;
  local1338_settings?: SubscriptionResolver<Array<ResolversTypes['local1338_Setting']>, "local1338_settings", ParentType, ContextType, RequireFields<Subscriptionlocal1338_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_relayer?: SubscriptionResolver<Maybe<ResolversTypes['local1338_Relayer']>, "local1338_relayer", ParentType, ContextType, RequireFields<Subscriptionlocal1338_relayerArgs, 'id' | 'subgraphError'>>;
  local1338_relayers?: SubscriptionResolver<Array<ResolversTypes['local1338_Relayer']>, "local1338_relayers", ParentType, ContextType, RequireFields<Subscriptionlocal1338_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['local1338_StableSwap']>, "local1338_stableSwap", ParentType, ContextType, RequireFields<Subscriptionlocal1338_stableSwapArgs, 'id' | 'subgraphError'>>;
  local1338_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['local1338_StableSwap']>, "local1338_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionlocal1338_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_sponsorVault?: SubscriptionResolver<Maybe<ResolversTypes['local1338_SponsorVault']>, "local1338_sponsorVault", ParentType, ContextType, RequireFields<Subscriptionlocal1338_sponsorVaultArgs, 'id' | 'subgraphError'>>;
  local1338_sponsorVaults?: SubscriptionResolver<Array<ResolversTypes['local1338_SponsorVault']>, "local1338_sponsorVaults", ParentType, ContextType, RequireFields<Subscriptionlocal1338_sponsorVaultsArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['local1338_OriginTransfer']>, "local1338_originTransfer", ParentType, ContextType, RequireFields<Subscriptionlocal1338_originTransferArgs, 'id' | 'subgraphError'>>;
  local1338_originTransfers?: SubscriptionResolver<Array<ResolversTypes['local1338_OriginTransfer']>, "local1338_originTransfers", ParentType, ContextType, RequireFields<Subscriptionlocal1338_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['local1338_DestinationTransfer']>, "local1338_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionlocal1338_destinationTransferArgs, 'id' | 'subgraphError'>>;
  local1338_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['local1338_DestinationTransfer']>, "local1338_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionlocal1338_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  local1338__meta?: SubscriptionResolver<Maybe<ResolversTypes['local1338__Meta_']>, "local1338__meta", ParentType, ContextType, Partial<Subscriptionlocal1338__metaArgs>>;
  goerli_asset?: SubscriptionResolver<Maybe<ResolversTypes['goerli_Asset']>, "goerli_asset", ParentType, ContextType, RequireFields<Subscriptiongoerli_assetArgs, 'id' | 'subgraphError'>>;
  goerli_assets?: SubscriptionResolver<Array<ResolversTypes['goerli_Asset']>, "goerli_assets", ParentType, ContextType, RequireFields<Subscriptiongoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['goerli_AssetStatus']>, "goerli_assetStatus", ParentType, ContextType, RequireFields<Subscriptiongoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  goerli_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['goerli_AssetStatus']>, "goerli_assetStatuses", ParentType, ContextType, RequireFields<Subscriptiongoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['goerli_AssetBalance']>, "goerli_assetBalance", ParentType, ContextType, RequireFields<Subscriptiongoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  goerli_assetBalances?: SubscriptionResolver<Array<ResolversTypes['goerli_AssetBalance']>, "goerli_assetBalances", ParentType, ContextType, RequireFields<Subscriptiongoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_router?: SubscriptionResolver<Maybe<ResolversTypes['goerli_Router']>, "goerli_router", ParentType, ContextType, RequireFields<Subscriptiongoerli_routerArgs, 'id' | 'subgraphError'>>;
  goerli_routers?: SubscriptionResolver<Array<ResolversTypes['goerli_Router']>, "goerli_routers", ParentType, ContextType, RequireFields<Subscriptiongoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_setting?: SubscriptionResolver<Maybe<ResolversTypes['goerli_Setting']>, "goerli_setting", ParentType, ContextType, RequireFields<Subscriptiongoerli_settingArgs, 'id' | 'subgraphError'>>;
  goerli_settings?: SubscriptionResolver<Array<ResolversTypes['goerli_Setting']>, "goerli_settings", ParentType, ContextType, RequireFields<Subscriptiongoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_relayer?: SubscriptionResolver<Maybe<ResolversTypes['goerli_Relayer']>, "goerli_relayer", ParentType, ContextType, RequireFields<Subscriptiongoerli_relayerArgs, 'id' | 'subgraphError'>>;
  goerli_relayers?: SubscriptionResolver<Array<ResolversTypes['goerli_Relayer']>, "goerli_relayers", ParentType, ContextType, RequireFields<Subscriptiongoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['goerli_Sequencer']>, "goerli_sequencer", ParentType, ContextType, RequireFields<Subscriptiongoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  goerli_sequencers?: SubscriptionResolver<Array<ResolversTypes['goerli_Sequencer']>, "goerli_sequencers", ParentType, ContextType, RequireFields<Subscriptiongoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['goerli_OriginTransfer']>, "goerli_originTransfer", ParentType, ContextType, RequireFields<Subscriptiongoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  goerli_originTransfers?: SubscriptionResolver<Array<ResolversTypes['goerli_OriginTransfer']>, "goerli_originTransfers", ParentType, ContextType, RequireFields<Subscriptiongoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['goerli_DestinationTransfer']>, "goerli_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptiongoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  goerli_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['goerli_DestinationTransfer']>, "goerli_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptiongoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['goerli_OriginMessage']>, "goerli_originMessage", ParentType, ContextType, RequireFields<Subscriptiongoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  goerli_originMessages?: SubscriptionResolver<Array<ResolversTypes['goerli_OriginMessage']>, "goerli_originMessages", ParentType, ContextType, RequireFields<Subscriptiongoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['goerli_AggregateRoot']>, "goerli_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptiongoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  goerli_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['goerli_AggregateRoot']>, "goerli_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptiongoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['goerli_ConnectorMeta']>, "goerli_connectorMeta", ParentType, ContextType, RequireFields<Subscriptiongoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  goerli_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['goerli_ConnectorMeta']>, "goerli_connectorMetas", ParentType, ContextType, RequireFields<Subscriptiongoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['goerli_RootCount']>, "goerli_rootCount", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  goerli_rootCounts?: SubscriptionResolver<Array<ResolversTypes['goerli_RootCount']>, "goerli_rootCounts", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  goerli_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['goerli_RootMessageSent']>, "goerli_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  goerli_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['goerli_RootMessageSent']>, "goerli_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptiongoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_asset?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Asset']>, "stagingarbitrumgoerli_asset", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_assetArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_assets?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_Asset']>, "stagingarbitrumgoerli_assets", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_AssetStatus']>, "stagingarbitrumgoerli_assetStatus", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_assetStatusArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_AssetStatus']>, "stagingarbitrumgoerli_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_AssetBalance']>, "stagingarbitrumgoerli_assetBalance", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_assetBalances?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_AssetBalance']>, "stagingarbitrumgoerli_assetBalances", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_router?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Router']>, "stagingarbitrumgoerli_router", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_routerArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_routers?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_Router']>, "stagingarbitrumgoerli_routers", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_setting?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Setting']>, "stagingarbitrumgoerli_setting", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_settingArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_settings?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_Setting']>, "stagingarbitrumgoerli_settings", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_relayer?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Relayer']>, "stagingarbitrumgoerli_relayer", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_relayerArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_relayers?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_Relayer']>, "stagingarbitrumgoerli_relayers", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Sequencer']>, "stagingarbitrumgoerli_sequencer", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_sequencers?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_Sequencer']>, "stagingarbitrumgoerli_sequencers", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_OriginTransfer']>, "stagingarbitrumgoerli_originTransfer", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_originTransfers?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_OriginTransfer']>, "stagingarbitrumgoerli_originTransfers", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_DestinationTransfer']>, "stagingarbitrumgoerli_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_DestinationTransfer']>, "stagingarbitrumgoerli_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_OriginMessage']>, "stagingarbitrumgoerli_originMessage", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_originMessages?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_OriginMessage']>, "stagingarbitrumgoerli_originMessages", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_AggregateRoot']>, "stagingarbitrumgoerli_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_AggregateRoot']>, "stagingarbitrumgoerli_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_ConnectorMeta']>, "stagingarbitrumgoerli_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_ConnectorMeta']>, "stagingarbitrumgoerli_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_RootCount']>, "stagingarbitrumgoerli_rootCount", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_rootCounts?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_RootCount']>, "stagingarbitrumgoerli_rootCounts", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli_RootMessageSent']>, "stagingarbitrumgoerli_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  stagingarbitrumgoerli_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['stagingarbitrumgoerli_RootMessageSent']>, "stagingarbitrumgoerli_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionstagingarbitrumgoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  stagingarbitrumgoerli__meta?: SubscriptionResolver<Maybe<ResolversTypes['stagingarbitrumgoerli__Meta_']>, "stagingarbitrumgoerli__meta", ParentType, ContextType, Partial<Subscriptionstagingarbitrumgoerli__metaArgs>>;
  mumbai_asset?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_Asset']>, "mumbai_asset", ParentType, ContextType, RequireFields<Subscriptionmumbai_assetArgs, 'id' | 'subgraphError'>>;
  mumbai_assets?: SubscriptionResolver<Array<ResolversTypes['mumbai_Asset']>, "mumbai_assets", ParentType, ContextType, RequireFields<Subscriptionmumbai_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_AssetStatus']>, "mumbai_assetStatus", ParentType, ContextType, RequireFields<Subscriptionmumbai_assetStatusArgs, 'id' | 'subgraphError'>>;
  mumbai_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['mumbai_AssetStatus']>, "mumbai_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionmumbai_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_AssetBalance']>, "mumbai_assetBalance", ParentType, ContextType, RequireFields<Subscriptionmumbai_assetBalanceArgs, 'id' | 'subgraphError'>>;
  mumbai_assetBalances?: SubscriptionResolver<Array<ResolversTypes['mumbai_AssetBalance']>, "mumbai_assetBalances", ParentType, ContextType, RequireFields<Subscriptionmumbai_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_router?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_Router']>, "mumbai_router", ParentType, ContextType, RequireFields<Subscriptionmumbai_routerArgs, 'id' | 'subgraphError'>>;
  mumbai_routers?: SubscriptionResolver<Array<ResolversTypes['mumbai_Router']>, "mumbai_routers", ParentType, ContextType, RequireFields<Subscriptionmumbai_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_setting?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_Setting']>, "mumbai_setting", ParentType, ContextType, RequireFields<Subscriptionmumbai_settingArgs, 'id' | 'subgraphError'>>;
  mumbai_settings?: SubscriptionResolver<Array<ResolversTypes['mumbai_Setting']>, "mumbai_settings", ParentType, ContextType, RequireFields<Subscriptionmumbai_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_relayer?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_Relayer']>, "mumbai_relayer", ParentType, ContextType, RequireFields<Subscriptionmumbai_relayerArgs, 'id' | 'subgraphError'>>;
  mumbai_relayers?: SubscriptionResolver<Array<ResolversTypes['mumbai_Relayer']>, "mumbai_relayers", ParentType, ContextType, RequireFields<Subscriptionmumbai_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_Sequencer']>, "mumbai_sequencer", ParentType, ContextType, RequireFields<Subscriptionmumbai_sequencerArgs, 'id' | 'subgraphError'>>;
  mumbai_sequencers?: SubscriptionResolver<Array<ResolversTypes['mumbai_Sequencer']>, "mumbai_sequencers", ParentType, ContextType, RequireFields<Subscriptionmumbai_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_OriginTransfer']>, "mumbai_originTransfer", ParentType, ContextType, RequireFields<Subscriptionmumbai_originTransferArgs, 'id' | 'subgraphError'>>;
  mumbai_originTransfers?: SubscriptionResolver<Array<ResolversTypes['mumbai_OriginTransfer']>, "mumbai_originTransfers", ParentType, ContextType, RequireFields<Subscriptionmumbai_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_DestinationTransfer']>, "mumbai_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionmumbai_destinationTransferArgs, 'id' | 'subgraphError'>>;
  mumbai_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['mumbai_DestinationTransfer']>, "mumbai_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionmumbai_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_OriginMessage']>, "mumbai_originMessage", ParentType, ContextType, RequireFields<Subscriptionmumbai_originMessageArgs, 'id' | 'subgraphError'>>;
  mumbai_originMessages?: SubscriptionResolver<Array<ResolversTypes['mumbai_OriginMessage']>, "mumbai_originMessages", ParentType, ContextType, RequireFields<Subscriptionmumbai_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_AggregateRoot']>, "mumbai_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionmumbai_aggregateRootArgs, 'id' | 'subgraphError'>>;
  mumbai_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['mumbai_AggregateRoot']>, "mumbai_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionmumbai_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_ConnectorMeta']>, "mumbai_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionmumbai_connectorMetaArgs, 'id' | 'subgraphError'>>;
  mumbai_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['mumbai_ConnectorMeta']>, "mumbai_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionmumbai_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_RootCount']>, "mumbai_rootCount", ParentType, ContextType, RequireFields<Subscriptionmumbai_rootCountArgs, 'id' | 'subgraphError'>>;
  mumbai_rootCounts?: SubscriptionResolver<Array<ResolversTypes['mumbai_RootCount']>, "mumbai_rootCounts", ParentType, ContextType, RequireFields<Subscriptionmumbai_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['mumbai_RootMessageSent']>, "mumbai_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionmumbai_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  mumbai_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['mumbai_RootMessageSent']>, "mumbai_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionmumbai_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mumbai__meta?: SubscriptionResolver<Maybe<ResolversTypes['mumbai__Meta_']>, "mumbai__meta", ParentType, ContextType, Partial<Subscriptionmumbai__metaArgs>>;
  bnb_asset?: SubscriptionResolver<Maybe<ResolversTypes['bnb_Asset']>, "bnb_asset", ParentType, ContextType, RequireFields<Subscriptionbnb_assetArgs, 'id' | 'subgraphError'>>;
  bnb_assets?: SubscriptionResolver<Array<ResolversTypes['bnb_Asset']>, "bnb_assets", ParentType, ContextType, RequireFields<Subscriptionbnb_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['bnb_AssetStatus']>, "bnb_assetStatus", ParentType, ContextType, RequireFields<Subscriptionbnb_assetStatusArgs, 'id' | 'subgraphError'>>;
  bnb_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['bnb_AssetStatus']>, "bnb_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionbnb_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['bnb_AssetBalance']>, "bnb_assetBalance", ParentType, ContextType, RequireFields<Subscriptionbnb_assetBalanceArgs, 'id' | 'subgraphError'>>;
  bnb_assetBalances?: SubscriptionResolver<Array<ResolversTypes['bnb_AssetBalance']>, "bnb_assetBalances", ParentType, ContextType, RequireFields<Subscriptionbnb_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_router?: SubscriptionResolver<Maybe<ResolversTypes['bnb_Router']>, "bnb_router", ParentType, ContextType, RequireFields<Subscriptionbnb_routerArgs, 'id' | 'subgraphError'>>;
  bnb_routers?: SubscriptionResolver<Array<ResolversTypes['bnb_Router']>, "bnb_routers", ParentType, ContextType, RequireFields<Subscriptionbnb_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_setting?: SubscriptionResolver<Maybe<ResolversTypes['bnb_Setting']>, "bnb_setting", ParentType, ContextType, RequireFields<Subscriptionbnb_settingArgs, 'id' | 'subgraphError'>>;
  bnb_settings?: SubscriptionResolver<Array<ResolversTypes['bnb_Setting']>, "bnb_settings", ParentType, ContextType, RequireFields<Subscriptionbnb_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_relayer?: SubscriptionResolver<Maybe<ResolversTypes['bnb_Relayer']>, "bnb_relayer", ParentType, ContextType, RequireFields<Subscriptionbnb_relayerArgs, 'id' | 'subgraphError'>>;
  bnb_relayers?: SubscriptionResolver<Array<ResolversTypes['bnb_Relayer']>, "bnb_relayers", ParentType, ContextType, RequireFields<Subscriptionbnb_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['bnb_Sequencer']>, "bnb_sequencer", ParentType, ContextType, RequireFields<Subscriptionbnb_sequencerArgs, 'id' | 'subgraphError'>>;
  bnb_sequencers?: SubscriptionResolver<Array<ResolversTypes['bnb_Sequencer']>, "bnb_sequencers", ParentType, ContextType, RequireFields<Subscriptionbnb_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['bnb_OriginTransfer']>, "bnb_originTransfer", ParentType, ContextType, RequireFields<Subscriptionbnb_originTransferArgs, 'id' | 'subgraphError'>>;
  bnb_originTransfers?: SubscriptionResolver<Array<ResolversTypes['bnb_OriginTransfer']>, "bnb_originTransfers", ParentType, ContextType, RequireFields<Subscriptionbnb_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['bnb_DestinationTransfer']>, "bnb_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionbnb_destinationTransferArgs, 'id' | 'subgraphError'>>;
  bnb_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['bnb_DestinationTransfer']>, "bnb_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionbnb_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['bnb_OriginMessage']>, "bnb_originMessage", ParentType, ContextType, RequireFields<Subscriptionbnb_originMessageArgs, 'id' | 'subgraphError'>>;
  bnb_originMessages?: SubscriptionResolver<Array<ResolversTypes['bnb_OriginMessage']>, "bnb_originMessages", ParentType, ContextType, RequireFields<Subscriptionbnb_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['bnb_AggregateRoot']>, "bnb_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionbnb_aggregateRootArgs, 'id' | 'subgraphError'>>;
  bnb_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['bnb_AggregateRoot']>, "bnb_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionbnb_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['bnb_ConnectorMeta']>, "bnb_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionbnb_connectorMetaArgs, 'id' | 'subgraphError'>>;
  bnb_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['bnb_ConnectorMeta']>, "bnb_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionbnb_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['bnb_RootCount']>, "bnb_rootCount", ParentType, ContextType, RequireFields<Subscriptionbnb_rootCountArgs, 'id' | 'subgraphError'>>;
  bnb_rootCounts?: SubscriptionResolver<Array<ResolversTypes['bnb_RootCount']>, "bnb_rootCounts", ParentType, ContextType, RequireFields<Subscriptionbnb_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['bnb_RootMessageSent']>, "bnb_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionbnb_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  bnb_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['bnb_RootMessageSent']>, "bnb_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionbnb_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  bnb__meta?: SubscriptionResolver<Maybe<ResolversTypes['bnb__Meta_']>, "bnb__meta", ParentType, ContextType, Partial<Subscriptionbnb__metaArgs>>;
  mainnet_asset?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_Asset']>, "mainnet_asset", ParentType, ContextType, RequireFields<Subscriptionmainnet_assetArgs, 'id' | 'subgraphError'>>;
  mainnet_assets?: SubscriptionResolver<Array<ResolversTypes['mainnet_Asset']>, "mainnet_assets", ParentType, ContextType, RequireFields<Subscriptionmainnet_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_AssetStatus']>, "mainnet_assetStatus", ParentType, ContextType, RequireFields<Subscriptionmainnet_assetStatusArgs, 'id' | 'subgraphError'>>;
  mainnet_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['mainnet_AssetStatus']>, "mainnet_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionmainnet_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_AssetBalance']>, "mainnet_assetBalance", ParentType, ContextType, RequireFields<Subscriptionmainnet_assetBalanceArgs, 'id' | 'subgraphError'>>;
  mainnet_assetBalances?: SubscriptionResolver<Array<ResolversTypes['mainnet_AssetBalance']>, "mainnet_assetBalances", ParentType, ContextType, RequireFields<Subscriptionmainnet_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_router?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_Router']>, "mainnet_router", ParentType, ContextType, RequireFields<Subscriptionmainnet_routerArgs, 'id' | 'subgraphError'>>;
  mainnet_routers?: SubscriptionResolver<Array<ResolversTypes['mainnet_Router']>, "mainnet_routers", ParentType, ContextType, RequireFields<Subscriptionmainnet_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_setting?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_Setting']>, "mainnet_setting", ParentType, ContextType, RequireFields<Subscriptionmainnet_settingArgs, 'id' | 'subgraphError'>>;
  mainnet_settings?: SubscriptionResolver<Array<ResolversTypes['mainnet_Setting']>, "mainnet_settings", ParentType, ContextType, RequireFields<Subscriptionmainnet_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_relayer?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_Relayer']>, "mainnet_relayer", ParentType, ContextType, RequireFields<Subscriptionmainnet_relayerArgs, 'id' | 'subgraphError'>>;
  mainnet_relayers?: SubscriptionResolver<Array<ResolversTypes['mainnet_Relayer']>, "mainnet_relayers", ParentType, ContextType, RequireFields<Subscriptionmainnet_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_Sequencer']>, "mainnet_sequencer", ParentType, ContextType, RequireFields<Subscriptionmainnet_sequencerArgs, 'id' | 'subgraphError'>>;
  mainnet_sequencers?: SubscriptionResolver<Array<ResolversTypes['mainnet_Sequencer']>, "mainnet_sequencers", ParentType, ContextType, RequireFields<Subscriptionmainnet_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_OriginTransfer']>, "mainnet_originTransfer", ParentType, ContextType, RequireFields<Subscriptionmainnet_originTransferArgs, 'id' | 'subgraphError'>>;
  mainnet_originTransfers?: SubscriptionResolver<Array<ResolversTypes['mainnet_OriginTransfer']>, "mainnet_originTransfers", ParentType, ContextType, RequireFields<Subscriptionmainnet_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_DestinationTransfer']>, "mainnet_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionmainnet_destinationTransferArgs, 'id' | 'subgraphError'>>;
  mainnet_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['mainnet_DestinationTransfer']>, "mainnet_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionmainnet_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_OriginMessage']>, "mainnet_originMessage", ParentType, ContextType, RequireFields<Subscriptionmainnet_originMessageArgs, 'id' | 'subgraphError'>>;
  mainnet_originMessages?: SubscriptionResolver<Array<ResolversTypes['mainnet_OriginMessage']>, "mainnet_originMessages", ParentType, ContextType, RequireFields<Subscriptionmainnet_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_AggregateRoot']>, "mainnet_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionmainnet_aggregateRootArgs, 'id' | 'subgraphError'>>;
  mainnet_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['mainnet_AggregateRoot']>, "mainnet_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionmainnet_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_ConnectorMeta']>, "mainnet_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionmainnet_connectorMetaArgs, 'id' | 'subgraphError'>>;
  mainnet_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['mainnet_ConnectorMeta']>, "mainnet_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionmainnet_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_RootCount']>, "mainnet_rootCount", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootCountArgs, 'id' | 'subgraphError'>>;
  mainnet_rootCounts?: SubscriptionResolver<Array<ResolversTypes['mainnet_RootCount']>, "mainnet_rootCounts", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  mainnet_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['mainnet_RootMessageSent']>, "mainnet_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  mainnet_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['mainnet_RootMessageSent']>, "mainnet_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionmainnet_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_asset?: SubscriptionResolver<Maybe<ResolversTypes['polygon_Asset']>, "polygon_asset", ParentType, ContextType, RequireFields<Subscriptionpolygon_assetArgs, 'id' | 'subgraphError'>>;
  polygon_assets?: SubscriptionResolver<Array<ResolversTypes['polygon_Asset']>, "polygon_assets", ParentType, ContextType, RequireFields<Subscriptionpolygon_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['polygon_AssetStatus']>, "polygon_assetStatus", ParentType, ContextType, RequireFields<Subscriptionpolygon_assetStatusArgs, 'id' | 'subgraphError'>>;
  polygon_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['polygon_AssetStatus']>, "polygon_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionpolygon_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['polygon_AssetBalance']>, "polygon_assetBalance", ParentType, ContextType, RequireFields<Subscriptionpolygon_assetBalanceArgs, 'id' | 'subgraphError'>>;
  polygon_assetBalances?: SubscriptionResolver<Array<ResolversTypes['polygon_AssetBalance']>, "polygon_assetBalances", ParentType, ContextType, RequireFields<Subscriptionpolygon_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_router?: SubscriptionResolver<Maybe<ResolversTypes['polygon_Router']>, "polygon_router", ParentType, ContextType, RequireFields<Subscriptionpolygon_routerArgs, 'id' | 'subgraphError'>>;
  polygon_routers?: SubscriptionResolver<Array<ResolversTypes['polygon_Router']>, "polygon_routers", ParentType, ContextType, RequireFields<Subscriptionpolygon_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_setting?: SubscriptionResolver<Maybe<ResolversTypes['polygon_Setting']>, "polygon_setting", ParentType, ContextType, RequireFields<Subscriptionpolygon_settingArgs, 'id' | 'subgraphError'>>;
  polygon_settings?: SubscriptionResolver<Array<ResolversTypes['polygon_Setting']>, "polygon_settings", ParentType, ContextType, RequireFields<Subscriptionpolygon_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_relayer?: SubscriptionResolver<Maybe<ResolversTypes['polygon_Relayer']>, "polygon_relayer", ParentType, ContextType, RequireFields<Subscriptionpolygon_relayerArgs, 'id' | 'subgraphError'>>;
  polygon_relayers?: SubscriptionResolver<Array<ResolversTypes['polygon_Relayer']>, "polygon_relayers", ParentType, ContextType, RequireFields<Subscriptionpolygon_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['polygon_Sequencer']>, "polygon_sequencer", ParentType, ContextType, RequireFields<Subscriptionpolygon_sequencerArgs, 'id' | 'subgraphError'>>;
  polygon_sequencers?: SubscriptionResolver<Array<ResolversTypes['polygon_Sequencer']>, "polygon_sequencers", ParentType, ContextType, RequireFields<Subscriptionpolygon_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['polygon_OriginTransfer']>, "polygon_originTransfer", ParentType, ContextType, RequireFields<Subscriptionpolygon_originTransferArgs, 'id' | 'subgraphError'>>;
  polygon_originTransfers?: SubscriptionResolver<Array<ResolversTypes['polygon_OriginTransfer']>, "polygon_originTransfers", ParentType, ContextType, RequireFields<Subscriptionpolygon_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['polygon_DestinationTransfer']>, "polygon_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionpolygon_destinationTransferArgs, 'id' | 'subgraphError'>>;
  polygon_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['polygon_DestinationTransfer']>, "polygon_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionpolygon_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['polygon_OriginMessage']>, "polygon_originMessage", ParentType, ContextType, RequireFields<Subscriptionpolygon_originMessageArgs, 'id' | 'subgraphError'>>;
  polygon_originMessages?: SubscriptionResolver<Array<ResolversTypes['polygon_OriginMessage']>, "polygon_originMessages", ParentType, ContextType, RequireFields<Subscriptionpolygon_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['polygon_AggregateRoot']>, "polygon_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionpolygon_aggregateRootArgs, 'id' | 'subgraphError'>>;
  polygon_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['polygon_AggregateRoot']>, "polygon_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionpolygon_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['polygon_ConnectorMeta']>, "polygon_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionpolygon_connectorMetaArgs, 'id' | 'subgraphError'>>;
  polygon_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['polygon_ConnectorMeta']>, "polygon_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionpolygon_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['polygon_RootCount']>, "polygon_rootCount", ParentType, ContextType, RequireFields<Subscriptionpolygon_rootCountArgs, 'id' | 'subgraphError'>>;
  polygon_rootCounts?: SubscriptionResolver<Array<ResolversTypes['polygon_RootCount']>, "polygon_rootCounts", ParentType, ContextType, RequireFields<Subscriptionpolygon_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['polygon_RootMessageSent']>, "polygon_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionpolygon_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  polygon_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['polygon_RootMessageSent']>, "polygon_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionpolygon_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  polygon__meta?: SubscriptionResolver<Maybe<ResolversTypes['polygon__Meta_']>, "polygon__meta", ParentType, ContextType, Partial<Subscriptionpolygon__metaArgs>>;
  xdai_asset?: SubscriptionResolver<Maybe<ResolversTypes['xdai_Asset']>, "xdai_asset", ParentType, ContextType, RequireFields<Subscriptionxdai_assetArgs, 'id' | 'subgraphError'>>;
  xdai_assets?: SubscriptionResolver<Array<ResolversTypes['xdai_Asset']>, "xdai_assets", ParentType, ContextType, RequireFields<Subscriptionxdai_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['xdai_AssetStatus']>, "xdai_assetStatus", ParentType, ContextType, RequireFields<Subscriptionxdai_assetStatusArgs, 'id' | 'subgraphError'>>;
  xdai_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['xdai_AssetStatus']>, "xdai_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionxdai_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['xdai_AssetBalance']>, "xdai_assetBalance", ParentType, ContextType, RequireFields<Subscriptionxdai_assetBalanceArgs, 'id' | 'subgraphError'>>;
  xdai_assetBalances?: SubscriptionResolver<Array<ResolversTypes['xdai_AssetBalance']>, "xdai_assetBalances", ParentType, ContextType, RequireFields<Subscriptionxdai_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_router?: SubscriptionResolver<Maybe<ResolversTypes['xdai_Router']>, "xdai_router", ParentType, ContextType, RequireFields<Subscriptionxdai_routerArgs, 'id' | 'subgraphError'>>;
  xdai_routers?: SubscriptionResolver<Array<ResolversTypes['xdai_Router']>, "xdai_routers", ParentType, ContextType, RequireFields<Subscriptionxdai_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_setting?: SubscriptionResolver<Maybe<ResolversTypes['xdai_Setting']>, "xdai_setting", ParentType, ContextType, RequireFields<Subscriptionxdai_settingArgs, 'id' | 'subgraphError'>>;
  xdai_settings?: SubscriptionResolver<Array<ResolversTypes['xdai_Setting']>, "xdai_settings", ParentType, ContextType, RequireFields<Subscriptionxdai_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_relayer?: SubscriptionResolver<Maybe<ResolversTypes['xdai_Relayer']>, "xdai_relayer", ParentType, ContextType, RequireFields<Subscriptionxdai_relayerArgs, 'id' | 'subgraphError'>>;
  xdai_relayers?: SubscriptionResolver<Array<ResolversTypes['xdai_Relayer']>, "xdai_relayers", ParentType, ContextType, RequireFields<Subscriptionxdai_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['xdai_Sequencer']>, "xdai_sequencer", ParentType, ContextType, RequireFields<Subscriptionxdai_sequencerArgs, 'id' | 'subgraphError'>>;
  xdai_sequencers?: SubscriptionResolver<Array<ResolversTypes['xdai_Sequencer']>, "xdai_sequencers", ParentType, ContextType, RequireFields<Subscriptionxdai_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['xdai_OriginTransfer']>, "xdai_originTransfer", ParentType, ContextType, RequireFields<Subscriptionxdai_originTransferArgs, 'id' | 'subgraphError'>>;
  xdai_originTransfers?: SubscriptionResolver<Array<ResolversTypes['xdai_OriginTransfer']>, "xdai_originTransfers", ParentType, ContextType, RequireFields<Subscriptionxdai_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['xdai_DestinationTransfer']>, "xdai_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionxdai_destinationTransferArgs, 'id' | 'subgraphError'>>;
  xdai_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['xdai_DestinationTransfer']>, "xdai_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionxdai_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['xdai_OriginMessage']>, "xdai_originMessage", ParentType, ContextType, RequireFields<Subscriptionxdai_originMessageArgs, 'id' | 'subgraphError'>>;
  xdai_originMessages?: SubscriptionResolver<Array<ResolversTypes['xdai_OriginMessage']>, "xdai_originMessages", ParentType, ContextType, RequireFields<Subscriptionxdai_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['xdai_AggregateRoot']>, "xdai_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionxdai_aggregateRootArgs, 'id' | 'subgraphError'>>;
  xdai_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['xdai_AggregateRoot']>, "xdai_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionxdai_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['xdai_ConnectorMeta']>, "xdai_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionxdai_connectorMetaArgs, 'id' | 'subgraphError'>>;
  xdai_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['xdai_ConnectorMeta']>, "xdai_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionxdai_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['xdai_RootCount']>, "xdai_rootCount", ParentType, ContextType, RequireFields<Subscriptionxdai_rootCountArgs, 'id' | 'subgraphError'>>;
  xdai_rootCounts?: SubscriptionResolver<Array<ResolversTypes['xdai_RootCount']>, "xdai_rootCounts", ParentType, ContextType, RequireFields<Subscriptionxdai_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['xdai_RootMessageSent']>, "xdai_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionxdai_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  xdai_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['xdai_RootMessageSent']>, "xdai_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionxdai_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  xdai__meta?: SubscriptionResolver<Maybe<ResolversTypes['xdai__Meta_']>, "xdai__meta", ParentType, ContextType, Partial<Subscriptionxdai__metaArgs>>;
  arbitrumone_asset?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_Asset']>, "arbitrumone_asset", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_assetArgs, 'id' | 'subgraphError'>>;
  arbitrumone_assets?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_Asset']>, "arbitrumone_assets", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_assetStatus?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_AssetStatus']>, "arbitrumone_assetStatus", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_assetStatusArgs, 'id' | 'subgraphError'>>;
  arbitrumone_assetStatuses?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_AssetStatus']>, "arbitrumone_assetStatuses", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_assetStatusesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_AssetBalance']>, "arbitrumone_assetBalance", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_assetBalanceArgs, 'id' | 'subgraphError'>>;
  arbitrumone_assetBalances?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_AssetBalance']>, "arbitrumone_assetBalances", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_router?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_Router']>, "arbitrumone_router", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_routerArgs, 'id' | 'subgraphError'>>;
  arbitrumone_routers?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_Router']>, "arbitrumone_routers", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_setting?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_Setting']>, "arbitrumone_setting", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_settingArgs, 'id' | 'subgraphError'>>;
  arbitrumone_settings?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_Setting']>, "arbitrumone_settings", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_relayer?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_Relayer']>, "arbitrumone_relayer", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_relayerArgs, 'id' | 'subgraphError'>>;
  arbitrumone_relayers?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_Relayer']>, "arbitrumone_relayers", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_Sequencer']>, "arbitrumone_sequencer", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_sequencerArgs, 'id' | 'subgraphError'>>;
  arbitrumone_sequencers?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_Sequencer']>, "arbitrumone_sequencers", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_OriginTransfer']>, "arbitrumone_originTransfer", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_originTransferArgs, 'id' | 'subgraphError'>>;
  arbitrumone_originTransfers?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_OriginTransfer']>, "arbitrumone_originTransfers", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_DestinationTransfer']>, "arbitrumone_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_destinationTransferArgs, 'id' | 'subgraphError'>>;
  arbitrumone_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_DestinationTransfer']>, "arbitrumone_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_OriginMessage']>, "arbitrumone_originMessage", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_originMessageArgs, 'id' | 'subgraphError'>>;
  arbitrumone_originMessages?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_OriginMessage']>, "arbitrumone_originMessages", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_AggregateRoot']>, "arbitrumone_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_aggregateRootArgs, 'id' | 'subgraphError'>>;
  arbitrumone_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_AggregateRoot']>, "arbitrumone_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_ConnectorMeta']>, "arbitrumone_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_connectorMetaArgs, 'id' | 'subgraphError'>>;
  arbitrumone_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_ConnectorMeta']>, "arbitrumone_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_RootCount']>, "arbitrumone_rootCount", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_rootCountArgs, 'id' | 'subgraphError'>>;
  arbitrumone_rootCounts?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_RootCount']>, "arbitrumone_rootCounts", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone_RootMessageSent']>, "arbitrumone_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  arbitrumone_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['arbitrumone_RootMessageSent']>, "arbitrumone_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionarbitrumone_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  arbitrumone__meta?: SubscriptionResolver<Maybe<ResolversTypes['arbitrumone__Meta_']>, "arbitrumone__meta", ParentType, ContextType, Partial<Subscriptionarbitrumone__metaArgs>>;
  staginggoerli_asset?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_Asset']>, "staginggoerli_asset", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_assetArgs, 'id' | 'subgraphError'>>;
  staginggoerli_assets?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_Asset']>, "staginggoerli_assets", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_assetsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_assetBalance?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_AssetBalance']>, "staginggoerli_assetBalance", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_assetBalanceArgs, 'id' | 'subgraphError'>>;
  staginggoerli_assetBalances?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_AssetBalance']>, "staginggoerli_assetBalances", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_assetBalancesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_router?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_Router']>, "staginggoerli_router", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_routerArgs, 'id' | 'subgraphError'>>;
  staginggoerli_routers?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_Router']>, "staginggoerli_routers", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_routersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_setting?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_Setting']>, "staginggoerli_setting", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_settingArgs, 'id' | 'subgraphError'>>;
  staginggoerli_settings?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_Setting']>, "staginggoerli_settings", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_settingsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_relayer?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_Relayer']>, "staginggoerli_relayer", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_relayerArgs, 'id' | 'subgraphError'>>;
  staginggoerli_relayers?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_Relayer']>, "staginggoerli_relayers", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_relayersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_transferRelayerFee?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_TransferRelayerFee']>, "staginggoerli_transferRelayerFee", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_transferRelayerFeeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_transferRelayerFees?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_TransferRelayerFee']>, "staginggoerli_transferRelayerFees", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_transferRelayerFeesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_sequencer?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_Sequencer']>, "staginggoerli_sequencer", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_sequencerArgs, 'id' | 'subgraphError'>>;
  staginggoerli_sequencers?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_Sequencer']>, "staginggoerli_sequencers", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_sequencersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_originTransfer?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_OriginTransfer']>, "staginggoerli_originTransfer", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_originTransferArgs, 'id' | 'subgraphError'>>;
  staginggoerli_originTransfers?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_OriginTransfer']>, "staginggoerli_originTransfers", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_originTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_destinationTransfer?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_DestinationTransfer']>, "staginggoerli_destinationTransfer", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_destinationTransferArgs, 'id' | 'subgraphError'>>;
  staginggoerli_destinationTransfers?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_DestinationTransfer']>, "staginggoerli_destinationTransfers", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_destinationTransfersArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_originMessage?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_OriginMessage']>, "staginggoerli_originMessage", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_originMessageArgs, 'id' | 'subgraphError'>>;
  staginggoerli_originMessages?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_OriginMessage']>, "staginggoerli_originMessages", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_originMessagesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_aggregateRoot?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_AggregateRoot']>, "staginggoerli_aggregateRoot", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_aggregateRootArgs, 'id' | 'subgraphError'>>;
  staginggoerli_aggregateRoots?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_AggregateRoot']>, "staginggoerli_aggregateRoots", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_aggregateRootsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_connectorMeta?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_ConnectorMeta']>, "staginggoerli_connectorMeta", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_connectorMetaArgs, 'id' | 'subgraphError'>>;
  staginggoerli_connectorMetas?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_ConnectorMeta']>, "staginggoerli_connectorMetas", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_connectorMetasArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootCount?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_RootCount']>, "staginggoerli_rootCount", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootCountArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootCounts?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_RootCount']>, "staginggoerli_rootCounts", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootCountsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_rootMessageSent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_RootMessageSent']>, "staginggoerli_rootMessageSent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootMessageSentArgs, 'id' | 'subgraphError'>>;
  staginggoerli_rootMessageSents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_RootMessageSent']>, "staginggoerli_rootMessageSents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_rootMessageSentsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwap?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwap']>, "staginggoerli_stableSwap", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwaps?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwap']>, "staginggoerli_stableSwaps", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_pooledToken?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_PooledToken']>, "staginggoerli_pooledToken", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_pooledTokenArgs, 'id' | 'subgraphError'>>;
  staginggoerli_pooledTokens?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_PooledToken']>, "staginggoerli_pooledTokens", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_pooledTokensArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapAddLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent']>, "staginggoerli_stableSwapAddLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapAddLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapAddLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwapAddLiquidityEvent']>, "staginggoerli_stableSwapAddLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapAddLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapRemoveLiquidityEvent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent']>, "staginggoerli_stableSwapRemoveLiquidityEvent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapRemoveLiquidityEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapRemoveLiquidityEvents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwapRemoveLiquidityEvent']>, "staginggoerli_stableSwapRemoveLiquidityEvents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapRemoveLiquidityEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapExchange?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwapExchange']>, "staginggoerli_stableSwapExchange", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapExchangeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapExchanges?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwapExchange']>, "staginggoerli_stableSwapExchanges", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapExchangesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapDailyVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_SwapDailyVolume']>, "staginggoerli_swapDailyVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapDailyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapDailyVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_SwapDailyVolume']>, "staginggoerli_swapDailyVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapDailyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapHourlyVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_SwapHourlyVolume']>, "staginggoerli_swapHourlyVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapHourlyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapHourlyVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_SwapHourlyVolume']>, "staginggoerli_swapHourlyVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapHourlyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapWeeklyVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_SwapWeeklyVolume']>, "staginggoerli_swapWeeklyVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapWeeklyVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapWeeklyVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_SwapWeeklyVolume']>, "staginggoerli_swapWeeklyVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapWeeklyVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_stableSwapEvent?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_StableSwapEvent']>, "staginggoerli_stableSwapEvent", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapEventArgs, 'id' | 'subgraphError'>>;
  staginggoerli_stableSwapEvents?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_StableSwapEvent']>, "staginggoerli_stableSwapEvents", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_stableSwapEventsArgs, 'skip' | 'first' | 'subgraphError'>>;
  staginggoerli_swapTradeVolume?: SubscriptionResolver<Maybe<ResolversTypes['staginggoerli_SwapTradeVolume']>, "staginggoerli_swapTradeVolume", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapTradeVolumeArgs, 'id' | 'subgraphError'>>;
  staginggoerli_swapTradeVolumes?: SubscriptionResolver<Array<ResolversTypes['staginggoerli_SwapTradeVolume']>, "staginggoerli_swapTradeVolumes", ParentType, ContextType, RequireFields<Subscriptionstaginggoerli_swapTradeVolumesArgs, 'skip' | 'first' | 'subgraphError'>>;
}>;

export interface polygon_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['polygon_swap_BigDecimal'], any> {
  name: 'polygon_swap_BigDecimal';
}

export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
  name: 'BigInt';
}

export interface polygon_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['polygon_swap_Bytes'], any> {
  name: 'polygon_swap_Bytes';
}

export type polygon_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_PooledToken'] = ResolversParentTypes['polygon_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['polygon_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_StableSwap'] = ResolversParentTypes['polygon_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['polygon_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['polygon_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['polygon_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['polygon_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['polygon_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['polygon_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<polygon_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['polygon_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<polygon_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['polygon_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<polygon_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['polygon_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<polygon_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['polygon_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<polygon_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['polygon_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['polygon_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['polygon_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_StableSwapEvent'] = ResolversParentTypes['polygon_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'polygon_swap_StableSwapAddLiquidityEvent' | 'polygon_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['polygon_swap_Bytes'], ParentType, ContextType>;
}>;

export type polygon_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_StableSwapExchange'] = ResolversParentTypes['polygon_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['polygon_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['polygon_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['polygon_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['polygon_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['polygon_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_SwapDailyVolume'] = ResolversParentTypes['polygon_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['polygon_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_SwapHourlyVolume'] = ResolversParentTypes['polygon_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['polygon_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_SwapTradeVolume'] = ResolversParentTypes['polygon_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'polygon_swap_SwapDailyVolume' | 'polygon_swap_SwapHourlyVolume' | 'polygon_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['polygon_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type polygon_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_SwapWeeklyVolume'] = ResolversParentTypes['polygon_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['polygon_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['polygon_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap_SystemInfo'] = ResolversParentTypes['polygon_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap__Block_'] = ResolversParentTypes['polygon_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['polygon_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_swap__Meta_'] = ResolversParentTypes['polygon_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['polygon_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_AggregateRoot'] = ResolversParentTypes['optimismgoerli_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_Asset'] = ResolversParentTypes['optimismgoerli_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['optimismgoerli_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_AssetBalance'] = ResolversParentTypes['optimismgoerli_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['optimismgoerli_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['optimismgoerli_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_AssetStatus'] = ResolversParentTypes['optimismgoerli_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface optimismgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimismgoerli_BigDecimal'], any> {
  name: 'optimismgoerli_BigDecimal';
}

export interface optimismgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimismgoerli_Bytes'], any> {
  name: 'optimismgoerli_Bytes';
}

export type optimismgoerli_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_ConnectorMeta'] = ResolversParentTypes['optimismgoerli_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_DestinationTransfer'] = ResolversParentTypes['optimismgoerli_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['optimismgoerli_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_Router']>>, ParentType, ContextType, RequireFields<optimismgoerli_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['optimismgoerli_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_OriginMessage'] = ResolversParentTypes['optimismgoerli_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['optimismgoerli_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_OriginTransfer'] = ResolversParentTypes['optimismgoerli_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['optimismgoerli_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['optimismgoerli_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['optimismgoerli_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_Relayer'] = ResolversParentTypes['optimismgoerli_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_RootCount'] = ResolversParentTypes['optimismgoerli_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_RootMessageSent'] = ResolversParentTypes['optimismgoerli_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_Router'] = ResolversParentTypes['optimismgoerli_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['optimismgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<optimismgoerli_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_Sequencer'] = ResolversParentTypes['optimismgoerli_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_Setting'] = ResolversParentTypes['optimismgoerli_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['optimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli__Block_'] = ResolversParentTypes['optimismgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['optimismgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli__Meta_'] = ResolversParentTypes['optimismgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['optimismgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface stagingarbitrumgoerli_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingarbitrumgoerli_swap_BigDecimal'], any> {
  name: 'stagingarbitrumgoerli_swap_BigDecimal';
}

export interface stagingarbitrumgoerli_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], any> {
  name: 'stagingarbitrumgoerli_swap_Bytes';
}

export type stagingarbitrumgoerli_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_PooledToken'] = ResolversParentTypes['stagingarbitrumgoerli_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwap'] = ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapEvent'] = ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent' | 'stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapExchange'] = ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_SwapDailyVolume'] = ResolversParentTypes['stagingarbitrumgoerli_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_SwapHourlyVolume'] = ResolversParentTypes['stagingarbitrumgoerli_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_SwapTradeVolume'] = ResolversParentTypes['stagingarbitrumgoerli_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingarbitrumgoerli_swap_SwapDailyVolume' | 'stagingarbitrumgoerli_swap_SwapHourlyVolume' | 'stagingarbitrumgoerli_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_SwapWeeklyVolume'] = ResolversParentTypes['stagingarbitrumgoerli_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap_SystemInfo'] = ResolversParentTypes['stagingarbitrumgoerli_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap__Block_'] = ResolversParentTypes['stagingarbitrumgoerli_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_swap__Meta_'] = ResolversParentTypes['stagingarbitrumgoerli_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['stagingarbitrumgoerli_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_AggregateRoot'] = ResolversParentTypes['arbitrumgoerli_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_Asset'] = ResolversParentTypes['arbitrumgoerli_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_AssetBalance'] = ResolversParentTypes['arbitrumgoerli_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['arbitrumgoerli_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['arbitrumgoerli_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_AssetStatus'] = ResolversParentTypes['arbitrumgoerli_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface arbitrumgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumgoerli_BigDecimal'], any> {
  name: 'arbitrumgoerli_BigDecimal';
}

export interface arbitrumgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumgoerli_Bytes'], any> {
  name: 'arbitrumgoerli_Bytes';
}

export type arbitrumgoerli_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_ConnectorMeta'] = ResolversParentTypes['arbitrumgoerli_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_DestinationTransfer'] = ResolversParentTypes['arbitrumgoerli_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_Router']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_OriginMessage'] = ResolversParentTypes['arbitrumgoerli_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_OriginTransfer'] = ResolversParentTypes['arbitrumgoerli_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_Relayer'] = ResolversParentTypes['arbitrumgoerli_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_RootCount'] = ResolversParentTypes['arbitrumgoerli_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_RootMessageSent'] = ResolversParentTypes['arbitrumgoerli_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_Router'] = ResolversParentTypes['arbitrumgoerli_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['arbitrumgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<arbitrumgoerli_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_Sequencer'] = ResolversParentTypes['arbitrumgoerli_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_Setting'] = ResolversParentTypes['arbitrumgoerli_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['arbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli__Block_'] = ResolversParentTypes['arbitrumgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli__Meta_'] = ResolversParentTypes['arbitrumgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['arbitrumgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface stagingoptimismgoerli_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingoptimismgoerli_swap_BigDecimal'], any> {
  name: 'stagingoptimismgoerli_swap_BigDecimal';
}

export interface stagingoptimismgoerli_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], any> {
  name: 'stagingoptimismgoerli_swap_Bytes';
}

export type stagingoptimismgoerli_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_PooledToken'] = ResolversParentTypes['stagingoptimismgoerli_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_StableSwap'] = ResolversParentTypes['stagingoptimismgoerli_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapEvent'] = ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent' | 'stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapExchange'] = ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_SwapDailyVolume'] = ResolversParentTypes['stagingoptimismgoerli_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_SwapHourlyVolume'] = ResolversParentTypes['stagingoptimismgoerli_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_SwapTradeVolume'] = ResolversParentTypes['stagingoptimismgoerli_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingoptimismgoerli_swap_SwapDailyVolume' | 'stagingoptimismgoerli_swap_SwapHourlyVolume' | 'stagingoptimismgoerli_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_SwapWeeklyVolume'] = ResolversParentTypes['stagingoptimismgoerli_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingoptimismgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap_SystemInfo'] = ResolversParentTypes['stagingoptimismgoerli_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap__Block_'] = ResolversParentTypes['stagingoptimismgoerli_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_swap__Meta_'] = ResolversParentTypes['stagingoptimismgoerli_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['stagingoptimismgoerli_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli_Asset'] = ResolversParentTypes['testgoerli_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  local?: Resolver<ResolversTypes['testgoerli_Bytes'], ParentType, ContextType>;
  adoptedAsset?: Resolver<ResolversTypes['testgoerli_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<ResolversTypes['testgoerli_Bytes'], ParentType, ContextType>;
  canonicalDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli_AssetBalance'] = ResolversParentTypes['testgoerli_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['testgoerli_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['testgoerli_Asset'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface testgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['testgoerli_BigDecimal'], any> {
  name: 'testgoerli_BigDecimal';
}

export interface testgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['testgoerli_Bytes'], any> {
  name: 'testgoerli_Bytes';
}

export type testgoerli_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli_DestinationTransfer'] = ResolversParentTypes['testgoerli_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  agent?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  recovery?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  forceSlow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callback?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  callbackFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['testgoerli_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['testgoerli_Router']>>, ParentType, ContextType, RequireFields<testgoerli_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originSender?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  transactingAsset?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  transactingAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  localAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  sponsorVaultRelayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli_OriginTransfer'] = ResolversParentTypes['testgoerli_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  agent?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  recovery?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  forceSlow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callback?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  callbackFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['testgoerli_TransferStatus']>, ParentType, ContextType>;
  originMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transactingAsset?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  transactingAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bridgedAsset?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli_Relayer'] = ResolversParentTypes['testgoerli_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli_Router'] = ResolversParentTypes['testgoerli_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['testgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<testgoerli_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli_Setting'] = ResolversParentTypes['testgoerli_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['testgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli_SponsorVaultResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli_SponsorVault'] = ResolversParentTypes['testgoerli_SponsorVault']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  sponsorVault?: Resolver<ResolversTypes['testgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli_StableSwap'] = ResolversParentTypes['testgoerli_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  canonicalId?: Resolver<ResolversTypes['testgoerli_Bytes'], ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<ResolversTypes['testgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli__Block_'] = ResolversParentTypes['testgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['testgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testgoerli__Meta_'] = ResolversParentTypes['testgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['testgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface xdai_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['xdai_swap_BigDecimal'], any> {
  name: 'xdai_swap_BigDecimal';
}

export interface xdai_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['xdai_swap_Bytes'], any> {
  name: 'xdai_swap_Bytes';
}

export type xdai_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_PooledToken'] = ResolversParentTypes['xdai_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['xdai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_StableSwap'] = ResolversParentTypes['xdai_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['xdai_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['xdai_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['xdai_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['xdai_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['xdai_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['xdai_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<xdai_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['xdai_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<xdai_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['xdai_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<xdai_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['xdai_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<xdai_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['xdai_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<xdai_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['xdai_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['xdai_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['xdai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_StableSwapEvent'] = ResolversParentTypes['xdai_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'xdai_swap_StableSwapAddLiquidityEvent' | 'xdai_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['xdai_swap_Bytes'], ParentType, ContextType>;
}>;

export type xdai_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_StableSwapExchange'] = ResolversParentTypes['xdai_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['xdai_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['xdai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['xdai_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['xdai_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['xdai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_SwapDailyVolume'] = ResolversParentTypes['xdai_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['xdai_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_SwapHourlyVolume'] = ResolversParentTypes['xdai_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['xdai_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_SwapTradeVolume'] = ResolversParentTypes['xdai_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'xdai_swap_SwapDailyVolume' | 'xdai_swap_SwapHourlyVolume' | 'xdai_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['xdai_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type xdai_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_SwapWeeklyVolume'] = ResolversParentTypes['xdai_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['xdai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['xdai_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap_SystemInfo'] = ResolversParentTypes['xdai_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap__Block_'] = ResolversParentTypes['xdai_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['xdai_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_swap__Meta_'] = ResolversParentTypes['xdai_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['xdai_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_AggregatedMessageRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_AggregatedMessageRoot'] = ResolversParentTypes['staginggoerli_AggregatedMessageRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  receivedRoot?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_ArbitrumConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_ArbitrumConnectorMeta'] = ResolversParentTypes['staginggoerli_ArbitrumConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface staginggoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['staginggoerli_BigDecimal'], any> {
  name: 'staginggoerli_BigDecimal';
}

export type staginggoerli_BnbConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_BnbConnectorMeta'] = ResolversParentTypes['staginggoerli_BnbConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface staginggoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['staginggoerli_Bytes'], any> {
  name: 'staginggoerli_Bytes';
}

export type staginggoerli_GnosisConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_GnosisConnectorMeta'] = ResolversParentTypes['staginggoerli_GnosisConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_OptimismConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_OptimismConnectorMeta'] = ResolversParentTypes['staginggoerli_OptimismConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_PolygonConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_PolygonConnectorMeta'] = ResolversParentTypes['staginggoerli_PolygonConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_RootAggregatedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_RootAggregated'] = ResolversParentTypes['staginggoerli_RootAggregated']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  receivedRoot?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_RootManagerMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_RootManagerMeta'] = ResolversParentTypes['staginggoerli_RootManagerMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domains?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  connectors?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_Bytes']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_RootMessageProcessedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_RootMessageProcessed'] = ResolversParentTypes['staginggoerli_RootMessageProcessed']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_RootPropagatedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_RootPropagated'] = ResolversParentTypes['staginggoerli_RootPropagated']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  domainsHash?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  count?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli__Block_'] = ResolversParentTypes['staginggoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli__Meta_'] = ResolversParentTypes['staginggoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['staginggoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_AggregatedMessageRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_AggregatedMessageRoot'] = ResolversParentTypes['mainnet_AggregatedMessageRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  receivedRoot?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_ArbitrumConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_ArbitrumConnectorMeta'] = ResolversParentTypes['mainnet_ArbitrumConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface mainnet_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['mainnet_BigDecimal'], any> {
  name: 'mainnet_BigDecimal';
}

export type mainnet_BnbConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_BnbConnectorMeta'] = ResolversParentTypes['mainnet_BnbConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface mainnet_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['mainnet_Bytes'], any> {
  name: 'mainnet_Bytes';
}

export type mainnet_GnosisConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_GnosisConnectorMeta'] = ResolversParentTypes['mainnet_GnosisConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_OptimismConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_OptimismConnectorMeta'] = ResolversParentTypes['mainnet_OptimismConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_PolygonConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_PolygonConnectorMeta'] = ResolversParentTypes['mainnet_PolygonConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_RootAggregatedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_RootAggregated'] = ResolversParentTypes['mainnet_RootAggregated']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  receivedRoot?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_RootManagerMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_RootManagerMeta'] = ResolversParentTypes['mainnet_RootManagerMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domains?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  connectors?: Resolver<Maybe<Array<ResolversTypes['mainnet_Bytes']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_RootMessageProcessedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_RootMessageProcessed'] = ResolversParentTypes['mainnet_RootMessageProcessed']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_RootPropagatedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_RootPropagated'] = ResolversParentTypes['mainnet_RootPropagated']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  domainsHash?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  count?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet__Block_'] = ResolversParentTypes['mainnet__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet__Meta_'] = ResolversParentTypes['mainnet__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['mainnet__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli_Asset'] = ResolversParentTypes['testoptimismgoerli_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  local?: Resolver<ResolversTypes['testoptimismgoerli_Bytes'], ParentType, ContextType>;
  adoptedAsset?: Resolver<ResolversTypes['testoptimismgoerli_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<ResolversTypes['testoptimismgoerli_Bytes'], ParentType, ContextType>;
  canonicalDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli_AssetBalance'] = ResolversParentTypes['testoptimismgoerli_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['testoptimismgoerli_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['testoptimismgoerli_Asset'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface testoptimismgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['testoptimismgoerli_BigDecimal'], any> {
  name: 'testoptimismgoerli_BigDecimal';
}

export interface testoptimismgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['testoptimismgoerli_Bytes'], any> {
  name: 'testoptimismgoerli_Bytes';
}

export type testoptimismgoerli_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli_DestinationTransfer'] = ResolversParentTypes['testoptimismgoerli_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  agent?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  recovery?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  forceSlow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callback?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  callbackFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['testoptimismgoerli_Router']>>, ParentType, ContextType, RequireFields<testoptimismgoerli_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originSender?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  transactingAsset?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  transactingAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  localAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  sponsorVaultRelayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli_OriginTransfer'] = ResolversParentTypes['testoptimismgoerli_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  agent?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  recovery?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  forceSlow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callback?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  callbackFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_TransferStatus']>, ParentType, ContextType>;
  originMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transactingAsset?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  transactingAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bridgedAsset?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli_Relayer'] = ResolversParentTypes['testoptimismgoerli_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli_Router'] = ResolversParentTypes['testoptimismgoerli_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['testoptimismgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<testoptimismgoerli_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli_Setting'] = ResolversParentTypes['testoptimismgoerli_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['testoptimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli_SponsorVaultResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli_SponsorVault'] = ResolversParentTypes['testoptimismgoerli_SponsorVault']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  sponsorVault?: Resolver<ResolversTypes['testoptimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli_StableSwap'] = ResolversParentTypes['testoptimismgoerli_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  canonicalId?: Resolver<ResolversTypes['testoptimismgoerli_Bytes'], ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<ResolversTypes['testoptimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli__Block_'] = ResolversParentTypes['testoptimismgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['testoptimismgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type testoptimismgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['testoptimismgoerli__Meta_'] = ResolversParentTypes['testoptimismgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['testoptimismgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface optimism_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimism_swap_BigDecimal'], any> {
  name: 'optimism_swap_BigDecimal';
}

export interface optimism_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimism_swap_Bytes'], any> {
  name: 'optimism_swap_Bytes';
}

export type optimism_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_PooledToken'] = ResolversParentTypes['optimism_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['optimism_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_StableSwap'] = ResolversParentTypes['optimism_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['optimism_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimism_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['optimism_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['optimism_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['optimism_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['optimism_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<optimism_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['optimism_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<optimism_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimism_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<optimism_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimism_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<optimism_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimism_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<optimism_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['optimism_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['optimism_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimism_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_StableSwapEvent'] = ResolversParentTypes['optimism_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'optimism_swap_StableSwapAddLiquidityEvent' | 'optimism_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimism_swap_Bytes'], ParentType, ContextType>;
}>;

export type optimism_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_StableSwapExchange'] = ResolversParentTypes['optimism_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['optimism_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimism_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['optimism_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['optimism_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimism_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_SwapDailyVolume'] = ResolversParentTypes['optimism_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimism_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_SwapHourlyVolume'] = ResolversParentTypes['optimism_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimism_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_SwapTradeVolume'] = ResolversParentTypes['optimism_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'optimism_swap_SwapDailyVolume' | 'optimism_swap_SwapHourlyVolume' | 'optimism_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimism_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type optimism_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_SwapWeeklyVolume'] = ResolversParentTypes['optimism_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimism_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimism_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap_SystemInfo'] = ResolversParentTypes['optimism_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap__Block_'] = ResolversParentTypes['optimism_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['optimism_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_swap__Meta_'] = ResolversParentTypes['optimism_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['optimism_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface goerli_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['goerli_swap_BigDecimal'], any> {
  name: 'goerli_swap_BigDecimal';
}

export interface goerli_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['goerli_swap_Bytes'], any> {
  name: 'goerli_swap_Bytes';
}

export type goerli_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_PooledToken'] = ResolversParentTypes['goerli_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['goerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_StableSwap'] = ResolversParentTypes['goerli_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['goerli_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['goerli_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['goerli_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['goerli_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['goerli_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['goerli_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<goerli_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['goerli_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<goerli_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['goerli_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<goerli_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['goerli_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<goerli_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['goerli_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<goerli_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['goerli_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['goerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['goerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_StableSwapEvent'] = ResolversParentTypes['goerli_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'goerli_swap_StableSwapAddLiquidityEvent' | 'goerli_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['goerli_swap_Bytes'], ParentType, ContextType>;
}>;

export type goerli_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_StableSwapExchange'] = ResolversParentTypes['goerli_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['goerli_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['goerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['goerli_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['goerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['goerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_SwapDailyVolume'] = ResolversParentTypes['goerli_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['goerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_SwapHourlyVolume'] = ResolversParentTypes['goerli_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['goerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_SwapTradeVolume'] = ResolversParentTypes['goerli_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'goerli_swap_SwapDailyVolume' | 'goerli_swap_SwapHourlyVolume' | 'goerli_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['goerli_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type goerli_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_SwapWeeklyVolume'] = ResolversParentTypes['goerli_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['goerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['goerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap_SystemInfo'] = ResolversParentTypes['goerli_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap__Block_'] = ResolversParentTypes['goerli_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['goerli_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_swap__Meta_'] = ResolversParentTypes['goerli_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['goerli_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface optimismgoerli_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimismgoerli_swap_BigDecimal'], any> {
  name: 'optimismgoerli_swap_BigDecimal';
}

export interface optimismgoerli_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimismgoerli_swap_Bytes'], any> {
  name: 'optimismgoerli_swap_Bytes';
}

export type optimismgoerli_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_PooledToken'] = ResolversParentTypes['optimismgoerli_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['optimismgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_StableSwap'] = ResolversParentTypes['optimismgoerli_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['optimismgoerli_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['optimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<optimismgoerli_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<optimismgoerli_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<optimismgoerli_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<optimismgoerli_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['optimismgoerli_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<optimismgoerli_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['optimismgoerli_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['optimismgoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimismgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_StableSwapEvent'] = ResolversParentTypes['optimismgoerli_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'optimismgoerli_swap_StableSwapAddLiquidityEvent' | 'optimismgoerli_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimismgoerli_swap_Bytes'], ParentType, ContextType>;
}>;

export type optimismgoerli_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_StableSwapExchange'] = ResolversParentTypes['optimismgoerli_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['optimismgoerli_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimismgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['optimismgoerli_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['optimismgoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['optimismgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_SwapDailyVolume'] = ResolversParentTypes['optimismgoerli_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimismgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_SwapHourlyVolume'] = ResolversParentTypes['optimismgoerli_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimismgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_SwapTradeVolume'] = ResolversParentTypes['optimismgoerli_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'optimismgoerli_swap_SwapDailyVolume' | 'optimismgoerli_swap_SwapHourlyVolume' | 'optimismgoerli_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimismgoerli_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type optimismgoerli_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_SwapWeeklyVolume'] = ResolversParentTypes['optimismgoerli_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['optimismgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['optimismgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap_SystemInfo'] = ResolversParentTypes['optimismgoerli_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap__Block_'] = ResolversParentTypes['optimismgoerli_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['optimismgoerli_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimismgoerli_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimismgoerli_swap__Meta_'] = ResolversParentTypes['optimismgoerli_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['optimismgoerli_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface stagingmumbai_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingmumbai_swap_BigDecimal'], any> {
  name: 'stagingmumbai_swap_BigDecimal';
}

export interface stagingmumbai_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingmumbai_swap_Bytes'], any> {
  name: 'stagingmumbai_swap_Bytes';
}

export type stagingmumbai_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_PooledToken'] = ResolversParentTypes['stagingmumbai_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['stagingmumbai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_StableSwap'] = ResolversParentTypes['stagingmumbai_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['stagingmumbai_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['stagingmumbai_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<stagingmumbai_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<stagingmumbai_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<stagingmumbai_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<stagingmumbai_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<stagingmumbai_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['stagingmumbai_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingmumbai_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingmumbai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_StableSwapEvent'] = ResolversParentTypes['stagingmumbai_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingmumbai_swap_StableSwapAddLiquidityEvent' | 'stagingmumbai_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingmumbai_swap_Bytes'], ParentType, ContextType>;
}>;

export type stagingmumbai_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_StableSwapExchange'] = ResolversParentTypes['stagingmumbai_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['stagingmumbai_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingmumbai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['stagingmumbai_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['stagingmumbai_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['stagingmumbai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_SwapDailyVolume'] = ResolversParentTypes['stagingmumbai_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingmumbai_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_SwapHourlyVolume'] = ResolversParentTypes['stagingmumbai_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingmumbai_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_SwapTradeVolume'] = ResolversParentTypes['stagingmumbai_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'stagingmumbai_swap_SwapDailyVolume' | 'stagingmumbai_swap_SwapHourlyVolume' | 'stagingmumbai_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingmumbai_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type stagingmumbai_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_SwapWeeklyVolume'] = ResolversParentTypes['stagingmumbai_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['stagingmumbai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['stagingmumbai_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap_SystemInfo'] = ResolversParentTypes['stagingmumbai_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap__Block_'] = ResolversParentTypes['stagingmumbai_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['stagingmumbai_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_swap__Meta_'] = ResolversParentTypes['stagingmumbai_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['stagingmumbai_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_AggregatedMessageRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_AggregatedMessageRoot'] = ResolversParentTypes['goerli_AggregatedMessageRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  receivedRoot?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_ArbitrumConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_ArbitrumConnectorMeta'] = ResolversParentTypes['goerli_ArbitrumConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface goerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['goerli_BigDecimal'], any> {
  name: 'goerli_BigDecimal';
}

export type goerli_BnbConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_BnbConnectorMeta'] = ResolversParentTypes['goerli_BnbConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface goerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['goerli_Bytes'], any> {
  name: 'goerli_Bytes';
}

export type goerli_GnosisConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_GnosisConnectorMeta'] = ResolversParentTypes['goerli_GnosisConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_OptimismConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_OptimismConnectorMeta'] = ResolversParentTypes['goerli_OptimismConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_PolygonConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_PolygonConnectorMeta'] = ResolversParentTypes['goerli_PolygonConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  amb?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  rootManager?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  mirrorConnector?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_RootAggregatedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_RootAggregated'] = ResolversParentTypes['goerli_RootAggregated']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  receivedRoot?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  index?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_RootManagerMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_RootManagerMeta'] = ResolversParentTypes['goerli_RootManagerMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  domains?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  connectors?: Resolver<Maybe<Array<ResolversTypes['goerli_Bytes']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_RootMessageProcessedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_RootMessageProcessed'] = ResolversParentTypes['goerli_RootMessageProcessed']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  hubDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_RootPropagatedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_RootPropagated'] = ResolversParentTypes['goerli_RootPropagated']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  domainsHash?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  count?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli__Block_'] = ResolversParentTypes['goerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli__Meta_'] = ResolversParentTypes['goerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['goerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337_Asset'] = ResolversParentTypes['local1337_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  local?: Resolver<ResolversTypes['local1337_Bytes'], ParentType, ContextType>;
  adoptedAsset?: Resolver<ResolversTypes['local1337_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<ResolversTypes['local1337_Bytes'], ParentType, ContextType>;
  canonicalDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337_AssetBalance'] = ResolversParentTypes['local1337_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['local1337_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['local1337_Asset'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface local1337_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['local1337_BigDecimal'], any> {
  name: 'local1337_BigDecimal';
}

export interface local1337_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['local1337_Bytes'], any> {
  name: 'local1337_Bytes';
}

export type local1337_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337_DestinationTransfer'] = ResolversParentTypes['local1337_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  agent?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  recovery?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  forceSlow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callback?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  callbackFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['local1337_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['local1337_Router']>>, ParentType, ContextType, RequireFields<local1337_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originSender?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  transactingAsset?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  transactingAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  localAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  sponsorVaultRelayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337_OriginTransfer'] = ResolversParentTypes['local1337_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  agent?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  recovery?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  forceSlow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callback?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  callbackFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['local1337_TransferStatus']>, ParentType, ContextType>;
  originMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transactingAsset?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  transactingAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bridgedAsset?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  bridgedAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337_Relayer'] = ResolversParentTypes['local1337_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337_Router'] = ResolversParentTypes['local1337_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['local1337_AssetBalance']>, ParentType, ContextType, RequireFields<local1337_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337_Setting'] = ResolversParentTypes['local1337_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['local1337_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337_SponsorVaultResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337_SponsorVault'] = ResolversParentTypes['local1337_SponsorVault']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  sponsorVault?: Resolver<ResolversTypes['local1337_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337_StableSwap'] = ResolversParentTypes['local1337_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  canonicalId?: Resolver<ResolversTypes['local1337_Bytes'], ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<ResolversTypes['local1337_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337__Block_'] = ResolversParentTypes['local1337__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['local1337_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1337__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1337__Meta_'] = ResolversParentTypes['local1337__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['local1337__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface bnb_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['bnb_swap_BigDecimal'], any> {
  name: 'bnb_swap_BigDecimal';
}

export interface bnb_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['bnb_swap_Bytes'], any> {
  name: 'bnb_swap_Bytes';
}

export type bnb_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_PooledToken'] = ResolversParentTypes['bnb_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['bnb_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_StableSwap'] = ResolversParentTypes['bnb_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['bnb_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['bnb_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['bnb_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['bnb_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['bnb_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['bnb_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<bnb_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['bnb_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<bnb_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['bnb_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<bnb_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['bnb_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<bnb_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['bnb_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<bnb_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['bnb_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['bnb_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['bnb_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_StableSwapEvent'] = ResolversParentTypes['bnb_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'bnb_swap_StableSwapAddLiquidityEvent' | 'bnb_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['bnb_swap_Bytes'], ParentType, ContextType>;
}>;

export type bnb_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_StableSwapExchange'] = ResolversParentTypes['bnb_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['bnb_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['bnb_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['bnb_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['bnb_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['bnb_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_SwapDailyVolume'] = ResolversParentTypes['bnb_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['bnb_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_SwapHourlyVolume'] = ResolversParentTypes['bnb_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['bnb_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_SwapTradeVolume'] = ResolversParentTypes['bnb_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'bnb_swap_SwapDailyVolume' | 'bnb_swap_SwapHourlyVolume' | 'bnb_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['bnb_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type bnb_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_SwapWeeklyVolume'] = ResolversParentTypes['bnb_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['bnb_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['bnb_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap_SystemInfo'] = ResolversParentTypes['bnb_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap__Block_'] = ResolversParentTypes['bnb_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['bnb_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_swap__Meta_'] = ResolversParentTypes['bnb_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['bnb_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface arbitrumgoerli_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumgoerli_swap_BigDecimal'], any> {
  name: 'arbitrumgoerli_swap_BigDecimal';
}

export interface arbitrumgoerli_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumgoerli_swap_Bytes'], any> {
  name: 'arbitrumgoerli_swap_Bytes';
}

export type arbitrumgoerli_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_PooledToken'] = ResolversParentTypes['arbitrumgoerli_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['arbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_StableSwap'] = ResolversParentTypes['arbitrumgoerli_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['arbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['arbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumgoerli_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<arbitrumgoerli_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['arbitrumgoerli_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['arbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_StableSwapEvent'] = ResolversParentTypes['arbitrumgoerli_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'arbitrumgoerli_swap_StableSwapAddLiquidityEvent' | 'arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_StableSwapExchange'] = ResolversParentTypes['arbitrumgoerli_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['arbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['arbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumgoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_SwapDailyVolume'] = ResolversParentTypes['arbitrumgoerli_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_SwapHourlyVolume'] = ResolversParentTypes['arbitrumgoerli_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_SwapTradeVolume'] = ResolversParentTypes['arbitrumgoerli_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'arbitrumgoerli_swap_SwapDailyVolume' | 'arbitrumgoerli_swap_SwapHourlyVolume' | 'arbitrumgoerli_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumgoerli_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_SwapWeeklyVolume'] = ResolversParentTypes['arbitrumgoerli_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumgoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumgoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap_SystemInfo'] = ResolversParentTypes['arbitrumgoerli_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap__Block_'] = ResolversParentTypes['arbitrumgoerli_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['arbitrumgoerli_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumgoerli_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumgoerli_swap__Meta_'] = ResolversParentTypes['arbitrumgoerli_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['arbitrumgoerli_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface mumbai_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['mumbai_swap_BigDecimal'], any> {
  name: 'mumbai_swap_BigDecimal';
}

export interface mumbai_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['mumbai_swap_Bytes'], any> {
  name: 'mumbai_swap_Bytes';
}

export type mumbai_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_PooledToken'] = ResolversParentTypes['mumbai_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['mumbai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_StableSwap'] = ResolversParentTypes['mumbai_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['mumbai_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['mumbai_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['mumbai_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['mumbai_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['mumbai_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['mumbai_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<mumbai_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['mumbai_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<mumbai_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['mumbai_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<mumbai_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['mumbai_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<mumbai_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['mumbai_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<mumbai_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['mumbai_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['mumbai_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['mumbai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_StableSwapEvent'] = ResolversParentTypes['mumbai_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'mumbai_swap_StableSwapAddLiquidityEvent' | 'mumbai_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['mumbai_swap_Bytes'], ParentType, ContextType>;
}>;

export type mumbai_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_StableSwapExchange'] = ResolversParentTypes['mumbai_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['mumbai_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['mumbai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['mumbai_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['mumbai_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['mumbai_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_SwapDailyVolume'] = ResolversParentTypes['mumbai_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['mumbai_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_SwapHourlyVolume'] = ResolversParentTypes['mumbai_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['mumbai_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_SwapTradeVolume'] = ResolversParentTypes['mumbai_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'mumbai_swap_SwapDailyVolume' | 'mumbai_swap_SwapHourlyVolume' | 'mumbai_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['mumbai_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type mumbai_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_SwapWeeklyVolume'] = ResolversParentTypes['mumbai_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['mumbai_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['mumbai_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap_SystemInfo'] = ResolversParentTypes['mumbai_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap__Block_'] = ResolversParentTypes['mumbai_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['mumbai_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_swap__Meta_'] = ResolversParentTypes['mumbai_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['mumbai_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_AggregateRoot'] = ResolversParentTypes['optimism_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_Asset'] = ResolversParentTypes['optimism_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['optimism_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_AssetBalance'] = ResolversParentTypes['optimism_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['optimism_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['optimism_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_AssetStatus'] = ResolversParentTypes['optimism_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface optimism_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimism_BigDecimal'], any> {
  name: 'optimism_BigDecimal';
}

export interface optimism_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['optimism_Bytes'], any> {
  name: 'optimism_Bytes';
}

export type optimism_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_ConnectorMeta'] = ResolversParentTypes['optimism_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_DestinationTransfer'] = ResolversParentTypes['optimism_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['optimism_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['optimism_Router']>>, ParentType, ContextType, RequireFields<optimism_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['optimism_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_OriginMessage'] = ResolversParentTypes['optimism_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['optimism_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_OriginTransfer'] = ResolversParentTypes['optimism_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['optimism_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['optimism_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['optimism_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_Relayer'] = ResolversParentTypes['optimism_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_RootCount'] = ResolversParentTypes['optimism_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_RootMessageSent'] = ResolversParentTypes['optimism_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_Router'] = ResolversParentTypes['optimism_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['optimism_AssetBalance']>, ParentType, ContextType, RequireFields<optimism_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_Sequencer'] = ResolversParentTypes['optimism_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism_Setting'] = ResolversParentTypes['optimism_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['optimism_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism__Block_'] = ResolversParentTypes['optimism__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['optimism_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type optimism__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['optimism__Meta_'] = ResolversParentTypes['optimism__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['optimism__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface staginggoerli_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['staginggoerli_swap_BigDecimal'], any> {
  name: 'staginggoerli_swap_BigDecimal';
}

export interface staginggoerli_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['staginggoerli_swap_Bytes'], any> {
  name: 'staginggoerli_swap_Bytes';
}

export type staginggoerli_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_PooledToken'] = ResolversParentTypes['staginggoerli_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['staginggoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_StableSwap'] = ResolversParentTypes['staginggoerli_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['staginggoerli_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['staginggoerli_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<staginggoerli_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<staginggoerli_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<staginggoerli_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<staginggoerli_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<staginggoerli_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['staginggoerli_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['staginggoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_StableSwapEvent'] = ResolversParentTypes['staginggoerli_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'staginggoerli_swap_StableSwapAddLiquidityEvent' | 'staginggoerli_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_swap_Bytes'], ParentType, ContextType>;
}>;

export type staginggoerli_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_StableSwapExchange'] = ResolversParentTypes['staginggoerli_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['staginggoerli_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['staginggoerli_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['staginggoerli_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_SwapDailyVolume'] = ResolversParentTypes['staginggoerli_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_SwapHourlyVolume'] = ResolversParentTypes['staginggoerli_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_SwapTradeVolume'] = ResolversParentTypes['staginggoerli_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'staginggoerli_swap_SwapDailyVolume' | 'staginggoerli_swap_SwapHourlyVolume' | 'staginggoerli_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type staginggoerli_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_SwapWeeklyVolume'] = ResolversParentTypes['staginggoerli_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap_SystemInfo'] = ResolversParentTypes['staginggoerli_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap__Block_'] = ResolversParentTypes['staginggoerli_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['staginggoerli_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_swap__Meta_'] = ResolversParentTypes['staginggoerli_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['staginggoerli_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_AggregateRoot'] = ResolversParentTypes['stagingoptimismgoerli_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_Asset'] = ResolversParentTypes['stagingoptimismgoerli_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_AssetBalance'] = ResolversParentTypes['stagingoptimismgoerli_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['stagingoptimismgoerli_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['stagingoptimismgoerli_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_AssetStatus'] = ResolversParentTypes['stagingoptimismgoerli_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface stagingoptimismgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingoptimismgoerli_BigDecimal'], any> {
  name: 'stagingoptimismgoerli_BigDecimal';
}

export interface stagingoptimismgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingoptimismgoerli_Bytes'], any> {
  name: 'stagingoptimismgoerli_Bytes';
}

export type stagingoptimismgoerli_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_ConnectorMeta'] = ResolversParentTypes['stagingoptimismgoerli_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_DestinationTransfer'] = ResolversParentTypes['stagingoptimismgoerli_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['stagingoptimismgoerli_Router']>>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_OriginMessage'] = ResolversParentTypes['stagingoptimismgoerli_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_OriginTransfer'] = ResolversParentTypes['stagingoptimismgoerli_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_Relayer'] = ResolversParentTypes['stagingoptimismgoerli_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_RootCount'] = ResolversParentTypes['stagingoptimismgoerli_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_RootMessageSent'] = ResolversParentTypes['stagingoptimismgoerli_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_Router'] = ResolversParentTypes['stagingoptimismgoerli_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['stagingoptimismgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<stagingoptimismgoerli_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_Sequencer'] = ResolversParentTypes['stagingoptimismgoerli_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli_Setting'] = ResolversParentTypes['stagingoptimismgoerli_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['stagingoptimismgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli__Block_'] = ResolversParentTypes['stagingoptimismgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['stagingoptimismgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingoptimismgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingoptimismgoerli__Meta_'] = ResolversParentTypes['stagingoptimismgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['stagingoptimismgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_AggregateRoot'] = ResolversParentTypes['stagingmumbai_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_Asset'] = ResolversParentTypes['stagingmumbai_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['stagingmumbai_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_AssetBalance'] = ResolversParentTypes['stagingmumbai_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['stagingmumbai_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['stagingmumbai_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_AssetStatus'] = ResolversParentTypes['stagingmumbai_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface stagingmumbai_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingmumbai_BigDecimal'], any> {
  name: 'stagingmumbai_BigDecimal';
}

export interface stagingmumbai_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingmumbai_Bytes'], any> {
  name: 'stagingmumbai_Bytes';
}

export type stagingmumbai_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_ConnectorMeta'] = ResolversParentTypes['stagingmumbai_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_DestinationTransfer'] = ResolversParentTypes['stagingmumbai_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['stagingmumbai_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['stagingmumbai_Router']>>, ParentType, ContextType, RequireFields<stagingmumbai_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['stagingmumbai_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_OriginMessage'] = ResolversParentTypes['stagingmumbai_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['stagingmumbai_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_OriginTransfer'] = ResolversParentTypes['stagingmumbai_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['stagingmumbai_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['stagingmumbai_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['stagingmumbai_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_Relayer'] = ResolversParentTypes['stagingmumbai_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_RootCount'] = ResolversParentTypes['stagingmumbai_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_RootMessageSent'] = ResolversParentTypes['stagingmumbai_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_Router'] = ResolversParentTypes['stagingmumbai_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['stagingmumbai_AssetBalance']>, ParentType, ContextType, RequireFields<stagingmumbai_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_Sequencer'] = ResolversParentTypes['stagingmumbai_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai_Setting'] = ResolversParentTypes['stagingmumbai_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['stagingmumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai__Block_'] = ResolversParentTypes['stagingmumbai__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['stagingmumbai_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingmumbai__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingmumbai__Meta_'] = ResolversParentTypes['stagingmumbai__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['stagingmumbai__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface arbitrumone_swap_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumone_swap_BigDecimal'], any> {
  name: 'arbitrumone_swap_BigDecimal';
}

export interface arbitrumone_swap_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumone_swap_Bytes'], any> {
  name: 'arbitrumone_swap_Bytes';
}

export type arbitrumone_swap_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_PooledToken'] = ResolversParentTypes['arbitrumone_swap_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['arbitrumone_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_StableSwap'] = ResolversParentTypes['arbitrumone_swap_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<ResolversTypes['arbitrumone_swap_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['arbitrumone_swap_Bytes']>, ParentType, ContextType>;
  tokenPrecisionMultipliers?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  virtualPrice?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  invariant?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  events?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_swap_StableSwapEvent']>>, ParentType, ContextType, RequireFields<arbitrumone_swap_StableSwapeventsArgs, 'skip' | 'first'>>;
  exchanges?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_swap_StableSwapExchange']>>, ParentType, ContextType, RequireFields<arbitrumone_swap_StableSwapexchangesArgs, 'skip' | 'first'>>;
  hourlyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_swap_SwapHourlyVolume']>>, ParentType, ContextType, RequireFields<arbitrumone_swap_StableSwaphourlyVolumesArgs, 'skip' | 'first'>>;
  dailyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_swap_SwapDailyVolume']>>, ParentType, ContextType, RequireFields<arbitrumone_swap_StableSwapdailyVolumesArgs, 'skip' | 'first'>>;
  weeklyVolumes?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_swap_SwapWeeklyVolume']>>, ParentType, ContextType, RequireFields<arbitrumone_swap_StableSwapweeklyVolumesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_StableSwapAddLiquidityEvent'] = ResolversParentTypes['arbitrumone_swap_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['arbitrumone_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumone_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_StableSwapEvent'] = ResolversParentTypes['arbitrumone_swap_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'arbitrumone_swap_StableSwapAddLiquidityEvent' | 'arbitrumone_swap_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_swap_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumone_swap_Bytes'], ParentType, ContextType>;
}>;

export type arbitrumone_swap_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_StableSwapExchange'] = ResolversParentTypes['arbitrumone_swap_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_swap_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['arbitrumone_swap_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumone_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['arbitrumone_swap_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_swap_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['arbitrumone_swap_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['arbitrumone_swap_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_SwapDailyVolume'] = ResolversParentTypes['arbitrumone_swap_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumone_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_SwapHourlyVolume'] = ResolversParentTypes['arbitrumone_swap_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumone_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_SwapTradeVolume'] = ResolversParentTypes['arbitrumone_swap_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'arbitrumone_swap_SwapDailyVolume' | 'arbitrumone_swap_SwapHourlyVolume' | 'arbitrumone_swap_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumone_swap_BigDecimal'], ParentType, ContextType>;
}>;

export type arbitrumone_swap_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_SwapWeeklyVolume'] = ResolversParentTypes['arbitrumone_swap_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['arbitrumone_swap_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['arbitrumone_swap_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap_SystemInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap_SystemInfo'] = ResolversParentTypes['arbitrumone_swap_SystemInfo']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  exchangeCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  swapCount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap__Block_'] = ResolversParentTypes['arbitrumone_swap__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['arbitrumone_swap_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_swap__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_swap__Meta_'] = ResolversParentTypes['arbitrumone_swap__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['arbitrumone_swap__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338_Asset'] = ResolversParentTypes['local1338_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  local?: Resolver<ResolversTypes['local1338_Bytes'], ParentType, ContextType>;
  adoptedAsset?: Resolver<ResolversTypes['local1338_Bytes'], ParentType, ContextType>;
  canonicalId?: Resolver<ResolversTypes['local1338_Bytes'], ParentType, ContextType>;
  canonicalDomain?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338_AssetBalance'] = ResolversParentTypes['local1338_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['local1338_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['local1338_Asset'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface local1338_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['local1338_BigDecimal'], any> {
  name: 'local1338_BigDecimal';
}

export interface local1338_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['local1338_Bytes'], any> {
  name: 'local1338_Bytes';
}

export type local1338_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338_DestinationTransfer'] = ResolversParentTypes['local1338_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  agent?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  recovery?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  forceSlow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callback?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  callbackFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['local1338_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['local1338_Router']>>, ParentType, ContextType, RequireFields<local1338_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originSender?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  transactingAsset?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  transactingAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  localAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  sponsorVaultRelayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338_OriginTransfer'] = ResolversParentTypes['local1338_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  agent?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  recovery?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  forceSlow?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callback?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  callbackFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['local1338_TransferStatus']>, ParentType, ContextType>;
  originMinOut?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transactingAsset?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  transactingAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bridgedAsset?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  bridgedAmount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338_Relayer'] = ResolversParentTypes['local1338_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338_Router'] = ResolversParentTypes['local1338_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['local1338_AssetBalance']>, ParentType, ContextType, RequireFields<local1338_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338_Setting'] = ResolversParentTypes['local1338_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['local1338_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338_SponsorVaultResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338_SponsorVault'] = ResolversParentTypes['local1338_SponsorVault']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  sponsorVault?: Resolver<ResolversTypes['local1338_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338_StableSwap'] = ResolversParentTypes['local1338_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  canonicalId?: Resolver<ResolversTypes['local1338_Bytes'], ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<ResolversTypes['local1338_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338__Block_'] = ResolversParentTypes['local1338__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['local1338_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type local1338__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['local1338__Meta_'] = ResolversParentTypes['local1338__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['local1338__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_AggregateRoot'] = ResolversParentTypes['goerli_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_Asset'] = ResolversParentTypes['goerli_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['goerli_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_AssetBalance'] = ResolversParentTypes['goerli_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['goerli_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['goerli_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_AssetStatus'] = ResolversParentTypes['goerli_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_ConnectorMeta'] = ResolversParentTypes['goerli_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_DestinationTransfer'] = ResolversParentTypes['goerli_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['goerli_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['goerli_Router']>>, ParentType, ContextType, RequireFields<goerli_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['goerli_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_OriginMessage'] = ResolversParentTypes['goerli_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['goerli_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_OriginTransfer'] = ResolversParentTypes['goerli_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['goerli_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['goerli_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['goerli_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_Relayer'] = ResolversParentTypes['goerli_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_RootCount'] = ResolversParentTypes['goerli_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_RootMessageSent'] = ResolversParentTypes['goerli_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_Router'] = ResolversParentTypes['goerli_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['goerli_AssetBalance']>, ParentType, ContextType, RequireFields<goerli_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_Sequencer'] = ResolversParentTypes['goerli_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['goerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type goerli_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['goerli_Setting'] = ResolversParentTypes['goerli_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['goerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_AggregateRoot'] = ResolversParentTypes['stagingarbitrumgoerli_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_Asset'] = ResolversParentTypes['stagingarbitrumgoerli_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_AssetBalance'] = ResolversParentTypes['stagingarbitrumgoerli_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['stagingarbitrumgoerli_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['stagingarbitrumgoerli_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_AssetStatus'] = ResolversParentTypes['stagingarbitrumgoerli_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface stagingarbitrumgoerli_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingarbitrumgoerli_BigDecimal'], any> {
  name: 'stagingarbitrumgoerli_BigDecimal';
}

export interface stagingarbitrumgoerli_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['stagingarbitrumgoerli_Bytes'], any> {
  name: 'stagingarbitrumgoerli_Bytes';
}

export type stagingarbitrumgoerli_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_ConnectorMeta'] = ResolversParentTypes['stagingarbitrumgoerli_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_DestinationTransfer'] = ResolversParentTypes['stagingarbitrumgoerli_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['stagingarbitrumgoerli_Router']>>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_OriginMessage'] = ResolversParentTypes['stagingarbitrumgoerli_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_OriginTransfer'] = ResolversParentTypes['stagingarbitrumgoerli_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_Relayer'] = ResolversParentTypes['stagingarbitrumgoerli_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_RootCount'] = ResolversParentTypes['stagingarbitrumgoerli_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_RootMessageSent'] = ResolversParentTypes['stagingarbitrumgoerli_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_Router'] = ResolversParentTypes['stagingarbitrumgoerli_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['stagingarbitrumgoerli_AssetBalance']>, ParentType, ContextType, RequireFields<stagingarbitrumgoerli_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_Sequencer'] = ResolversParentTypes['stagingarbitrumgoerli_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli_Setting'] = ResolversParentTypes['stagingarbitrumgoerli_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['stagingarbitrumgoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli__Block_'] = ResolversParentTypes['stagingarbitrumgoerli__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['stagingarbitrumgoerli_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type stagingarbitrumgoerli__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['stagingarbitrumgoerli__Meta_'] = ResolversParentTypes['stagingarbitrumgoerli__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['stagingarbitrumgoerli__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_AggregateRoot'] = ResolversParentTypes['mumbai_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_Asset'] = ResolversParentTypes['mumbai_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['mumbai_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_AssetBalance'] = ResolversParentTypes['mumbai_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['mumbai_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['mumbai_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_AssetStatus'] = ResolversParentTypes['mumbai_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface mumbai_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['mumbai_BigDecimal'], any> {
  name: 'mumbai_BigDecimal';
}

export interface mumbai_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['mumbai_Bytes'], any> {
  name: 'mumbai_Bytes';
}

export type mumbai_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_ConnectorMeta'] = ResolversParentTypes['mumbai_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_DestinationTransfer'] = ResolversParentTypes['mumbai_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['mumbai_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['mumbai_Router']>>, ParentType, ContextType, RequireFields<mumbai_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['mumbai_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_OriginMessage'] = ResolversParentTypes['mumbai_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['mumbai_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_OriginTransfer'] = ResolversParentTypes['mumbai_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['mumbai_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['mumbai_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['mumbai_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_Relayer'] = ResolversParentTypes['mumbai_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_RootCount'] = ResolversParentTypes['mumbai_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_RootMessageSent'] = ResolversParentTypes['mumbai_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_Router'] = ResolversParentTypes['mumbai_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['mumbai_AssetBalance']>, ParentType, ContextType, RequireFields<mumbai_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_Sequencer'] = ResolversParentTypes['mumbai_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai_Setting'] = ResolversParentTypes['mumbai_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['mumbai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai__Block_'] = ResolversParentTypes['mumbai__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['mumbai_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mumbai__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mumbai__Meta_'] = ResolversParentTypes['mumbai__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['mumbai__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_AggregateRoot'] = ResolversParentTypes['bnb_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_Asset'] = ResolversParentTypes['bnb_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['bnb_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_AssetBalance'] = ResolversParentTypes['bnb_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['bnb_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['bnb_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_AssetStatus'] = ResolversParentTypes['bnb_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface bnb_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['bnb_BigDecimal'], any> {
  name: 'bnb_BigDecimal';
}

export interface bnb_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['bnb_Bytes'], any> {
  name: 'bnb_Bytes';
}

export type bnb_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_ConnectorMeta'] = ResolversParentTypes['bnb_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_DestinationTransfer'] = ResolversParentTypes['bnb_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['bnb_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['bnb_Router']>>, ParentType, ContextType, RequireFields<bnb_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['bnb_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_OriginMessage'] = ResolversParentTypes['bnb_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['bnb_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_OriginTransfer'] = ResolversParentTypes['bnb_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['bnb_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['bnb_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['bnb_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_Relayer'] = ResolversParentTypes['bnb_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_RootCount'] = ResolversParentTypes['bnb_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_RootMessageSent'] = ResolversParentTypes['bnb_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_Router'] = ResolversParentTypes['bnb_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['bnb_AssetBalance']>, ParentType, ContextType, RequireFields<bnb_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_Sequencer'] = ResolversParentTypes['bnb_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb_Setting'] = ResolversParentTypes['bnb_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['bnb_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb__Block_'] = ResolversParentTypes['bnb__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['bnb_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type bnb__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['bnb__Meta_'] = ResolversParentTypes['bnb__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['bnb__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_AggregateRoot'] = ResolversParentTypes['mainnet_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_Asset'] = ResolversParentTypes['mainnet_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['mainnet_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_AssetBalance'] = ResolversParentTypes['mainnet_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['mainnet_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['mainnet_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_AssetStatus'] = ResolversParentTypes['mainnet_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_ConnectorMeta'] = ResolversParentTypes['mainnet_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_DestinationTransfer'] = ResolversParentTypes['mainnet_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['mainnet_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['mainnet_Router']>>, ParentType, ContextType, RequireFields<mainnet_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['mainnet_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_OriginMessage'] = ResolversParentTypes['mainnet_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['mainnet_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_OriginTransfer'] = ResolversParentTypes['mainnet_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['mainnet_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['mainnet_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['mainnet_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_Relayer'] = ResolversParentTypes['mainnet_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_RootCount'] = ResolversParentTypes['mainnet_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_RootMessageSent'] = ResolversParentTypes['mainnet_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_Router'] = ResolversParentTypes['mainnet_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['mainnet_AssetBalance']>, ParentType, ContextType, RequireFields<mainnet_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_Sequencer'] = ResolversParentTypes['mainnet_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['mainnet_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type mainnet_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['mainnet_Setting'] = ResolversParentTypes['mainnet_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['mainnet_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_AggregateRoot'] = ResolversParentTypes['polygon_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_Asset'] = ResolversParentTypes['polygon_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['polygon_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_AssetBalance'] = ResolversParentTypes['polygon_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['polygon_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['polygon_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_AssetStatus'] = ResolversParentTypes['polygon_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface polygon_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['polygon_BigDecimal'], any> {
  name: 'polygon_BigDecimal';
}

export interface polygon_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['polygon_Bytes'], any> {
  name: 'polygon_Bytes';
}

export type polygon_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_ConnectorMeta'] = ResolversParentTypes['polygon_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_DestinationTransfer'] = ResolversParentTypes['polygon_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['polygon_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['polygon_Router']>>, ParentType, ContextType, RequireFields<polygon_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['polygon_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_OriginMessage'] = ResolversParentTypes['polygon_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['polygon_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_OriginTransfer'] = ResolversParentTypes['polygon_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['polygon_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['polygon_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['polygon_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_Relayer'] = ResolversParentTypes['polygon_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_RootCount'] = ResolversParentTypes['polygon_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_RootMessageSent'] = ResolversParentTypes['polygon_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_Router'] = ResolversParentTypes['polygon_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['polygon_AssetBalance']>, ParentType, ContextType, RequireFields<polygon_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_Sequencer'] = ResolversParentTypes['polygon_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon_Setting'] = ResolversParentTypes['polygon_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['polygon_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon__Block_'] = ResolversParentTypes['polygon__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['polygon_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type polygon__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['polygon__Meta_'] = ResolversParentTypes['polygon__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['polygon__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_AggregateRoot'] = ResolversParentTypes['xdai_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_Asset'] = ResolversParentTypes['xdai_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['xdai_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_AssetBalance'] = ResolversParentTypes['xdai_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['xdai_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['xdai_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_AssetStatus'] = ResolversParentTypes['xdai_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface xdai_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['xdai_BigDecimal'], any> {
  name: 'xdai_BigDecimal';
}

export interface xdai_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['xdai_Bytes'], any> {
  name: 'xdai_Bytes';
}

export type xdai_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_ConnectorMeta'] = ResolversParentTypes['xdai_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_DestinationTransfer'] = ResolversParentTypes['xdai_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['xdai_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['xdai_Router']>>, ParentType, ContextType, RequireFields<xdai_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['xdai_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_OriginMessage'] = ResolversParentTypes['xdai_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['xdai_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_OriginTransfer'] = ResolversParentTypes['xdai_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['xdai_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['xdai_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['xdai_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_Relayer'] = ResolversParentTypes['xdai_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_RootCount'] = ResolversParentTypes['xdai_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_RootMessageSent'] = ResolversParentTypes['xdai_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_Router'] = ResolversParentTypes['xdai_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['xdai_AssetBalance']>, ParentType, ContextType, RequireFields<xdai_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_Sequencer'] = ResolversParentTypes['xdai_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai_Setting'] = ResolversParentTypes['xdai_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['xdai_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai__Block_'] = ResolversParentTypes['xdai__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['xdai_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type xdai__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['xdai__Meta_'] = ResolversParentTypes['xdai__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['xdai__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_AggregateRoot'] = ResolversParentTypes['arbitrumone_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_Asset'] = ResolversParentTypes['arbitrumone_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['arbitrumone_AssetStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_AssetBalance'] = ResolversParentTypes['arbitrumone_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['arbitrumone_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['arbitrumone_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_AssetStatusResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_AssetStatus'] = ResolversParentTypes['arbitrumone_AssetStatus']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface arbitrumone_BigDecimalScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumone_BigDecimal'], any> {
  name: 'arbitrumone_BigDecimal';
}

export interface arbitrumone_BytesScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['arbitrumone_Bytes'], any> {
  name: 'arbitrumone_Bytes';
}

export type arbitrumone_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_ConnectorMeta'] = ResolversParentTypes['arbitrumone_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_DestinationTransfer'] = ResolversParentTypes['arbitrumone_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['arbitrumone_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['arbitrumone_Router']>>, ParentType, ContextType, RequireFields<arbitrumone_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpSlippageCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['arbitrumone_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_OriginMessage'] = ResolversParentTypes['arbitrumone_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['arbitrumone_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_OriginTransfer'] = ResolversParentTypes['arbitrumone_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['arbitrumone_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['arbitrumone_Asset']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['arbitrumone_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  bumpRelayerFeeCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_Relayer'] = ResolversParentTypes['arbitrumone_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_RootCount'] = ResolversParentTypes['arbitrumone_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_RootMessageSent'] = ResolversParentTypes['arbitrumone_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_Router'] = ResolversParentTypes['arbitrumone_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['arbitrumone_AssetBalance']>, ParentType, ContextType, RequireFields<arbitrumone_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_Sequencer'] = ResolversParentTypes['arbitrumone_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone_Setting'] = ResolversParentTypes['arbitrumone_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['arbitrumone_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone__Block_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone__Block_'] = ResolversParentTypes['arbitrumone__Block_']> = ResolversObject<{
  hash?: Resolver<Maybe<ResolversTypes['arbitrumone_Bytes']>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type arbitrumone__Meta_Resolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['arbitrumone__Meta_'] = ResolversParentTypes['arbitrumone__Meta_']> = ResolversObject<{
  block?: Resolver<ResolversTypes['arbitrumone__Block_'], ParentType, ContextType>;
  deployment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  hasIndexingErrors?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_AggregateRootResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_AggregateRoot'] = ResolversParentTypes['staginggoerli_AggregateRoot']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  root?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  blockNumber?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_Asset'] = ResolversParentTypes['staginggoerli_Asset']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adoptedAsset?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  localAsset?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_AssetBalanceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_AssetBalance'] = ResolversParentTypes['staginggoerli_AssetBalance']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  amount?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  router?: Resolver<ResolversTypes['staginggoerli_Router'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['staginggoerli_Asset'], ParentType, ContextType>;
  feesEarned?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_ConnectorMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_ConnectorMeta'] = ResolversParentTypes['staginggoerli_ConnectorMeta']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  amb?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  rootManager?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  mirrorConnector?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_DestinationTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_DestinationTransfer'] = ResolversParentTypes['staginggoerli_DestinationTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['staginggoerli_TransferStatus']>, ParentType, ContextType>;
  routers?: Resolver<Maybe<Array<ResolversTypes['staginggoerli_Router']>>, ParentType, ContextType, RequireFields<staginggoerli_DestinationTransferroutersArgs, 'skip' | 'first'>>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['staginggoerli_Asset']>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  routersFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedCaller?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  executedTransactionHash?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  executedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  executedTxOrigin?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  reconciledCaller?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  reconciledTransactionHash?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  reconciledTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledGasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledBlockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  reconciledTxOrigin?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_OriginMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_OriginMessage'] = ResolversParentTypes['staginggoerli_OriginMessage']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  leaf?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  rootCount?: Resolver<Maybe<ResolversTypes['staginggoerli_RootCount']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_OriginTransferResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_OriginTransfer'] = ResolversParentTypes['staginggoerli_OriginTransfer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  chainId?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  transferId?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  nonce?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['staginggoerli_TransferStatus']>, ParentType, ContextType>;
  messageHash?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  originDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  destinationDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  to?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  delegate?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  receiveLocal?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  callData?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  slippage?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  originSender?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  bridgedAmt?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  normalizedIn?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  asset?: Resolver<Maybe<ResolversTypes['staginggoerli_Asset']>, ParentType, ContextType>;
  transacting?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['staginggoerli_OriginMessage']>, ParentType, ContextType>;
  relayerFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  txOrigin?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_PooledTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_PooledToken'] = ResolversParentTypes['staginggoerli_PooledToken']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  asset?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_RelayerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_Relayer'] = ResolversParentTypes['staginggoerli_Relayer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  relayer?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_RootCountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_RootCount'] = ResolversParentTypes['staginggoerli_RootCount']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_RootMessageSentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_RootMessageSent'] = ResolversParentTypes['staginggoerli_RootMessageSent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  spokeDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  hubDomain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  root?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  caller?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  transactionHash?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasPrice?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  gasLimit?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  blockNumber?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_RouterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_Router'] = ResolversParentTypes['staginggoerli_Router']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  owner?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  recipient?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  proposedOwner?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  proposedTimestamp?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assetBalances?: Resolver<Array<ResolversTypes['staginggoerli_AssetBalance']>, ParentType, ContextType, RequireFields<staginggoerli_RouterassetBalancesArgs, 'skip' | 'first'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_SequencerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_Sequencer'] = ResolversParentTypes['staginggoerli_Sequencer']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  sequencer?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_SettingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_Setting'] = ResolversParentTypes['staginggoerli_Setting']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  maxRoutersPerTransfer?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  caller?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwap'] = ResolversParentTypes['staginggoerli_StableSwap']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  key?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  canonicalId?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  domain?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapPool?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  lpToken?: Resolver<Maybe<ResolversTypes['staginggoerli_Bytes']>, ParentType, ContextType>;
  initialA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureA?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  initialATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  futureATime?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  swapFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  pooledTokens?: Resolver<Array<ResolversTypes['staginggoerli_PooledToken']>, ParentType, ContextType, RequireFields<staginggoerli_StableSwappooledTokensArgs, 'skip' | 'first'>>;
  tokenPrecisionMultipliers?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  balances?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  adminFees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapAddLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwapAddLiquidityEvent'] = ResolversParentTypes['staginggoerli_StableSwapAddLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwapEvent'] = ResolversParentTypes['staginggoerli_StableSwapEvent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'staginggoerli_StableSwapAddLiquidityEvent' | 'staginggoerli_StableSwapRemoveLiquidityEvent', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapExchangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwapExchange'] = ResolversParentTypes['staginggoerli_StableSwapExchange']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  buyer?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  boughtId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensBought?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  soldId?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  tokensSold?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_StableSwapRemoveLiquidityEventResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_StableSwapRemoveLiquidityEvent'] = ResolversParentTypes['staginggoerli_StableSwapRemoveLiquidityEvent']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  provider?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  tokenAmounts?: Resolver<Array<ResolversTypes['BigInt']>, ParentType, ContextType>;
  fees?: Resolver<Maybe<Array<ResolversTypes['BigInt']>>, ParentType, ContextType>;
  invariant?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  lpTokenSupply?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  block?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  transaction?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_SwapDailyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_SwapDailyVolume'] = ResolversParentTypes['staginggoerli_SwapDailyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_SwapHourlyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_SwapHourlyVolume'] = ResolversParentTypes['staginggoerli_SwapHourlyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_SwapTradeVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_SwapTradeVolume'] = ResolversParentTypes['staginggoerli_SwapTradeVolume']> = ResolversObject<{
  __resolveType: TypeResolveFn<'staginggoerli_SwapDailyVolume' | 'staginggoerli_SwapHourlyVolume' | 'staginggoerli_SwapWeeklyVolume', ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_BigDecimal'], ParentType, ContextType>;
}>;

export type staginggoerli_SwapWeeklyVolumeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_SwapWeeklyVolume'] = ResolversParentTypes['staginggoerli_SwapWeeklyVolume']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stableSwap?: Resolver<ResolversTypes['staginggoerli_StableSwap'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['BigInt'], ParentType, ContextType>;
  volume?: Resolver<ResolversTypes['staginggoerli_BigDecimal'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type staginggoerli_TransferRelayerFeeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['staginggoerli_TransferRelayerFee'] = ResolversParentTypes['staginggoerli_TransferRelayerFee']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  transferId?: Resolver<ResolversTypes['staginggoerli_Bytes'], ParentType, ContextType>;
  fee?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Resolvers<ContextType = MeshContext> = ResolversObject<{
  Query?: QueryResolvers<ContextType>;
  Subscription?: SubscriptionResolvers<ContextType>;
  polygon_swap_BigDecimal?: GraphQLScalarType;
  BigInt?: GraphQLScalarType;
  polygon_swap_Bytes?: GraphQLScalarType;
  polygon_swap_PooledToken?: polygon_swap_PooledTokenResolvers<ContextType>;
  polygon_swap_StableSwap?: polygon_swap_StableSwapResolvers<ContextType>;
  polygon_swap_StableSwapAddLiquidityEvent?: polygon_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  polygon_swap_StableSwapEvent?: polygon_swap_StableSwapEventResolvers<ContextType>;
  polygon_swap_StableSwapExchange?: polygon_swap_StableSwapExchangeResolvers<ContextType>;
  polygon_swap_StableSwapRemoveLiquidityEvent?: polygon_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  polygon_swap_SwapDailyVolume?: polygon_swap_SwapDailyVolumeResolvers<ContextType>;
  polygon_swap_SwapHourlyVolume?: polygon_swap_SwapHourlyVolumeResolvers<ContextType>;
  polygon_swap_SwapTradeVolume?: polygon_swap_SwapTradeVolumeResolvers<ContextType>;
  polygon_swap_SwapWeeklyVolume?: polygon_swap_SwapWeeklyVolumeResolvers<ContextType>;
  polygon_swap_SystemInfo?: polygon_swap_SystemInfoResolvers<ContextType>;
  polygon_swap__Block_?: polygon_swap__Block_Resolvers<ContextType>;
  polygon_swap__Meta_?: polygon_swap__Meta_Resolvers<ContextType>;
  optimismgoerli_AggregateRoot?: optimismgoerli_AggregateRootResolvers<ContextType>;
  optimismgoerli_Asset?: optimismgoerli_AssetResolvers<ContextType>;
  optimismgoerli_AssetBalance?: optimismgoerli_AssetBalanceResolvers<ContextType>;
  optimismgoerli_AssetStatus?: optimismgoerli_AssetStatusResolvers<ContextType>;
  optimismgoerli_BigDecimal?: GraphQLScalarType;
  optimismgoerli_Bytes?: GraphQLScalarType;
  optimismgoerli_ConnectorMeta?: optimismgoerli_ConnectorMetaResolvers<ContextType>;
  optimismgoerli_DestinationTransfer?: optimismgoerli_DestinationTransferResolvers<ContextType>;
  optimismgoerli_OriginMessage?: optimismgoerli_OriginMessageResolvers<ContextType>;
  optimismgoerli_OriginTransfer?: optimismgoerli_OriginTransferResolvers<ContextType>;
  optimismgoerli_Relayer?: optimismgoerli_RelayerResolvers<ContextType>;
  optimismgoerli_RootCount?: optimismgoerli_RootCountResolvers<ContextType>;
  optimismgoerli_RootMessageSent?: optimismgoerli_RootMessageSentResolvers<ContextType>;
  optimismgoerli_Router?: optimismgoerli_RouterResolvers<ContextType>;
  optimismgoerli_Sequencer?: optimismgoerli_SequencerResolvers<ContextType>;
  optimismgoerli_Setting?: optimismgoerli_SettingResolvers<ContextType>;
  optimismgoerli__Block_?: optimismgoerli__Block_Resolvers<ContextType>;
  optimismgoerli__Meta_?: optimismgoerli__Meta_Resolvers<ContextType>;
  stagingarbitrumgoerli_swap_BigDecimal?: GraphQLScalarType;
  stagingarbitrumgoerli_swap_Bytes?: GraphQLScalarType;
  stagingarbitrumgoerli_swap_PooledToken?: stagingarbitrumgoerli_swap_PooledTokenResolvers<ContextType>;
  stagingarbitrumgoerli_swap_StableSwap?: stagingarbitrumgoerli_swap_StableSwapResolvers<ContextType>;
  stagingarbitrumgoerli_swap_StableSwapAddLiquidityEvent?: stagingarbitrumgoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  stagingarbitrumgoerli_swap_StableSwapEvent?: stagingarbitrumgoerli_swap_StableSwapEventResolvers<ContextType>;
  stagingarbitrumgoerli_swap_StableSwapExchange?: stagingarbitrumgoerli_swap_StableSwapExchangeResolvers<ContextType>;
  stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEvent?: stagingarbitrumgoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  stagingarbitrumgoerli_swap_SwapDailyVolume?: stagingarbitrumgoerli_swap_SwapDailyVolumeResolvers<ContextType>;
  stagingarbitrumgoerli_swap_SwapHourlyVolume?: stagingarbitrumgoerli_swap_SwapHourlyVolumeResolvers<ContextType>;
  stagingarbitrumgoerli_swap_SwapTradeVolume?: stagingarbitrumgoerli_swap_SwapTradeVolumeResolvers<ContextType>;
  stagingarbitrumgoerli_swap_SwapWeeklyVolume?: stagingarbitrumgoerli_swap_SwapWeeklyVolumeResolvers<ContextType>;
  stagingarbitrumgoerli_swap_SystemInfo?: stagingarbitrumgoerli_swap_SystemInfoResolvers<ContextType>;
  stagingarbitrumgoerli_swap__Block_?: stagingarbitrumgoerli_swap__Block_Resolvers<ContextType>;
  stagingarbitrumgoerli_swap__Meta_?: stagingarbitrumgoerli_swap__Meta_Resolvers<ContextType>;
  arbitrumgoerli_AggregateRoot?: arbitrumgoerli_AggregateRootResolvers<ContextType>;
  arbitrumgoerli_Asset?: arbitrumgoerli_AssetResolvers<ContextType>;
  arbitrumgoerli_AssetBalance?: arbitrumgoerli_AssetBalanceResolvers<ContextType>;
  arbitrumgoerli_AssetStatus?: arbitrumgoerli_AssetStatusResolvers<ContextType>;
  arbitrumgoerli_BigDecimal?: GraphQLScalarType;
  arbitrumgoerli_Bytes?: GraphQLScalarType;
  arbitrumgoerli_ConnectorMeta?: arbitrumgoerli_ConnectorMetaResolvers<ContextType>;
  arbitrumgoerli_DestinationTransfer?: arbitrumgoerli_DestinationTransferResolvers<ContextType>;
  arbitrumgoerli_OriginMessage?: arbitrumgoerli_OriginMessageResolvers<ContextType>;
  arbitrumgoerli_OriginTransfer?: arbitrumgoerli_OriginTransferResolvers<ContextType>;
  arbitrumgoerli_Relayer?: arbitrumgoerli_RelayerResolvers<ContextType>;
  arbitrumgoerli_RootCount?: arbitrumgoerli_RootCountResolvers<ContextType>;
  arbitrumgoerli_RootMessageSent?: arbitrumgoerli_RootMessageSentResolvers<ContextType>;
  arbitrumgoerli_Router?: arbitrumgoerli_RouterResolvers<ContextType>;
  arbitrumgoerli_Sequencer?: arbitrumgoerli_SequencerResolvers<ContextType>;
  arbitrumgoerli_Setting?: arbitrumgoerli_SettingResolvers<ContextType>;
  arbitrumgoerli__Block_?: arbitrumgoerli__Block_Resolvers<ContextType>;
  arbitrumgoerli__Meta_?: arbitrumgoerli__Meta_Resolvers<ContextType>;
  stagingoptimismgoerli_swap_BigDecimal?: GraphQLScalarType;
  stagingoptimismgoerli_swap_Bytes?: GraphQLScalarType;
  stagingoptimismgoerli_swap_PooledToken?: stagingoptimismgoerli_swap_PooledTokenResolvers<ContextType>;
  stagingoptimismgoerli_swap_StableSwap?: stagingoptimismgoerli_swap_StableSwapResolvers<ContextType>;
  stagingoptimismgoerli_swap_StableSwapAddLiquidityEvent?: stagingoptimismgoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  stagingoptimismgoerli_swap_StableSwapEvent?: stagingoptimismgoerli_swap_StableSwapEventResolvers<ContextType>;
  stagingoptimismgoerli_swap_StableSwapExchange?: stagingoptimismgoerli_swap_StableSwapExchangeResolvers<ContextType>;
  stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEvent?: stagingoptimismgoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  stagingoptimismgoerli_swap_SwapDailyVolume?: stagingoptimismgoerli_swap_SwapDailyVolumeResolvers<ContextType>;
  stagingoptimismgoerli_swap_SwapHourlyVolume?: stagingoptimismgoerli_swap_SwapHourlyVolumeResolvers<ContextType>;
  stagingoptimismgoerli_swap_SwapTradeVolume?: stagingoptimismgoerli_swap_SwapTradeVolumeResolvers<ContextType>;
  stagingoptimismgoerli_swap_SwapWeeklyVolume?: stagingoptimismgoerli_swap_SwapWeeklyVolumeResolvers<ContextType>;
  stagingoptimismgoerli_swap_SystemInfo?: stagingoptimismgoerli_swap_SystemInfoResolvers<ContextType>;
  stagingoptimismgoerli_swap__Block_?: stagingoptimismgoerli_swap__Block_Resolvers<ContextType>;
  stagingoptimismgoerli_swap__Meta_?: stagingoptimismgoerli_swap__Meta_Resolvers<ContextType>;
  testgoerli_Asset?: testgoerli_AssetResolvers<ContextType>;
  testgoerli_AssetBalance?: testgoerli_AssetBalanceResolvers<ContextType>;
  testgoerli_BigDecimal?: GraphQLScalarType;
  testgoerli_Bytes?: GraphQLScalarType;
  testgoerli_DestinationTransfer?: testgoerli_DestinationTransferResolvers<ContextType>;
  testgoerli_OriginTransfer?: testgoerli_OriginTransferResolvers<ContextType>;
  testgoerli_Relayer?: testgoerli_RelayerResolvers<ContextType>;
  testgoerli_Router?: testgoerli_RouterResolvers<ContextType>;
  testgoerli_Setting?: testgoerli_SettingResolvers<ContextType>;
  testgoerli_SponsorVault?: testgoerli_SponsorVaultResolvers<ContextType>;
  testgoerli_StableSwap?: testgoerli_StableSwapResolvers<ContextType>;
  testgoerli__Block_?: testgoerli__Block_Resolvers<ContextType>;
  testgoerli__Meta_?: testgoerli__Meta_Resolvers<ContextType>;
  xdai_swap_BigDecimal?: GraphQLScalarType;
  xdai_swap_Bytes?: GraphQLScalarType;
  xdai_swap_PooledToken?: xdai_swap_PooledTokenResolvers<ContextType>;
  xdai_swap_StableSwap?: xdai_swap_StableSwapResolvers<ContextType>;
  xdai_swap_StableSwapAddLiquidityEvent?: xdai_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  xdai_swap_StableSwapEvent?: xdai_swap_StableSwapEventResolvers<ContextType>;
  xdai_swap_StableSwapExchange?: xdai_swap_StableSwapExchangeResolvers<ContextType>;
  xdai_swap_StableSwapRemoveLiquidityEvent?: xdai_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  xdai_swap_SwapDailyVolume?: xdai_swap_SwapDailyVolumeResolvers<ContextType>;
  xdai_swap_SwapHourlyVolume?: xdai_swap_SwapHourlyVolumeResolvers<ContextType>;
  xdai_swap_SwapTradeVolume?: xdai_swap_SwapTradeVolumeResolvers<ContextType>;
  xdai_swap_SwapWeeklyVolume?: xdai_swap_SwapWeeklyVolumeResolvers<ContextType>;
  xdai_swap_SystemInfo?: xdai_swap_SystemInfoResolvers<ContextType>;
  xdai_swap__Block_?: xdai_swap__Block_Resolvers<ContextType>;
  xdai_swap__Meta_?: xdai_swap__Meta_Resolvers<ContextType>;
  staginggoerli_AggregatedMessageRoot?: staginggoerli_AggregatedMessageRootResolvers<ContextType>;
  staginggoerli_ArbitrumConnectorMeta?: staginggoerli_ArbitrumConnectorMetaResolvers<ContextType>;
  staginggoerli_BigDecimal?: GraphQLScalarType;
  staginggoerli_BnbConnectorMeta?: staginggoerli_BnbConnectorMetaResolvers<ContextType>;
  staginggoerli_Bytes?: GraphQLScalarType;
  staginggoerli_GnosisConnectorMeta?: staginggoerli_GnosisConnectorMetaResolvers<ContextType>;
  staginggoerli_OptimismConnectorMeta?: staginggoerli_OptimismConnectorMetaResolvers<ContextType>;
  staginggoerli_PolygonConnectorMeta?: staginggoerli_PolygonConnectorMetaResolvers<ContextType>;
  staginggoerli_RootAggregated?: staginggoerli_RootAggregatedResolvers<ContextType>;
  staginggoerli_RootManagerMeta?: staginggoerli_RootManagerMetaResolvers<ContextType>;
  staginggoerli_RootMessageProcessed?: staginggoerli_RootMessageProcessedResolvers<ContextType>;
  staginggoerli_RootPropagated?: staginggoerli_RootPropagatedResolvers<ContextType>;
  staginggoerli__Block_?: staginggoerli__Block_Resolvers<ContextType>;
  staginggoerli__Meta_?: staginggoerli__Meta_Resolvers<ContextType>;
  mainnet_AggregatedMessageRoot?: mainnet_AggregatedMessageRootResolvers<ContextType>;
  mainnet_ArbitrumConnectorMeta?: mainnet_ArbitrumConnectorMetaResolvers<ContextType>;
  mainnet_BigDecimal?: GraphQLScalarType;
  mainnet_BnbConnectorMeta?: mainnet_BnbConnectorMetaResolvers<ContextType>;
  mainnet_Bytes?: GraphQLScalarType;
  mainnet_GnosisConnectorMeta?: mainnet_GnosisConnectorMetaResolvers<ContextType>;
  mainnet_OptimismConnectorMeta?: mainnet_OptimismConnectorMetaResolvers<ContextType>;
  mainnet_PolygonConnectorMeta?: mainnet_PolygonConnectorMetaResolvers<ContextType>;
  mainnet_RootAggregated?: mainnet_RootAggregatedResolvers<ContextType>;
  mainnet_RootManagerMeta?: mainnet_RootManagerMetaResolvers<ContextType>;
  mainnet_RootMessageProcessed?: mainnet_RootMessageProcessedResolvers<ContextType>;
  mainnet_RootPropagated?: mainnet_RootPropagatedResolvers<ContextType>;
  mainnet__Block_?: mainnet__Block_Resolvers<ContextType>;
  mainnet__Meta_?: mainnet__Meta_Resolvers<ContextType>;
  testoptimismgoerli_Asset?: testoptimismgoerli_AssetResolvers<ContextType>;
  testoptimismgoerli_AssetBalance?: testoptimismgoerli_AssetBalanceResolvers<ContextType>;
  testoptimismgoerli_BigDecimal?: GraphQLScalarType;
  testoptimismgoerli_Bytes?: GraphQLScalarType;
  testoptimismgoerli_DestinationTransfer?: testoptimismgoerli_DestinationTransferResolvers<ContextType>;
  testoptimismgoerli_OriginTransfer?: testoptimismgoerli_OriginTransferResolvers<ContextType>;
  testoptimismgoerli_Relayer?: testoptimismgoerli_RelayerResolvers<ContextType>;
  testoptimismgoerli_Router?: testoptimismgoerli_RouterResolvers<ContextType>;
  testoptimismgoerli_Setting?: testoptimismgoerli_SettingResolvers<ContextType>;
  testoptimismgoerli_SponsorVault?: testoptimismgoerli_SponsorVaultResolvers<ContextType>;
  testoptimismgoerli_StableSwap?: testoptimismgoerli_StableSwapResolvers<ContextType>;
  testoptimismgoerli__Block_?: testoptimismgoerli__Block_Resolvers<ContextType>;
  testoptimismgoerli__Meta_?: testoptimismgoerli__Meta_Resolvers<ContextType>;
  optimism_swap_BigDecimal?: GraphQLScalarType;
  optimism_swap_Bytes?: GraphQLScalarType;
  optimism_swap_PooledToken?: optimism_swap_PooledTokenResolvers<ContextType>;
  optimism_swap_StableSwap?: optimism_swap_StableSwapResolvers<ContextType>;
  optimism_swap_StableSwapAddLiquidityEvent?: optimism_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  optimism_swap_StableSwapEvent?: optimism_swap_StableSwapEventResolvers<ContextType>;
  optimism_swap_StableSwapExchange?: optimism_swap_StableSwapExchangeResolvers<ContextType>;
  optimism_swap_StableSwapRemoveLiquidityEvent?: optimism_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  optimism_swap_SwapDailyVolume?: optimism_swap_SwapDailyVolumeResolvers<ContextType>;
  optimism_swap_SwapHourlyVolume?: optimism_swap_SwapHourlyVolumeResolvers<ContextType>;
  optimism_swap_SwapTradeVolume?: optimism_swap_SwapTradeVolumeResolvers<ContextType>;
  optimism_swap_SwapWeeklyVolume?: optimism_swap_SwapWeeklyVolumeResolvers<ContextType>;
  optimism_swap_SystemInfo?: optimism_swap_SystemInfoResolvers<ContextType>;
  optimism_swap__Block_?: optimism_swap__Block_Resolvers<ContextType>;
  optimism_swap__Meta_?: optimism_swap__Meta_Resolvers<ContextType>;
  goerli_swap_BigDecimal?: GraphQLScalarType;
  goerli_swap_Bytes?: GraphQLScalarType;
  goerli_swap_PooledToken?: goerli_swap_PooledTokenResolvers<ContextType>;
  goerli_swap_StableSwap?: goerli_swap_StableSwapResolvers<ContextType>;
  goerli_swap_StableSwapAddLiquidityEvent?: goerli_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  goerli_swap_StableSwapEvent?: goerli_swap_StableSwapEventResolvers<ContextType>;
  goerli_swap_StableSwapExchange?: goerli_swap_StableSwapExchangeResolvers<ContextType>;
  goerli_swap_StableSwapRemoveLiquidityEvent?: goerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  goerli_swap_SwapDailyVolume?: goerli_swap_SwapDailyVolumeResolvers<ContextType>;
  goerli_swap_SwapHourlyVolume?: goerli_swap_SwapHourlyVolumeResolvers<ContextType>;
  goerli_swap_SwapTradeVolume?: goerli_swap_SwapTradeVolumeResolvers<ContextType>;
  goerli_swap_SwapWeeklyVolume?: goerli_swap_SwapWeeklyVolumeResolvers<ContextType>;
  goerli_swap_SystemInfo?: goerli_swap_SystemInfoResolvers<ContextType>;
  goerli_swap__Block_?: goerli_swap__Block_Resolvers<ContextType>;
  goerli_swap__Meta_?: goerli_swap__Meta_Resolvers<ContextType>;
  optimismgoerli_swap_BigDecimal?: GraphQLScalarType;
  optimismgoerli_swap_Bytes?: GraphQLScalarType;
  optimismgoerli_swap_PooledToken?: optimismgoerli_swap_PooledTokenResolvers<ContextType>;
  optimismgoerli_swap_StableSwap?: optimismgoerli_swap_StableSwapResolvers<ContextType>;
  optimismgoerli_swap_StableSwapAddLiquidityEvent?: optimismgoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  optimismgoerli_swap_StableSwapEvent?: optimismgoerli_swap_StableSwapEventResolvers<ContextType>;
  optimismgoerli_swap_StableSwapExchange?: optimismgoerli_swap_StableSwapExchangeResolvers<ContextType>;
  optimismgoerli_swap_StableSwapRemoveLiquidityEvent?: optimismgoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  optimismgoerli_swap_SwapDailyVolume?: optimismgoerli_swap_SwapDailyVolumeResolvers<ContextType>;
  optimismgoerli_swap_SwapHourlyVolume?: optimismgoerli_swap_SwapHourlyVolumeResolvers<ContextType>;
  optimismgoerli_swap_SwapTradeVolume?: optimismgoerli_swap_SwapTradeVolumeResolvers<ContextType>;
  optimismgoerli_swap_SwapWeeklyVolume?: optimismgoerli_swap_SwapWeeklyVolumeResolvers<ContextType>;
  optimismgoerli_swap_SystemInfo?: optimismgoerli_swap_SystemInfoResolvers<ContextType>;
  optimismgoerli_swap__Block_?: optimismgoerli_swap__Block_Resolvers<ContextType>;
  optimismgoerli_swap__Meta_?: optimismgoerli_swap__Meta_Resolvers<ContextType>;
  stagingmumbai_swap_BigDecimal?: GraphQLScalarType;
  stagingmumbai_swap_Bytes?: GraphQLScalarType;
  stagingmumbai_swap_PooledToken?: stagingmumbai_swap_PooledTokenResolvers<ContextType>;
  stagingmumbai_swap_StableSwap?: stagingmumbai_swap_StableSwapResolvers<ContextType>;
  stagingmumbai_swap_StableSwapAddLiquidityEvent?: stagingmumbai_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  stagingmumbai_swap_StableSwapEvent?: stagingmumbai_swap_StableSwapEventResolvers<ContextType>;
  stagingmumbai_swap_StableSwapExchange?: stagingmumbai_swap_StableSwapExchangeResolvers<ContextType>;
  stagingmumbai_swap_StableSwapRemoveLiquidityEvent?: stagingmumbai_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  stagingmumbai_swap_SwapDailyVolume?: stagingmumbai_swap_SwapDailyVolumeResolvers<ContextType>;
  stagingmumbai_swap_SwapHourlyVolume?: stagingmumbai_swap_SwapHourlyVolumeResolvers<ContextType>;
  stagingmumbai_swap_SwapTradeVolume?: stagingmumbai_swap_SwapTradeVolumeResolvers<ContextType>;
  stagingmumbai_swap_SwapWeeklyVolume?: stagingmumbai_swap_SwapWeeklyVolumeResolvers<ContextType>;
  stagingmumbai_swap_SystemInfo?: stagingmumbai_swap_SystemInfoResolvers<ContextType>;
  stagingmumbai_swap__Block_?: stagingmumbai_swap__Block_Resolvers<ContextType>;
  stagingmumbai_swap__Meta_?: stagingmumbai_swap__Meta_Resolvers<ContextType>;
  goerli_AggregatedMessageRoot?: goerli_AggregatedMessageRootResolvers<ContextType>;
  goerli_ArbitrumConnectorMeta?: goerli_ArbitrumConnectorMetaResolvers<ContextType>;
  goerli_BigDecimal?: GraphQLScalarType;
  goerli_BnbConnectorMeta?: goerli_BnbConnectorMetaResolvers<ContextType>;
  goerli_Bytes?: GraphQLScalarType;
  goerli_GnosisConnectorMeta?: goerli_GnosisConnectorMetaResolvers<ContextType>;
  goerli_OptimismConnectorMeta?: goerli_OptimismConnectorMetaResolvers<ContextType>;
  goerli_PolygonConnectorMeta?: goerli_PolygonConnectorMetaResolvers<ContextType>;
  goerli_RootAggregated?: goerli_RootAggregatedResolvers<ContextType>;
  goerli_RootManagerMeta?: goerli_RootManagerMetaResolvers<ContextType>;
  goerli_RootMessageProcessed?: goerli_RootMessageProcessedResolvers<ContextType>;
  goerli_RootPropagated?: goerli_RootPropagatedResolvers<ContextType>;
  goerli__Block_?: goerli__Block_Resolvers<ContextType>;
  goerli__Meta_?: goerli__Meta_Resolvers<ContextType>;
  local1337_Asset?: local1337_AssetResolvers<ContextType>;
  local1337_AssetBalance?: local1337_AssetBalanceResolvers<ContextType>;
  local1337_BigDecimal?: GraphQLScalarType;
  local1337_Bytes?: GraphQLScalarType;
  local1337_DestinationTransfer?: local1337_DestinationTransferResolvers<ContextType>;
  local1337_OriginTransfer?: local1337_OriginTransferResolvers<ContextType>;
  local1337_Relayer?: local1337_RelayerResolvers<ContextType>;
  local1337_Router?: local1337_RouterResolvers<ContextType>;
  local1337_Setting?: local1337_SettingResolvers<ContextType>;
  local1337_SponsorVault?: local1337_SponsorVaultResolvers<ContextType>;
  local1337_StableSwap?: local1337_StableSwapResolvers<ContextType>;
  local1337__Block_?: local1337__Block_Resolvers<ContextType>;
  local1337__Meta_?: local1337__Meta_Resolvers<ContextType>;
  bnb_swap_BigDecimal?: GraphQLScalarType;
  bnb_swap_Bytes?: GraphQLScalarType;
  bnb_swap_PooledToken?: bnb_swap_PooledTokenResolvers<ContextType>;
  bnb_swap_StableSwap?: bnb_swap_StableSwapResolvers<ContextType>;
  bnb_swap_StableSwapAddLiquidityEvent?: bnb_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  bnb_swap_StableSwapEvent?: bnb_swap_StableSwapEventResolvers<ContextType>;
  bnb_swap_StableSwapExchange?: bnb_swap_StableSwapExchangeResolvers<ContextType>;
  bnb_swap_StableSwapRemoveLiquidityEvent?: bnb_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  bnb_swap_SwapDailyVolume?: bnb_swap_SwapDailyVolumeResolvers<ContextType>;
  bnb_swap_SwapHourlyVolume?: bnb_swap_SwapHourlyVolumeResolvers<ContextType>;
  bnb_swap_SwapTradeVolume?: bnb_swap_SwapTradeVolumeResolvers<ContextType>;
  bnb_swap_SwapWeeklyVolume?: bnb_swap_SwapWeeklyVolumeResolvers<ContextType>;
  bnb_swap_SystemInfo?: bnb_swap_SystemInfoResolvers<ContextType>;
  bnb_swap__Block_?: bnb_swap__Block_Resolvers<ContextType>;
  bnb_swap__Meta_?: bnb_swap__Meta_Resolvers<ContextType>;
  arbitrumgoerli_swap_BigDecimal?: GraphQLScalarType;
  arbitrumgoerli_swap_Bytes?: GraphQLScalarType;
  arbitrumgoerli_swap_PooledToken?: arbitrumgoerli_swap_PooledTokenResolvers<ContextType>;
  arbitrumgoerli_swap_StableSwap?: arbitrumgoerli_swap_StableSwapResolvers<ContextType>;
  arbitrumgoerli_swap_StableSwapAddLiquidityEvent?: arbitrumgoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  arbitrumgoerli_swap_StableSwapEvent?: arbitrumgoerli_swap_StableSwapEventResolvers<ContextType>;
  arbitrumgoerli_swap_StableSwapExchange?: arbitrumgoerli_swap_StableSwapExchangeResolvers<ContextType>;
  arbitrumgoerli_swap_StableSwapRemoveLiquidityEvent?: arbitrumgoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  arbitrumgoerli_swap_SwapDailyVolume?: arbitrumgoerli_swap_SwapDailyVolumeResolvers<ContextType>;
  arbitrumgoerli_swap_SwapHourlyVolume?: arbitrumgoerli_swap_SwapHourlyVolumeResolvers<ContextType>;
  arbitrumgoerli_swap_SwapTradeVolume?: arbitrumgoerli_swap_SwapTradeVolumeResolvers<ContextType>;
  arbitrumgoerli_swap_SwapWeeklyVolume?: arbitrumgoerli_swap_SwapWeeklyVolumeResolvers<ContextType>;
  arbitrumgoerli_swap_SystemInfo?: arbitrumgoerli_swap_SystemInfoResolvers<ContextType>;
  arbitrumgoerli_swap__Block_?: arbitrumgoerli_swap__Block_Resolvers<ContextType>;
  arbitrumgoerli_swap__Meta_?: arbitrumgoerli_swap__Meta_Resolvers<ContextType>;
  mumbai_swap_BigDecimal?: GraphQLScalarType;
  mumbai_swap_Bytes?: GraphQLScalarType;
  mumbai_swap_PooledToken?: mumbai_swap_PooledTokenResolvers<ContextType>;
  mumbai_swap_StableSwap?: mumbai_swap_StableSwapResolvers<ContextType>;
  mumbai_swap_StableSwapAddLiquidityEvent?: mumbai_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  mumbai_swap_StableSwapEvent?: mumbai_swap_StableSwapEventResolvers<ContextType>;
  mumbai_swap_StableSwapExchange?: mumbai_swap_StableSwapExchangeResolvers<ContextType>;
  mumbai_swap_StableSwapRemoveLiquidityEvent?: mumbai_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  mumbai_swap_SwapDailyVolume?: mumbai_swap_SwapDailyVolumeResolvers<ContextType>;
  mumbai_swap_SwapHourlyVolume?: mumbai_swap_SwapHourlyVolumeResolvers<ContextType>;
  mumbai_swap_SwapTradeVolume?: mumbai_swap_SwapTradeVolumeResolvers<ContextType>;
  mumbai_swap_SwapWeeklyVolume?: mumbai_swap_SwapWeeklyVolumeResolvers<ContextType>;
  mumbai_swap_SystemInfo?: mumbai_swap_SystemInfoResolvers<ContextType>;
  mumbai_swap__Block_?: mumbai_swap__Block_Resolvers<ContextType>;
  mumbai_swap__Meta_?: mumbai_swap__Meta_Resolvers<ContextType>;
  optimism_AggregateRoot?: optimism_AggregateRootResolvers<ContextType>;
  optimism_Asset?: optimism_AssetResolvers<ContextType>;
  optimism_AssetBalance?: optimism_AssetBalanceResolvers<ContextType>;
  optimism_AssetStatus?: optimism_AssetStatusResolvers<ContextType>;
  optimism_BigDecimal?: GraphQLScalarType;
  optimism_Bytes?: GraphQLScalarType;
  optimism_ConnectorMeta?: optimism_ConnectorMetaResolvers<ContextType>;
  optimism_DestinationTransfer?: optimism_DestinationTransferResolvers<ContextType>;
  optimism_OriginMessage?: optimism_OriginMessageResolvers<ContextType>;
  optimism_OriginTransfer?: optimism_OriginTransferResolvers<ContextType>;
  optimism_Relayer?: optimism_RelayerResolvers<ContextType>;
  optimism_RootCount?: optimism_RootCountResolvers<ContextType>;
  optimism_RootMessageSent?: optimism_RootMessageSentResolvers<ContextType>;
  optimism_Router?: optimism_RouterResolvers<ContextType>;
  optimism_Sequencer?: optimism_SequencerResolvers<ContextType>;
  optimism_Setting?: optimism_SettingResolvers<ContextType>;
  optimism__Block_?: optimism__Block_Resolvers<ContextType>;
  optimism__Meta_?: optimism__Meta_Resolvers<ContextType>;
  staginggoerli_swap_BigDecimal?: GraphQLScalarType;
  staginggoerli_swap_Bytes?: GraphQLScalarType;
  staginggoerli_swap_PooledToken?: staginggoerli_swap_PooledTokenResolvers<ContextType>;
  staginggoerli_swap_StableSwap?: staginggoerli_swap_StableSwapResolvers<ContextType>;
  staginggoerli_swap_StableSwapAddLiquidityEvent?: staginggoerli_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  staginggoerli_swap_StableSwapEvent?: staginggoerli_swap_StableSwapEventResolvers<ContextType>;
  staginggoerli_swap_StableSwapExchange?: staginggoerli_swap_StableSwapExchangeResolvers<ContextType>;
  staginggoerli_swap_StableSwapRemoveLiquidityEvent?: staginggoerli_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  staginggoerli_swap_SwapDailyVolume?: staginggoerli_swap_SwapDailyVolumeResolvers<ContextType>;
  staginggoerli_swap_SwapHourlyVolume?: staginggoerli_swap_SwapHourlyVolumeResolvers<ContextType>;
  staginggoerli_swap_SwapTradeVolume?: staginggoerli_swap_SwapTradeVolumeResolvers<ContextType>;
  staginggoerli_swap_SwapWeeklyVolume?: staginggoerli_swap_SwapWeeklyVolumeResolvers<ContextType>;
  staginggoerli_swap_SystemInfo?: staginggoerli_swap_SystemInfoResolvers<ContextType>;
  staginggoerli_swap__Block_?: staginggoerli_swap__Block_Resolvers<ContextType>;
  staginggoerli_swap__Meta_?: staginggoerli_swap__Meta_Resolvers<ContextType>;
  stagingoptimismgoerli_AggregateRoot?: stagingoptimismgoerli_AggregateRootResolvers<ContextType>;
  stagingoptimismgoerli_Asset?: stagingoptimismgoerli_AssetResolvers<ContextType>;
  stagingoptimismgoerli_AssetBalance?: stagingoptimismgoerli_AssetBalanceResolvers<ContextType>;
  stagingoptimismgoerli_AssetStatus?: stagingoptimismgoerli_AssetStatusResolvers<ContextType>;
  stagingoptimismgoerli_BigDecimal?: GraphQLScalarType;
  stagingoptimismgoerli_Bytes?: GraphQLScalarType;
  stagingoptimismgoerli_ConnectorMeta?: stagingoptimismgoerli_ConnectorMetaResolvers<ContextType>;
  stagingoptimismgoerli_DestinationTransfer?: stagingoptimismgoerli_DestinationTransferResolvers<ContextType>;
  stagingoptimismgoerli_OriginMessage?: stagingoptimismgoerli_OriginMessageResolvers<ContextType>;
  stagingoptimismgoerli_OriginTransfer?: stagingoptimismgoerli_OriginTransferResolvers<ContextType>;
  stagingoptimismgoerli_Relayer?: stagingoptimismgoerli_RelayerResolvers<ContextType>;
  stagingoptimismgoerli_RootCount?: stagingoptimismgoerli_RootCountResolvers<ContextType>;
  stagingoptimismgoerli_RootMessageSent?: stagingoptimismgoerli_RootMessageSentResolvers<ContextType>;
  stagingoptimismgoerli_Router?: stagingoptimismgoerli_RouterResolvers<ContextType>;
  stagingoptimismgoerli_Sequencer?: stagingoptimismgoerli_SequencerResolvers<ContextType>;
  stagingoptimismgoerli_Setting?: stagingoptimismgoerli_SettingResolvers<ContextType>;
  stagingoptimismgoerli__Block_?: stagingoptimismgoerli__Block_Resolvers<ContextType>;
  stagingoptimismgoerli__Meta_?: stagingoptimismgoerli__Meta_Resolvers<ContextType>;
  stagingmumbai_AggregateRoot?: stagingmumbai_AggregateRootResolvers<ContextType>;
  stagingmumbai_Asset?: stagingmumbai_AssetResolvers<ContextType>;
  stagingmumbai_AssetBalance?: stagingmumbai_AssetBalanceResolvers<ContextType>;
  stagingmumbai_AssetStatus?: stagingmumbai_AssetStatusResolvers<ContextType>;
  stagingmumbai_BigDecimal?: GraphQLScalarType;
  stagingmumbai_Bytes?: GraphQLScalarType;
  stagingmumbai_ConnectorMeta?: stagingmumbai_ConnectorMetaResolvers<ContextType>;
  stagingmumbai_DestinationTransfer?: stagingmumbai_DestinationTransferResolvers<ContextType>;
  stagingmumbai_OriginMessage?: stagingmumbai_OriginMessageResolvers<ContextType>;
  stagingmumbai_OriginTransfer?: stagingmumbai_OriginTransferResolvers<ContextType>;
  stagingmumbai_Relayer?: stagingmumbai_RelayerResolvers<ContextType>;
  stagingmumbai_RootCount?: stagingmumbai_RootCountResolvers<ContextType>;
  stagingmumbai_RootMessageSent?: stagingmumbai_RootMessageSentResolvers<ContextType>;
  stagingmumbai_Router?: stagingmumbai_RouterResolvers<ContextType>;
  stagingmumbai_Sequencer?: stagingmumbai_SequencerResolvers<ContextType>;
  stagingmumbai_Setting?: stagingmumbai_SettingResolvers<ContextType>;
  stagingmumbai__Block_?: stagingmumbai__Block_Resolvers<ContextType>;
  stagingmumbai__Meta_?: stagingmumbai__Meta_Resolvers<ContextType>;
  arbitrumone_swap_BigDecimal?: GraphQLScalarType;
  arbitrumone_swap_Bytes?: GraphQLScalarType;
  arbitrumone_swap_PooledToken?: arbitrumone_swap_PooledTokenResolvers<ContextType>;
  arbitrumone_swap_StableSwap?: arbitrumone_swap_StableSwapResolvers<ContextType>;
  arbitrumone_swap_StableSwapAddLiquidityEvent?: arbitrumone_swap_StableSwapAddLiquidityEventResolvers<ContextType>;
  arbitrumone_swap_StableSwapEvent?: arbitrumone_swap_StableSwapEventResolvers<ContextType>;
  arbitrumone_swap_StableSwapExchange?: arbitrumone_swap_StableSwapExchangeResolvers<ContextType>;
  arbitrumone_swap_StableSwapRemoveLiquidityEvent?: arbitrumone_swap_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  arbitrumone_swap_SwapDailyVolume?: arbitrumone_swap_SwapDailyVolumeResolvers<ContextType>;
  arbitrumone_swap_SwapHourlyVolume?: arbitrumone_swap_SwapHourlyVolumeResolvers<ContextType>;
  arbitrumone_swap_SwapTradeVolume?: arbitrumone_swap_SwapTradeVolumeResolvers<ContextType>;
  arbitrumone_swap_SwapWeeklyVolume?: arbitrumone_swap_SwapWeeklyVolumeResolvers<ContextType>;
  arbitrumone_swap_SystemInfo?: arbitrumone_swap_SystemInfoResolvers<ContextType>;
  arbitrumone_swap__Block_?: arbitrumone_swap__Block_Resolvers<ContextType>;
  arbitrumone_swap__Meta_?: arbitrumone_swap__Meta_Resolvers<ContextType>;
  local1338_Asset?: local1338_AssetResolvers<ContextType>;
  local1338_AssetBalance?: local1338_AssetBalanceResolvers<ContextType>;
  local1338_BigDecimal?: GraphQLScalarType;
  local1338_Bytes?: GraphQLScalarType;
  local1338_DestinationTransfer?: local1338_DestinationTransferResolvers<ContextType>;
  local1338_OriginTransfer?: local1338_OriginTransferResolvers<ContextType>;
  local1338_Relayer?: local1338_RelayerResolvers<ContextType>;
  local1338_Router?: local1338_RouterResolvers<ContextType>;
  local1338_Setting?: local1338_SettingResolvers<ContextType>;
  local1338_SponsorVault?: local1338_SponsorVaultResolvers<ContextType>;
  local1338_StableSwap?: local1338_StableSwapResolvers<ContextType>;
  local1338__Block_?: local1338__Block_Resolvers<ContextType>;
  local1338__Meta_?: local1338__Meta_Resolvers<ContextType>;
  goerli_AggregateRoot?: goerli_AggregateRootResolvers<ContextType>;
  goerli_Asset?: goerli_AssetResolvers<ContextType>;
  goerli_AssetBalance?: goerli_AssetBalanceResolvers<ContextType>;
  goerli_AssetStatus?: goerli_AssetStatusResolvers<ContextType>;
  goerli_ConnectorMeta?: goerli_ConnectorMetaResolvers<ContextType>;
  goerli_DestinationTransfer?: goerli_DestinationTransferResolvers<ContextType>;
  goerli_OriginMessage?: goerli_OriginMessageResolvers<ContextType>;
  goerli_OriginTransfer?: goerli_OriginTransferResolvers<ContextType>;
  goerli_Relayer?: goerli_RelayerResolvers<ContextType>;
  goerli_RootCount?: goerli_RootCountResolvers<ContextType>;
  goerli_RootMessageSent?: goerli_RootMessageSentResolvers<ContextType>;
  goerli_Router?: goerli_RouterResolvers<ContextType>;
  goerli_Sequencer?: goerli_SequencerResolvers<ContextType>;
  goerli_Setting?: goerli_SettingResolvers<ContextType>;
  stagingarbitrumgoerli_AggregateRoot?: stagingarbitrumgoerli_AggregateRootResolvers<ContextType>;
  stagingarbitrumgoerli_Asset?: stagingarbitrumgoerli_AssetResolvers<ContextType>;
  stagingarbitrumgoerli_AssetBalance?: stagingarbitrumgoerli_AssetBalanceResolvers<ContextType>;
  stagingarbitrumgoerli_AssetStatus?: stagingarbitrumgoerli_AssetStatusResolvers<ContextType>;
  stagingarbitrumgoerli_BigDecimal?: GraphQLScalarType;
  stagingarbitrumgoerli_Bytes?: GraphQLScalarType;
  stagingarbitrumgoerli_ConnectorMeta?: stagingarbitrumgoerli_ConnectorMetaResolvers<ContextType>;
  stagingarbitrumgoerli_DestinationTransfer?: stagingarbitrumgoerli_DestinationTransferResolvers<ContextType>;
  stagingarbitrumgoerli_OriginMessage?: stagingarbitrumgoerli_OriginMessageResolvers<ContextType>;
  stagingarbitrumgoerli_OriginTransfer?: stagingarbitrumgoerli_OriginTransferResolvers<ContextType>;
  stagingarbitrumgoerli_Relayer?: stagingarbitrumgoerli_RelayerResolvers<ContextType>;
  stagingarbitrumgoerli_RootCount?: stagingarbitrumgoerli_RootCountResolvers<ContextType>;
  stagingarbitrumgoerli_RootMessageSent?: stagingarbitrumgoerli_RootMessageSentResolvers<ContextType>;
  stagingarbitrumgoerli_Router?: stagingarbitrumgoerli_RouterResolvers<ContextType>;
  stagingarbitrumgoerli_Sequencer?: stagingarbitrumgoerli_SequencerResolvers<ContextType>;
  stagingarbitrumgoerli_Setting?: stagingarbitrumgoerli_SettingResolvers<ContextType>;
  stagingarbitrumgoerli__Block_?: stagingarbitrumgoerli__Block_Resolvers<ContextType>;
  stagingarbitrumgoerli__Meta_?: stagingarbitrumgoerli__Meta_Resolvers<ContextType>;
  mumbai_AggregateRoot?: mumbai_AggregateRootResolvers<ContextType>;
  mumbai_Asset?: mumbai_AssetResolvers<ContextType>;
  mumbai_AssetBalance?: mumbai_AssetBalanceResolvers<ContextType>;
  mumbai_AssetStatus?: mumbai_AssetStatusResolvers<ContextType>;
  mumbai_BigDecimal?: GraphQLScalarType;
  mumbai_Bytes?: GraphQLScalarType;
  mumbai_ConnectorMeta?: mumbai_ConnectorMetaResolvers<ContextType>;
  mumbai_DestinationTransfer?: mumbai_DestinationTransferResolvers<ContextType>;
  mumbai_OriginMessage?: mumbai_OriginMessageResolvers<ContextType>;
  mumbai_OriginTransfer?: mumbai_OriginTransferResolvers<ContextType>;
  mumbai_Relayer?: mumbai_RelayerResolvers<ContextType>;
  mumbai_RootCount?: mumbai_RootCountResolvers<ContextType>;
  mumbai_RootMessageSent?: mumbai_RootMessageSentResolvers<ContextType>;
  mumbai_Router?: mumbai_RouterResolvers<ContextType>;
  mumbai_Sequencer?: mumbai_SequencerResolvers<ContextType>;
  mumbai_Setting?: mumbai_SettingResolvers<ContextType>;
  mumbai__Block_?: mumbai__Block_Resolvers<ContextType>;
  mumbai__Meta_?: mumbai__Meta_Resolvers<ContextType>;
  bnb_AggregateRoot?: bnb_AggregateRootResolvers<ContextType>;
  bnb_Asset?: bnb_AssetResolvers<ContextType>;
  bnb_AssetBalance?: bnb_AssetBalanceResolvers<ContextType>;
  bnb_AssetStatus?: bnb_AssetStatusResolvers<ContextType>;
  bnb_BigDecimal?: GraphQLScalarType;
  bnb_Bytes?: GraphQLScalarType;
  bnb_ConnectorMeta?: bnb_ConnectorMetaResolvers<ContextType>;
  bnb_DestinationTransfer?: bnb_DestinationTransferResolvers<ContextType>;
  bnb_OriginMessage?: bnb_OriginMessageResolvers<ContextType>;
  bnb_OriginTransfer?: bnb_OriginTransferResolvers<ContextType>;
  bnb_Relayer?: bnb_RelayerResolvers<ContextType>;
  bnb_RootCount?: bnb_RootCountResolvers<ContextType>;
  bnb_RootMessageSent?: bnb_RootMessageSentResolvers<ContextType>;
  bnb_Router?: bnb_RouterResolvers<ContextType>;
  bnb_Sequencer?: bnb_SequencerResolvers<ContextType>;
  bnb_Setting?: bnb_SettingResolvers<ContextType>;
  bnb__Block_?: bnb__Block_Resolvers<ContextType>;
  bnb__Meta_?: bnb__Meta_Resolvers<ContextType>;
  mainnet_AggregateRoot?: mainnet_AggregateRootResolvers<ContextType>;
  mainnet_Asset?: mainnet_AssetResolvers<ContextType>;
  mainnet_AssetBalance?: mainnet_AssetBalanceResolvers<ContextType>;
  mainnet_AssetStatus?: mainnet_AssetStatusResolvers<ContextType>;
  mainnet_ConnectorMeta?: mainnet_ConnectorMetaResolvers<ContextType>;
  mainnet_DestinationTransfer?: mainnet_DestinationTransferResolvers<ContextType>;
  mainnet_OriginMessage?: mainnet_OriginMessageResolvers<ContextType>;
  mainnet_OriginTransfer?: mainnet_OriginTransferResolvers<ContextType>;
  mainnet_Relayer?: mainnet_RelayerResolvers<ContextType>;
  mainnet_RootCount?: mainnet_RootCountResolvers<ContextType>;
  mainnet_RootMessageSent?: mainnet_RootMessageSentResolvers<ContextType>;
  mainnet_Router?: mainnet_RouterResolvers<ContextType>;
  mainnet_Sequencer?: mainnet_SequencerResolvers<ContextType>;
  mainnet_Setting?: mainnet_SettingResolvers<ContextType>;
  polygon_AggregateRoot?: polygon_AggregateRootResolvers<ContextType>;
  polygon_Asset?: polygon_AssetResolvers<ContextType>;
  polygon_AssetBalance?: polygon_AssetBalanceResolvers<ContextType>;
  polygon_AssetStatus?: polygon_AssetStatusResolvers<ContextType>;
  polygon_BigDecimal?: GraphQLScalarType;
  polygon_Bytes?: GraphQLScalarType;
  polygon_ConnectorMeta?: polygon_ConnectorMetaResolvers<ContextType>;
  polygon_DestinationTransfer?: polygon_DestinationTransferResolvers<ContextType>;
  polygon_OriginMessage?: polygon_OriginMessageResolvers<ContextType>;
  polygon_OriginTransfer?: polygon_OriginTransferResolvers<ContextType>;
  polygon_Relayer?: polygon_RelayerResolvers<ContextType>;
  polygon_RootCount?: polygon_RootCountResolvers<ContextType>;
  polygon_RootMessageSent?: polygon_RootMessageSentResolvers<ContextType>;
  polygon_Router?: polygon_RouterResolvers<ContextType>;
  polygon_Sequencer?: polygon_SequencerResolvers<ContextType>;
  polygon_Setting?: polygon_SettingResolvers<ContextType>;
  polygon__Block_?: polygon__Block_Resolvers<ContextType>;
  polygon__Meta_?: polygon__Meta_Resolvers<ContextType>;
  xdai_AggregateRoot?: xdai_AggregateRootResolvers<ContextType>;
  xdai_Asset?: xdai_AssetResolvers<ContextType>;
  xdai_AssetBalance?: xdai_AssetBalanceResolvers<ContextType>;
  xdai_AssetStatus?: xdai_AssetStatusResolvers<ContextType>;
  xdai_BigDecimal?: GraphQLScalarType;
  xdai_Bytes?: GraphQLScalarType;
  xdai_ConnectorMeta?: xdai_ConnectorMetaResolvers<ContextType>;
  xdai_DestinationTransfer?: xdai_DestinationTransferResolvers<ContextType>;
  xdai_OriginMessage?: xdai_OriginMessageResolvers<ContextType>;
  xdai_OriginTransfer?: xdai_OriginTransferResolvers<ContextType>;
  xdai_Relayer?: xdai_RelayerResolvers<ContextType>;
  xdai_RootCount?: xdai_RootCountResolvers<ContextType>;
  xdai_RootMessageSent?: xdai_RootMessageSentResolvers<ContextType>;
  xdai_Router?: xdai_RouterResolvers<ContextType>;
  xdai_Sequencer?: xdai_SequencerResolvers<ContextType>;
  xdai_Setting?: xdai_SettingResolvers<ContextType>;
  xdai__Block_?: xdai__Block_Resolvers<ContextType>;
  xdai__Meta_?: xdai__Meta_Resolvers<ContextType>;
  arbitrumone_AggregateRoot?: arbitrumone_AggregateRootResolvers<ContextType>;
  arbitrumone_Asset?: arbitrumone_AssetResolvers<ContextType>;
  arbitrumone_AssetBalance?: arbitrumone_AssetBalanceResolvers<ContextType>;
  arbitrumone_AssetStatus?: arbitrumone_AssetStatusResolvers<ContextType>;
  arbitrumone_BigDecimal?: GraphQLScalarType;
  arbitrumone_Bytes?: GraphQLScalarType;
  arbitrumone_ConnectorMeta?: arbitrumone_ConnectorMetaResolvers<ContextType>;
  arbitrumone_DestinationTransfer?: arbitrumone_DestinationTransferResolvers<ContextType>;
  arbitrumone_OriginMessage?: arbitrumone_OriginMessageResolvers<ContextType>;
  arbitrumone_OriginTransfer?: arbitrumone_OriginTransferResolvers<ContextType>;
  arbitrumone_Relayer?: arbitrumone_RelayerResolvers<ContextType>;
  arbitrumone_RootCount?: arbitrumone_RootCountResolvers<ContextType>;
  arbitrumone_RootMessageSent?: arbitrumone_RootMessageSentResolvers<ContextType>;
  arbitrumone_Router?: arbitrumone_RouterResolvers<ContextType>;
  arbitrumone_Sequencer?: arbitrumone_SequencerResolvers<ContextType>;
  arbitrumone_Setting?: arbitrumone_SettingResolvers<ContextType>;
  arbitrumone__Block_?: arbitrumone__Block_Resolvers<ContextType>;
  arbitrumone__Meta_?: arbitrumone__Meta_Resolvers<ContextType>;
  staginggoerli_AggregateRoot?: staginggoerli_AggregateRootResolvers<ContextType>;
  staginggoerli_Asset?: staginggoerli_AssetResolvers<ContextType>;
  staginggoerli_AssetBalance?: staginggoerli_AssetBalanceResolvers<ContextType>;
  staginggoerli_ConnectorMeta?: staginggoerli_ConnectorMetaResolvers<ContextType>;
  staginggoerli_DestinationTransfer?: staginggoerli_DestinationTransferResolvers<ContextType>;
  staginggoerli_OriginMessage?: staginggoerli_OriginMessageResolvers<ContextType>;
  staginggoerli_OriginTransfer?: staginggoerli_OriginTransferResolvers<ContextType>;
  staginggoerli_PooledToken?: staginggoerli_PooledTokenResolvers<ContextType>;
  staginggoerli_Relayer?: staginggoerli_RelayerResolvers<ContextType>;
  staginggoerli_RootCount?: staginggoerli_RootCountResolvers<ContextType>;
  staginggoerli_RootMessageSent?: staginggoerli_RootMessageSentResolvers<ContextType>;
  staginggoerli_Router?: staginggoerli_RouterResolvers<ContextType>;
  staginggoerli_Sequencer?: staginggoerli_SequencerResolvers<ContextType>;
  staginggoerli_Setting?: staginggoerli_SettingResolvers<ContextType>;
  staginggoerli_StableSwap?: staginggoerli_StableSwapResolvers<ContextType>;
  staginggoerli_StableSwapAddLiquidityEvent?: staginggoerli_StableSwapAddLiquidityEventResolvers<ContextType>;
  staginggoerli_StableSwapEvent?: staginggoerli_StableSwapEventResolvers<ContextType>;
  staginggoerli_StableSwapExchange?: staginggoerli_StableSwapExchangeResolvers<ContextType>;
  staginggoerli_StableSwapRemoveLiquidityEvent?: staginggoerli_StableSwapRemoveLiquidityEventResolvers<ContextType>;
  staginggoerli_SwapDailyVolume?: staginggoerli_SwapDailyVolumeResolvers<ContextType>;
  staginggoerli_SwapHourlyVolume?: staginggoerli_SwapHourlyVolumeResolvers<ContextType>;
  staginggoerli_SwapTradeVolume?: staginggoerli_SwapTradeVolumeResolvers<ContextType>;
  staginggoerli_SwapWeeklyVolume?: staginggoerli_SwapWeeklyVolumeResolvers<ContextType>;
  staginggoerli_TransferRelayerFee?: staginggoerli_TransferRelayerFeeResolvers<ContextType>;
}>;


export type MeshContext = StableSwapPolygonTypes.Context & ConnextOptimismGoerliTypes.Context & StableSwapStagingArbitrumGoerliTypes.Context & ConnextArbitrumGoerliTypes.Context & StableSwapStagingOptimismGoerliTypes.Context & ConnextTestGoerliTypes.Context & StableSwapXdaiTypes.Context & HubStagingGoerliTypes.Context & HubMainnetTypes.Context & ConnextTestOptimismGoerliTypes.Context & StableSwapOptimismTypes.Context & StableSwapGoerliTypes.Context & StableSwapOptimismGoerliTypes.Context & StableSwapStagingMumbaiTypes.Context & HubGoerliTypes.Context & ConnextLocal1337Types.Context & StableSwapBnbTypes.Context & StableSwapArbitrumGoerliTypes.Context & StableSwapMumbaiTypes.Context & ConnextOptimismTypes.Context & StableSwapStagingGoerliTypes.Context & ConnextStagingOptimismGoerliTypes.Context & ConnextStagingMumbaiTypes.Context & StableSwapArbitrumOneTypes.Context & ConnextLocal1338Types.Context & ConnextGoerliTypes.Context & ConnextStagingArbitrumGoerliTypes.Context & ConnextMumbaiTypes.Context & ConnextBnbTypes.Context & ConnextMainnetTypes.Context & ConnextPolygonTypes.Context & ConnextXdaiTypes.Context & ConnextArbitrumOneTypes.Context & ConnextStagingGoerliTypes.Context & BaseMeshContext;


const baseDir = pathModule.join(typeof __dirname === 'string' ? __dirname : '/', '..');

const importFn: ImportFn = <T>(moduleId: string) => {
  const relativeModuleId = (pathModule.isAbsolute(moduleId) ? pathModule.relative(baseDir, moduleId) : moduleId).split('\\').join('/').replace(baseDir + '/', '');
  switch(relativeModuleId) {
    case ".graphclient/sources/StableSwap_Polygon/introspectionSchema":
      return import("./sources/StableSwap_Polygon/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_OptimismGoerli/introspectionSchema":
      return import("./sources/Connext_OptimismGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Staging_ArbitrumGoerli/introspectionSchema":
      return import("./sources/StableSwap_Staging_ArbitrumGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_ArbitrumGoerli/introspectionSchema":
      return import("./sources/Connext_ArbitrumGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Staging_OptimismGoerli/introspectionSchema":
      return import("./sources/StableSwap_Staging_OptimismGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Test_Goerli/introspectionSchema":
      return import("./sources/Connext_Test_Goerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Xdai/introspectionSchema":
      return import("./sources/StableSwap_Xdai/introspectionSchema") as T;
    
    case ".graphclient/sources/Hub_Staging_Goerli/introspectionSchema":
      return import("./sources/Hub_Staging_Goerli/introspectionSchema") as T;
    
    case ".graphclient/sources/Hub_Mainnet/introspectionSchema":
      return import("./sources/Hub_Mainnet/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Test_OptimismGoerli/introspectionSchema":
      return import("./sources/Connext_Test_OptimismGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Optimism/introspectionSchema":
      return import("./sources/StableSwap_Optimism/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Goerli/introspectionSchema":
      return import("./sources/StableSwap_Goerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_OptimismGoerli/introspectionSchema":
      return import("./sources/StableSwap_OptimismGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Staging_Mumbai/introspectionSchema":
      return import("./sources/StableSwap_Staging_Mumbai/introspectionSchema") as T;
    
    case ".graphclient/sources/Hub_Goerli/introspectionSchema":
      return import("./sources/Hub_Goerli/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Local1337/introspectionSchema":
      return import("./sources/Connext_Local1337/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Bnb/introspectionSchema":
      return import("./sources/StableSwap_Bnb/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_ArbitrumGoerli/introspectionSchema":
      return import("./sources/StableSwap_ArbitrumGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Mumbai/introspectionSchema":
      return import("./sources/StableSwap_Mumbai/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Optimism/introspectionSchema":
      return import("./sources/Connext_Optimism/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_Staging_Goerli/introspectionSchema":
      return import("./sources/StableSwap_Staging_Goerli/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Staging_OptimismGoerli/introspectionSchema":
      return import("./sources/Connext_Staging_OptimismGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Staging_Mumbai/introspectionSchema":
      return import("./sources/Connext_Staging_Mumbai/introspectionSchema") as T;
    
    case ".graphclient/sources/StableSwap_ArbitrumOne/introspectionSchema":
      return import("./sources/StableSwap_ArbitrumOne/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Local1338/introspectionSchema":
      return import("./sources/Connext_Local1338/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Goerli/introspectionSchema":
      return import("./sources/Connext_Goerli/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Staging_ArbitrumGoerli/introspectionSchema":
      return import("./sources/Connext_Staging_ArbitrumGoerli/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Mumbai/introspectionSchema":
      return import("./sources/Connext_Mumbai/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Bnb/introspectionSchema":
      return import("./sources/Connext_Bnb/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Mainnet/introspectionSchema":
      return import("./sources/Connext_Mainnet/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Polygon/introspectionSchema":
      return import("./sources/Connext_Polygon/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Xdai/introspectionSchema":
      return import("./sources/Connext_Xdai/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_ArbitrumOne/introspectionSchema":
      return import("./sources/Connext_ArbitrumOne/introspectionSchema") as T;
    
    case ".graphclient/sources/Connext_Staging_Goerli/introspectionSchema":
      return import("./sources/Connext_Staging_Goerli/introspectionSchema") as T;
    
    default:
      return Promise.reject(new Error(`Cannot find module '${relativeModuleId}'.`));
  }
};

const rootStore = new MeshStore('.graphclient', new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
  fileType: "ts",
}), {
  readonly: true,
  validate: false
});

export const rawServeConfig: YamlConfig.Config['serve'] = undefined as any
export async function getMeshOptions(): Promise<GetMeshOptions> {
const pubsub = new PubSub();
const sourcesStore = rootStore.child('sources');
const logger = new DefaultLogger("GraphClient");
const cache = new (MeshCache as any)({
      ...({} as any),
      importFn,
      store: rootStore.child('cache'),
      pubsub,
      logger,
    } as any)

const sources: MeshResolvedSource[] = [];
const transforms: MeshTransform[] = [];
const additionalEnvelopPlugins: MeshPlugin<any>[] = [];
const connextGoerliTransforms = [];
const connextStagingGoerliTransforms = [];
const hubStagingGoerliTransforms = [];
const hubGoerliTransforms = [];
const connextTestGoerliTransforms = [];
const connextOptimismGoerliTransforms = [];
const connextTestOptimismGoerliTransforms = [];
const connextStagingOptimismGoerliTransforms = [];
const connextMumbaiTransforms = [];
const connextStagingMumbaiTransforms = [];
const connextArbitrumGoerliTransforms = [];
const connextStagingArbitrumGoerliTransforms = [];
const stableSwapGoerliTransforms = [];
const stableSwapStagingGoerliTransforms = [];
const stableSwapOptimismGoerliTransforms = [];
const stableSwapStagingOptimismGoerliTransforms = [];
const stableSwapMumbaiTransforms = [];
const stableSwapStagingMumbaiTransforms = [];
const stableSwapArbitrumGoerliTransforms = [];
const stableSwapStagingArbitrumGoerliTransforms = [];
const hubMainnetTransforms = [];
const connextMainnetTransforms = [];
const connextOptimismTransforms = [];
const connextPolygonTransforms = [];
const connextArbitrumOneTransforms = [];
const connextBnbTransforms = [];
const connextXdaiTransforms = [];
const stableSwapOptimismTransforms = [];
const stableSwapPolygonTransforms = [];
const stableSwapArbitrumOneTransforms = [];
const stableSwapBnbTransforms = [];
const stableSwapXdaiTransforms = [];
const connextLocal1337Transforms = [];
const connextLocal1338Transforms = [];
const additionalTypeDefs = [] as any[];
const connextGoerliHandler = new GraphqlHandler({
              name: "Connext_Goerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/nxtp-amarok-runtime-v0-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Goerli"),
              logger: logger.child("Connext_Goerli"),
              importFn,
            });
const connextStagingGoerliHandler = new GraphqlHandler({
              name: "Connext_Staging_Goerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/nxtp-amarok-runtime-staging-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Staging_Goerli"),
              logger: logger.child("Connext_Staging_Goerli"),
              importFn,
            });
const hubStagingGoerliHandler = new GraphqlHandler({
              name: "Hub_Staging_Goerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/nxtp-amarok-hub-staging-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Hub_Staging_Goerli"),
              logger: logger.child("Hub_Staging_Goerli"),
              importFn,
            });
const hubGoerliHandler = new GraphqlHandler({
              name: "Hub_Goerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/nxtp-amarok-hub-v0-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Hub_Goerli"),
              logger: logger.child("Hub_Goerli"),
              importFn,
            });
const connextTestGoerliHandler = new GraphqlHandler({
              name: "Connext_Test_Goerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/nxtp-amarok-runtime-test-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Test_Goerli"),
              logger: logger.child("Connext_Test_Goerli"),
              importFn,
            });
const connextOptimismGoerliHandler = new GraphqlHandler({
              name: "Connext_OptimismGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/amarok-runtime-v0-opt-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_OptimismGoerli"),
              logger: logger.child("Connext_OptimismGoerli"),
              importFn,
            });
const connextTestOptimismGoerliHandler = new GraphqlHandler({
              name: "Connext_Test_OptimismGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/runtime-v0-opt-goerli-test","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Test_OptimismGoerli"),
              logger: logger.child("Connext_Test_OptimismGoerli"),
              importFn,
            });
const connextStagingOptimismGoerliHandler = new GraphqlHandler({
              name: "Connext_Staging_OptimismGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/runtime-v0-opt-goerli-staging","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Staging_OptimismGoerli"),
              logger: logger.child("Connext_Staging_OptimismGoerli"),
              importFn,
            });
const connextMumbaiHandler = new GraphqlHandler({
              name: "Connext_Mumbai",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/nxtp-amarok-runtime-v0-mumbai","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Mumbai"),
              logger: logger.child("Connext_Mumbai"),
              importFn,
            });
const connextStagingMumbaiHandler = new GraphqlHandler({
              name: "Connext_Staging_Mumbai",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/nxtp-amarok-runtime-staging-mumbai","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Staging_Mumbai"),
              logger: logger.child("Connext_Staging_Mumbai"),
              importFn,
            });
const connextArbitrumGoerliHandler = new GraphqlHandler({
              name: "Connext_ArbitrumGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/amarok-runtime-v0-arb-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_ArbitrumGoerli"),
              logger: logger.child("Connext_ArbitrumGoerli"),
              importFn,
            });
const connextStagingArbitrumGoerliHandler = new GraphqlHandler({
              name: "Connext_Staging_ArbitrumGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/runtime-staging-arb-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Staging_ArbitrumGoerli"),
              logger: logger.child("Connext_Staging_ArbitrumGoerli"),
              importFn,
            });
const stableSwapGoerliHandler = new GraphqlHandler({
              name: "StableSwap_Goerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Goerli"),
              logger: logger.child("StableSwap_Goerli"),
              importFn,
            });
const stableSwapStagingGoerliHandler = new GraphqlHandler({
              name: "StableSwap_Staging_Goerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-staging-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Staging_Goerli"),
              logger: logger.child("StableSwap_Staging_Goerli"),
              importFn,
            });
const stableSwapOptimismGoerliHandler = new GraphqlHandler({
              name: "StableSwap_OptimismGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-opt-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_OptimismGoerli"),
              logger: logger.child("StableSwap_OptimismGoerli"),
              importFn,
            });
const stableSwapStagingOptimismGoerliHandler = new GraphqlHandler({
              name: "StableSwap_Staging_OptimismGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-staging-opt-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Staging_OptimismGoerli"),
              logger: logger.child("StableSwap_Staging_OptimismGoerli"),
              importFn,
            });
const stableSwapMumbaiHandler = new GraphqlHandler({
              name: "StableSwap_Mumbai",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-mumbai","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Mumbai"),
              logger: logger.child("StableSwap_Mumbai"),
              importFn,
            });
const stableSwapStagingMumbaiHandler = new GraphqlHandler({
              name: "StableSwap_Staging_Mumbai",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-staging-mumbai","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Staging_Mumbai"),
              logger: logger.child("StableSwap_Staging_Mumbai"),
              importFn,
            });
const stableSwapArbitrumGoerliHandler = new GraphqlHandler({
              name: "StableSwap_ArbitrumGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-arb-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_ArbitrumGoerli"),
              logger: logger.child("StableSwap_ArbitrumGoerli"),
              importFn,
            });
const stableSwapStagingArbitrumGoerliHandler = new GraphqlHandler({
              name: "StableSwap_Staging_ArbitrumGoerli",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-staging-arb-goerli","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Staging_ArbitrumGoerli"),
              logger: logger.child("StableSwap_Staging_ArbitrumGoerli"),
              importFn,
            });
const hubMainnetHandler = new GraphqlHandler({
              name: "Hub_Mainnet",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/amarok-hub-v0-mainnet","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Hub_Mainnet"),
              logger: logger.child("Hub_Mainnet"),
              importFn,
            });
const connextMainnetHandler = new GraphqlHandler({
              name: "Connext_Mainnet",
              config: {"strategy":"fallback","sources":[{"endpoint":"https://gateway.thegraph.com/api/{env.GRAPH_API_KEY}/subgraphs/id/DfD1tZSmDtjCGC2LeYEQbVzj9j8kNqKAQEsYL27Vg6Sw","retry":2,"timeout":30000},{"endpoint":"https://api.thegraph.com/subgraphs/name/connext/amarok-runtime-v0-mainnet","retry":5,"timeout":30000}]},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Mainnet"),
              logger: logger.child("Connext_Mainnet"),
              importFn,
            });
const connextOptimismHandler = new GraphqlHandler({
              name: "Connext_Optimism",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/amarok-runtime-v0-optimism","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Optimism"),
              logger: logger.child("Connext_Optimism"),
              importFn,
            });
const connextPolygonHandler = new GraphqlHandler({
              name: "Connext_Polygon",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/amarok-runtime-v0-polygon","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Polygon"),
              logger: logger.child("Connext_Polygon"),
              importFn,
            });
const connextArbitrumOneHandler = new GraphqlHandler({
              name: "Connext_ArbitrumOne",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/amarok-runtime-v0-arbitrum-one","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_ArbitrumOne"),
              logger: logger.child("Connext_ArbitrumOne"),
              importFn,
            });
const connextBnbHandler = new GraphqlHandler({
              name: "Connext_Bnb",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/amarok-runtime-v0-bnb","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Bnb"),
              logger: logger.child("Connext_Bnb"),
              importFn,
            });
const connextXdaiHandler = new GraphqlHandler({
              name: "Connext_Xdai",
              config: {"strategy":"fallback","sources":[{"endpoint":"https://gateway.thegraph.com/api/{env.GRAPH_API_KEY}/subgraphs/id/EdS5b1Zbw8A5KHs4JRnWDKdM5K2Hnq97UuE8RG9b61Ey","retry":2,"timeout":30000},{"endpoint":"https://api.thegraph.com/subgraphs/name/connext/amarok-runtime-v0-gnosis","retry":5,"timeout":30000}]},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Xdai"),
              logger: logger.child("Connext_Xdai"),
              importFn,
            });
const stableSwapOptimismHandler = new GraphqlHandler({
              name: "StableSwap_Optimism",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-optimism","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Optimism"),
              logger: logger.child("StableSwap_Optimism"),
              importFn,
            });
const stableSwapPolygonHandler = new GraphqlHandler({
              name: "StableSwap_Polygon",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-polygon","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Polygon"),
              logger: logger.child("StableSwap_Polygon"),
              importFn,
            });
const stableSwapArbitrumOneHandler = new GraphqlHandler({
              name: "StableSwap_ArbitrumOne",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-arbitrum-one","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_ArbitrumOne"),
              logger: logger.child("StableSwap_ArbitrumOne"),
              importFn,
            });
const stableSwapBnbHandler = new GraphqlHandler({
              name: "StableSwap_Bnb",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-bnb","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Bnb"),
              logger: logger.child("StableSwap_Bnb"),
              importFn,
            });
const stableSwapXdaiHandler = new GraphqlHandler({
              name: "StableSwap_Xdai",
              config: {"endpoint":"https://api.thegraph.com/subgraphs/name/connext/stableswap-v0-gnosis","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("StableSwap_Xdai"),
              logger: logger.child("StableSwap_Xdai"),
              importFn,
            });
const connextLocal1337Handler = new GraphqlHandler({
              name: "Connext_Local1337",
              config: {"endpoint":"{env.GRAPH_1337_ENDPOINT}","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Local1337"),
              logger: logger.child("Connext_Local1337"),
              importFn,
            });
const connextLocal1338Handler = new GraphqlHandler({
              name: "Connext_Local1338",
              config: {"endpoint":"{env.GRAPH_1338_ENDPOINT}","retry":5,"timeout":30000},
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child("Connext_Local1338"),
              logger: logger.child("Connext_Local1338"),
              importFn,
            });
connextGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Goerli",
                  config: {"value":"goerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextStagingGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Staging_Goerli",
                  config: {"value":"staginggoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
hubStagingGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Hub_Staging_Goerli",
                  config: {"value":"staginggoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
hubGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Hub_Goerli",
                  config: {"value":"goerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextTestGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Test_Goerli",
                  config: {"value":"testgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextOptimismGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Connext_OptimismGoerli",
                  config: {"value":"optimismgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextTestOptimismGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Test_OptimismGoerli",
                  config: {"value":"testoptimismgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextStagingOptimismGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Staging_OptimismGoerli",
                  config: {"value":"stagingoptimismgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextMumbaiTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Mumbai",
                  config: {"value":"mumbai_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextStagingMumbaiTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Staging_Mumbai",
                  config: {"value":"stagingmumbai_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextArbitrumGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Connext_ArbitrumGoerli",
                  config: {"value":"arbitrumgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextStagingArbitrumGoerliTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Staging_ArbitrumGoerli",
                  config: {"value":"stagingarbitrumgoerli_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Goerli",
                  config: {"value":"goerli_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Staging_Goerli",
                  config: {"value":"staginggoerli_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapOptimismGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_OptimismGoerli",
                  config: {"value":"optimismgoerli_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingOptimismGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Staging_OptimismGoerli",
                  config: {"value":"stagingoptimismgoerli_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapMumbaiTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Mumbai",
                  config: {"value":"mumbai_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingMumbaiTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Staging_Mumbai",
                  config: {"value":"stagingmumbai_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapArbitrumGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_ArbitrumGoerli",
                  config: {"value":"arbitrumgoerli_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingArbitrumGoerliTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Staging_ArbitrumGoerli",
                  config: {"value":"stagingarbitrumgoerli_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
hubMainnetTransforms[0] = new PrefixTransform({
                  apiName: "Hub_Mainnet",
                  config: {"value":"mainnet_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextMainnetTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Mainnet",
                  config: {"value":"mainnet_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextOptimismTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Optimism",
                  config: {"value":"optimism_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextPolygonTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Polygon",
                  config: {"value":"polygon_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextArbitrumOneTransforms[0] = new PrefixTransform({
                  apiName: "Connext_ArbitrumOne",
                  config: {"value":"arbitrumone_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextBnbTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Bnb",
                  config: {"value":"bnb_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextXdaiTransforms[0] = new PrefixTransform({
                  apiName: "Connext_Xdai",
                  config: {"value":"xdai_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapOptimismTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Optimism",
                  config: {"value":"optimism_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapPolygonTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Polygon",
                  config: {"value":"polygon_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapArbitrumOneTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_ArbitrumOne",
                  config: {"value":"arbitrumone_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapBnbTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Bnb",
                  config: {"value":"bnb_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapXdaiTransforms[0] = new PrefixTransform({
                  apiName: "StableSwap_Xdai",
                  config: {"value":"xdai_swap_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextLocal1337Transforms[0] = new PrefixTransform({
                  apiName: "Connext_Local1337",
                  config: {"value":"local1337_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextLocal1338Transforms[0] = new PrefixTransform({
                  apiName: "Connext_Local1338",
                  config: {"value":"local1338_","includeRootOperations":true,"ignore":["_SubgraphErrorPolicy_"]},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Goerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextStagingGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Staging_Goerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
hubStagingGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Hub_Staging_Goerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
hubGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Hub_Goerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextTestGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Test_Goerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextOptimismGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_OptimismGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextTestOptimismGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Test_OptimismGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextStagingOptimismGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Staging_OptimismGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextMumbaiTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Mumbai",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextStagingMumbaiTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Staging_Mumbai",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextArbitrumGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_ArbitrumGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextStagingArbitrumGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Staging_ArbitrumGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Goerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Staging_Goerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapOptimismGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_OptimismGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingOptimismGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Staging_OptimismGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapMumbaiTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Mumbai",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingMumbaiTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Staging_Mumbai",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapArbitrumGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_ArbitrumGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapStagingArbitrumGoerliTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Staging_ArbitrumGoerli",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
hubMainnetTransforms[1] = new AutoPaginationTransform({
                  apiName: "Hub_Mainnet",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextMainnetTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Mainnet",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextOptimismTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Optimism",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextPolygonTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Polygon",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextArbitrumOneTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_ArbitrumOne",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextBnbTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Bnb",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextXdaiTransforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Xdai",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapOptimismTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Optimism",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapPolygonTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Polygon",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapArbitrumOneTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_ArbitrumOne",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapBnbTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Bnb",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
stableSwapXdaiTransforms[1] = new AutoPaginationTransform({
                  apiName: "StableSwap_Xdai",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextLocal1337Transforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Local1337",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
connextLocal1338Transforms[1] = new AutoPaginationTransform({
                  apiName: "Connext_Local1338",
                  config: {"validateSchema":true,"limitOfRecords":250},
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                });
sources[0] = {
          name: 'Connext_Goerli',
          handler: connextGoerliHandler,
          transforms: connextGoerliTransforms
        }
sources[1] = {
          name: 'Connext_Staging_Goerli',
          handler: connextStagingGoerliHandler,
          transforms: connextStagingGoerliTransforms
        }
sources[2] = {
          name: 'Hub_Staging_Goerli',
          handler: hubStagingGoerliHandler,
          transforms: hubStagingGoerliTransforms
        }
sources[3] = {
          name: 'Hub_Goerli',
          handler: hubGoerliHandler,
          transforms: hubGoerliTransforms
        }
sources[4] = {
          name: 'Connext_Test_Goerli',
          handler: connextTestGoerliHandler,
          transforms: connextTestGoerliTransforms
        }
sources[5] = {
          name: 'Connext_OptimismGoerli',
          handler: connextOptimismGoerliHandler,
          transforms: connextOptimismGoerliTransforms
        }
sources[6] = {
          name: 'Connext_Test_OptimismGoerli',
          handler: connextTestOptimismGoerliHandler,
          transforms: connextTestOptimismGoerliTransforms
        }
sources[7] = {
          name: 'Connext_Staging_OptimismGoerli',
          handler: connextStagingOptimismGoerliHandler,
          transforms: connextStagingOptimismGoerliTransforms
        }
sources[8] = {
          name: 'Connext_Mumbai',
          handler: connextMumbaiHandler,
          transforms: connextMumbaiTransforms
        }
sources[9] = {
          name: 'Connext_Staging_Mumbai',
          handler: connextStagingMumbaiHandler,
          transforms: connextStagingMumbaiTransforms
        }
sources[10] = {
          name: 'Connext_ArbitrumGoerli',
          handler: connextArbitrumGoerliHandler,
          transforms: connextArbitrumGoerliTransforms
        }
sources[11] = {
          name: 'Connext_Staging_ArbitrumGoerli',
          handler: connextStagingArbitrumGoerliHandler,
          transforms: connextStagingArbitrumGoerliTransforms
        }
sources[12] = {
          name: 'StableSwap_Goerli',
          handler: stableSwapGoerliHandler,
          transforms: stableSwapGoerliTransforms
        }
sources[13] = {
          name: 'StableSwap_Staging_Goerli',
          handler: stableSwapStagingGoerliHandler,
          transforms: stableSwapStagingGoerliTransforms
        }
sources[14] = {
          name: 'StableSwap_OptimismGoerli',
          handler: stableSwapOptimismGoerliHandler,
          transforms: stableSwapOptimismGoerliTransforms
        }
sources[15] = {
          name: 'StableSwap_Staging_OptimismGoerli',
          handler: stableSwapStagingOptimismGoerliHandler,
          transforms: stableSwapStagingOptimismGoerliTransforms
        }
sources[16] = {
          name: 'StableSwap_Mumbai',
          handler: stableSwapMumbaiHandler,
          transforms: stableSwapMumbaiTransforms
        }
sources[17] = {
          name: 'StableSwap_Staging_Mumbai',
          handler: stableSwapStagingMumbaiHandler,
          transforms: stableSwapStagingMumbaiTransforms
        }
sources[18] = {
          name: 'StableSwap_ArbitrumGoerli',
          handler: stableSwapArbitrumGoerliHandler,
          transforms: stableSwapArbitrumGoerliTransforms
        }
sources[19] = {
          name: 'StableSwap_Staging_ArbitrumGoerli',
          handler: stableSwapStagingArbitrumGoerliHandler,
          transforms: stableSwapStagingArbitrumGoerliTransforms
        }
sources[20] = {
          name: 'Hub_Mainnet',
          handler: hubMainnetHandler,
          transforms: hubMainnetTransforms
        }
sources[21] = {
          name: 'Connext_Mainnet',
          handler: connextMainnetHandler,
          transforms: connextMainnetTransforms
        }
sources[22] = {
          name: 'Connext_Optimism',
          handler: connextOptimismHandler,
          transforms: connextOptimismTransforms
        }
sources[23] = {
          name: 'Connext_Polygon',
          handler: connextPolygonHandler,
          transforms: connextPolygonTransforms
        }
sources[24] = {
          name: 'Connext_ArbitrumOne',
          handler: connextArbitrumOneHandler,
          transforms: connextArbitrumOneTransforms
        }
sources[25] = {
          name: 'Connext_Bnb',
          handler: connextBnbHandler,
          transforms: connextBnbTransforms
        }
sources[26] = {
          name: 'Connext_Xdai',
          handler: connextXdaiHandler,
          transforms: connextXdaiTransforms
        }
sources[27] = {
          name: 'StableSwap_Optimism',
          handler: stableSwapOptimismHandler,
          transforms: stableSwapOptimismTransforms
        }
sources[28] = {
          name: 'StableSwap_Polygon',
          handler: stableSwapPolygonHandler,
          transforms: stableSwapPolygonTransforms
        }
sources[29] = {
          name: 'StableSwap_ArbitrumOne',
          handler: stableSwapArbitrumOneHandler,
          transforms: stableSwapArbitrumOneTransforms
        }
sources[30] = {
          name: 'StableSwap_Bnb',
          handler: stableSwapBnbHandler,
          transforms: stableSwapBnbTransforms
        }
sources[31] = {
          name: 'StableSwap_Xdai',
          handler: stableSwapXdaiHandler,
          transforms: stableSwapXdaiTransforms
        }
sources[32] = {
          name: 'Connext_Local1337',
          handler: connextLocal1337Handler,
          transforms: connextLocal1337Transforms
        }
sources[33] = {
          name: 'Connext_Local1338',
          handler: connextLocal1338Handler,
          transforms: connextLocal1338Transforms
        }
const additionalResolvers = [] as any[]
const merger = new(StitchingMerger as any)({
        cache,
        pubsub,
        logger: logger.child('stitchingMerger'),
        store: rootStore.child('stitchingMerger')
      })

  return {
    sources,
    transforms,
    additionalTypeDefs,
    additionalResolvers,
    cache,
    pubsub,
    merger,
    logger,
    additionalEnvelopPlugins,
    get documents() {
      return [
      
    ];
    },
    fetchFn,
  };
}

export function createBuiltMeshHTTPHandler(): MeshHTTPHandler<MeshContext> {
  return createMeshHTTPHandler<MeshContext>({
    baseDir,
    getBuiltMesh: getBuiltGraphClient,
    rawServeConfig: undefined,
  })
}


let meshInstance$: Promise<MeshInstance> | undefined;

export function getBuiltGraphClient(): Promise<MeshInstance> {
  if (meshInstance$ == null) {
    meshInstance$ = getMeshOptions().then(meshOptions => getMesh(meshOptions)).then(mesh => {
      const id = mesh.pubsub.subscribe('destroy', () => {
        meshInstance$ = undefined;
        mesh.pubsub.unsubscribe(id);
      });
      return mesh;
    });
  }
  return meshInstance$;
}

export const execute: ExecuteMeshFn = (...args) => getBuiltGraphClient().then(({ execute }) => execute(...args));

export const subscribe: SubscribeMeshFn = (...args) => getBuiltGraphClient().then(({ subscribe }) => subscribe(...args));